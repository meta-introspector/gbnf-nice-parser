State 0:
## Known stack suffix:
##
## LR(1) items:
grammar' -> . grammar [ # ]
## Transitions:
-- On LID shift to state 1
-- On separated_nonempty_list(nonempty_list(NEWLINE),old_rule) shift to state 35
-- On rules shift to state 36
-- On old_rule shift to state 37
-- On grammar shift to state 42
## Reductions:

State 1:
## Known stack suffix:
## LID
## LR(1) items:
old_rule -> LID . COLONCOLONEQUAL rhs [ NEWLINE # ]
## Transitions:
-- On COLONCOLONEQUAL shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## LID COLONCOLONEQUAL
## LR(1) items:
old_rule -> LID COLONCOLONEQUAL . rhs [ NEWLINE # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On termfactor shift to state 7
-- On term shift to state 15
-- On rhs shift to state 34
-- On nonempty_list(alternation1) shift to state 18
-- On group1 shift to state 19
-- On fconcatenation shift to state 20
-- On factor shift to state 21
-- On cpair shift to state 25
-- On concatenation shift to state 26
-- On complexterms shift to state 23
-- On class1 shift to state 24
-- On alternation1 shift to state 28
-- On alternation shift to state 31
-- On alter2 shift to state 30
## Reductions:

State 3:
## Known stack suffix:
## QID
## LR(1) items:
term -> QID . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production term -> QID
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production term -> QID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## LPAREN
## LR(1) items:
group1 -> LPAREN . rhs RPAREN [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On termfactor shift to state 7
-- On term shift to state 15
-- On rhs shift to state 32
-- On nonempty_list(alternation1) shift to state 18
-- On group1 shift to state 19
-- On fconcatenation shift to state 20
-- On factor shift to state 21
-- On cpair shift to state 25
-- On concatenation shift to state 26
-- On complexterms shift to state 23
-- On class1 shift to state 24
-- On alternation1 shift to state 28
-- On alternation shift to state 31
-- On alter2 shift to state 30
## Reductions:

State 5:
## Known stack suffix:
## LID
## LR(1) items:
term -> LID . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production term -> LID
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production term -> LID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
## Known stack suffix:
## LBRACE
## LR(1) items:
class1 -> LBRACE . rhs RBRACE [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On termfactor shift to state 7
-- On term shift to state 15
-- On rhs shift to state 16
-- On nonempty_list(alternation1) shift to state 18
-- On group1 shift to state 19
-- On fconcatenation shift to state 20
-- On factor shift to state 21
-- On cpair shift to state 25
-- On concatenation shift to state 26
-- On complexterms shift to state 23
-- On class1 shift to state 24
-- On alternation1 shift to state 28
-- On alternation shift to state 31
-- On alter2 shift to state 30
## Reductions:

State 7:
## Known stack suffix:
## termfactor
## LR(1) items:
factor -> termfactor . modifier [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
factor -> termfactor . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On STAR shift to state 8
-- On QUESTION shift to state 9
-- On PLUS shift to state 10
-- On modifier shift to state 11
-- On fstar shift to state 12
-- On fquest shift to state 13
-- On fplus shift to state 14
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> termfactor
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> termfactor
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## STAR
## LR(1) items:
fstar -> STAR . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production fstar -> STAR
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production fstar -> STAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## QUESTION
## LR(1) items:
fquest -> QUESTION . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production fquest -> QUESTION
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production fquest -> QUESTION
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
## Known stack suffix:
## PLUS
## LR(1) items:
fplus -> PLUS . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production fplus -> PLUS
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production fplus -> PLUS
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## termfactor modifier
## LR(1) items:
factor -> termfactor modifier . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> termfactor modifier
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> termfactor modifier
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 12:
## Known stack suffix:
## fstar
## LR(1) items:
modifier -> fstar . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production modifier -> fstar
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production modifier -> fstar
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## fquest
## LR(1) items:
modifier -> fquest . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production modifier -> fquest
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production modifier -> fquest
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 14:
## Known stack suffix:
## fplus
## LR(1) items:
modifier -> fplus . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production modifier -> fplus
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production modifier -> fplus
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 15:
## Known stack suffix:
## term
## LR(1) items:
termfactor -> term . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production termfactor -> term
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production termfactor -> term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
## Known stack suffix:
## LBRACE rhs
## LR(1) items:
class1 -> LBRACE rhs . RBRACE [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On RBRACE shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## LBRACE rhs RBRACE
## LR(1) items:
class1 -> LBRACE rhs RBRACE . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production class1 -> LBRACE rhs RBRACE
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production class1 -> LBRACE rhs RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 18:
## Known stack suffix:
## nonempty_list(alternation1)
## LR(1) items:
alternation -> nonempty_list(alternation1) . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production alternation -> nonempty_list(alternation1)
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production alternation -> nonempty_list(alternation1)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## group1
## LR(1) items:
complexterms -> group1 . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production complexterms -> group1
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production complexterms -> group1
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## fconcatenation
## LR(1) items:
concatenation -> fconcatenation . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production concatenation -> fconcatenation
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production concatenation -> fconcatenation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## factor
## LR(1) items:
cpair -> factor . factor [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
fconcatenation -> factor . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On termfactor shift to state 7
-- On term shift to state 15
-- On group1 shift to state 19
-- On factor shift to state 22
-- On complexterms shift to state 23
-- On class1 shift to state 24
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production fconcatenation -> factor
** Conflict on QID LPAREN LID LBRACE
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production fconcatenation -> factor
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
## Known stack suffix:
## factor factor
## LR(1) items:
cpair -> factor factor . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production cpair -> factor factor
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production cpair -> factor factor
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## complexterms
## LR(1) items:
term -> complexterms . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production term -> complexterms
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production term -> complexterms
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## class1
## LR(1) items:
complexterms -> class1 . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production complexterms -> class1
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production complexterms -> class1
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
## Known stack suffix:
## cpair
## LR(1) items:
concatenation -> cpair . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production concatenation -> cpair
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production concatenation -> cpair
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## concatenation
## LR(1) items:
alter2 -> concatenation . BAR [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
alternation1 -> concatenation . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
## Transitions:
-- On BAR shift to state 27
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE #
--   reduce production alternation1 -> concatenation
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production alternation1 -> concatenation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
## Known stack suffix:
## concatenation BAR
## LR(1) items:
alter2 -> concatenation BAR . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE #
--   reduce production alter2 -> concatenation BAR
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE
**   There is a tension between
**   (1) reducing production alter2 -> concatenation BAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 28:
## Known stack suffix:
## alternation1
## LR(1) items:
nonempty_list(alternation1) -> alternation1 . [ RPAREN RBRACE NEWLINE # ]
nonempty_list(alternation1) -> alternation1 . nonempty_list(alternation1) [ RPAREN RBRACE NEWLINE # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On termfactor shift to state 7
-- On term shift to state 15
-- On nonempty_list(alternation1) shift to state 29
-- On group1 shift to state 19
-- On fconcatenation shift to state 20
-- On factor shift to state 21
-- On cpair shift to state 25
-- On concatenation shift to state 26
-- On complexterms shift to state 23
-- On class1 shift to state 24
-- On alternation1 shift to state 28
-- On alter2 shift to state 30
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production nonempty_list(alternation1) -> alternation1
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE
**   There is a tension between
**   (1) reducing production nonempty_list(alternation1) -> alternation1
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 29:
## Known stack suffix:
## alternation1 nonempty_list(alternation1)
## LR(1) items:
nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1) . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1)
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 30:
## Known stack suffix:
## alter2
## LR(1) items:
alternation1 -> alter2 . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE #
--   reduce production alternation1 -> alter2
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE
**   There is a tension between
**   (1) reducing production alternation1 -> alter2
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 31:
## Known stack suffix:
## alternation
## LR(1) items:
rhs -> alternation . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production rhs -> alternation
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production rhs -> alternation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 32:
## Known stack suffix:
## LPAREN rhs
## LR(1) items:
group1 -> LPAREN rhs . RPAREN [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On RPAREN shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## LPAREN rhs RPAREN
## LR(1) items:
group1 -> LPAREN rhs RPAREN . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR #
--   reduce production group1 -> LPAREN rhs RPAREN
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production group1 -> LPAREN rhs RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 34:
## Known stack suffix:
## LID COLONCOLONEQUAL rhs
## LR(1) items:
old_rule -> LID COLONCOLONEQUAL rhs . [ NEWLINE # ]
## Transitions:
## Reductions:
-- On NEWLINE #
--   reduce production old_rule -> LID COLONCOLONEQUAL rhs
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production old_rule -> LID COLONCOLONEQUAL rhs
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 35:
## Known stack suffix:
## separated_nonempty_list(nonempty_list(NEWLINE),old_rule)
## LR(1) items:
rules -> separated_nonempty_list(nonempty_list(NEWLINE),old_rule) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production rules -> separated_nonempty_list(nonempty_list(NEWLINE),old_rule)

State 36:
## Known stack suffix:
## rules
## LR(1) items:
grammar -> rules . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production grammar -> rules

State 37:
## Known stack suffix:
## old_rule
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule . [ # ]
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule . nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule) [ # ]
## Transitions:
-- On NEWLINE shift to state 38
-- On nonempty_list(NEWLINE) shift to state 40
## Reductions:
-- On #
--   reduce production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 38:
## Known stack suffix:
## NEWLINE
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE . [ LID ]
nonempty_list(NEWLINE) -> NEWLINE . nonempty_list(NEWLINE) [ LID ]
## Transitions:
-- On NEWLINE shift to state 38
-- On nonempty_list(NEWLINE) shift to state 39
## Reductions:
-- On LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE

State 39:
## Known stack suffix:
## NEWLINE nonempty_list(NEWLINE)
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE) . [ LID ]
## Transitions:
## Reductions:
-- On LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)

State 40:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE)
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) . separated_nonempty_list(nonempty_list(NEWLINE),old_rule) [ # ]
## Transitions:
-- On LID shift to state 1
-- On separated_nonempty_list(nonempty_list(NEWLINE),old_rule) shift to state 41
-- On old_rule shift to state 37
## Reductions:

State 41:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule)
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule)

State 42:
## Known stack suffix:
## grammar
## LR(1) items:
grammar' -> grammar . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept grammar

