State 0:
## Known stack suffix:
##
## LR(1) items:
grammar' -> . grammar [ # ]
## Transitions:
-- On QID shift to state 1
-- On LID shift to state 2
-- On symbol shift to state 3
-- On rules shift to state 22
-- On old_rule shift to state 23
-- On grammar shift to state 28
## Reductions:
-- On #
--   reduce production rules ->
** End-of-stream conflict on QID LID
**   There is a tension between
**   (1) reducing production rules ->
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 1:
## Known stack suffix:
## QID
## LR(1) items:
symbol -> QID . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR #
--   reduce production symbol -> QID
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR
**   There is a tension between
**   (1) reducing production symbol -> QID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 2:
## Known stack suffix:
## LID
## LR(1) items:
symbol -> LID . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR #
--   reduce production symbol -> LID
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID COLONCOLONEQUAL BAR
**   There is a tension between
**   (1) reducing production symbol -> LID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 3:
## Known stack suffix:
## symbol
## LR(1) items:
old_rule -> symbol . COLONCOLONEQUAL separated_nonempty_list(BAR,production) [ NEWLINE # ]
## Transitions:
-- On COLONCOLONEQUAL shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## symbol COLONCOLONEQUAL
## LR(1) items:
old_rule -> symbol COLONCOLONEQUAL . separated_nonempty_list(BAR,production) [ NEWLINE # ]
## Transitions:
-- On QID shift to state 1
-- On LPAREN shift to state 5
-- On LID shift to state 2
-- On symbol shift to state 6
-- On separated_nonempty_list(BAR,production) shift to state 17
-- On production shift to state 18
-- On producer shift to state 21
-- On expression shift to state 9
-- On actual shift to state 14
## Reductions:

State 5:
## Known stack suffix:
## LPAREN
## LR(1) items:
production -> LPAREN . nonempty_list(producer) RPAREN [ NEWLINE BAR # ]
## Transitions:
-- On QID shift to state 1
-- On LID shift to state 2
-- On symbol shift to state 6
-- On producer shift to state 7
-- On nonempty_list(producer) shift to state 15
-- On expression shift to state 9
-- On actual shift to state 14
## Reductions:

State 6:
## Known stack suffix:
## symbol
## LR(1) items:
expression -> symbol . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR #
--   reduce production expression -> symbol
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production expression -> symbol
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 7:
## Known stack suffix:
## producer
## LR(1) items:
nonempty_list(producer) -> producer . [ RPAREN ]
nonempty_list(producer) -> producer . nonempty_list(producer) [ RPAREN ]
## Transitions:
-- On QID shift to state 1
-- On LID shift to state 2
-- On symbol shift to state 6
-- On producer shift to state 7
-- On nonempty_list(producer) shift to state 8
-- On expression shift to state 9
-- On actual shift to state 14
## Reductions:
-- On RPAREN
--   reduce production nonempty_list(producer) -> producer

State 8:
## Known stack suffix:
## producer nonempty_list(producer)
## LR(1) items:
nonempty_list(producer) -> producer nonempty_list(producer) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production nonempty_list(producer) -> producer nonempty_list(producer)

State 9:
## Known stack suffix:
## expression
## LR(1) items:
actual -> expression . [ RPAREN QID NEWLINE LID BAR # ]
expression -> expression . modifier [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
-- On STAR shift to state 10
-- On QUESTION shift to state 11
-- On PLUS shift to state 12
-- On modifier shift to state 13
## Reductions:
-- On RPAREN QID NEWLINE LID BAR #
--   reduce production actual -> expression
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production actual -> expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
## Known stack suffix:
## STAR
## LR(1) items:
modifier -> STAR . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR #
--   reduce production modifier -> STAR
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production modifier -> STAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## QUESTION
## LR(1) items:
modifier -> QUESTION . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR #
--   reduce production modifier -> QUESTION
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production modifier -> QUESTION
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 12:
## Known stack suffix:
## PLUS
## LR(1) items:
modifier -> PLUS . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR #
--   reduce production modifier -> PLUS
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production modifier -> PLUS
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## expression modifier
## LR(1) items:
expression -> expression modifier . [ STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR #
--   reduce production expression -> expression modifier
** End-of-stream conflict on STAR RPAREN QUESTION QID PLUS NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production expression -> expression modifier
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 14:
## Known stack suffix:
## actual
## LR(1) items:
producer -> actual . [ RPAREN QID NEWLINE LID BAR # ]
## Transitions:
## Reductions:
-- On RPAREN QID NEWLINE LID BAR #
--   reduce production producer -> actual
** End-of-stream conflict on RPAREN QID NEWLINE LID BAR
**   There is a tension between
**   (1) reducing production producer -> actual
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 15:
## Known stack suffix:
## LPAREN nonempty_list(producer)
## LR(1) items:
production -> LPAREN nonempty_list(producer) . RPAREN [ NEWLINE BAR # ]
## Transitions:
-- On RPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LPAREN nonempty_list(producer) RPAREN
## LR(1) items:
production -> LPAREN nonempty_list(producer) RPAREN . [ NEWLINE BAR # ]
## Transitions:
## Reductions:
-- On NEWLINE BAR #
--   reduce production production -> LPAREN nonempty_list(producer) RPAREN
** End-of-stream conflict on NEWLINE BAR
**   There is a tension between
**   (1) reducing production production -> LPAREN nonempty_list(producer) RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## symbol COLONCOLONEQUAL separated_nonempty_list(BAR,production)
## LR(1) items:
old_rule -> symbol COLONCOLONEQUAL separated_nonempty_list(BAR,production) . [ NEWLINE # ]
## Transitions:
## Reductions:
-- On NEWLINE #
--   reduce production old_rule -> symbol COLONCOLONEQUAL separated_nonempty_list(BAR,production)
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production old_rule -> symbol COLONCOLONEQUAL separated_nonempty_list(BAR,production)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 18:
## Known stack suffix:
## production
## LR(1) items:
separated_nonempty_list(BAR,production) -> production . [ NEWLINE # ]
separated_nonempty_list(BAR,production) -> production . BAR separated_nonempty_list(BAR,production) [ NEWLINE # ]
## Transitions:
-- On BAR shift to state 19
## Reductions:
-- On NEWLINE #
--   reduce production separated_nonempty_list(BAR,production) -> production
** End-of-stream conflict on NEWLINE BAR
**   There is a tension between
**   (1) reducing production separated_nonempty_list(BAR,production) -> production
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## production BAR
## LR(1) items:
separated_nonempty_list(BAR,production) -> production BAR . separated_nonempty_list(BAR,production) [ NEWLINE # ]
## Transitions:
-- On QID shift to state 1
-- On LPAREN shift to state 5
-- On LID shift to state 2
-- On symbol shift to state 6
-- On separated_nonempty_list(BAR,production) shift to state 20
-- On production shift to state 18
-- On producer shift to state 21
-- On expression shift to state 9
-- On actual shift to state 14
## Reductions:

State 20:
## Known stack suffix:
## production BAR separated_nonempty_list(BAR,production)
## LR(1) items:
separated_nonempty_list(BAR,production) -> production BAR separated_nonempty_list(BAR,production) . [ NEWLINE # ]
## Transitions:
## Reductions:
-- On NEWLINE #
--   reduce production separated_nonempty_list(BAR,production) -> production BAR separated_nonempty_list(BAR,production)
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production separated_nonempty_list(BAR,production) -> production BAR separated_nonempty_list(BAR,production)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## producer
## LR(1) items:
production -> producer . [ NEWLINE BAR # ]
## Transitions:
## Reductions:
-- On NEWLINE BAR #
--   reduce production production -> producer
** End-of-stream conflict on NEWLINE BAR
**   There is a tension between
**   (1) reducing production production -> producer
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
## Known stack suffix:
## rules
## LR(1) items:
grammar -> rules . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production grammar -> rules

State 23:
## Known stack suffix:
## old_rule
## LR(1) items:
rules -> old_rule . [ # ]
rules -> old_rule . nonempty_list(NEWLINE) old_rule [ # ]
## Transitions:
-- On NEWLINE shift to state 24
-- On nonempty_list(NEWLINE) shift to state 26
## Reductions:
-- On #
--   reduce production rules -> old_rule
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production rules -> old_rule
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
## Known stack suffix:
## NEWLINE
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE . [ QID LID ]
nonempty_list(NEWLINE) -> NEWLINE . nonempty_list(NEWLINE) [ QID LID ]
## Transitions:
-- On NEWLINE shift to state 24
-- On nonempty_list(NEWLINE) shift to state 25
## Reductions:
-- On QID LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE

State 25:
## Known stack suffix:
## NEWLINE nonempty_list(NEWLINE)
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE) . [ QID LID ]
## Transitions:
## Reductions:
-- On QID LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)

State 26:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE)
## LR(1) items:
rules -> old_rule nonempty_list(NEWLINE) . old_rule [ # ]
## Transitions:
-- On QID shift to state 1
-- On LID shift to state 2
-- On symbol shift to state 3
-- On old_rule shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE) old_rule
## LR(1) items:
rules -> old_rule nonempty_list(NEWLINE) old_rule . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production rules -> old_rule nonempty_list(NEWLINE) old_rule

State 28:
## Known stack suffix:
## grammar
## LR(1) items:
grammar' -> grammar . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept grammar

