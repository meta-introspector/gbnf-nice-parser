State 0:
## Known stack suffix:
##
## LR(1) items:
grammar' -> . grammar [ # ]
## Transitions:
-- On LID shift to state 1
-- On separated_nonempty_list(nonempty_list(NEWLINE),old_rule) shift to state 26
-- On rules shift to state 27
-- On old_rule shift to state 28
-- On grammar shift to state 33
## Reductions:

State 1:
## Known stack suffix:
## LID
## LR(1) items:
old_rule -> LID . COLONCOLONEQUAL rhs [ NEWLINE # ]
## Transitions:
-- On COLONCOLONEQUAL shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## LID COLONCOLONEQUAL
## LR(1) items:
old_rule -> LID COLONCOLONEQUAL . rhs [ NEWLINE # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 7
-- On rhs shift to state 25
-- On nonempty_list(alternation1) shift to state 15
-- On factor shift to state 16
-- On concatenation shift to state 18
-- On alternation1 shift to state 20
-- On alternation shift to state 22
## Reductions:

State 3:
## Known stack suffix:
## QID
## LR(1) items:
term -> QID . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR #
--   reduce production term -> QID
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR
**   There is a tension between
**   (1) reducing production term -> QID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 4:
## Known stack suffix:
## LPAREN
## LR(1) items:
term -> LPAREN . rhs RPAREN [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 7
-- On rhs shift to state 23
-- On nonempty_list(alternation1) shift to state 15
-- On factor shift to state 16
-- On concatenation shift to state 18
-- On alternation1 shift to state 20
-- On alternation shift to state 22
## Reductions:

State 5:
## Known stack suffix:
## LID
## LR(1) items:
term -> LID . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR #
--   reduce production term -> LID
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR
**   There is a tension between
**   (1) reducing production term -> LID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 6:
## Known stack suffix:
## LBRACE
## LR(1) items:
term -> LBRACE . rhs RBRACE [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 7
-- On rhs shift to state 13
-- On nonempty_list(alternation1) shift to state 15
-- On factor shift to state 16
-- On concatenation shift to state 18
-- On alternation1 shift to state 20
-- On alternation shift to state 22
## Reductions:

State 7:
## Known stack suffix:
## term
## LR(1) items:
factor -> term . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
factor -> term . QUESTION [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
factor -> term . STAR [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
factor -> term . PLUS [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
factor -> term . DASH term [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On STAR shift to state 8
-- On QUESTION shift to state 9
-- On PLUS shift to state 10
-- On DASH shift to state 11
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> term
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR
**   There is a tension between
**   (1) reducing production factor -> term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
## Known stack suffix:
## term STAR
## LR(1) items:
factor -> term STAR . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> term STAR
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> term STAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 9:
## Known stack suffix:
## term QUESTION
## LR(1) items:
factor -> term QUESTION . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> term QUESTION
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> term QUESTION
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
## Known stack suffix:
## term PLUS
## LR(1) items:
factor -> term PLUS . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> term PLUS
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> term PLUS
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
## Known stack suffix:
## term DASH
## LR(1) items:
factor -> term DASH . term [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## term DASH term
## LR(1) items:
factor -> term DASH term . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production factor -> term DASH term
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production factor -> term DASH term
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
## Known stack suffix:
## LBRACE rhs
## LR(1) items:
term -> LBRACE rhs . RBRACE [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
-- On RBRACE shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## LBRACE rhs RBRACE
## LR(1) items:
term -> LBRACE rhs RBRACE . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR #
--   reduce production term -> LBRACE rhs RBRACE
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR
**   There is a tension between
**   (1) reducing production term -> LBRACE rhs RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 15:
## Known stack suffix:
## nonempty_list(alternation1)
## LR(1) items:
alternation -> nonempty_list(alternation1) . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production alternation -> nonempty_list(alternation1)
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production alternation -> nonempty_list(alternation1)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
## Known stack suffix:
## factor
## LR(1) items:
concatenation -> factor . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
concatenation -> factor . factor [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 7
-- On factor shift to state 17
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production concatenation -> factor
** Conflict on QID LPAREN LID LBRACE
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production concatenation -> factor
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 17:
## Known stack suffix:
## factor factor
## LR(1) items:
concatenation -> factor factor . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR #
--   reduce production concatenation -> factor factor
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production concatenation -> factor factor
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 18:
## Known stack suffix:
## concatenation
## LR(1) items:
alternation1 -> concatenation . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
alternation1 -> concatenation . BAR [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
## Transitions:
-- On BAR shift to state 19
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE #
--   reduce production alternation1 -> concatenation
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE BAR
**   There is a tension between
**   (1) reducing production alternation1 -> concatenation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
## Known stack suffix:
## concatenation BAR
## LR(1) items:
alternation1 -> concatenation BAR . [ RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE #
--   reduce production alternation1 -> concatenation BAR
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE
**   There is a tension between
**   (1) reducing production alternation1 -> concatenation BAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 20:
## Known stack suffix:
## alternation1
## LR(1) items:
nonempty_list(alternation1) -> alternation1 . [ RPAREN RBRACE NEWLINE # ]
nonempty_list(alternation1) -> alternation1 . nonempty_list(alternation1) [ RPAREN RBRACE NEWLINE # ]
## Transitions:
-- On QID shift to state 3
-- On LPAREN shift to state 4
-- On LID shift to state 5
-- On LBRACE shift to state 6
-- On term shift to state 7
-- On nonempty_list(alternation1) shift to state 21
-- On factor shift to state 16
-- On concatenation shift to state 18
-- On alternation1 shift to state 20
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production nonempty_list(alternation1) -> alternation1
** End-of-stream conflict on RPAREN RBRACE QID NEWLINE LPAREN LID LBRACE
**   There is a tension between
**   (1) reducing production nonempty_list(alternation1) -> alternation1
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
## Known stack suffix:
## alternation1 nonempty_list(alternation1)
## LR(1) items:
nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1) . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1)
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production nonempty_list(alternation1) -> alternation1 nonempty_list(alternation1)
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
## Known stack suffix:
## alternation
## LR(1) items:
rhs -> alternation . [ RPAREN RBRACE NEWLINE # ]
## Transitions:
## Reductions:
-- On RPAREN RBRACE NEWLINE #
--   reduce production rhs -> alternation
** End-of-stream conflict on RPAREN RBRACE NEWLINE
**   There is a tension between
**   (1) reducing production rhs -> alternation
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 23:
## Known stack suffix:
## LPAREN rhs
## LR(1) items:
term -> LPAREN rhs . RPAREN [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
-- On RPAREN shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## LPAREN rhs RPAREN
## LR(1) items:
term -> LPAREN rhs RPAREN . [ STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR # ]
## Transitions:
## Reductions:
-- On STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR #
--   reduce production term -> LPAREN rhs RPAREN
** End-of-stream conflict on STAR RPAREN RBRACE QUESTION QID PLUS NEWLINE LPAREN LID LBRACE DASH BAR
**   There is a tension between
**   (1) reducing production term -> LPAREN rhs RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
## Known stack suffix:
## LID COLONCOLONEQUAL rhs
## LR(1) items:
old_rule -> LID COLONCOLONEQUAL rhs . [ NEWLINE # ]
## Transitions:
## Reductions:
-- On NEWLINE #
--   reduce production old_rule -> LID COLONCOLONEQUAL rhs
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production old_rule -> LID COLONCOLONEQUAL rhs
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
## Known stack suffix:
## separated_nonempty_list(nonempty_list(NEWLINE),old_rule)
## LR(1) items:
rules -> separated_nonempty_list(nonempty_list(NEWLINE),old_rule) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production rules -> separated_nonempty_list(nonempty_list(NEWLINE),old_rule)

State 27:
## Known stack suffix:
## rules
## LR(1) items:
grammar -> rules . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production grammar -> rules

State 28:
## Known stack suffix:
## old_rule
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule . [ # ]
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule . nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule) [ # ]
## Transitions:
-- On NEWLINE shift to state 29
-- On nonempty_list(NEWLINE) shift to state 31
## Reductions:
-- On #
--   reduce production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule
** End-of-stream conflict on NEWLINE
**   There is a tension between
**   (1) reducing production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 29:
## Known stack suffix:
## NEWLINE
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE . [ LID ]
nonempty_list(NEWLINE) -> NEWLINE . nonempty_list(NEWLINE) [ LID ]
## Transitions:
-- On NEWLINE shift to state 29
-- On nonempty_list(NEWLINE) shift to state 30
## Reductions:
-- On LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE

State 30:
## Known stack suffix:
## NEWLINE nonempty_list(NEWLINE)
## LR(1) items:
nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE) . [ LID ]
## Transitions:
## Reductions:
-- On LID
--   reduce production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)

State 31:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE)
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) . separated_nonempty_list(nonempty_list(NEWLINE),old_rule) [ # ]
## Transitions:
-- On LID shift to state 1
-- On separated_nonempty_list(nonempty_list(NEWLINE),old_rule) shift to state 32
-- On old_rule shift to state 28
## Reductions:

State 32:
## Known stack suffix:
## old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule)
## LR(1) items:
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule) . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production separated_nonempty_list(nonempty_list(NEWLINE),old_rule) -> old_rule nonempty_list(NEWLINE) separated_nonempty_list(nonempty_list(NEWLINE),old_rule)

State 33:
## Known stack suffix:
## grammar
## LR(1) items:
grammar' -> grammar . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept grammar

