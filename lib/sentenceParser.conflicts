
** Conflict (shift/reduce) in state 94.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID DASH LBRACE rhs RBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 94, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID DASH LBRACE rhs RBRACE nonempty_list(factor) 
                           . QID QUESTION 

** In state 94, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID DASH LBRACE rhs RBRACE
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID DASH LBRACE rhs RBRACE . 

** Conflict (shift/reduce) in state 90.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID DASH LID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 90, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID DASH LID nonempty_list(factor) 
             . QID QUESTION 

** In state 90, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID DASH LID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID DASH LID . 

** Conflict (shift/reduce) in state 88.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID DASH LPAREN rhs RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 88, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID DASH LPAREN rhs RPAREN nonempty_list(factor) 
                           . QID QUESTION 

** In state 88, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID DASH LPAREN rhs RPAREN
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID DASH LPAREN rhs RPAREN . 

** Conflict (shift/reduce) in state 84.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID DASH QID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 84, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID DASH QID nonempty_list(factor) 
             . QID QUESTION 

** In state 84, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID DASH QID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID DASH QID . 

** Conflict (shift/reduce) in state 81.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID PLUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 81, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID PLUS nonempty_list(factor) 
         . QID QUESTION 

** In state 81, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID PLUS
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID PLUS . 

** Conflict (shift/reduce) in state 79.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID QUESTION

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 79, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID QUESTION nonempty_list(factor) 
             . QID QUESTION 

** In state 79, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID QUESTION
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID QUESTION . 

** Conflict (shift/reduce) in state 76.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN DASH LBRACE rhs RBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 76, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN DASH LBRACE rhs RBRACE nonempty_list(factor) 
                                         . QID QUESTION 

** In state 76, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN DASH LBRACE rhs RBRACE
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN DASH LBRACE rhs RBRACE . 

** Conflict (shift/reduce) in state 72.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN DASH LID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 72, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN DASH LID nonempty_list(factor) 
                           . QID QUESTION 

** In state 72, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN DASH LID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN DASH LID . 

** Conflict (shift/reduce) in state 70.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN DASH LPAREN rhs RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 70, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN DASH LPAREN rhs RPAREN nonempty_list(factor) 
                                         . QID QUESTION 

** In state 70, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN DASH LPAREN rhs RPAREN
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN DASH LPAREN rhs RPAREN . 

** Conflict (shift/reduce) in state 66.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN DASH QID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 66, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN DASH QID nonempty_list(factor) 
                           . QID QUESTION 

** In state 66, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN DASH QID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN DASH QID . 

** Conflict (shift/reduce) in state 63.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN PLUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 63, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN PLUS nonempty_list(factor) 
                       . QID QUESTION 

** In state 63, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN PLUS
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN PLUS . 

** Conflict (shift/reduce) in state 61.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN QUESTION

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 61, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN QUESTION
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN QUESTION . 

** In state 61, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN QUESTION nonempty_list(factor) 
                           . QID QUESTION 

** Conflict (shift/reduce) in state 59.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LPAREN rhs RPAREN STAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 59, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LPAREN rhs RPAREN STAR nonempty_list(factor) 
                       . QID QUESTION 

** In state 59, looking ahead at QID, reducing production
** nonempty_list(factor) -> LPAREN rhs RPAREN STAR
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LPAREN rhs RPAREN STAR . 

** Conflict (shift/reduce) in state 55.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID DASH LBRACE rhs RBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 55, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID DASH LBRACE rhs RBRACE nonempty_list(factor) 
                           . QID QUESTION 

** In state 55, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID DASH LBRACE rhs RBRACE
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID DASH LBRACE rhs RBRACE . 

** Conflict (shift/reduce) in state 51.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID DASH LID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 51, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID DASH LID nonempty_list(factor) 
             . QID QUESTION 

** In state 51, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID DASH LID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID DASH LID . 

** Conflict (shift/reduce) in state 49.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID DASH LPAREN rhs RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 49, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID DASH LPAREN rhs RPAREN nonempty_list(factor) 
                           . QID QUESTION 

** In state 49, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID DASH LPAREN rhs RPAREN
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID DASH LPAREN rhs RPAREN . 

** Conflict (shift/reduce) in state 45.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID DASH QID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 45, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID DASH QID nonempty_list(factor) 
             . QID QUESTION 

** In state 45, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID DASH QID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID DASH QID . 

** Conflict (shift/reduce) in state 42.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID PLUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 42, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID PLUS nonempty_list(factor) 
         . QID QUESTION 

** In state 42, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID PLUS
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID PLUS . 

** Conflict (shift/reduce) in state 40.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID QUESTION

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 40, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID QUESTION
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID QUESTION . 

** In state 40, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID QUESTION nonempty_list(factor) 
             . QID QUESTION 

** Conflict (shift/reduce) in state 37.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE DASH LBRACE rhs RBRACE

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 37, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE DASH LBRACE rhs RBRACE nonempty_list(factor) 
                                         . QID QUESTION 

** In state 37, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE DASH LBRACE rhs RBRACE
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE DASH LBRACE rhs RBRACE . 

** Conflict (shift/reduce) in state 33.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE DASH LID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 33, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE DASH LID nonempty_list(factor) 
                           . QID QUESTION 

** In state 33, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE DASH LID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE DASH LID . 

** Conflict (shift/reduce) in state 24.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE DASH LPAREN rhs RPAREN

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 24, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE DASH LPAREN rhs RPAREN nonempty_list(factor) 
                                         . QID QUESTION 

** In state 24, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE DASH LPAREN rhs RPAREN
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE DASH LPAREN rhs RPAREN . 

** Conflict (shift/reduce) in state 20.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE DASH QID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 20, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE DASH QID nonempty_list(factor) 
                           . QID QUESTION 

** In state 20, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE DASH QID
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE DASH QID . 

** Conflict (shift/reduce) in state 17.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE PLUS

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 17, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE PLUS nonempty_list(factor) 
                       . QID QUESTION 

** In state 17, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE PLUS
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE PLUS . 

** Conflict (shift/reduce) in state 15.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE QUESTION

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 15, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE QUESTION
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE QUESTION . 

** In state 15, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE QUESTION nonempty_list(factor) 
                           . QID QUESTION 

** Conflict (shift/reduce) in state 13.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LBRACE rhs RBRACE STAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 13, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LBRACE rhs RBRACE STAR nonempty_list(factor) 
                       . QID QUESTION 

** In state 13, looking ahead at QID, reducing production
** nonempty_list(factor) -> LBRACE rhs RBRACE STAR
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LBRACE rhs RBRACE STAR . 

** Conflict (shift/reduce) in state 9.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL termfactor

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 9, looking ahead at QID, reducing production
** nonempty_list(factor) -> termfactor
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
termfactor . 

** In state 9, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
termfactor nonempty_list(factor) 
           . QID QUESTION 

** Conflict (shift/reduce) in state 7.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL LID STAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 7, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
LID STAR nonempty_list(factor) 
         . QID QUESTION 

** In state 7, looking ahead at QID, reducing production
** nonempty_list(factor) -> LID STAR
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
LID STAR . 

** Conflict (shift/reduce) in state 4.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL QID STAR

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 4, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation BAR 
nonempty_list(factor) 
QID STAR nonempty_list(factor) 
         . QID QUESTION 

** In state 4, looking ahead at QID, reducing production
** nonempty_list(factor) -> QID STAR
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
nonempty_list(factor) // lookahead token is inherited
QID STAR . 
