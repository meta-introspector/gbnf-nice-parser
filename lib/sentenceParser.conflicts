
** Conflict (reduce/reduce) in state 34.
** Tokens involved: RPAREN QID NEWLINE LPAREN LID LBRACE EOF BAR
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL factor LID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules postlude 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
                    concatenation // lookahead token is inherited
                    cpair // lookahead token is inherited
                    (?)

** In state 34, looking ahead at QID, reducing production
** cpair -> factor LID
** is permitted because of the following sub-derivation:

factor LID . 

** In state 34, looking ahead at QID, reducing production
** lid -> LID
** is permitted because of the following sub-derivation:

factor factor // lookahead token is inherited
       termfactor // lookahead token is inherited
       term // lookahead token is inherited
       sterm // lookahead token is inherited
       lid // lookahead token is inherited
       LID . 

** Conflict (reduce/reduce) in state 33.
** Tokens involved: RPAREN QID NEWLINE LPAREN LID LBRACE EOF BAR
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL factor QID

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules postlude 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
                    concatenation // lookahead token is inherited
                    cpair // lookahead token is inherited
                    (?)

** In state 33, looking ahead at QID, reducing production
** cpair -> factor QID
** is permitted because of the following sub-derivation:

factor QID . 

** In state 33, looking ahead at QID, reducing production
** qid -> QID
** is permitted because of the following sub-derivation:

factor factor // lookahead token is inherited
       termfactor // lookahead token is inherited
       term // lookahead token is inherited
       sterm // lookahead token is inherited
       qid // lookahead token is inherited
       QID . 

** Conflict (shift/reduce) in state 32.
** Tokens involved: QID LPAREN LID LBRACE
** The following explanations concentrate on token QID.
** This state is reached from grammar after reading:

LID COLONCOLONEQUAL factor

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

grammar 
rules postlude 
separated_nonempty_list(nonempty_list(NEWLINE),old_rule) 
old_rule 
LID COLONCOLONEQUAL rhs 
                    alternation 
                    nonempty_list(alternation1) 
                    (?)

** In state 32, looking ahead at QID, shifting is permitted
** because of the following sub-derivation:

alternation1 
concatenation 
cpair 
factor . QID 

** In state 32, looking ahead at QID, reducing production
** fconcatenation -> factor
** is permitted because of the following sub-derivation:

alternation1 nonempty_list(alternation1) // lookahead token appears because nonempty_list(alternation1) can begin with QID
concatenation // lookahead token is inherited
fconcatenation // lookahead token is inherited
factor . 
