or_and_intropattern ::= ( "[" LIST1 intropatterns SEP "|" "]"| "(" simple_intropattern ")"| "(" simple_intropattern "COMMA_FIXME" LIST1 simple_intropattern SEP "COMMA_FIXME" ")"| "(" simple_intropattern "\&" LIST1 simple_intropattern SEP "\&" ")")

one_import_filter_name ::=( global OPT  "(" ".." ")"))

pattern ::= "200" RIGHTA( "exists2" "'" pattern LEVEL "0" ":" pattern LEVEL "200" "COMMA_FIXME" pattern     LEVEL "200" "&" pattern LEVEL "200"| "exists2" "'" pattern LEVEL "0" "COMMA_FIXME" pattern LEVEL "200" "&" pattern     LEVEL "200"| "exists2" name ":" pattern LEVEL "200" "COMMA_FIXME" pattern LEVEL "200" "&"    pattern LEVEL "200"| "exists2" name "COMMA_FIXME" pattern LEVEL "200" "&" pattern LEVEL "200"| "exists" "!" open_binders "COMMA_FIXME" pattern LEVEL "200"| "exists" open_binders "COMMA_FIXME" pattern LEVEL "200") | "100" RIGHTA( SELF ":" term LEVEL "200") | "99" RIGHTA( SELF "->" pattern LEVEL "200") | "95" RIGHTA( SELF "<->" NEXT) | "90" RIGHTA( ) | "85" RIGHTA( SELF "\\/" pattern LEVEL "85") | "80" RIGHTA( SELF "/\\" pattern LEVEL "80")  | "75" RIGHTA( "~" pattern LEVEL "75") | "70" RIGHTA( SELF ">" NEXT| SELF ">=" NEXT| SELF "<" NEXT "<=" NEXT| SELF "<" NEXT "<" NEXT| SELF "<" NEXT| SELF "<=" NEXT "<" NEXT| SELF "<=" NEXT "<=" NEXT| SELF "<=" NEXT| SELF "<>" NEXT ":>" NEXT| SELF "<>" NEXT| SELF "=" NEXT "=" NEXT| SELF "=" NEXT ":>" NEXT| SELF "=" NEXT)  | "60" RIGHTA( SELF "++" pattern LEVEL "60"| SELF "::" pattern LEVEL "60") | "50" LEFTA( SELF "||" NEXT| SELF "-" NEXT| SELF "+" NEXT) | "40" LEFTA( SELF "&&" NEXT| SELF "/" NEXT| SELF "*" NEXT) | "35" RIGHTA( "/" pattern LEVEL "35"| "-" pattern LEVEL "35") | "30" RIGHTA( SELF "^" pattern LEVEL "30") | "10" LEFTA( SELF "as" name| SELF LIST1 NEXT| "@" reference LIST0 NEXT) | "1" LEFTA( SELF "%" IDENT) | "0" LEFTA( "{" "'" pattern LEVEL "0" "&" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" "'" pattern LEVEL "0" "&" pattern LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" pattern LEVEL "200" "&" pattern LEVEL     "200" "&" pattern LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" "'" pattern LEVEL "0" ":" pattern LEVEL "200" "|" pattern LEVEL     "200" "&" pattern LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" pattern LEVEL "200" "|" pattern LEVEL     "200" "}"| "{" "'" pattern LEVEL "0" "|" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" "'" pattern LEVEL "0" "|" pattern LEVEL "200" "}"| "{" pattern LEVEL "99" "&" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" pattern LEVEL "99" "&" pattern LEVEL "200" "}"| "{" pattern LEVEL "99" ":" pattern LEVEL "200" "&" pattern LEVEL     "200" "&" pattern LEVEL "200" "}"| "{" pattern LEVEL "99" ":" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" pattern LEVEL "99" ":" pattern LEVEL "200" "|" pattern LEVEL     "200" "&" pattern LEVEL "200" "}"| "{" pattern LEVEL "99" ":" pattern LEVEL "200" "|" pattern LEVEL     "200" "}"| "{" pattern LEVEL "99" "|" pattern LEVEL "200" "&" pattern LEVEL     "200" "}"| "{" pattern LEVEL "99" "|" pattern LEVEL "200" "}"| "{" pattern LEVEL "99" "}"| "{|" record_patterns '|}'| "_"| "(" pattern LEVEL "200" "COMMA_FIXME" pattern LEVEL "200" "COMMA_FIXME" LIST1 (pattern     LEVEL "200") SEP "COMMA_FIXME" ")"| "(" pattern LEVEL "200" "COMMA_FIXME" pattern LEVEL "200" ")"| "(" pattern LEVEL "200" ")"| "(" pattern LEVEL "200" "|" LIST1 (pattern LEVEL "200") SEP "|" ")"| NUMBER| reference| string)

quoted_attributes ::=( LIST0 [ "#[" attribute_list "]"))
selector ::=( range_selector_or_nth| test_bracket_ident "[" ident "]")

simple_tactic ::=( IDENT "gintuition" OPT tactic| IDENT "firstorder" OPT tactic "with" LIST1 preident| IDENT "firstorder" OPT tactic firstorder_using "with" LIST1 preident| IDENT "firstorder" OPT tactic firstorder_using| IDENT "congruence" OPT natural "with" LIST1 constr| IDENT "congruence" OPT natural| IDENT "dintuition" tactic| IDENT "dintuition"| IDENT "intuition" tactic| IDENT "intuition"| IDENT "assert_fails" ltac_expr LEVEL "3"| IDENT "inversion_sigma" hyp "as" simple_intropattern| IDENT "inversion_sigma" hyp| IDENT "inversion_sigma"| IDENT "now" tactic| IDENT "rewrite_all" "<-" constr| IDENT "rewrite_all" constr| IDENT "destruct_with_eqn" ":" ident ident| IDENT "destruct_with_eqn" ":" ident constr| IDENT "destruct_with_eqn" ident| IDENT "destruct_with_eqn" constr| IDENT "clearbody" LIST1 hyp| IDENT "clear" IDENT "dependent" hyp| IDENT "clear" "-" LIST1 hyp| IDENT "clear" LIST0 hyp| IDENT "revert" IDENT "dependent" hyp| IDENT "revert" LIST1 hyp| IDENT "rename" LIST1 rename SEP "COMMA_FIXME"| IDENT "move" hyp "at" IDENT "top"| IDENT "move" hyp "at" IDENT "bottom"| IDENT "move" hyp IDENT "after" hyp| IDENT "move" hyp IDENT "before" hyp| IDENT "intro" "at" IDENT "top"| IDENT "intro" "at" IDENT "bottom"| IDENT "intro" IDENT "after" hyp| IDENT "intro" IDENT "before" hyp| IDENT "intro" ident "at" IDENT "top"| IDENT "intro" ident "at" IDENT "bottom"| IDENT "intro" ident IDENT "after" hyp| IDENT "intro" ident IDENT "before" hyp| IDENT "intro" ident| IDENT "intro"| IDENT "eexists" LIST1 bindings SEP "COMMA_FIXME"| IDENT "eexists"| "exists" LIST1 bindings SEP "COMMA_FIXME"| "exists"| IDENT "esplit" "with" bindings| IDENT "split" "with" bindings| IDENT "symmetry" "in" in_clause| IDENT "specialize" constr_with_bindings "as" simple_intropattern| IDENT "specialize" constr_with_bindings| IDENT "econstructor" nat_or_var "with" bindings| IDENT "econstructor" nat_or_var| IDENT "econstructor"| IDENT "constructor" nat_or_var "with" bindings| IDENT "constructor" nat_or_var| IDENT "constructor"| IDENT "eright" "with" bindings| IDENT "right" "with" bindings| IDENT "eleft" "with" bindings| IDENT "left" "with" bindings| IDENT "exact" uconstr| IDENT "with_strategy" strategy_level_or_var "[" LIST1 smart_global    "]" ltac_expr LEVEL "3"| IDENT "guard" test| IDENT "swap" int_or_var int_or_var| IDENT "cycle" int_or_var| IDENT "unshelve" ltac_expr LEVEL "1"| IDENT "transparent_abstract" ltac_expr LEVEL "3" "using" ident| IDENT "transparent_abstract" ltac_expr LEVEL "3"| IDENT "destauto" "in" hyp| IDENT "destauto"| IDENT "specialize_eqs" hyp| IDENT "generalize_eqs_vars" hyp| IDENT "generalize_eqs" hyp| IDENT "stepr" constr "by" tactic| IDENT "stepr" constr| IDENT "stepl" constr "by" tactic| IDENT "stepl" constr| IDENT "instantiate" "(" ident ":=" lconstr ")"| IDENT "instantiate" "(" natural ":=" lconstr ")" hloc| IDENT "evar" test_lpar_id_colon "(" ident ":" lconstr ")"| IDENT "evar" constr| IDENT "subst" LIST1 hyp| IDENT "subst"| IDENT "notypeclasses" IDENT "refine" uconstr| IDENT "refine" uconstr| IDENT "autorewrite" "*" "with" LIST1 preident clause "using" tactic| IDENT "autorewrite" "*" "with" LIST1 preident clause| IDENT "autorewrite" "with" LIST1 preident clause "using" tactic| IDENT "autorewrite" "with" LIST1 preident clause| IDENT "contradiction" OPT constr_with_bindings| IDENT "decompose" "[" LIST1 constr "]" constr| IDENT "decompose" IDENT "record" constr| IDENT "decompose" IDENT "sum" constr| IDENT "cutrewrite" orient constr "in" hyp| IDENT "cutrewrite" orient constr| IDENT "einjection" "as" LIST0 simple_intropattern| IDENT "einjection" destruction_arg "as" LIST0 simple_intropattern| IDENT "einjection" destruction_arg| IDENT "einjection"| IDENT "injection" "as" LIST0 simple_intropattern| IDENT "injection" destruction_arg "as" LIST0 simple_intropattern| IDENT "injection" destruction_arg| IDENT "injection"| IDENT "ediscriminate" destruction_arg| IDENT "ediscriminate"| IDENT "discriminate" destruction_arg| IDENT "discriminate"| IDENT "esimplify_eq" destruction_arg| IDENT "esimplify_eq"| IDENT "simplify_eq" destruction_arg| IDENT "simplify_eq"| IDENT "replace" "<-" uconstr clause| IDENT "replace" "->" uconstr clause| IDENT "replace" uconstr "with" constr clause by_arg_tac| IDENT "replace" uconstr clause| IDENT "assert_succeeds" ltac_expr LEVEL "3"| IDENT "unify" constr constr "with" preident| IDENT "unify" constr constr| IDENT "autounfold_one" hintbases "in" hyp| IDENT "autounfold_one" hintbases| IDENT "autounfold" hintbases clause| IDENT "dfs" IDENT "eauto" OPT nat_or_var auto_using hintbases| IDENT "info_eauto" OPT nat_or_var auto_using hintbases| IDENT "eauto" OPT nat_or_var auto_using hintbases| IDENT "info_auto" OPT nat_or_var auto_using hintbases| IDENT "auto" OPT nat_or_var auto_using hintbases| IDENT "debug" IDENT "eauto" OPT nat_or_var auto_using hintbases| IDENT "debug" IDENT "auto" OPT nat_or_var auto_using hintbases| IDENT "debug" IDENT "trivial" auto_using hintbases| IDENT "info_trivial" auto_using hintbases| IDENT "trivial" auto_using hintbases| IDENT "autoapply" constr "with" preident| IDENT "head_of_constr" ident constr| IDENT "typeclasses" IDENT "eauto" IDENT "bfs" OPT nat_or_var "with"    LIST1 preident| IDENT "typeclasses" IDENT "eauto" IDENT "bfs" OPT nat_or_var| IDENT "typeclasses" IDENT "eauto" IDENT "dfs" OPT nat_or_var "with"    LIST1 preident| IDENT "typeclasses" IDENT "eauto" IDENT "dfs" OPT nat_or_var| IDENT "typeclasses" IDENT "eauto" IDENT "best_effort" OPT nat_or_var    "with" LIST1 preident| IDENT "typeclasses" IDENT "eauto" IDENT "best_effort" OPT nat_or_var| IDENT "typeclasses" IDENT "eauto" OPT nat_or_var "with"    LIST1 preident| IDENT "typeclasses" IDENT "eauto" OPT nat_or_var| IDENT "decide" IDENT "equality"| IDENT "decide" constr "with" constr| IDENT "setoid_transitivity" constr| IDENT "setoid_etransitivity"| IDENT "setoid_symmetry" "in" hyp| IDENT "setoid_symmetry"| IDENT "setoid_rewrite" orient constr_with_bindings "at" occurrences    "in" hyp| IDENT "setoid_rewrite" orient constr_with_bindings "at" occurrences| IDENT "setoid_rewrite" orient constr_with_bindings "in" hyp "at"    occurrences| IDENT "setoid_rewrite" orient constr_with_bindings "in" hyp| IDENT "setoid_rewrite" orient constr_with_bindings| IDENT "substitute" orient constr_with_bindings| IDENT "rewrite_strat" rewstrategy "in" hyp| IDENT "rewrite_strat" rewstrategy| IDENT "rewrite_db" preident "in" hyp| IDENT "rewrite_db" preident| IDENT "finish_timing" "(" string ")" OPT string| IDENT "finish_timing" OPT string| IDENT "restart_timer" OPT string| IDENT "show" IDENT "ltac" IDENT "profile" IDENT "cutoff" integer| IDENT "show" IDENT "ltac" IDENT "profile" string| IDENT "show" IDENT "ltac" IDENT "profile"| IDENT "reset" IDENT "ltac" IDENT "profile"| IDENT "stop" IDENT "ltac" IDENT "profiling"| IDENT "start" IDENT "ltac" IDENT "profiling"| IDENT "intros" IDENT "until" quantified_hypothesis| IDENT "intros" ne_intropatterns| IDENT "intros"| IDENT "eintros" ne_intropatterns| IDENT "eintros"| IDENT "apply" "<-" constr "in" hyp| IDENT "apply" "<-" constr| IDENT "apply" "->" constr "in" hyp| IDENT "apply" "->" constr| IDENT "apply" LIST1 constr_with_bindings_arg SEP "COMMA_FIXME" in_hyp_as| IDENT "eapply" LIST1 constr_with_bindings_arg SEP "COMMA_FIXME" in_hyp_as| IDENT "elim" constr_with_bindings_arg OPT eliminator| IDENT "eelim" constr_with_bindings_arg OPT eliminator| IDENT "case" induction_clause_list| IDENT "ecase" induction_clause_list| "fix" ident natural "with" LIST1 fixdecl| "fix" ident natural| "cofix" ident "with" LIST1 cofixdecl| "cofix" ident| IDENT "set" bindings_with_parameters clause| IDENT "set" constr as_name clause| IDENT "eset" bindings_with_parameters clause| IDENT "eset" constr as_name clause| IDENT "remember" constr as_name eqn_ipat clause_dft_all| IDENT "eremember" constr as_name eqn_ipat clause_dft_all| IDENT "assert" lpar_id_coloneq "(" identref ":=" lconstr ")"| IDENT "assert" test_lpar_id_colon "(" identref ":" lconstr ")"    by_tactic| IDENT "assert" constr as_ipat by_tactic| IDENT "eassert" lpar_id_coloneq "(" identref ":=" lconstr ")"| IDENT "eassert" test_lpar_id_colon "(" identref ":" lconstr ")"    by_tactic| IDENT "eassert" constr as_ipat by_tactic| IDENT "pose" IDENT "proof" lpar_id_coloneq "(" identref ":="    lconstr ")"| IDENT "pose" IDENT "proof" lconstr as_ipat| IDENT "pose" bindings_with_parameters| IDENT "pose" constr as_name| IDENT "epose" IDENT "proof" lpar_id_coloneq "(" identref ":="    lconstr ")"| IDENT "epose" IDENT "proof" lconstr as_ipat| IDENT "epose" bindings_with_parameters| IDENT "epose" constr as_name| IDENT "enough" test_lpar_id_colon "(" identref ":" lconstr ")"    by_tactic| IDENT "enough" constr as_ipat by_tactic| IDENT "eenough" test_lpar_id_colon "(" identref ":" lconstr ")"    by_tactic| IDENT "eenough" constr as_ipat by_tactic| IDENT "generalize" IDENT "dependent" constr| IDENT "generalize" constr LIST1 constr| IDENT "generalize" constr lookup_at_as_comma occs as_name    LIST0 [ "COMMA_FIXME" pattern_occ as_name)| IDENT "generalize" constr| IDENT "induction" induction_clause_list| IDENT "einduction" induction_clause_list| IDENT "destruct" induction_clause_list| IDENT "edestruct" induction_clause_list| IDENT "rewrite" "*" orient uconstr "in" hyp "at" occurrences    by_arg_tac| IDENT "rewrite" "*" orient uconstr "in" hyp by_arg_tac| IDENT "rewrite" "*" orient uconstr "at" occurrences "in" hyp    by_arg_tac| IDENT "rewrite" "*" orient uconstr "at" occurrences by_arg_tac| IDENT "rewrite" "*" orient uconstr by_arg_tac| IDENT "rewrite" LIST1 oriented_rewriter SEP "COMMA_FIXME" clause by_tactic| IDENT "erewrite" LIST1 oriented_rewriter SEP "COMMA_FIXME" clause by_tactic| IDENT "dependent" IDENT "destruction" ident| IDENT "dependent" IDENT "induction" ident| IDENT "dependent" IDENT "generalize_eqs_vars" hyp| IDENT "dependent" IDENT "generalize_eqs" hyp| IDENT "dependent" IDENT "rewrite" orient constr "in" hyp| IDENT "dependent" IDENT "rewrite" orient constr| IDENT "dependent"    [ IDENT "simple" IDENT "inversion" | IDENT "inversion"    | IDENT "inversion_clear") quantified_hypothesis as_or_and_ipat    OPT [ "with" constr)| IDENT "simple" IDENT "congruence" OPT natural "with" LIST1 constr| IDENT "simple" IDENT "congruence" OPT natural| IDENT "simple" IDENT "destruct" quantified_hypothesis| IDENT "simple" IDENT "induction" quantified_hypothesis| IDENT "simple" IDENT "subst"| IDENT "simple" IDENT "notypeclasses" IDENT "refine" uconstr| IDENT "simple" IDENT "refine" uconstr| IDENT "simple" IDENT "injection" destruction_arg| IDENT "simple" IDENT "injection"| IDENT "simple" IDENT "apply" LIST1 constr_with_bindings_arg SEP "COMMA_FIXME"    in_hyp_as| IDENT "simple" IDENT "eapply" LIST1 constr_with_bindings_arg SEP "COMMA_FIXME"    in_hyp_as| IDENT "simple" IDENT "inversion" quantified_hypothesis as_or_and_ipat    in_hyp_list| IDENT "inversion_clear" quantified_hypothesis as_or_and_ipat    in_hyp_list| IDENT "inversion" quantified_hypothesis "using" constr in_hyp_list| IDENT "inversion" quantified_hypothesis as_or_and_ipat in_hyp_list| IDENT "red" clause| IDENT "hnf" clause| IDENT "simpl" delta_flag OPT ref_or_pattern_occ clause| IDENT "cbv" strategy_flag clause| IDENT "cbn" strategy_flag clause| IDENT "lazy" strategy_flag clause| IDENT "compute" delta_flag clause| IDENT "vm_compute" OPT ref_or_pattern_occ clause| IDENT "native_compute" OPT ref_or_pattern_occ clause| IDENT "unfold" LIST1 unfold_occ SEP "COMMA_FIXME" clause| IDENT "fold" LIST1 constr clause| IDENT "pattern" LIST1 pattern_occ SEP "COMMA_FIXME" clause| IDENT "change" conversion clause| IDENT "change_no_check" conversion clause)

term ::= "200" RIGHTA( binder_constr)
| "100" RIGHTA( SELF "<:" term LEVEL "200"| SELF "<<:" term LEVEL "200"| SELF ":>" term LEVEL "200"| SELF ":" term LEVEL "200")
| "99" RIGHTA( SELF "->" term LEVEL "200")
| "95" RIGHTA( SELF "<->" NEXT)
| "90" RIGHTA( )
| "85" RIGHTA( SELF "\\/" term LEVEL "85")
| "80" RIGHTA( SELF "/\\" term LEVEL "80")
| "75" RIGHTA( "~" term LEVEL "75")
| "70" RIGHTA( SELF ">" NEXT| SELF ">=" NEXT| SELF "<" NEXT "<=" NEXT| SELF "<" NEXT "<" NEXT| SELF "<" NEXT| SELF "<=" NEXT "<" NEXT| SELF "<=" NEXT "<=" NEXT| SELF "<=" NEXT| SELF "<>" NEXT ":>" NEXT| SELF "<>" NEXT| SELF "=" NEXT "=" NEXT| SELF "=" NEXT ":>" NEXT| SELF "=" NEXT)
| "60" RIGHTA( SELF "++" term LEVEL "60"| SELF "::" term LEVEL "60")
| "50" LEFTA( SELF "||" NEXT| SELF "-" NEXT| SELF "+" NEXT)
| "40" LEFTA( SELF "&&" NEXT| SELF "/" NEXT| SELF "*" NEXT)
| "35" RIGHTA( "/" term LEVEL "35"| "-" term LEVEL "35")
| "30" RIGHTA( SELF "^" term LEVEL "30")
| "10" LEFTA( SELF LIST1 arg| "@" global univ_annot LIST0 NEXT| "@" pattern_ident LIST1 identref)
| "9" LEFTA( ".." term LEVEL "0" "..")
| "8" LEFTA( )
| "1" LEFTA( SELF ".(" "@" global univ_annot LIST0 (term LEVEL "9") ")"| SELF ".(" global univ_annot LIST0 arg ")"| SELF "%" IDENT)
| "0" LEFTA( IDENT "ltac" ":" "(" ltac_expr ")"| "(" term LEVEL "200" "COMMA_FIXME" term LEVEL "200" "COMMA_FIXME" LIST1 (term LEVEL
    "200") SEP "COMMA_FIXME" ")"| "(" term LEVEL "200" "COMMA_FIXME" term LEVEL "200" ")"| "(" term LEVEL "200" ")"| "{|" record_declaration '|}'| "{" "'" pattern LEVEL "0" "&" term LEVEL "200" "&" term LEVEL
    "200" "}"| "{" "'" pattern LEVEL "0" "&" term LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" term LEVEL "200" "&" term LEVEL
    "200" "&" term LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" term LEVEL "200" "&" term LEVEL
    "200" "}"| "{" "'" pattern LEVEL "0" ":" term LEVEL "200" "|" term LEVEL
    "200" "&" term LEVEL "200" "}"| "{" "'" pattern LEVEL "0" ":" term LEVEL "200" "|" term LEVEL
    "200" "}"| "{" "'" pattern LEVEL "0" "|" term LEVEL "200" "&" term LEVEL
    "200" "}"| "{" "'" pattern LEVEL "0" "|" term LEVEL "200" "}"| "{" term LEVEL "99" "&" term LEVEL "200" "&" term LEVEL "200" "}"| "{" term LEVEL "99" "&" term LEVEL "200" "}"| "{" term LEVEL "99" ":" term LEVEL "200" "&" term LEVEL "200" "&"    term LEVEL "200" "}"| "{" term LEVEL "99" ":" term LEVEL "200" "&" term LEVEL "200" "}"| "{" term LEVEL "99" ":" term LEVEL "200" "|" term LEVEL "200" "&"    term LEVEL "200" "}"| "{" term LEVEL "99" ":" term LEVEL "200" "|" term LEVEL "200" "}"| "{" term LEVEL "99" "|" term LEVEL "200" "&" term LEVEL "200" "}"| "{" term LEVEL "99" "|" term LEVEL "200" "}"| "{" term LEVEL "99" "}"| "{" binder_constr "}"| "`{" term LEVEL "200" "}"| "`(" term LEVEL "200" ")"| NUMBER| atomic_constr| term_match| ident fields univ_annot| ident univ_annot| test_array_opening "[" "|" array_elems "|" lconstr type_cstr    test_array_closing "|" "]" univ_annot) 

typeclass_constraint ::=( "!" term LEVEL "200"| "{" name "}" ":" [ "!"  ) ?term LEVEL "200"| test_name_colon name ":" [ "!"  ) ?term LEVEL "200"| term LEVEL "200")

univ_decl ::=( "@{" LIST0 identref ( "+" )?     ( "|" LIST0 univ_constraint SEP "COMMA_FIXME" ( "+"  ) ?"}" | ( "}" | '|}'))) 