type 'a located = 'a Gbnf_parser.Positions.located
type terminal = string
type nonterminal = string
type symbol = string
type alias = string option
type identifier = string
type filename = string
type postlude = Gbnf_parser.Stretch.t
type action = Gbnf_parser.Action.t
type attribute = string located * Gbnf_parser.Stretch.t
type attributes = attribute list
type token_associativity = LeftAssoc | RightAssoc | NonAssoc | UndefinedAssoc
type precedence_level =
    UndefinedPrecedence
  | PrecedenceLevel of Gbnf_parser.InputFile.input_file * int *
      Lexing.position * Lexing.position
type token_properties = {
  tk_filename : filename;
  tk_ocamltype : Gbnf_parser.Stretch.ocamltype option;
  tk_position : Gbnf_parser.Positions.t;
  tk_alias : alias;
  tk_attributes : attributes;
  mutable tk_associativity : token_associativity;
  mutable tk_precedence : precedence_level;
  mutable tk_is_declared : bool;
}
type branch_prec_annotation = symbol located option
type branch_production_level =
    ProductionLevel of Gbnf_parser.InputFile.input_file * int
type on_error_reduce_level = branch_production_level
type parameter =
    ParameterVar of symbol located
  | ParameterApp of symbol located * parameters
  | ParameterAnonymous of parameterized_branch list located
and parameters = parameter list
and producer = identifier located * parameter * attributes
and parameterized_branch = {
  pr_branch_position : Gbnf_parser.Positions.t;
  pr_producers : producer list;
}
type parameterized_rule = {
  pr_nt : nonterminal;
  pr_positions : Gbnf_parser.Positions.t list;
  pr_branches : parameterized_branch list;
}
type pattern =
    SemPatVar of identifier located
  | SemPatWildcard
  | SemPatTilde of Gbnf_parser.Positions.t
  | SemPatTuple of pattern list
type raw_action = identifier option array -> action
type expression = choice_expression located
and choice_expression = EChoice of branch list
and branch = Branch of seq_expression * branch_production_level
and seq_expression = raw_seq_expression located
and raw_seq_expression =
    ECons of pattern * symbol_expression * seq_expression
  | ESingleton of symbol_expression
  | EAction of extended_action * branch_prec_annotation
and symbol_expression =
    ESymbol of symbol located * expression list * attributes
and extended_action =
    XATraditional of raw_action
  | XAPointFree of Gbnf_parser.Stretch.t option
type rule = {
  rule_public : bool;
  rule_inline : bool;
  rule_lhs : symbol located;
  rule_formals : symbol located list;
  rule_rhs : expression;
}
type declaration =
    DCode of Gbnf_parser.Stretch.t
  | DParameter of Gbnf_parser.Stretch.ocamltype
  | DToken of Gbnf_parser.Stretch.ocamltype option * terminal * alias *
      attributes
  | DStart of nonterminal
  | DTokenProperties of terminal * token_associativity * precedence_level
  | DType of Gbnf_parser.Stretch.ocamltype * parameter
  | DGrammarAttribute of attribute
  | DSymbolAttributes of parameter list * attributes
  | DOnErrorReduce of parameter * on_error_reduce_level
type partial_grammar = {
  pg_filename : filename;
  pg_rules : parameterized_rule list;
}
type grammar = {
  p_preludes : Gbnf_parser.Stretch.t list;
  p_postludes : postlude list;
  p_parameters : Gbnf_parser.Stretch.t list;
  p_start_symbols : Gbnf_parser.Positions.t Gbnf_parser.StringMap.t;
  p_types : (parameter * Gbnf_parser.Stretch.ocamltype located) list;
  p_tokens : token_properties Gbnf_parser.StringMap.t;
  p_on_error_reduce : (parameter * on_error_reduce_level) list;
  p_grammar_attributes : attributes;
  p_symbol_attributes : (parameter list * attributes) list;
  p_rules : parameterized_rule Gbnf_parser.StringMap.t;
}
type mystringpos = string Gbnf_parser.Positions.located
type myfactor =
    SFactor of mystringpos
  | CFactor of mystringpos * mystringpos
  | NFactor of myfactor
  | Star
  | Question
  | Plus
  | CharInt of int
  | CharClass("DEBUG:rule", [Tag1 (("located", 1641), ([((("a")), 100000000, 0, -157)], 1, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "located"), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -156)), [25], [0], 0, 0, (("lib/syntax.ml", 22, 1383, 1383), ("lib/syntax.ml", 23, 1401, 1425), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 0)), 1, 0); Tag1 (("terminal", 1642), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -155)), 0, 0, 0, 0, (("lib/syntax.ml", 29, 1561, 1561), ("lib/syntax.ml", 30, 1577, 1587), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 1)), 1, 0); Tag1 (("nonterminal", 1643), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -154)), 0, 0, 0, 0, (("lib/syntax.ml", 32, 1589, 1589), ("lib/syntax.ml", 33, 1608, 1618), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 2)), 1, 0); Tag1 (("symbol", 1644), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -153)), 0, 0, 0, 0, (("lib/syntax.ml", 35, 1620, 1620), ("lib/syntax.ml", 36, 1634, 1644), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 3)), 1, 0); Tag1 (("alias", 1645), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -152)], (0)), 100000000, 0, -151)), 0, 0, 0, 0, (("lib/syntax.ml", 52, 2349, 2349), ("lib/syntax.ml", 53, 2362, 2379), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 4)), 1, 0); Tag1 (("identifier", 1646), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -150)), 0, 0, 0, 0, (("lib/syntax.ml", 58, 2471, 2471), ("lib/syntax.ml", 59, 2489, 2499), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 5)), 1, 0); Tag1 (("filename", 1647), (0, 0, 0, 1, ((Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -149)), 0, 0, 0, 0, (("lib/syntax.ml", 63, 2533, 2533), ("lib/syntax.ml", 64, 2549, 2559), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 6)), 1, 0); Tag1 (("postlude", 1648), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -148)), 0, 0, 0, 0, (("lib/syntax.ml", 70, 2686, 2686), ("lib/syntax.ml", 71, 2702, 2715), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 7)), 1, 0); Tag1 (("action", 1649), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Action"), "t"), 0, (0)), 100000000, 0, -147)), 0, 0, 0, 0, (("lib/syntax.ml", 77, 2857, 2857), ("lib/syntax.ml", 78, 2871, 2883), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 8)), 1, 0); Tag1 (("attribute", 1650), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("located", 1641)), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -145)], (0)), 100000000, 0, -144); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -146)]), 100000000, 0, -143)), 0, 0, 0, 0, (("lib/syntax.ml", 85, 3100, 3100), ("lib/syntax.ml", 86, 3117, 3147), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 9)), 1, 0); Tag1 (("attributes", 1651), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("attribute", 1650)), 0, (0)), 100000000, 0, -142)], (0)), 100000000, 0, -141)), 0, 0, 0, 0, (("lib/syntax.ml", 88, 3149, 3149), ("lib/syntax.ml", 89, 3167, 3185), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 10)), 1, 0); Tag1 (("token_associativity", 1652), (0, 0, Tag1 ([(("LeftAssoc", 1282), (0), 0, (("lib/syntax.ml", 110, 3975, 3979), ("lib/syntax.ml", 110, 3975, 3988), 0), 0, Tag1 ("Gbnf_parser__Syntax", 12)); (("RightAssoc", 1283), (0), 0, (("lib/syntax.ml", 111, 3989, 3991), ("lib/syntax.ml", 111, 3989, 4003), 0), 0, Tag1 ("Gbnf_parser__Syntax", 13)); (("NonAssoc", 1284), (0), 0, (("lib/syntax.ml", 112, 4004, 4006), ("lib/syntax.ml", 112, 4004, 4016), 0), 0, Tag1 ("Gbnf_parser__Syntax", 14)); (("UndefinedAssoc", 1285), (0), 0, (("lib/syntax.ml", 113, 4017, 4019), ("lib/syntax.ml", 113, 4017, 4035), 0), 0, Tag1 ("Gbnf_parser__Syntax", 15))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 109, 3948, 3948), ("lib/syntax.ml", 113, 4017, 4035), 0), 0, 1, 0, Tag1 ("Gbnf_parser__Syntax", 11)), 1, 0); Tag1 (("precedence_level", 1653), (0, 0, Tag1 ([(("UndefinedPrecedence", 1287), (0), 0, (("lib/syntax.ml", 116, 4061, 4065), ("lib/syntax.ml", 116, 4061, 4084), 0), 0, Tag1 ("Gbnf_parser__Syntax", 17)); (("PrecedenceLevel", 1288), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "InputFile"), "input_file"), 0, (0)), 100000000, 0, -137); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -138); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -139); (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -140)]), 0, (("lib/syntax.ml", 122, 4280, 4282), ("lib/syntax.ml", 122, 4280, 4365), 0), 0, Tag1 ("Gbnf_parser__Syntax", 18))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 115, 4037, 4037), ("lib/syntax.ml", 122, 4280, 4365), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 16)), 1, 0); Tag1 (("token_properties", 1654), (0, 0, [[(("tk_filename", 1366), 0, (Tag3 ((("filename", 1647)), 0, (0)), 100000000, 0, -128), (("lib/syntax.ml", 126, 4397, 4412), ("lib/syntax.ml", 126, 4397, 4440), 0), 0, Tag1 ("Gbnf_parser__Syntax", 20)); (("tk_ocamltype", 1367), 0, (Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -130)], (0)), 100000000, 0, -129), (("lib/syntax.ml", 127, 4441, 4456), ("lib/syntax.ml", 127, 4441, 4500), 0), 0, Tag1 ("Gbnf_parser__Syntax", 21)); (("tk_position", 1368), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "t"), 0, (0)), 100000000, 0, -131), (("lib/syntax.ml", 128, 4501, 4516), ("lib/syntax.ml", 128, 4501, 4547), 0), 0, Tag1 ("Gbnf_parser__Syntax", 22)); (("tk_alias", 1369), 0, (Tag3 ((("alias", 1645)), 0, (0)), 100000000, 0, -132), (("lib/syntax.ml", 129, 4548, 4563), ("lib/syntax.ml", 129, 4548, 4588), 0), 0, Tag1 ("Gbnf_parser__Syntax", 23)); (("tk_attributes", 1370), 0, (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -133), (("lib/syntax.ml", 130, 4589, 4604), ("lib/syntax.ml", 130, 4589, 4634), 0), 0, Tag1 ("Gbnf_parser__Syntax", 24)); (("tk_associativity", 1371), 1, (Tag3 ((("token_associativity", 1652)), 0, (0)), 100000000, 0, -134), (("lib/syntax.ml", 131, 4635, 4641), ("lib/syntax.ml", 131, 4635, 4689), 0), 0, Tag1 ("Gbnf_parser__Syntax", 25)); (("tk_precedence", 1372), 1, (Tag3 ((("precedence_level", 1653)), 0, (0)), 100000000, 0, -135), (("lib/syntax.ml", 132, 4690, 4696), ("lib/syntax.ml", 132, 4690, 4741), 0), 0, Tag1 ("Gbnf_parser__Syntax", 26)); (("tk_is_declared", 1373), 1, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -136), (("lib/syntax.ml", 133, 4742, 4748), ("lib/syntax.ml", 133, 4742, 4781), 0), 0, Tag1 ("Gbnf_parser__Syntax", 27))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 124, 4367, 4367), ("lib/syntax.ml", 134, 4782, 4787), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 19)), 1, 0); Tag1 (("branch_prec_annotation", 1655), (0, 0, 0, 1, ((Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -127)], (0)), 100000000, 0, -126)], (0)), 100000000, 0, -125)), 0, 0, 0, 0, (("lib/syntax.ml", 141, 5004, 5004), ("lib/syntax.ml", 142, 5034, 5059), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 28)), 1, 0); Tag1 (("branch_production_level", 1656), (0, 0, Tag1 ([(("ProductionLevel", 1376), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "InputFile"), "input_file"), 0, (0)), 100000000, 0, -123); (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -124)]), 0, (("lib/syntax.ml", 150, 5321, 5323), ("lib/syntax.ml", 150, 5321, 5370), 0), 0, Tag1 ("Gbnf_parser__Syntax", 30))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 149, 5290, 5290), ("lib/syntax.ml", 150, 5321, 5370), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 29)), 1, 0); Tag1 (("on_error_reduce_level", 1657), (0, 0, 0, 1, ((Tag3 ((("branch_production_level", 1656)), 0, (0)), 100000000, 0, -122)), 0, 0, 0, 0, (("lib/syntax.ml", 158, 5623, 5623), ("lib/syntax.ml", 159, 5652, 5677), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 31)), 1, 0); Tag1 (("parameter", 1658), (0, 0, Tag1 ([(("ParameterVar", 1382), ([(Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -115)], (0)), 100000000, 0, -114)]), 0, (("lib/syntax.ml", 172, 6237, 6239), ("lib/syntax.ml", 172, 6237, 6271), 0), 0, Tag1 ("Gbnf_parser__Syntax", 36)); (("ParameterApp", 1383), ([(Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -117)], (0)), 100000000, 0, -116); (Tag3 ((("parameters", 1659)), 0, (0)), 100000000, 0, -118)]), 0, (("lib/syntax.ml", 173, 6272, 6274), ("lib/syntax.ml", 173, 6272, 6319), 0), 0, Tag1 ("Gbnf_parser__Syntax", 37)); (("ParameterAnonymous", 1384), ([(Tag3 ((("located", 1641)), [(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameterized_branch", 1661)), 0, (0)), 100000000, 0, -121)], (0)), 100000000, 0, -120)], (0)), 100000000, 0, -119)]), 0, (("lib/syntax.ml", 174, 6320, 6322), ("lib/syntax.ml", 174, 6320, 6379), 0), 0, Tag1 ("Gbnf_parser__Syntax", 38))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 171, 6220, 6220), ("lib/syntax.ml", 174, 6320, 6379), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 32)), 1, 0); Tag1 (("parameters", 1659), (0, 0, 0, 1, ((Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -113)], (0)), 100000000, 0, -112)), 0, 0, 0, 0, (("lib/syntax.ml", 176, 6381, 6381), ("lib/syntax.ml", 177, 6398, 6416), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 33)), 2, 0); Tag1 (("producer", 1660), (0, 0, 0, 1, ((Tag2 ([(Tag3 ((("located", 1641)), [(Tag3 ((("identifier", 1646)), 0, (0)), 100000000, 0, -109)], (0)), 100000000, 0, -108); (Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -110); (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -111)]), 100000000, 0, -107)), 0, 0, 0, 0, (("lib/syntax.ml", 187, 6831, 6831), ("lib/syntax.ml", 188, 6846, 6893), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 34)), 2, 0); Tag1 (("parameterized_branch", 1661), (0, 0, [[(("pr_branch_position", 1385), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "t"), 0, (0)), 100000000, 0, -104), (("lib/syntax.ml", 196, 7078, 7084), ("lib/syntax.ml", 196, 7078, 7127), 0), 0, Tag1 ("Gbnf_parser__Syntax", 39)); (("pr_producers", 1386), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("producer", 1660)), 0, (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), (("lib/syntax.ml", 197, 7128, 7134), ("lib/syntax.ml", 197, 7128, 7179), 0), 0, Tag1 ("Gbnf_parser__Syntax", 40))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 194, 7045, 7045), ("lib/syntax.ml", 203, 7367, 7372), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 35)), 2, 0); Tag1 (("parameterized_rule", 1662), (0, 0, [[(("pr_nt", 1388), 0, (Tag3 ((("nonterminal", 1643)), 0, (0)), 100000000, 0, -99), (("lib/syntax.ml", 213, 7617, 7623), ("lib/syntax.ml", 213, 7617, 7658), 0), 0, Tag1 ("Gbnf_parser__Syntax", 42)); (("pr_positions", 1389), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "t"), 0, (0)), 100000000, 0, -101)], (0)), 100000000, 0, -100), (("lib/syntax.ml", 214, 7659, 7665), ("lib/syntax.ml", 214, 7659, 7705), 0), 0, Tag1 ("Gbnf_parser__Syntax", 43)); (("pr_branches", 1390), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameterized_branch", 1661)), 0, (0)), 100000000, 0, -103)], (0)), 100000000, 0, -102), (("lib/syntax.ml", 217, 7801, 7807), ("lib/syntax.ml", 217, 7801, 7857), 0), 0, Tag1 ("Gbnf_parser__Syntax", 44))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 209, 7503, 7503), ("lib/syntax.ml", 218, 7858, 7863), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 41)), 1, 0); Tag1 (("pattern", 1663), (0, 0, Tag1 ([(("SemPatVar", 1392), ([(Tag3 ((("located", 1641)), [(Tag3 ((("identifier", 1646)), 0, (0)), 100000000, 0, -95)], (0)), 100000000, 0, -94)]), 0, (("lib/syntax.ml", 233, 8393, 8395), ("lib/syntax.ml", 233, 8393, 8428), 0), 0, Tag1 ("Gbnf_parser__Syntax", 46)); (("SemPatWildcard", 1393), (0), 0, (("lib/syntax.ml", 234, 8429, 8431), ("lib/syntax.ml", 234, 8429, 8447), 0), 0, Tag1 ("Gbnf_parser__Syntax", 47)); (("SemPatTilde", 1394), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "t"), 0, (0)), 100000000, 0, -96)]), 0, (("lib/syntax.ml", 235, 8448, 8450), ("lib/syntax.ml", 235, 8448, 8478), 0), 0, Tag1 ("Gbnf_parser__Syntax", 48)); (("SemPatTuple", 1395), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("pattern", 1663)), 0, (0)), 100000000, 0, -98)], (0)), 100000000, 0, -97)]), 0, (("lib/syntax.ml", 236, 8479, 8481), ("lib/syntax.ml", 236, 8479, 8510), 0), 0, Tag1 ("Gbnf_parser__Syntax", 49))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 232, 8378, 8378), ("lib/syntax.ml", 236, 8479, 8510), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 45)), 1, 0); Tag1 (("raw_action", 1664), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("array", 8)), [(Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("identifier", 1646)), 0, (0)), 100000000, 0, -93)], (0)), 100000000, 0, -92)], (0)), 100000000, 0, -91), (Tag3 ((("action", 1649)), 0, (0)), 100000000, 0, -90), 0), 100000000, 0, -89)), 0, 0, 0, 0, (("lib/syntax.ml", 239, 8548, 8548), ("lib/syntax.ml", 240, 8566, 8601), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 50)), 1, 0); Tag1 (("expression", 1665), (0, 0, 0, 1, ((Tag3 ((("located", 1641)), [(Tag3 ((("choice_expression", 1666)), 0, (0)), 100000000, 0, -88)], (0)), 100000000, 0, -87)), 0, 0, 0, 0, (("lib/syntax.ml", 243, 8664, 8664), ("lib/syntax.ml", 244, 8682, 8709), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 51)), 1, 0); Tag1 (("choice_expression", 1666), (0, 0, Tag1 ([(("EChoice", 1404), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("branch", 1667)), 0, (0)), 100000000, 0, -86)], (0)), 100000000, 0, -85)]), 0, (("lib/syntax.ml", 248, 8789, 8791), ("lib/syntax.ml", 248, 8789, 8815), 0), 0, Tag1 ("Gbnf_parser__Syntax", 58))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 247, 8765, 8765), ("lib/syntax.ml", 248, 8789, 8815), 0), 0, 0, 1, Tag1 ("Gbnf_parser__Syntax", 52)), 2, 0); Tag1 (("branch", 1667), (0, 0, Tag1 ([(("Branch", 1405), ([(Tag3 ((("seq_expression", 1668)), 0, (0)), 100000000, 0, -83); (Tag3 ((("branch_production_level", 1656)), 0, (0)), 100000000, 0, -84)]), 0, (("lib/syntax.ml", 252, 8881, 8883), ("lib/syntax.ml", 252, 8881, 8935), 0), 0, Tag1 ("Gbnf_parser__Syntax", 59))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 251, 8868, 8868), ("lib/syntax.ml", 252, 8881, 8935), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 53)), 2, 0); Tag1 (("seq_expression", 1668), (0, 0, 0, 1, ((Tag3 ((("located", 1641)), [(Tag3 ((("raw_seq_expression", 1669)), 0, (0)), 100000000, 0, -82)], (0)), 100000000, 0, -81)), 0, 0, 0, 0, (("lib/syntax.ml", 256, 9025, 9025), ("lib/syntax.ml", 257, 9046, 9074), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 54)), 2, 0); Tag1 (("raw_seq_expression", 1669), (0, 0, Tag1 ([(("ECons", 1406), ([(Tag3 ((("pattern", 1663)), 0, (0)), 100000000, 0, -75); (Tag3 ((("symbol_expression", 1670)), 0, (0)), 100000000, 0, -76); (Tag3 ((("seq_expression", 1668)), 0, (0)), 100000000, 0, -77)]), 0, (("lib/syntax.ml", 260, 9101, 9103), ("lib/syntax.ml", 260, 9101, 9158), 0), 0, Tag1 ("Gbnf_parser__Syntax", 60)); (("ESingleton", 1407), ([(Tag3 ((("symbol_expression", 1670)), 0, (0)), 100000000, 0, -78)]), 0, (("lib/syntax.ml", 261, 9159, 9161), ("lib/syntax.ml", 261, 9159, 9194), 0), 0, Tag1 ("Gbnf_parser__Syntax", 61)); (("EAction", 1408), ([(Tag3 ((("extended_action", 1671)), 0, (0)), 100000000, 0, -79); (Tag3 ((("branch_prec_annotation", 1655)), 0, (0)), 100000000, 0, -80)]), 0, (("lib/syntax.ml", 262, 9195, 9197), ("lib/syntax.ml", 262, 9195, 9250), 0), 0, Tag1 ("Gbnf_parser__Syntax", 62))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 259, 9076, 9076), ("lib/syntax.ml", 262, 9195, 9250), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 55)), 2, 0); Tag1 (("symbol_expression", 1670), (0, 0, Tag1 ([(("ESymbol", 1409), ([(Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70); (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("expression", 1665)), 0, (0)), 100000000, 0, -73)], (0)), 100000000, 0, -72); (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -74)]), 0, (("lib/syntax.ml", 268, 9389, 9391), ("lib/syntax.ml", 268, 9389, 9449), 0), 0, Tag1 ("Gbnf_parser__Syntax", 63))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 267, 9365, 9365), ("lib/syntax.ml", 268, 9389, 9449), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 56)), 2, 0); Tag1 (("extended_action", 1671), (0, 0, Tag1 ([(("XATraditional", 1410), ([(Tag3 ((("raw_action", 1664)), 0, (0)), 100000000, 0, -67)]), 0, (("lib/syntax.ml", 273, 9579, 9581), ("lib/syntax.ml", 273, 9579, 9610), 0), 0, Tag1 ("Gbnf_parser__Syntax", 64)); (("XAPointFree", 1411), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -69)], (0)), 100000000, 0, -68)]), 0, (("lib/syntax.ml", 274, 9611, 9613), ("lib/syntax.ml", 274, 9611, 9646), 0), 0, Tag1 ("Gbnf_parser__Syntax", 65))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 272, 9557, 9557), ("lib/syntax.ml", 274, 9611, 9646), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 57)), 2, 0); Tag1 (("rule", 1672), (0, 0, [[(("rule_public", 1413), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -59), (("lib/syntax.ml", 281, 9850, 9854), ("lib/syntax.ml", 281, 9850, 9872), 0), 0, Tag1 ("Gbnf_parser__Syntax", 67)); (("rule_inline", 1414), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -60), (("lib/syntax.ml", 282, 9873, 9877), ("lib/syntax.ml", 282, 9873, 9895), 0), 0, Tag1 ("Gbnf_parser__Syntax", 68)); (("rule_lhs", 1415), 0, (Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -62)], (0)), 100000000, 0, -61), (("lib/syntax.ml", 283, 9896, 9900), ("lib/syntax.ml", 283, 9896, 9925), 0), 0, Tag1 ("Gbnf_parser__Syntax", 69)); (("rule_formals", 1416), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("located", 1641)), [(Tag3 ((("symbol", 1644)), 0, (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64)], (0)), 100000000, 0, -63), (("lib/syntax.ml", 285, 9965, 9969), ("lib/syntax.ml", 285, 9965, 10003), 0), 0, Tag1 ("Gbnf_parser__Syntax", 70)); (("rule_rhs", 1417), 0, (Tag3 ((("expression", 1665)), 0, (0)), 100000000, 0, -66), (("lib/syntax.ml", 286, 10004, 10008), ("lib/syntax.ml", 286, 10004, 10029), 0), 0, Tag1 ("Gbnf_parser__Syntax", 71))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 279, 9834, 9834), ("lib/syntax.ml", 287, 10030, 10033), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 66)), 1, 0); Tag1 (("declaration", 1673), (0, 0, Tag1 ([(("DCode", 1419), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -40)]), 0, (("lib/syntax.ml", 298, 10286, 10288), ("lib/syntax.ml", 298, 10286, 10308), 0), 0, Tag1 ("Gbnf_parser__Syntax", 73)); (("DParameter", 1420), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -41)]), 0, (("lib/syntax.ml", 302, 10350, 10352), ("lib/syntax.ml", 302, 10350, 10385), 0), 0, Tag1 ("Gbnf_parser__Syntax", 74)); (("DToken", 1421), ([(Tag3 ((Tag3 ("option", 10)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -43)], (0)), 100000000, 0, -42); (Tag3 ((("terminal", 1642)), 0, (0)), 100000000, 0, -44); (Tag3 ((("alias", 1645)), 0, (0)), 100000000, 0, -45); (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -46)]), 0, (("lib/syntax.ml", 306, 10458, 10460), ("lib/syntax.ml", 306, 10458, 10528), 0), 0, Tag1 ("Gbnf_parser__Syntax", 75)); (("DStart", 1422), ([(Tag3 ((("nonterminal", 1643)), 0, (0)), 100000000, 0, -47)]), 0, (("lib/syntax.ml", 310, 10567, 10569), ("lib/syntax.ml", 310, 10567, 10592), 0), 0, Tag1 ("Gbnf_parser__Syntax", 76)); (("DTokenProperties", 1423), ([(Tag3 ((("terminal", 1642)), 0, (0)), 100000000, 0, -48); (Tag3 ((("token_associativity", 1652)), 0, (0)), 100000000, 0, -49); (Tag3 ((("precedence_level", 1653)), 0, (0)), 100000000, 0, -50)]), 0, (("lib/syntax.ml", 314, 10645, 10647), ("lib/syntax.ml", 314, 10645, 10718), 0), 0, Tag1 ("Gbnf_parser__Syntax", 77)); (("DType", 1424), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -51); (Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -52)]), 0, (("lib/syntax.ml", 318, 10749, 10751), ("lib/syntax.ml", 318, 10749, 10791), 0), 0, Tag1 ("Gbnf_parser__Syntax", 78)); (("DGrammarAttribute", 1425), ([(Tag3 ((("attribute", 1650)), 0, (0)), 100000000, 0, -53)]), 0, (("lib/syntax.ml", 322, 10841, 10843), ("lib/syntax.ml", 322, 10841, 10875), 0), 0, Tag1 ("Gbnf_parser__Syntax", 79)); (("DSymbolAttributes", 1426), ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -55)], (0)), 100000000, 0, -54); (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -56)]), 0, (("lib/syntax.ml", 326, 10950, 10952), ("lib/syntax.ml", 326, 10950, 11002), 0), 0, Tag1 ("Gbnf_parser__Syntax", 80)); (("DOnErrorReduce", 1427), ([(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -57); (Tag3 ((("on_error_reduce_level", 1657)), 0, (0)), 100000000, 0, -58)]), 0, (("lib/syntax.ml", 330, 11044, 11046), ("lib/syntax.ml", 330, 11044, 11099), 0), 0, Tag1 ("Gbnf_parser__Syntax", 81))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 294, 10239, 10239), ("lib/syntax.ml", 330, 11044, 11099), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 72)), 1, 0); Tag1 (("partial_grammar", 1674), (0, 0, [[(("pg_filename", 1429), 0, (Tag3 ((("filename", 1647)), 0, (0)), 100000000, 0, -37), (("lib/syntax.ml", 338, 11259, 11265), ("lib/syntax.ml", 338, 11259, 11297), 0), 0, Tag1 ("Gbnf_parser__Syntax", 83)); (("pg_rules", 1430), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameterized_rule", 1662)), 0, (0)), 100000000, 0, -39)], (0)), 100000000, 0, -38), (("lib/syntax.ml", 341, 11411, 11418), ("lib/syntax.ml", 341, 11411, 11465), 0), 0, Tag1 ("Gbnf_parser__Syntax", 84))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 336, 11230, 11230), ("lib/syntax.ml", 342, 11467, 11472), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 82)), 1, 0); Tag1 (("grammar", 1675), (0, 0, [[(("p_preludes", 1432), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10), (("lib/syntax.ml", 360, 12209, 12215), ("lib/syntax.ml", 360, 12209, 12253), 0), 0, Tag1 ("Gbnf_parser__Syntax", 86)); (("p_postludes", 1433), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("postlude", 1648)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12), (("lib/syntax.ml", 361, 12254, 12260), ("lib/syntax.ml", 361, 12254, 12297), 0), 0, Tag1 ("Gbnf_parser__Syntax", 87)); (("p_parameters", 1434), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14), (("lib/syntax.ml", 362, 12298, 12304), ("lib/syntax.ml", 362, 12298, 12342), 0), 0, Tag1 ("Gbnf_parser__Syntax", 88)); (("p_start_symbols", 1483), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringMap"), "t"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "t"), 0, (0)), 100000000, 0, -17)], (0)), 100000000, 0, -16), (("lib/syntax.ml", 363, 12343, 12349), ("lib/syntax.ml", 363, 12343, 12396), 0), 0, Tag1 ("Gbnf_parser__Syntax", 89)); (("p_types", 1484), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -20); (Tag3 ((("located", 1641)), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "ocamltype"), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21)]), 100000000, 0, -19)], (0)), 100000000, 0, -18), (("lib/syntax.ml", 364, 12397, 12403), ("lib/syntax.ml", 364, 12397, 12471), 0), 0, Tag1 ("Gbnf_parser__Syntax", 90)); (("p_tokens", 1485), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringMap"), "t"), [(Tag3 ((("token_properties", 1654)), 0, (0)), 100000000, 0, -24)], (0)), 100000000, 0, -23), (("lib/syntax.ml", 365, 12472, 12478), ("lib/syntax.ml", 365, 12472, 12530), 0), 0, Tag1 ("Gbnf_parser__Syntax", 91)); (("p_on_error_reduce", 1486), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -27); (Tag3 ((("on_error_reduce_level", 1657)), 0, (0)), 100000000, 0, -28)]), 100000000, 0, -26)], (0)), 100000000, 0, -25), (("lib/syntax.ml", 366, 12531, 12537), ("lib/syntax.ml", 366, 12531, 12601), 0), 0, Tag1 ("Gbnf_parser__Syntax", 92)); (("p_grammar_attributes", 1487), 0, (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -29), (("lib/syntax.ml", 367, 12602, 12608), ("lib/syntax.ml", 367, 12602, 12642), 0), 0, Tag1 ("Gbnf_parser__Syntax", 93)); (("p_symbol_attributes", 1488), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("list", 9)), [(Tag3 ((("parameter", 1658)), 0, (0)), 100000000, 0, -33)], (0)), 100000000, 0, -32); (Tag3 ((("attributes", 1651)), 0, (0)), 100000000, 0, -34)]), 100000000, 0, -31)], (0)), 100000000, 0, -30), (("lib/syntax.ml", 368, 12643, 12649), ("lib/syntax.ml", 368, 12643, 12707), 0), 0, Tag1 ("Gbnf_parser__Syntax", 94)); (("p_rules", 1489), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringMap"), "t"), [(Tag3 ((("parameterized_rule", 1662)), 0, (0)), 100000000, 0, -36)], (0)), 100000000, 0, -35), (("lib/syntax.ml", 369, 12708, 12714), ("lib/syntax.ml", 369, 12708, 12768), 0), 0, Tag1 ("Gbnf_parser__Syntax", 95))]], 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 358, 12187, 12188), ("lib/syntax.ml", 370, 12769, 12774), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 85)), 1, 0); Tag1 (("mystringpos", 1676), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "located"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -9)], (0)), 100000000, 0, -8)), 0, 0, 0, 0, (("lib/syntax.ml", 373, 12777, 12778), ("lib/syntax.ml", 373, 12777, 12821), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 96)), 1, 0); Tag1 (("myfactor", 1677), (0, 0, Tag1 ([(("SFactor", 1632), ([(Tag3 ((("mystringpos", 1676)), 0, (0)), 100000000, 0, -2)]), 0, (("lib/syntax.ml", 376, 12841, 12844), ("lib/syntax.ml", 376, 12841, 12868), 0), 0, Tag1 ("Gbnf_parser__Syntax", 98)); (("CFactor", 1633), ([(Tag3 ((("mystringpos", 1676)), 0, (0)), 100000000, 0, -3); (Tag3 ((("mystringpos", 1676)), 0, (0)), 100000000, 0, -4)]), 0, (("lib/syntax.ml", 377, 12869, 12872), ("lib/syntax.ml", 377, 12869, 12910), 0), 0, Tag1 ("Gbnf_parser__Syntax", 99)); (("NFactor", 1634), ([(Tag3 ((("myfactor", 1677)), 0, (0)), 100000000, 0, -5)]), 0, (("lib/syntax.ml", 378, 12911, 12914), ("lib/syntax.ml", 378, 12911, 12936), 0), 0, Tag1 ("Gbnf_parser__Syntax", 100)); (("Star", 1635), (0), 0, (("lib/syntax.ml", 379, 12937, 12940), ("lib/syntax.ml", 379, 12937, 12946), 0), 0, Tag1 ("Gbnf_parser__Syntax", 101)); (("Question", 1636), (0), 0, (("lib/syntax.ml", 380, 12947, 12950), ("lib/syntax.ml", 380, 12947, 12960), 0), 0, Tag1 ("Gbnf_parser__Syntax", 102)); (("Plus", 1637), (0), 0, (("lib/syntax.ml", 381, 12961, 12964), ("lib/syntax.ml", 381, 12961, 12970), 0), 0, Tag1 ("Gbnf_parser__Syntax", 103)); (("CharInt", 1638), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -6)]), 0, (("lib/syntax.ml", 382, 12971, 12974), ("lib/syntax.ml", 382, 12971, 12990), 0), 0, Tag1 ("Gbnf_parser__Syntax", 104)); (("CharClass", 1639), (0), 0, (("lib/syntax.ml", 383, 12991, 12994), ("lib/syntax.ml", 383, 12991, 13005), 0), 0, Tag1 ("Gbnf_parser__Syntax", 105)); (("Rule", 1640), ([(Tag3 ((("parameterized_rule", 1662)), 0, (0)), 100000000, 0, -7)]), 0, (("lib/syntax.ml", 384, 13006, 13009), ("lib/syntax.ml", 384, 13006, 13037), 0), 0, Tag1 ("Gbnf_parser__Syntax", 106))], 0), 1, 0, 0, 0, 0, 0, (("lib/syntax.ml", 375, 12824, 12825), ("lib/syntax.ml", 384, 13006, 13037), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Syntax", 97)), 1, 0)], "Gbnf_parser__Syntax", [("Gbnf_parser__Syntax", ("\215+\240\173\189\025\030A\137\149\143\031\155\155_\018")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Queue", ("E\187(\001]E;(\021\n~\137\191\026\\\152")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_module_timer_runtime", ("\255\014\002\221+\150\189o\025\158\233y\t7\000\001")); ("Ppx_inline_test_lib", ("\218y\132\179\250\138\134,\155\143\192\163\025\218\"\217")); ("Ppx_bench_lib__Benchmark_accumulator", ("\149S\241hfpT\136F\251\018\140U\161\171^")); ("Ppx_bench_lib", ("\187\028\001\224\139H\014\148\179\0060<\016\134\190\"")); ("MenhirLib", ("A#\208S1j\151sK\211\012r3\r\022\150")); ("Inline_test_config", ("\\i\218(\228\139X\218\168\n-\152\158\165\2337")); ("Gbnf_parser__StringSet", ("\146\021\224@\140\216\020JG\022]f\222\018\255\172")); ("Gbnf_parser__StringMap", ("\239\255\130\147\246\209\173{\025\211V\224\255%\223j")); ("Gbnf_parser__Stretch", ("J\225V\166i\1460\193\242\155<7\228DI\132")); ("Gbnf_parser__Positions", ("\249\007\250\253\136\226\1414\253\1861i\198\252\210\193")); ("Gbnf_parser__Misc", ("\217\219\222\202/\250t\000K?\133\192FG\255\182")); ("Gbnf_parser__Keyword", ("={\249-\191Ic\166\255\028\168\207ZD\150\234")); ("Gbnf_parser__InputFile", ("\207a\254(\237\174\184\166z\015\162z\n\166\167\162")); ("Gbnf_parser__IL", ("\183i>\023p\175A\128\204)\025&\155\017\r<")); ("Gbnf_parser__Generic", ("\203=\139\135\\\247F\155-*b{V\149\183\001")); ("Gbnf_parser__CodeBits", ("R\138p\165\021W\152\197C\142H\180\191\184\201\t")); ("Gbnf_parser__Action", ("Lg@\247\175\027/\138\217\241;\028\160E\250_")); ("Gbnf_parser", ("\017-\177\154_\152\247\179\232\028Y\187\182\219\217t")); ("Expect_test_config_types__Expect_test_config_types_intf", ("H\178\201K\2348\236h=\184\166\205\016\177\151,")); ("Expect_test_config_types__", ("\173E\156\232l\016P\n2\210\139\139\180\240_\145")); ("Expect_test_config_types", ("\1811\151S\164\189\028\209\222\2348[/\127\255*")); ("Expect_test_common__File", ("l\027\219\1577\028\236\134\224V\205\242R\210\182B")); ("Expect_test_common__Expectation", ("\255Z\156\189K\227\237l\003\135\031\251\242\149\242\154")); ("Expect_test_common__", (")\246.\002\031\\\027j1\136\161\149_\149>\030")); ("Expect_test_common", ("\235\234\220\143;\001\136?G\148\192\011\246\1479#")); ("Expect_test_collector__", ("\163,)1\228\170\155\143\208V\0236\023\172 \203")); ("Expect_test_collector", ("\224E}\232\250\137,=\151\170\227O\233\002\024\028")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Source_code_position", ("i\235\201'\004\215\194\157\004\174X9+b\0231")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [1; (0)])

  | Rule of parameterized_rule
