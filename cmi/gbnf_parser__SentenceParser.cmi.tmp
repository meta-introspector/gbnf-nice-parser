type token =
    Tchar of int
  | STAR
  | RPAREN
  | REGEX of string Gbnf_parser.Positions.located
  | QUESTION
  | QID of string Gbnf_parser.Positions.located
  | PLUS
  | NEWLINE
  | LPAREN
  | LID of string Gbnf_parser.Positions.located
  | EOF
  | DASH
  | COLONCOLONEQUAL
  | CARET
  | BAR
exception Error
val grammar :
  (Lexing.lexbuf -> token) ->
  Lexing.lexbuf -> Gbnf_parser.Syntax.partial_grammar
module MenhirInterpreter :
  sig
    type token = token/2
    type production
    type 'a env
    type 'a checkpoint = private
        InputNeeded of 'a env
      | Shifting of 'a env * 'a env * bool
      | AboutToReduce of 'a env * production
      | HandlingError of 'a env
      | Accepted of 'a
      | Rejected
    val offer :
      'a checkpoint ->
      token * MenhirLib.IncrementalEngine.position *
      MenhirLib.IncrementalEngine.position -> 'a checkpoint
    type strategy = [ `Legacy | `Simplified ]
    val resume : ?strategy:strategy -> 'a checkpoint -> 'a checkpoint
    type supplier =
        unit ->
        token * MenhirLib.IncrementalEngine.position *
        MenhirLib.IncrementalEngine.position
    val lexer_lexbuf_to_supplier :
      (Lexing.lexbuf -> token) -> Lexing.lexbuf -> supplier
    val loop : ?strategy:strategy -> supplier -> 'a checkpoint -> 'a
    val loop_handle :
      ('a -> 'answer) ->
      ('a checkpoint -> 'answer) -> supplier -> 'a checkpoint -> 'answer
    val loop_handle_undo :
      ('a -> 'answer) ->
      ('a checkpoint -> 'a checkpoint -> 'answer) ->
      supplier -> 'a checkpoint -> 'answer
    val shifts : 'a checkpoint -> 'a env option
    val acceptable :
      'a checkpoint -> token -> MenhirLib.IncrementalEngine.position -> bool
    type 'a lr1state
    val number : 'a lr1state -> int
    val production_index : production -> int
    val find_production : int -> production
    type element =
        Element : 'a lr1state * 'a * MenhirLib.IncrementalEngine.position *
          MenhirLib.IncrementalEngine.position -> element
    type stack = element MenhirLib.General.stream
    val stack : 'a env -> stack
    val top : 'a env -> element option
    val pop_many : int -> 'a env -> 'a env option
    val get : int -> 'a env -> element option
    val current_state_number : 'a env -> int
    val equal : 'a env -> 'a env -> bool
    val positions :
      'a env ->
      MenhirLib.IncrementalEngine.position *
      MenhirLib.IncrementalEngine.position
    val env_has_default_reduction : 'a env -> bool
    val state_has_default_reduction : 'a lr1state -> bool
    val pop : 'a env -> 'a env option
    val force_reduction : production -> 'a env -> 'a env
    val input_needed : 'a env -> 'a checkpoint
  end
module Incremental :
  sig
    val grammar :
      Lexing.position ->
      Gbnf_parser.Syntax.partial_grammar MenhirInterpreter.checkpoint("DEBUG:rule", [Tag1 (("token", 620), (0, 0, Tag1 ([(("Tchar", 329), ([(Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -9)]), 0, (("lib/sentenceParser.mli", 5, 42, 44), ("lib/sentenceParser.mli", 5, 42, 60), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 1)); (("STAR", 330), (0), 0, (("lib/sentenceParser.mli", 6, 61, 63), ("lib/sentenceParser.mli", 6, 61, 69), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 2)); (("RPAREN", 331), (0), 0, (("lib/sentenceParser.mli", 7, 70, 72), ("lib/sentenceParser.mli", 7, 70, 80), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 3)); (("REGEX", 332), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "located"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -11)], (0)), 100000000, 0, -10)]), 0, (("lib/sentenceParser.mli", 8, 81, 83), ("lib/sentenceParser.mli", 8, 81, 120), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 4)); (("QUESTION", 368), (0), 0, (("lib/sentenceParser.mli", 9, 121, 123), ("lib/sentenceParser.mli", 9, 121, 133), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 5)); (("QID", 369), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "located"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -13)], (0)), 100000000, 0, -12)]), 0, (("lib/sentenceParser.mli", 10, 134, 136), ("lib/sentenceParser.mli", 10, 134, 171), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 6)); (("PLUS", 370), (0), 0, (("lib/sentenceParser.mli", 11, 172, 174), ("lib/sentenceParser.mli", 11, 172, 180), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 7)); (("NEWLINE", 371), (0), 0, (("lib/sentenceParser.mli", 12, 181, 183), ("lib/sentenceParser.mli", 12, 181, 192), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 8)); (("LPAREN", 372), (0), 0, (("lib/sentenceParser.mli", 13, 193, 195), ("lib/sentenceParser.mli", 13, 193, 203), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 9)); (("LID", 373), ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Positions"), "located"), [(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -15)], (0)), 100000000, 0, -14)]), 0, (("lib/sentenceParser.mli", 14, 204, 206), ("lib/sentenceParser.mli", 14, 204, 241), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 10)); (("EOF", 374), (0), 0, (("lib/sentenceParser.mli", 15, 242, 244), ("lib/sentenceParser.mli", 15, 242, 249), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 11)); (("DASH", 375), (0), 0, (("lib/sentenceParser.mli", 16, 250, 252), ("lib/sentenceParser.mli", 16, 250, 258), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 12)); (("COLONCOLONEQUAL", 376), (0), 0, (("lib/sentenceParser.mli", 17, 259, 261), ("lib/sentenceParser.mli", 17, 259, 278), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 13)); (("CARET", 377), (0), 0, (("lib/sentenceParser.mli", 18, 279, 281), ("lib/sentenceParser.mli", 18, 279, 288), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 14)); (("BAR", 378), (0), 0, (("lib/sentenceParser.mli", 19, 289, 291), ("lib/sentenceParser.mli", 19, 289, 296), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 15))], 0), 1, 0, 0, 0, 0, 0, (("lib/sentenceParser.mli", 4, 28, 28), ("lib/sentenceParser.mli", 19, 289, 296), 0), 0, 0, 0, Tag1 ("Gbnf_parser__SentenceParser", 0)), 1, 0); Tag2 (("Error", 621), ((Tag3 ("exn", 7)), 0, (0), 0, 1, (("_none_", 0, 0, -1), ("_none_", 0, 0, -1), 1), 0, Tag1 ("Gbnf_parser__SentenceParser", 16)), 2, 0); (("grammar", 622), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -8), (Tag3 ((("token", 620)), 0, (0)), 100000000, 0, -7), 0), 100000000, 0, -6), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -5), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Syntax"), "partial_grammar"), 0, (0)), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/sentenceParser.mli", 27, 407, 407), ("lib/sentenceParser.mli", 27, 407, 489), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 17)), 0); Tag3 (("MenhirInterpreter", 623), 0, (Tag1 ([Tag1 (("token", 625), (0, 0, 0, 1, ((Tag3 ((("token", 620)), 0, (0)), 100000000, 0, -181)), 0, 0, 0, 0, (("lib/sentenceParser.mli", 34, 614, 623), ("lib/sentenceParser.mli", 34, 614, 641), 0), 0, 0, 0, Tag1 ("Gbnf_parser__SentenceParser", 18)), 1, 0); Tag1 (("production", 626), (0, 0, 0, 1, 0, 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 175, 7388, 7390), ("lib/pack/menhirLib.mli", 175, 7388, 7405), 0), 0, 0, 0, Tag1 ("MenhirLib", 21)), 1, 0); Tag1 (("env", 627), ([((("a")), 100000000, 0, -180)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/pack/menhirLib.mli", 214, 9397, 9399), ("lib/pack/menhirLib.mli", 214, 9397, 9410), 0), 0, 0, 0, Tag1 ("MenhirLib", 22)), 1, 0); Tag1 (("checkpoint", 628), ([((("a")), 100000000, 0, -173)], 1, Tag1 ([(("InputNeeded", 354), ([(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -172)]), 0, (("lib/pack/menhirLib.mli", 217, 9443, 9447), ("lib/pack/menhirLib.mli", 217, 9443, 9470), 0), 0, Tag1 ("MenhirLib", 24)); (("Shifting", 355), ([(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -174); (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -175); (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -176)]), 0, (("lib/pack/menhirLib.mli", 218, 9471, 9475), ("lib/pack/menhirLib.mli", 218, 9471, 9511), 0), 0, Tag1 ("MenhirLib", 25)); (("AboutToReduce", 356), ([(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -177); (Tag3 ((("production", 626)), 0, (0)), 100000000, 0, -178)]), 0, (("lib/pack/menhirLib.mli", 219, 9512, 9516), ("lib/pack/menhirLib.mli", 219, 9512, 9554), 0), 0, Tag1 ("MenhirLib", 26)); (("HandlingError", 357), ([(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -173)], (0)), 100000000, 0, -179)]), 0, (("lib/pack/menhirLib.mli", 220, 9555, 9559), ("lib/pack/menhirLib.mli", 220, 9555, 9584), 0), 0, Tag1 ("MenhirLib", 27)); (("Accepted", 358), ([((("a")), 100000000, 0, -173)]), 0, (("lib/pack/menhirLib.mli", 221, 9585, 9589), ("lib/pack/menhirLib.mli", 221, 9585, 9605), 0), 0, Tag1 ("MenhirLib", 28)); (("Rejected", 359), (0), 0, (("lib/pack/menhirLib.mli", 222, 9606, 9610), ("lib/pack/menhirLib.mli", 222, 9606, 9620), 0), 0, Tag1 ("MenhirLib", 29))], 0), 0, 0, [31], [0], 0, 0, (("lib/pack/menhirLib.mli", 216, 9412, 9414), ("lib/pack/menhirLib.mli", 222, 9606, 9620), 0), 0, 0, 0, Tag1 ("MenhirLib", 23)), 1, 0); (("offer", 629), ((Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -171), (Tag1 (0, (Tag2 ([(Tag3 ((("token", 625)), 0, (0)), 100000000, 0, -168); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -169); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -170)]), 100000000, 0, -167), (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -166)], (0)), 100000000, 0, -165), 0), 100000000, 0, -164), 0), 100000000, 0, -163), 0, (("lib/pack/menhirLib.mli", 229, 9892, 9894), ("lib/pack/menhirLib.mli", 232, 9961, 9978), 0), 0, Tag1 ("MenhirLib", 30)), 0); Tag1 (("strategy", 630), (0, 0, 0, 1, ((Tag8 (([("Legacy", (0)); ("Simplified", (0))], (0, 100000000, 0, -162), 1, 0, 0)), 100000000, 0, -161)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 255, 11059, 11061), ("lib/pack/menhirLib.mli", 256, 11077, 11106), 0), 0, 1, 0, Tag1 ("MenhirLib", 31)), 1, 0); (("resume", 631), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 630)), 0, (0)), 100000000, 0, -160)], (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -158), (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -157)], (0)), 100000000, 0, -156), 0), 100000000, 0, -155), 0), 100000000, 0, -154), 0, (("lib/pack/menhirLib.mli", 258, 11108, 11110), ("lib/pack/menhirLib.mli", 261, 11169, 11186), 0), 0, Tag1 ("MenhirLib", 32)), 0); Tag1 (("supplier", 632), (0, 0, 0, 1, ((Tag1 (0, (Tag3 ((Tag3 ("unit", 6)), 0, (0)), 100000000, 0, -153), (Tag2 ([(Tag3 ((("token", 625)), 0, (0)), 100000000, 0, -150); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -151); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -152)]), 100000000, 0, -149), 0), 100000000, 0, -148)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 266, 11345, 11347), ("lib/pack/menhirLib.mli", 267, 11363, 11402), 0), 0, 0, 0, Tag1 ("MenhirLib", 33)), 1, 0); (("lexer_lexbuf_to_supplier", 633), ((Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -147), (Tag3 ((("token", 625)), 0, (0)), 100000000, 0, -146), 0), 100000000, 0, -145), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "lexbuf"), 0, (0)), 100000000, 0, -144), (Tag3 ((("supplier", 632)), 0, (0)), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("lib/pack/menhirLib.mli", 272, 11494, 11496), ("lib/pack/menhirLib.mli", 275, 11579, 11591), 0), 0, Tag1 ("MenhirLib", 34)), 0); (("loop", 634), ((Tag1 (Tag1 ("strategy"), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("strategy", 630)), 0, (0)), 100000000, 0, -140)], (0)), 100000000, 0, -139), (Tag1 (0, (Tag3 ((("supplier", 632)), 0, (0)), 100000000, 0, -138), (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -136)], (0)), 100000000, 0, -137), ((("a")), 100000000, 0, -136), 0), 100000000, 0, -135), 0), 100000000, 0, -134), 0), 100000000, 0, -133), 0, (("lib/pack/menhirLib.mli", 289, 12291, 12293), ("lib/pack/menhirLib.mli", 289, 12291, 12356), 0), 0, Tag1 ("MenhirLib", 35)), 0); (("loop_handle", 635), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -128), ((("answer")), 100000000, 0, -126), 0), 100000000, 0, -132), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -128)], (0)), 100000000, 0, -131), ((("answer")), 100000000, 0, -126), 0), 100000000, 0, -130), (Tag1 (0, (Tag3 ((("supplier", 632)), 0, (0)), 100000000, 0, -129), (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -128)], (0)), 100000000, 0, -127), ((("answer")), 100000000, 0, -126), 0), 100000000, 0, -125), 0), 100000000, 0, -124), 0), 100000000, 0, -123), 0), 100000000, 0, -122), 0, (("lib/pack/menhirLib.mli", 303, 13060, 13062), ("lib/pack/menhirLib.mli", 306, 13136, 13176), 0), 0, Tag1 ("MenhirLib", 36)), 0); (("loop_handle_undo", 636), ((Tag1 (0, (Tag1 (0, ((("a")), 100000000, 0, -115), ((("answer")), 100000000, 0, -113), 0), 100000000, 0, -121), (Tag1 (0, (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -115)], (0)), 100000000, 0, -120), (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -115)], (0)), 100000000, 0, -119), ((("answer")), 100000000, 0, -113), 0), 100000000, 0, -118), 0), 100000000, 0, -117), (Tag1 (0, (Tag3 ((("supplier", 632)), 0, (0)), 100000000, 0, -116), (Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -115)], (0)), 100000000, 0, -114), ((("answer")), 100000000, 0, -113), 0), 100000000, 0, -112), 0), 100000000, 0, -111), 0), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("lib/pack/menhirLib.mli", 321, 13904, 13906), ("lib/pack/menhirLib.mli", 324, 14002, 14042), 0), 0, Tag1 ("MenhirLib", 37)), 0); (("shifts", 637), ((Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -108), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -107)], (0)), 100000000, 0, -106)], (0)), 100000000, 0, -105), 0), 100000000, 0, -104), 0, (("lib/pack/menhirLib.mli", 337, 14641, 14643), ("lib/pack/menhirLib.mli", 337, 14641, 14685), 0), 0, Tag1 ("MenhirLib", 38)), 0); (("acceptable", 638), ((Tag1 (0, (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -103)], (0)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("token", 625)), 0, (0)), 100000000, 0, -101), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -100), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("lib/pack/menhirLib.mli", 355, 15526, 15528), ("lib/pack/menhirLib.mli", 355, 15526, 15586), 0), 0, Tag1 ("MenhirLib", 39)), 0); Tag1 (("lr1state", 639), ([((("a")), 100000000, 0, -95)], 1, 0, 1, 0, [7], [2], 0, 0, (("lib/pack/menhirLib.mli", 361, 15799, 15801), ("lib/pack/menhirLib.mli", 361, 15799, 15817), 0), 0, 0, 0, Tag1 ("MenhirLib", 40)), 1, 0); (("number", 640), ((Tag1 (0, (Tag3 ((("lr1state", 639)), [((0), 100000000, 0, -94)], (0)), 100000000, 0, -93), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -92), 0), 100000000, 0, -91), 0, (("lib/pack/menhirLib.mli", 365, 15892, 15894), ("lib/pack/menhirLib.mli", 365, 15892, 15923), 0), 0, Tag1 ("MenhirLib", 41)), 0); (("production_index", 641), ((Tag1 (0, (Tag3 ((("production", 626)), 0, (0)), 100000000, 0, -90), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -89), 0), 100000000, 0, -88), 0, (("lib/pack/menhirLib.mli", 371, 16040, 16042), ("lib/pack/menhirLib.mli", 371, 16040, 16081), 0), 0, Tag1 ("MenhirLib", 42)), 0); (("find_production", 642), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -87), (Tag3 ((("production", 626)), 0, (0)), 100000000, 0, -86), 0), 100000000, 0, -85), 0, (("lib/pack/menhirLib.mli", 372, 16082, 16084), ("lib/pack/menhirLib.mli", 372, 16082, 16122), 0), 0, Tag1 ("MenhirLib", 43)), 0); Tag1 (("element", 643), (0, 0, Tag1 ([(("Element", 375), ([(Tag3 ((("lr1state", 639)), [((("a")), 100000000, 0, -82)], (0)), 100000000, 0, -81); ((("a")), 100000000, 0, -82); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -83); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -84)]), ((Tag3 ((("element", 643)), 0, (0)), 100000000, 0, -80)), (("lib/pack/menhirLib.mli", 381, 16541, 16545), ("lib/pack/menhirLib.mli", 381, 16541, 16605), 0), 0, Tag1 ("MenhirLib", 45))], 0), 1, 0, 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 380, 16524, 16526), ("lib/pack/menhirLib.mli", 381, 16541, 16605), 0), 0, 0, 0, Tag1 ("MenhirLib", 44)), 1, 0); Tag1 (("stack", 644), (0, 0, 0, 1, ((Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "General"), "stream"), [(Tag3 ((("element", 643)), 0, (0)), 100000000, 0, -79)], (0)), 100000000, 0, -78)), 0, 0, 0, 0, (("lib/pack/menhirLib.mli", 390, 16985, 16987), ("lib/pack/menhirLib.mli", 391, 17017, 17035), 0), 0, 0, 0, Tag1 ("MenhirLib", 46)), 1, 0); (("stack", 645), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -77)], (0)), 100000000, 0, -76), (Tag3 ((("stack", 644)), 0, (0)), 100000000, 0, -75), 0), 100000000, 0, -74), 0, (("lib/pack/menhirLib.mli", 398, 17285, 17287), ("lib/pack/menhirLib.mli", 398, 17285, 17313), 0), 0, Tag1 ("MenhirLib", 47)), 0); (("top", 646), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -73)], (0)), 100000000, 0, -72), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 643)), 0, (0)), 100000000, 0, -71)], (0)), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lib/pack/menhirLib.mli", 405, 17605, 17607), ("lib/pack/menhirLib.mli", 405, 17605, 17640), 0), 0, Tag1 ("MenhirLib", 48)), 0); (("pop_many", 647), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -67), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -66)], (0)), 100000000, 0, -65)], (0)), 100000000, 0, -64), 0), 100000000, 0, -63), 0), 100000000, 0, -62), 0, (("lib/pack/menhirLib.mli", 411, 17867, 17869), ("lib/pack/menhirLib.mli", 411, 17867, 17913), 0), 0, Tag1 ("MenhirLib", 49)), 0); (("get", 648), ((Tag1 (0, (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -61), (Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -60)], (0)), 100000000, 0, -59), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("element", 643)), 0, (0)), 100000000, 0, -58)], (0)), 100000000, 0, -57), 0), 100000000, 0, -56), 0), 100000000, 0, -55), 0, (("lib/pack/menhirLib.mli", 418, 18165, 18167), ("lib/pack/menhirLib.mli", 418, 18165, 18207), 0), 0, Tag1 ("MenhirLib", 50)), 0); (("current_state_number", 649), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -54)], (0)), 100000000, 0, -53), (Tag3 ((Tag3 ("int", 1)), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0, (("lib/pack/menhirLib.mli", 426, 18532, 18534), ("lib/pack/menhirLib.mli", 426, 18532, 18573), 0), 0, Tag1 ("MenhirLib", 51)), 0); (("equal", 650), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -50), (Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -49)], (0)), 100000000, 0, -48), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -47), 0), 100000000, 0, -46), 0), 100000000, 0, -45), 0, (("lib/pack/menhirLib.mli", 437, 19158, 19160), ("lib/pack/menhirLib.mli", 437, 19158, 19195), 0), 0, Tag1 ("MenhirLib", 52)), 0); (("positions", 651), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -44)], (0)), 100000000, 0, -43), (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -41); (Tag3 (Tag1 (Tag1 ((Tag2 ("MenhirLib")), "IncrementalEngine"), "position"), 0, (0)), 100000000, 0, -42)]), 100000000, 0, -40), 0), 100000000, 0, -39), 0, (("lib/pack/menhirLib.mli", 443, 19378, 19380), ("lib/pack/menhirLib.mli", 443, 19378, 19424), 0), 0, Tag1 ("MenhirLib", 53)), 0); (("env_has_default_reduction", 652), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -38)], (0)), 100000000, 0, -37), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -36), 0), 100000000, 0, -35), 0, (("lib/pack/menhirLib.mli", 450, 19667, 19669), ("lib/pack/menhirLib.mli", 450, 19667, 19714), 0), 0, Tag1 ("MenhirLib", 54)), 0); (("state_has_default_reduction", 653), ((Tag1 (0, (Tag3 ((("lr1state", 639)), [((0), 100000000, 0, -34)], (0)), 100000000, 0, -33), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/pack/menhirLib.mli", 455, 19871, 19873), ("lib/pack/menhirLib.mli", 455, 19871, 19924), 0), 0, Tag1 ("MenhirLib", 55)), 0); (("pop", 654), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -30), (Tag3 ((Tag3 ("option", 10)), [(Tag3 ((("env", 627)), [((("a")), 100000000, 0, -29)], (0)), 100000000, 0, -28)], (0)), 100000000, 0, -27), 0), 100000000, 0, -26), 0, (("lib/pack/menhirLib.mli", 462, 20211, 20213), ("lib/pack/menhirLib.mli", 462, 20211, 20245), 0), 0, Tag1 ("MenhirLib", 56)), 0); (("force_reduction", 655), ((Tag1 (0, (Tag3 ((("production", 626)), 0, (0)), 100000000, 0, -25), (Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -24), (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -23)], (0)), 100000000, 0, -22), 0), 100000000, 0, -21), 0), 100000000, 0, -20), 0, (("lib/pack/menhirLib.mli", 471, 20678, 20680), ("lib/pack/menhirLib.mli", 471, 20678, 20731), 0), 0, Tag1 ("MenhirLib", 57)), 0); (("input_needed", 656), ((Tag1 (0, (Tag3 ((("env", 627)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -19), (Tag3 ((("checkpoint", 628)), [((("a")), 100000000, 0, -18)], (0)), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/pack/menhirLib.mli", 487, 21595, 21597), ("lib/pack/menhirLib.mli", 487, 21595, 21638), 0), 0, Tag1 ("MenhirLib", 58)), 0)]), 0, (("lib/sentenceParser.mli", 29, 491, 491), ("lib/sentenceParser.mli", 36, 645, 648), 0), Tag1 ("Gbnf_parser__SentenceParser", 19)), 0, 0); Tag3 (("Incremental", 624), 0, (Tag1 ([(("grammar", 657), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Stdlib")), "Lexing"), "position"), 0, (0)), 100000000, 0, -185), (Tag3 (Tag1 ((("MenhirInterpreter", 623)), "checkpoint"), [(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Syntax"), "partial_grammar"), 0, (0)), 100000000, 0, -184)], (0)), 100000000, 0, -183), 0), 100000000, 0, -182), 0, (("lib/sentenceParser.mli", 42, 728, 730), ("lib/sentenceParser.mli", 42, 728, 815), 0), 0, Tag1 ("Gbnf_parser__SentenceParser", 20)), 0)]), 0, (("lib/sentenceParser.mli", 40, 700, 700), ("lib/sentenceParser.mli", 44, 819, 822), 0), Tag1 ("Gbnf_parser__SentenceParser", 21)), 0, 0)], "Gbnf_parser__SentenceParser", [("Gbnf_parser__SentenceParser", ("d/\219@P\191\017{Y\179q\154\241\242\155\253")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Queue", ("E\187(\001]E;(\021\n~\137\191\026\\\152")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_module_timer_runtime", ("\255\014\002\221+\150\189o\025\158\233y\t7\000\001")); ("Ppx_inline_test_lib", ("\218y\132\179\250\138\134,\155\143\192\163\025\218\"\217")); ("Ppx_bench_lib__Benchmark_accumulator", ("\149S\241hfpT\136F\251\018\140U\161\171^")); ("Ppx_bench_lib", ("\187\028\001\224\139H\014\148\179\0060<\016\134\190\"")); ("MenhirLib", ("A#\208S1j\151sK\211\012r3\r\022\150")); ("Inline_test_config", ("\\i\218(\228\139X\218\168\n-\152\158\165\2337")); ("Gbnf_parser__Syntax", ("\215+\240\173\189\025\030A\137\149\143\031\155\155_\018")); ("Gbnf_parser__StringSet", ("\146\021\224@\140\216\020JG\022]f\222\018\255\172")); ("Gbnf_parser__StringMap", ("\239\255\130\147\246\209\173{\025\211V\224\255%\223j")); ("Gbnf_parser__Stretch", ("J\225V\166i\1460\193\242\155<7\228DI\132")); ("Gbnf_parser__Positions", ("\249\007\250\253\136\226\1414\253\1861i\198\252\210\193")); ("Gbnf_parser__Misc", ("\217\219\222\202/\250t\000K?\133\192FG\255\182")); ("Gbnf_parser__Keyword", ("={\249-\191Ic\166\255\028\168\207ZD\150\234")); ("Gbnf_parser__InputFile", ("\207a\254(\237\174\184\166z\015\162z\n\166\167\162")); ("Gbnf_parser__IL", ("\183i>\023p\175A\128\204)\025&\155\017\r<")); ("Gbnf_parser__Generic", ("\203=\139\135\\\247F\155-*b{V\149\183\001")); ("Gbnf_parser__CodeBits", ("R\138p\165\021W\152\197C\142H\180\191\184\201\t")); ("Gbnf_parser__Action", ("Lg@\247\175\027/\138\217\241;\028\160E\250_")); ("Gbnf_parser", ("\017-\177\154_\152\247\179\232\028Y\187\182\219\217t")); ("Expect_test_config_types__Expect_test_config_types_intf", ("H\178\201K\2348\236h=\184\166\205\016\177\151,")); ("Expect_test_config_types__", ("\173E\156\232l\016P\n2\210\139\139\180\240_\145")); ("Expect_test_config_types", ("\1811\151S\164\189\028\209\222\2348[/\127\255*")); ("Expect_test_common__File", ("l\027\219\1577\028\236\134\224V\205\242R\210\182B")); ("Expect_test_common__Expectation", ("\255Z\156\189K\227\237l\003\135\031\251\242\149\242\154")); ("Expect_test_common__", (")\246.\002\031\\\027j1\136\161\149_\149>\030")); ("Expect_test_common", ("\235\234\220\143;\001\136?G\148\192\011\246\1479#")); ("Expect_test_collector__", ("\163,)1\228\170\155\143\208V\0236\023\172 \203")); ("Expect_test_collector", ("\224E}\232\250\137,=\151\170\227O\233\002\024\028")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Source_code_position", ("i\235\201'\004\215\194\157\004\174X9+b\0231")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [1; (0)])

  end
