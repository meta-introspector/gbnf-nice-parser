type t = {
  expr : Gbnf_parser.IL.expr;
  standard : bool;
  semvars : Gbnf_parser.StringSet.t;
  keywords : Gbnf_parser.Keyword.KeywordSet.t;
}
val from_stretch : Gbnf_parser.StringSet.t -> Gbnf_parser.Stretch.t -> t
val from_il_expr : Gbnf_parser.IL.expr -> t
val fv : Gbnf_parser.IL.expr -> Gbnf_parser.StringSet.t
val fv_aux :
  Gbnf_parser.StringSet.t -> Gbnf_parser.IL.expr -> Gbnf_parser.StringSet.t
val compose : Gbnf_parser.StringSet.elt -> t -> t -> t
val bind : Gbnf_parser.IL.pattern -> Gbnf_parser.StringSet.elt -> t -> t
val bv : Gbnf_parser.IL.pattern -> Gbnf_parser.StringSet.t
val bv_aux :
  Gbnf_parser.StringSet.t ->
  Gbnf_parser.IL.pattern -> Gbnf_parser.StringSet.t
val to_il_expr : t -> Gbnf_parser.IL.expr
val is_standard : t -> bool
val semvars : t -> Gbnf_parser.StringSet.t
val keywords : t -> Gbnf_parser.Keyword.KeywordSet.t
val has_syntaxerror : t -> bool
val has_beforeend : t -> bool
val posvars : t -> Gbnf_parser.StringSet.t
val vars : t -> Gbnf_parser.StringSet.t
val define :
  Gbnf_parser.Keyword.KeywordSet.elt ->
  Gbnf_parser.Keyword.KeywordSet.t ->
  (Gbnf_parser.IL.expr -> Gbnf_parser.IL.expr) -> t -> t
type subst = {
  semvar : (string * string) list;
  posvar : (string * string) list;
}
val empty : subst
val extend1 : 'a -> 'a -> ('a * 'a) list -> ('a * 'a) list
val extend_semvar : string -> string -> subst -> subst
val extend_posvar : string -> string -> subst -> subst
val extend : string -> string -> subst -> subst
val apply1 : ('a * 'a) list -> 'a -> 'a
val apply_semvar : subst -> string -> string
val apply_subject :
  subst -> Gbnf_parser.Keyword.subject -> Gbnf_parser.Keyword.subject
val bindings : subst -> (string * string) list
val restrict1 :
  Gbnf_parser.StringSet.t ->
  (Gbnf_parser.StringSet.elt * 'a) list ->
  (Gbnf_parser.StringSet.elt * 'a) list
val restrict_semvar : Gbnf_parser.StringSet.t -> subst -> subst
val rename_keyword :
  (Gbnf_parser.Keyword.subject * Gbnf_parser.Keyword.where ->
   (Gbnf_parser.Keyword.subject * Gbnf_parser.Keyword.where) option) ->
  subst ref -> Gbnf_parser.Keyword.keyword -> Gbnf_parser.Keyword.keyword
val rename :
  (Gbnf_parser.Keyword.subject * Gbnf_parser.Keyword.where ->
   (Gbnf_parser.Keyword.subject * Gbnf_parser.Keyword.where) option) ->
  ("DEBUG:rule", [Tag1 (("t", 1917), (0, 0, [[(("expr", 1169), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -160), (("lib/action.ml", 19, 1045, 1047), ("lib/action.ml", 19, 1045, 1061), 0), 0, Tag1 ("Gbnf_parser__Action", 1)); (("standard", 1170), 0, (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -161), (("lib/action.ml", 24, 1284, 1286), ("lib/action.ml", 24, 1284, 1301), 0), 0, Tag1 ("Gbnf_parser__Action", 2)); (("semvars", 1217), 0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -162), (("lib/action.ml", 28, 1422, 1424), ("lib/action.ml", 28, 1422, 1445), 0), 0, Tag1 ("Gbnf_parser__Action", 3)); (("keywords", 1272), 0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "KeywordSet"), "t"), 0, (0)), 100000000, 0, -163), (("lib/action.ml", 33, 1626, 1628), ("lib/action.ml", 33, 1626, 1653), 0), 0, Tag1 ("Gbnf_parser__Action", 4))]], 1, 0, 0, 0, 0, 0, (("lib/action.ml", 16, 990, 990), ("lib/action.ml", 35, 1655, 1656), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Action", 0)), 1, 0); (("from_stretch", 1918), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -159), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Stretch"), "t"), 0, (0)), 100000000, 0, -158), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -157), 0), 100000000, 0, -156), 0), 100000000, 0, -155), 0, (("lib/action.ml", 41, 1761, 1765), ("lib/action.ml", 41, 1761, 1777), 0), 0, Tag1 ("Gbnf_parser__Action", 5)), 0); (("from_il_expr", 1919), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -151), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -154), 0), 100000000, 0, -153), 0, (("lib/action.ml", 51, 1963, 1971), ("lib/action.ml", 51, 1963, 1983), 0), 0, Tag1 ("Gbnf_parser__Action", 8)), 0); (("fv", 1920), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -152), 0, (("lib/action.ml", 62, 2194, 2198), ("lib/action.ml", 62, 2194, 2200), 0), 0, Tag1 ("Gbnf_parser__Action", 9)), 0); (("fv_aux", 1921), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -150), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -151), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -150), 0), 100000000, 0, -149), 0), 100000000, 0, -148), 0, (("lib/action.ml", 65, 2233, 2237), ("lib/action.ml", 65, 2233, 2243), 0), 0, Tag1 ("Gbnf_parser__Action", 10)), 0); (("compose", 1922), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -147), (Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -146), (Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -145), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -144), 0), 100000000, 0, -143), 0), 100000000, 0, -142), 0), 100000000, 0, -141), 0, (("lib/action.ml", 86, 2929, 2933), ("lib/action.ml", 86, 2929, 2940), 0), 0, Tag1 ("Gbnf_parser__Action", 19)), 0); (("bind", 1923), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "pattern"), 0, (0)), 100000000, 0, -133), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -140), (Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -139), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -138), 0), 100000000, 0, -137), 0), 100000000, 0, -136), 0), 100000000, 0, -135), 0, (("lib/action.ml", 100, 3526, 3534), ("lib/action.ml", 100, 3526, 3538), 0), 0, Tag1 ("Gbnf_parser__Action", 23)), 0); (("bv", 1924), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "pattern"), 0, (0)), 100000000, 0, -133), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -134), 0, (("lib/action.ml", 111, 3863, 3867), ("lib/action.ml", 111, 3863, 3869), 0), 0, Tag1 ("Gbnf_parser__Action", 24)), 0); (("bv_aux", 1925), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -132), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "pattern"), 0, (0)), 100000000, 0, -133), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -132), 0), 100000000, 0, -131), 0), 100000000, 0, -130), 0, (("lib/action.ml", 114, 3902, 3906), ("lib/action.ml", 114, 3902, 3912), 0), 0, Tag1 ("Gbnf_parser__Action", 25)), 0); (("to_il_expr", 1926), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -129), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -128), 0), 100000000, 0, -127), 0, (("lib/action.ml", 130, 4221, 4225), ("lib/action.ml", 130, 4221, 4235), 0), 0, Tag1 ("Gbnf_parser__Action", 34)), 0); (("is_standard", 1927), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -126), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -125), 0), 100000000, 0, -124), 0, (("lib/action.ml", 133, 4260, 4264), ("lib/action.ml", 133, 4260, 4275), 0), 0, Tag1 ("Gbnf_parser__Action", 36)), 0); (("semvars", 1928), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -123), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -122), 0), 100000000, 0, -121), 0, (("lib/action.ml", 136, 4304, 4308), ("lib/action.ml", 136, 4304, 4315), 0), 0, Tag1 ("Gbnf_parser__Action", 38)), 0); (("keywords", 1929), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -120), (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "KeywordSet"), "t"), 0, (0)), 100000000, 0, -119), 0), 100000000, 0, -118), 0, (("lib/action.ml", 139, 4343, 4347), ("lib/action.ml", 139, 4343, 4355), 0), 0, Tag1 ("Gbnf_parser__Action", 40)), 0); (("has_syntaxerror", 1930), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -117), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -116), 0), 100000000, 0, -115), 0, (("lib/action.ml", 142, 4384, 4388), ("lib/action.ml", 142, 4384, 4403), 0), 0, Tag1 ("Gbnf_parser__Action", 42)), 0); (("has_beforeend", 1931), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -114), (Tag3 ((Tag3 ("bool", 5)), 0, (0)), 100000000, 0, -113), 0), 100000000, 0, -112), 0, (("lib/action.ml", 145, 4459, 4463), ("lib/action.ml", 145, 4459, 4476), 0), 0, Tag1 ("Gbnf_parser__Action", 44)), 0); (("posvars", 1932), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -111), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -110), 0), 100000000, 0, -109), 0, (("lib/action.ml", 148, 4566, 4570), ("lib/action.ml", 148, 4566, 4577), 0), 0, Tag1 ("Gbnf_parser__Action", 46)), 0); (("vars", 1933), ((Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -108), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -107), 0), 100000000, 0, -106), 0, (("lib/action.ml", 158, 4819, 4823), ("lib/action.ml", 158, 4819, 4827), 0), 0, Tag1 ("Gbnf_parser__Action", 54)), 0); (("define", 1934), ((Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "KeywordSet"), "elt"), 0, (0)), 100000000, 0, -105), (Tag1 (0, (Tag3 (Tag1 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "KeywordSet"), "t"), 0, (0)), 100000000, 0, -104), (Tag1 (0, (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -103), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "IL"), "expr"), 0, (0)), 100000000, 0, -103), (1)), 100000000, 0, -102), (Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -101), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -100), 0), 100000000, 0, -99), 0), 100000000, 0, -98), 0), 100000000, 0, -97), 0), 100000000, 0, -96), 0, (("lib/action.ml", 165, 5026, 5030), ("lib/action.ml", 165, 5026, 5036), 0), 0, Tag1 ("Gbnf_parser__Action", 56)), 0); Tag1 (("subst", 1935), (0, 0, [[(("semvar", 1836), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -90); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -91)]), 100000000, 0, -89)], (0)), 100000000, 0, -88), (("lib/action.ml", 186, 5815, 5819), ("lib/action.ml", 186, 5815, 5850), 0), 0, Tag1 ("Gbnf_parser__Action", 62)); (("posvar", 1837), 0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -94); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -95)]), 100000000, 0, -93)], (0)), 100000000, 0, -92), (("lib/action.ml", 187, 5851, 5855), ("lib/action.ml", 187, 5851, 5886), 0), 0, Tag1 ("Gbnf_parser__Action", 63))]], 1, 0, 0, 0, 0, 0, (("lib/action.ml", 184, 5798, 5798), ("lib/action.ml", 188, 5887, 5890), 0), 0, 0, 0, Tag1 ("Gbnf_parser__Action", 61)), 1, 0); (("empty", 1936), ((Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -87), 0, (("lib/action.ml", 190, 5892, 5896), ("lib/action.ml", 190, 5892, 5901), 0), 0, Tag1 ("Gbnf_parser__Action", 64)), 0); (("extend1", 1937), ((Tag1 (0, ((0), 100000000, 0, -86), (Tag1 (0, ((0), 100000000, 0, -86), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((0), 100000000, 0, -86); ((0), 100000000, 0, -86)]), 100000000, 0, -85)], (0)), 100000000, 0, -84), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((0), 100000000, 0, -86); ((0), 100000000, 0, -86)]), 100000000, 0, -85)], (0)), 100000000, 0, -84), 0), 100000000, 0, -83), 0), 100000000, 0, -82), 0), 100000000, 0, -81), 0, (("lib/action.ml", 193, 5936, 5940), ("lib/action.ml", 193, 5936, 5947), 0), 0, Tag1 ("Gbnf_parser__Action", 65)), 0); (("extend_semvar", 1938), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -80), (Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -79), (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -78), 0), 100000000, 0, -77), 0), 100000000, 0, -76), 0), 100000000, 0, -75), 0, (("lib/action.ml", 197, 6038, 6042), ("lib/action.ml", 197, 6038, 6055), 0), 0, Tag1 ("Gbnf_parser__Action", 69)), 0); (("extend_posvar", 1939), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -74), (Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -73), (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -72), 0), 100000000, 0, -71), 0), 100000000, 0, -70), 0), 100000000, 0, -69), 0, (("lib/action.ml", 200, 6124, 6128), ("lib/action.ml", 200, 6124, 6141), 0), 0, Tag1 ("Gbnf_parser__Action", 74)), 0); (("extend", 1940), ((Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -68), (Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -67), (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -66), 0), 100000000, 0, -65), 0), 100000000, 0, -64), 0), 100000000, 0, -63), 0, (("lib/action.ml", 203, 6210, 6214), ("lib/action.ml", 203, 6210, 6220), 0), 0, Tag1 ("Gbnf_parser__Action", 79)), 0); (("apply1", 1941), ((Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([((0), 100000000, 0, -60); ((0), 100000000, 0, -60)]), 100000000, 0, -62)], (0)), 100000000, 0, -61), (Tag1 (0, ((0), 100000000, 0, -60), ((0), 100000000, 0, -60), 0), 100000000, 0, -59), 0), 100000000, 0, -58), 0, (("lib/action.ml", 205, 6238, 6242), ("lib/action.ml", 205, 6238, 6248), 0), 0, Tag1 ("Gbnf_parser__Action", 80)), 0); (("apply_semvar", 1942), ((Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -57), (Tag1 (0, (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56), (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -56), 0), 100000000, 0, -55), 0), 100000000, 0, -54), 0, (("lib/action.ml", 208, 6301, 6305), ("lib/action.ml", 208, 6301, 6317), 0), 0, Tag1 ("Gbnf_parser__Action", 83)), 0); (("apply_subject", 1943), ((Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -53), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -52), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -52), 0), 100000000, 0, -51), 0), 100000000, 0, -50), 0, (("lib/action.ml", 211, 6349, 6353), ("lib/action.ml", 211, 6349, 6366), 0), 0, Tag1 ("Gbnf_parser__Action", 86)), 0); (("bindings", 1944), ((Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -49), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -47); (Tag3 ((Tag3 ("string", 15)), 0, (0)), 100000000, 0, -48)]), 100000000, 0, -46)], (0)), 100000000, 0, -45), 0), 100000000, 0, -44), 0, (("lib/action.ml", 219, 6498, 6502), ("lib/action.ml", 219, 6498, 6510), 0), 0, Tag1 ("Gbnf_parser__Action", 90)), 0); (("restrict1", 1945), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -43), (Tag1 (0, (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -40); ((0), 100000000, 0, -41)]), 100000000, 0, -39)], (0)), 100000000, 0, -42), (Tag3 ((Tag3 ("list", 9)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "elt"), 0, (0)), 100000000, 0, -40); ((0), 100000000, 0, -41)]), 100000000, 0, -39)], (0)), 100000000, 0, -38), 0), 100000000, 0, -37), 0), 100000000, 0, -36), 0, (("lib/action.ml", 222, 6544, 6548), ("lib/action.ml", 222, 6544, 6557), 0), 0, Tag1 ("Gbnf_parser__Action", 92)), 0); (("restrict_semvar", 1946), ((Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "StringSet"), "t"), 0, (0)), 100000000, 0, -35), (Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -34), (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -33), 0), 100000000, 0, -32), 0), 100000000, 0, -31), 0, (("lib/action.ml", 225, 6622, 6626), ("lib/action.ml", 225, 6622, 6641), 0), 0, Tag1 ("Gbnf_parser__Action", 97)), 0); (("rename_keyword", 1947), ((Tag1 (0, (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -29); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "where"), 0, (0)), 100000000, 0, -30)]), 100000000, 0, -28), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -26); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "where"), 0, (0)), 100000000, 0, -27)]), 100000000, 0, -25)], (0)), 100000000, 0, -24), (1)), 100000000, 0, -23), (Tag1 (0, (Tag3 (Tag1 ((Tag2 ("Stdlib")), "ref"), [(Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -22)], (0)), 100000000, 0, -21), (Tag1 (0, (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "keyword"), 0, (0)), 100000000, 0, -20), (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "keyword"), 0, (0)), 100000000, 0, -19), 0), 100000000, 0, -18), 0), 100000000, 0, -17), 0), 100000000, 0, -16), 0, (("lib/action.ml", 236, 7112, 7116), ("lib/action.ml", 236, 7112, 7130), 0), 0, Tag1 ("Gbnf_parser__Action", 101)), 0); (("rename", 1948), ((Tag1 (0, (Tag1 (0, (Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -14); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "where"), 0, (0)), 100000000, 0, -15)]), 100000000, 0, -13), (Tag3 ((Tag3 ("option", 10)), [(Tag2 ([(Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "subject"), 0, (0)), 100000000, 0, -11); (Tag3 (Tag1 (Tag1 ((Tag2 ("Gbnf_parser")), "Keyword"), "where"), 0, (0)), 100000000, 0, -12)]), 100000000, 0, -10)], (0)), 100000000, 0, -9), (1)), 100000000, 0, -8), (Tag1 (0, (Tag3 ((("subst", 1935)), 0, (0)), 100000000, 0, -7), (Tag1 (0, (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -6), (Tag3 ((("t", 1917)), 0, (0)), 100000000, 0, -5), 0), 100000000, 0, -4), 0), 100000000, 0, -3), 0), 100000000, 0, -2), 0, (("lib/action.ml", 255, 7668, 7672), ("lib/action.ml", 255, 7668, 7678), 0), 0, Tag1 ("Gbnf_parser__Action", 112)), 0)], "Gbnf_parser__Action", [("Gbnf_parser__Action", ("Lg@\247\175\027/\138\217\241;\028\160E\250_")); ("Stdlib__Uchar", ("\189\n\181\141\022k\137kQ\201Sc\030:9\197")); ("Stdlib__Sys", ("5C\bv\199\216\201)\bo\220\168\239\199>H")); ("Stdlib__StringLabels", ("\134F\024\226\216Is#\223\230\234\169Z\206Gc")); ("Stdlib__String", ("\141~|\209P5\220]\146\029\153\133\161\247\208\163")); ("Stdlib__StdLabels", (".\193\n\229\139\017\212C-ZA\\kz-\128")); ("Stdlib__Set", ("7|\\\133-\210\176\\d|\223\017\182o\146\171")); ("Stdlib__Seq", ("\228i\134Z1(\187\131\141\237X\149\233\233\229l")); ("Stdlib__Queue", ("E\187(\001]E;(\021\n~\137\191\026\\\152")); ("Stdlib__Printf", ("\215<\139]\021\142\224E\245m\198qc(W\229")); ("Stdlib__Printexc", ("\217u\168\235\179oi\167\235\255\025\017%d\192s")); ("Stdlib__Obj", ("\017\027P\240\207\204\138\148\210R\129\133g\254\137\027")); ("Stdlib__Nativeint", ("\167\207\224\147\233+\024lx\0055\142\141v\252\138")); ("Stdlib__MoreLabels", ("\248\232\248\254`<\230\241\161U\193U\1466J\238")); ("Stdlib__Map", ("\193\011\137as\170,TM\229U\178\142\233\000P")); ("Stdlib__ListLabels", ("*\194\012\191\020%\170\249m\002\180\178hk\205\220")); ("Stdlib__List", ("\137\146X\127&\164\235\254\165w$\144\178T\179(")); ("Stdlib__Lexing", ("\148\158(\240\224\249\130\129\173>Sa\200\224\163\196")); ("Stdlib__Lazy", ("\1479\177F\251W\183>\15140\213\255\214\197.")); ("Stdlib__Int64", ("@\131\210+\255\138\197\014D\252\211\025\244\201Z\031")); ("Stdlib__Int32", ("\248;\\\021<\200_/\205{`[Cd\to")); ("Stdlib__Hashtbl", ("\192HX\254\200gh\2475\187\130\178U-8h")); ("Stdlib__Format", ("\148\215\2499\234\007\000\024\174\164\005\134\243\025\164\238")); ("Stdlib__Either", ("Lz\172\233\0020\189\133M\ts\199\228V\239\b")); ("Stdlib__Domain", ("\021\235G\146\n\199fL\019C`\168{A\239(")); ("Stdlib__Bytes", ("C\134\194)\175\222\137p\205\246\244\r\241\164P\209")); ("Stdlib__Buffer", ("\017 \159E\224\025<e\221\243\250B\230,\163Q")); ("Stdlib__Array", ("R\228O\222\160>\1728\n\221\218\027\240\242\017 ")); ("Stdlib", ("\011EI\"\139\201\184\193\207\161\232\136\215C+\223")); ("Shadow_stdlib", ("\219zi\164\203\158e)\232\221\196\168\138x\142\018")); ("Sexplib0__Sexpable", ("\251${\207(\249/z\242\255\250^\141\156\210e")); ("Sexplib0__Sexp_grammar", ("\205z\198^\134\218\168\144~\172\248\192\214iO\148")); ("Sexplib0__Sexp_conv_grammar", ("\140\212\006\028'\025p\192T\170\155$\193X^\178")); ("Sexplib0__Sexp_conv_error", ("kzv!\151~\198P\000\165\176d\007\251p\232")); ("Sexplib0__Sexp_conv", ("\028\"9\167\026\182=_\006{\181S+\003\213\186")); ("Sexplib0__Sexp", ("3\246H)\220:\173a\222\233uu\168Aw\159")); ("Sexplib0__", ("\1283\"^\250\003\142\255Q\\C\210;@\196r")); ("Sexplib0", ("\218.\006\222\143\211\171<3\018\165\b|\021\188\002")); ("Ppx_module_timer_runtime", ("\255\014\002\221+\150\189o\025\158\233y\t7\000\001")); ("Ppx_inline_test_lib", ("\218y\132\179\250\138\134,\155\143\192\163\025\218\"\217")); ("Ppx_bench_lib__Benchmark_accumulator", ("\149S\241hfpT\136F\251\018\140U\161\171^")); ("Ppx_bench_lib", ("\187\028\001\224\139H\014\148\179\0060<\016\134\190\"")); ("MenhirLib", ("A#\208S1j\151sK\211\012r3\r\022\150")); ("Inline_test_config", ("\\i\218(\228\139X\218\168\n-\152\158\165\2337")); ("Gbnf_parser__StringSet", ("\146\021\224@\140\216\020JG\022]f\222\018\255\172")); ("Gbnf_parser__Stretch", ("J\225V\166i\1460\193\242\155<7\228DI\132")); ("Gbnf_parser__Positions", ("\249\007\250\253\136\226\1414\253\1861i\198\252\210\193")); ("Gbnf_parser__Misc", ("\217\219\222\202/\250t\000K?\133\192FG\255\182")); ("Gbnf_parser__Keyword", ("={\249-\191Ic\166\255\028\168\207ZD\150\234")); ("Gbnf_parser__IL", ("\183i>\023p\175A\128\204)\025&\155\017\r<")); ("Gbnf_parser__CodeBits", ("R\138p\165\021W\152\197C\142H\180\191\184\201\t")); ("Gbnf_parser", ("\017-\177\154_\152\247\179\232\028Y\187\182\219\217t")); ("Expect_test_config_types__Expect_test_config_types_intf", ("H\178\201K\2348\236h=\184\166\205\016\177\151,")); ("Expect_test_config_types__", ("\173E\156\232l\016P\n2\210\139\139\180\240_\145")); ("Expect_test_config_types", ("\1811\151S\164\189\028\209\222\2348[/\127\255*")); ("Expect_test_common__File", ("l\027\219\1577\028\236\134\224V\205\242R\210\182B")); ("Expect_test_common__Expectation", ("\255Z\156\189K\227\237l\003\135\031\251\242\149\242\154")); ("Expect_test_common__", (")\246.\002\031\\\027j1\136\161\149_\149>\030")); ("Expect_test_common", ("\235\234\220\143;\001\136?G\148\192\011\246\1479#")); ("Expect_test_collector__", ("\163,)1\228\170\155\143\208V\0236\023\172 \203")); ("Expect_test_collector", ("\224E}\232\250\137,=\151\170\227O\233\002\024\028")); ("CamlinternalLazy", ("$R\130\004\165\140)\018\167x\018\240\162C\152V")); ("CamlinternalFormatBasics", ("!%\242k\131\017S\201*D\240k\253\229p\174")); ("Base_internalhash_types", ("0\148#2\226\223\018\135\173>!\020\237\017\255\149")); ("Base__Unit", ("\247\n\178\171]m\169\231\139\171\148\189\254\236l'")); ("Base__T", ("+t\159\169\027\152\205\235\003\237\133\177\024\n6'")); ("Base__Sys0", ("\206z\231\154s\\\136\2364\131\005\014\031\152m3")); ("Base__Stringable", ("\170\025\162\136\234\162\n\161\1491>\145\210@\237t")); ("Base__String0", ("\212\221L\220\245\255\162P\228\224\189\216\135H\149O")); ("Base__String", ("|q\181\r\14787\130\127\191\025\137\203\217\250\196")); ("Base__Staged", ("\203J\011+\249\0115\1338\023\209\142\159\240V.")); ("Base__Source_code_position0", ("_\003P6\254\029\206\005\130\136\180\019\145\230\000M")); ("Base__Source_code_position", ("i\235\201'\004\215\194\157\004\174X9+b\0231")); ("Base__Sign_or_nan", ("\2287\251,\197\017qf\179Y\025h\190\131W%")); ("Base__Sign0", ("\152\138\204\175\244\128J\165\221\165\160\150y\1305i")); ("Base__Sign", ("^\255.Q;\215fi\134\192\182\241Z\2425l")); ("Base__Sexpable", ("\155?\169\178\246\242*\232\206\018Y\174\203h\217i")); ("Base__Sexp_with_comparable", ("\171\173\137y\1855\006y\146\248\141@@\191[W")); ("Base__Sexp", ("\154\187\171&\209=\153[\236\250!U\174`\190T")); ("Base__Sequence", ("{L\140\211\223\183\000\030\151\247FnY\196\210\201")); ("Base__Result", ("\204|\215\173FMa\2511<&\215T\194$\228")); ("Base__Ref", ("\250\254R\158s\203c\0025\029I6\149\179s\158")); ("Base__Random", (" \216\153fc\243\1430\155\211\169?\022\\\231\011")); ("Base__Printf", ("\000\196c,\214\127\226\174\220\190\253z!\242\028\250")); ("Base__Pretty_printer", ("\175\005\031\018\015a\159\220\154c'(a\239j\233")); ("Base__Ppx_hash_lib", ("\199\141\178\193\006\209L\007^\020(\131\224sn8")); ("Base__Ppx_enumerate_lib", ("G\171\178\012Em\142\235@\152fg\020\140~(")); ("Base__Ppx_compare_lib", ("\243\186~\233\228\199Ah\181.\223\004e\231\129S")); ("Base__Poly0", ("\230;\143\234\255.H\132KOe7\155\\\023f")); ("Base__Or_error", ("\193\133)\bO\210\2517\168*\203\148\143\200\127\177")); ("Base__Option", ("\242!\176\142\168\247\163Jg\0254\180\224\\A\210")); ("Base__Nativeint", ("\252/\181U\214\229\029?.\130\145\237\"qFj")); ("Base__Monad_intf", ("\208\203\163\152\184O\130?\012:\168\247}\018\253\155")); ("Base__Monad", ("!\244\168\2352=\137Lm\219\129K\216\199\145\\")); ("Base__List", ("}\029h\158/\153\229\161]0\224Y\003Z\250\210")); ("Base__Lazy", ("@`\165\196 \235)\136ANe:p\169$\185")); ("Base__Invariant_intf", ("\213\204\238\235\236[\198\145\028\2392\015\243\177S\249")); ("Base__Invariant", ("\135\153\136\\\129SD\228\202l\255\152\139\253\015\201")); ("Base__Intable", ("\028\249=Y\003]\231qd\238\172\004b\170\142\255")); ("Base__Int_intf", ("\238Q\2457\239\156\018\183J\015\240\178\193b\166@")); ("Base__Int64", ("\252B\186\239\245\155\209\227\136CIX@\189\003\029")); ("Base__Int63_emul", ("'\210s\232\177\204\254\024C\215\014\231\210\227n\235")); ("Base__Int63", ("\165\016\236\214m\014a\226A{\191\235@O\1695")); ("Base__Int32", ("\244*\172\133\227\025$@\180\027\024\132\195yO\027")); ("Base__Int0", ("N\1310\012\227\254\000\255_\222!\018\016\003\1779")); ("Base__Int", ("\165Z\179\140\230$\131\175\209\172\214\"\170\214{\250")); ("Base__Info_intf", ("\184\209'\173\251\219\167X|v\188]\190o5X")); ("Base__Info", ("-\011\149\203\248\030\2301\1907\1630\189\128\209\170")); ("Base__Indexed_container_intf", ("\179\2213\145j\\\136\tl2\240\006\188j$r")); ("Base__Indexed_container", ("\196\246\213\141\196d\130\002\232\162\144y\149\236\145\218")); ("Base__Import0", ("\156\129U\197Y[\\\153\017Ho\203\173\204\220\020")); ("Base__Import", ("\014\187\247\141\187\181\142g\176:s_,\181\219\209")); ("Base__Identifiable_intf", ("hK7}\187\129\022-r\233\241\192Q\161=j")); ("Base__Identifiable", ("L\020\162\189\228\217^\171\158H_\157\164c\130\242")); ("Base__Hashable_intf", ("\128\015G\244\135R\026\202\128F?)\193\004\195\181")); ("Base__Hashable", ("\027\187\158\245r}\018\193dbq\196\005\170g\252")); ("Base__Hash_intf", ("h\004P\218\1531G\127\212\208A\024\140\164iq")); ("Base__Hash", ("\206Rc\194\234{s3\248\165\024\162\203{\206\206")); ("Base__Globalize", ("<\243w~.\180\196t\159\193\174[\227\139\215G")); ("Base__Formatter", ("\193\149\030\140\154\1505b\162a`%\243\185'%")); ("Base__Floatable", ("\239\176\151\139\173ft(q\190\205\030C\170\197\177")); ("Base__Float", ("tR$\252\165\134g\024>\127\254\245\212-\018\141")); ("Base__Field", ("8In\234X\202\188G\186\208$\192\175\136\214v")); ("Base__Exn", ("?\191\202\221\228\185\154\127\240\191o\134\020\186b\173")); ("Base__Error", ("\199\218\231n\155/\159\156\146\247\148t\237\003\t\153")); ("Base__Equal", ("\193\217Z\127he\141N\000\1447\030\236%\131\b")); ("Base__Either0", ("!9-\011n\2077eZ\212\031c\227\029\206\t")); ("Base__Container_intf", ("\170vo*\208\209\141\219\196\168\236l\016\246\012c")); ("Base__Container", ("\191|>_\153W\235M\180uKz\214w`q")); ("Base__Comparisons", ("\196\196Y\"{\163~)\\G/\155:\004\141;")); ("Base__Comparator", ("\002\135z7b\025&\207\t\188\239&U3R\167")); ("Base__Comparable_intf", ("\252n\002\221\246\143r\235oJ\240\151\202\211\161\254")); ("Base__Comparable", (":\134'\156u#\215\225\129\191\162\229\200\185l\012")); ("Base__Char", ("\206\224\186\000'\157$\023\023\190\198{\250\141a\216")); ("Base__Bytes", ("\028\001\232X(\240\139\227s\152\156\138\023\030\r\188")); ("Base__Bool0", ("\177f\254p\023\143&\239\020\136\206\242~\018F\251")); ("Base__Bool", ("\162+\012Rx\183c\226\131\190@Z\016q\138@")); ("Base__Blit_intf", ("\171\129\t\214\130\131O\210\251F\228.\168\004Vo")); ("Base__Blit", ("}g\242\161\000\216\132\220\195\230C\002jg\234j")); ("Base__Binary_searchable_intf", ("/\213\237\209\200\192$w\158\234\169\148\012\221W\019")); ("Base__Binary_searchable", ("V\022B_\233\194\145K\248\233\025\175U\155i\197")); ("Base__Backtrace", ("\212~\253E\024|\228\141\015\169\012\006\022\0065\181")); ("Base__Array", ("P\252F\172\242{\241\226#uu\207\2068\218\015")); ("Base__Applicative_intf", ("J\176\203\159\235N(\235\027\232\198+\224\205*A")); ("Base__Applicative", ("\157\024\176\241a\165\204\133\003s3\214\007\131\244\n")); ("Base__", ("p\252\007\139\128\163W\025+\0225\001\246|P\158")); ("Base", ("\167SY\027Q9E\005r,\198\164\161\023\170\151"))], [1; (0)])
subst -> t -> t
