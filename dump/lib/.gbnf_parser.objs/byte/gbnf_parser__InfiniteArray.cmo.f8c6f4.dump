[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/InfiniteArray.ml[14,976+0]..[15,1046+33])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/InfiniteArray.ml[14,976+0]..[15,1046+33])
        Pstr_eval
        expression (lib/InfiniteArray.ml[14,976+0]..[15,1046+33])
          Pexp_constant PConst_string(" This module implements infinite arrays, that is, arrays that grow\n    transparently upon demand. ",(lib/InfiniteArray.ml[14,976+0]..[15,1046+33]),None)
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
                Pexp_constant PConst_string("lib/InfiniteArray.ml",(lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost
                Pexp_constant PConst_string("InfiniteArray.ml",(lib/InfiniteArray.ml[17,1081+0]..[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..[21,1219+3])
    Pstr_type Rec
    [
      type_declaration "t" (lib/InfiniteArray.ml[17,1081+8]..[17,1081+9]) (lib/InfiniteArray.ml[17,1081+0]..[21,1219+3])
        ptype_params =
          [
            core_type (lib/InfiniteArray.ml[17,1081+5]..[17,1081+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/InfiniteArray.ml[18,1095+4]..[18,1095+16])
                Immutable
                "default" (lib/InfiniteArray.ml[18,1095+4]..[18,1095+11])                core_type (lib/InfiniteArray.ml[18,1095+13]..[18,1095+15])
                  Ptyp_var a
              (lib/InfiniteArray.ml[19,1112+4]..[19,1112+28])
                Mutable
                "table" (lib/InfiniteArray.ml[19,1112+12]..[19,1112+17])                core_type (lib/InfiniteArray.ml[19,1112+19]..[19,1112+27])
                  Ptyp_constr "array" (lib/InfiniteArray.ml[19,1112+22]..[19,1112+27])
                  [
                    core_type (lib/InfiniteArray.ml[19,1112+19]..[19,1112+21])
                      Ptyp_var a
                  ]
              (lib/InfiniteArray.ml[20,1141+4]..[20,1141+24])
                Mutable
                "extent" (lib/InfiniteArray.ml[20,1141+12]..[20,1141+18])                core_type (lib/InfiniteArray.ml[20,1141+20]..[20,1141+23])
                  Ptyp_constr "int" (lib/InfiniteArray.ml[20,1141+20]..[20,1141+23])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/InfiniteArray.ml[23,1224+0]..[24,1243+7])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[23,1224+4]..[23,1224+16])
          Ppat_var "default_size" (lib/InfiniteArray.ml[23,1224+4]..[23,1224+16])
        expression (lib/InfiniteArray.ml[24,1243+2]..[24,1243+7])
          Pexp_constant PConst_int (16384,None)
    ]
  structure_item (lib/InfiniteArray.ml[26,1275+0]..[30,1356+1])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[26,1275+4]..[26,1275+8])
          Ppat_var "make" (lib/InfiniteArray.ml[26,1275+4]..[26,1275+8])
        expression (lib/InfiniteArray.ml[26,1275+9]..[30,1356+1]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[26,1275+9]..[26,1275+10])
            Ppat_var "x" (lib/InfiniteArray.ml[26,1275+9]..[26,1275+10])
          expression (lib/InfiniteArray.ml[26,1275+13]..[30,1356+1])
            Pexp_record
            [
              "default" (lib/InfiniteArray.ml[27,1290+2]..[27,1290+9])
                expression (lib/InfiniteArray.ml[27,1290+12]..[27,1290+13])
                  Pexp_ident "x" (lib/InfiniteArray.ml[27,1290+12]..[27,1290+13])
              "table" (lib/InfiniteArray.ml[28,1305+2]..[28,1305+7])
                expression (lib/InfiniteArray.ml[28,1305+10]..[28,1305+35])
                  Pexp_apply
                  expression (lib/InfiniteArray.ml[28,1305+10]..[28,1305+20])
                    Pexp_ident "Array.make" (lib/InfiniteArray.ml[28,1305+10]..[28,1305+20])
                  [
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[28,1305+21]..[28,1305+33])
                        Pexp_ident "default_size" (lib/InfiniteArray.ml[28,1305+21]..[28,1305+33])
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[28,1305+34]..[28,1305+35])
                        Pexp_ident "x" (lib/InfiniteArray.ml[28,1305+34]..[28,1305+35])
                  ]
              "extent" (lib/InfiniteArray.ml[29,1342+2]..[29,1342+8])
                expression (lib/InfiniteArray.ml[29,1342+11]..[29,1342+12])
                  Pexp_constant PConst_int (0,None)
            ]
            None
    ]
  structure_item (lib/InfiniteArray.ml[32,1359+0]..[36,1428+29])
    Pstr_value Rec
    [
      <def>
        pattern (lib/InfiniteArray.ml[32,1359+8]..[32,1359+18])
          Ppat_var "new_length" (lib/InfiniteArray.ml[32,1359+8]..[32,1359+18])
        expression (lib/InfiniteArray.ml[32,1359+19]..[36,1428+29]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[32,1359+19]..[32,1359+25])
            Ppat_var "length" (lib/InfiniteArray.ml[32,1359+19]..[32,1359+25])
          expression (lib/InfiniteArray.ml[32,1359+26]..[36,1428+29]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/InfiniteArray.ml[32,1359+26]..[32,1359+27])
              Ppat_var "i" (lib/InfiniteArray.ml[32,1359+26]..[32,1359+27])
            expression (lib/InfiniteArray.ml[33,1389+2]..[36,1428+29])
              Pexp_ifthenelse
              expression (lib/InfiniteArray.ml[33,1389+5]..[33,1389+15])
                Pexp_apply
                expression (lib/InfiniteArray.ml[33,1389+7]..[33,1389+8])
                  Pexp_ident "<" (lib/InfiniteArray.ml[33,1389+7]..[33,1389+8])
                [
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[33,1389+5]..[33,1389+6])
                      Pexp_ident "i" (lib/InfiniteArray.ml[33,1389+5]..[33,1389+6])
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[33,1389+9]..[33,1389+15])
                      Pexp_ident "length" (lib/InfiniteArray.ml[33,1389+9]..[33,1389+15])
                ]
              expression (lib/InfiniteArray.ml[34,1410+4]..[34,1410+10])
                Pexp_ident "length" (lib/InfiniteArray.ml[34,1410+4]..[34,1410+10])
              Some
                expression (lib/InfiniteArray.ml[36,1428+4]..[36,1428+29])
                  Pexp_apply
                  expression (lib/InfiniteArray.ml[36,1428+4]..[36,1428+14])
                    Pexp_ident "new_length" (lib/InfiniteArray.ml[36,1428+4]..[36,1428+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[36,1428+15]..[36,1428+27])
                        Pexp_apply
                        expression (lib/InfiniteArray.ml[36,1428+18]..[36,1428+19])
                          Pexp_ident "*" (lib/InfiniteArray.ml[36,1428+18]..[36,1428+19])
                        [
                          <arg>
                          Nolabel
                            expression (lib/InfiniteArray.ml[36,1428+16]..[36,1428+17])
                              Pexp_constant PConst_int (2,None)
                          <arg>
                          Nolabel
                            expression (lib/InfiniteArray.ml[36,1428+20]..[36,1428+26])
                              Pexp_ident "length" (lib/InfiniteArray.ml[36,1428+20]..[36,1428+26])
                        ]
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[36,1428+28]..[36,1428+29])
                        Pexp_ident "i" (lib/InfiniteArray.ml[36,1428+28]..[36,1428+29])
                  ]
    ]
  structure_item (lib/InfiniteArray.ml[38,1459+0]..[46,1716+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[38,1459+4]..[38,1459+10])
          Ppat_var "ensure" (lib/InfiniteArray.ml[38,1459+4]..[38,1459+10])
        expression (lib/InfiniteArray.ml[38,1459+11]..[46,1716+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[38,1459+11]..[38,1459+12])
            Ppat_var "a" (lib/InfiniteArray.ml[38,1459+11]..[38,1459+12])
          expression (lib/InfiniteArray.ml[38,1459+13]..[46,1716+5]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/InfiniteArray.ml[38,1459+13]..[38,1459+14])
              Ppat_var "i" (lib/InfiniteArray.ml[38,1459+13]..[38,1459+14])
            expression (lib/InfiniteArray.ml[39,1476+2]..[46,1716+5])
              Pexp_sequence
              expression (lib/InfiniteArray.ml[39,1476+2]..[39,1476+17])
                Pexp_assert
                expression (lib/InfiniteArray.ml[39,1476+9]..[39,1476+17])
                  Pexp_apply
                  expression (lib/InfiniteArray.ml[39,1476+12]..[39,1476+14])
                    Pexp_ident "<=" (lib/InfiniteArray.ml[39,1476+12]..[39,1476+14])
                  [
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[39,1476+10]..[39,1476+11])
                        Pexp_constant PConst_int (0,None)
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[39,1476+15]..[39,1476+16])
                        Pexp_ident "i" (lib/InfiniteArray.ml[39,1476+15]..[39,1476+16])
                  ]
              expression (lib/InfiniteArray.ml[40,1495+2]..[46,1716+5])
                Pexp_let Nonrec
                [
                  <def>
                    pattern (lib/InfiniteArray.ml[40,1495+6]..[40,1495+11])
                      Ppat_var "table" (lib/InfiniteArray.ml[40,1495+6]..[40,1495+11])
                    expression (lib/InfiniteArray.ml[40,1495+14]..[40,1495+21])
                      Pexp_field
                      expression (lib/InfiniteArray.ml[40,1495+14]..[40,1495+15])
                        Pexp_ident "a" (lib/InfiniteArray.ml[40,1495+14]..[40,1495+15])
                      "table" (lib/InfiniteArray.ml[40,1495+16]..[40,1495+21])
                ]
                expression (lib/InfiniteArray.ml[41,1520+2]..[46,1716+5])
                  Pexp_let Nonrec
                  [
                    <def>
                      pattern (lib/InfiniteArray.ml[41,1520+6]..[41,1520+12])
                        Ppat_var "length" (lib/InfiniteArray.ml[41,1520+6]..[41,1520+12])
                      expression (lib/InfiniteArray.ml[41,1520+15]..[41,1520+33])
                        Pexp_apply
                        expression (lib/InfiniteArray.ml[41,1520+15]..[41,1520+27])
                          Pexp_ident "Array.length" (lib/InfiniteArray.ml[41,1520+15]..[41,1520+27])
                        [
                          <arg>
                          Nolabel
                            expression (lib/InfiniteArray.ml[41,1520+28]..[41,1520+33])
                              Pexp_ident "table" (lib/InfiniteArray.ml[41,1520+28]..[41,1520+33])
                        ]
                  ]
                  expression (lib/InfiniteArray.ml[42,1557+2]..[46,1716+5])
                    Pexp_ifthenelse
                    expression (lib/InfiniteArray.ml[42,1557+5]..[42,1557+16])
                      Pexp_apply
                      expression (lib/InfiniteArray.ml[42,1557+7]..[42,1557+9])
                        Pexp_ident ">=" (lib/InfiniteArray.ml[42,1557+7]..[42,1557+9])
                      [
                        <arg>
                        Nolabel
                          expression (lib/InfiniteArray.ml[42,1557+5]..[42,1557+6])
                            Pexp_ident "i" (lib/InfiniteArray.ml[42,1557+5]..[42,1557+6])
                        <arg>
                        Nolabel
                          expression (lib/InfiniteArray.ml[42,1557+10]..[42,1557+16])
                            Pexp_ident "length" (lib/InfiniteArray.ml[42,1557+10]..[42,1557+16])
                      ]
                    expression (lib/InfiniteArray.ml[42,1557+22]..[46,1716+5])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/InfiniteArray.ml[43,1585+8]..[43,1585+14])
                            Ppat_var "table'" (lib/InfiniteArray.ml[43,1585+8]..[43,1585+14])
                          expression (lib/InfiniteArray.ml[43,1585+17]..[43,1585+65])
                            Pexp_apply
                            expression (lib/InfiniteArray.ml[43,1585+17]..[43,1585+27])
                              Pexp_ident "Array.make" (lib/InfiniteArray.ml[43,1585+17]..[43,1585+27])
                            [
                              <arg>
                              Nolabel
                                expression (lib/InfiniteArray.ml[43,1585+28]..[43,1585+55])
                                  Pexp_apply
                                  expression (lib/InfiniteArray.ml[43,1585+29]..[43,1585+39])
                                    Pexp_ident "new_length" (lib/InfiniteArray.ml[43,1585+29]..[43,1585+39])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/InfiniteArray.ml[43,1585+40]..[43,1585+52])
                                        Pexp_apply
                                        expression (lib/InfiniteArray.ml[43,1585+43]..[43,1585+44])
                                          Pexp_ident "*" (lib/InfiniteArray.ml[43,1585+43]..[43,1585+44])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/InfiniteArray.ml[43,1585+41]..[43,1585+42])
                                              Pexp_constant PConst_int (2,None)
                                          <arg>
                                          Nolabel
                                            expression (lib/InfiniteArray.ml[43,1585+45]..[43,1585+51])
                                              Pexp_ident "length" (lib/InfiniteArray.ml[43,1585+45]..[43,1585+51])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lib/InfiniteArray.ml[43,1585+53]..[43,1585+54])
                                        Pexp_ident "i" (lib/InfiniteArray.ml[43,1585+53]..[43,1585+54])
                                  ]
                              <arg>
                              Nolabel
                                expression (lib/InfiniteArray.ml[43,1585+56]..[43,1585+65])
                                  Pexp_field
                                  expression (lib/InfiniteArray.ml[43,1585+56]..[43,1585+57])
                                    Pexp_ident "a" (lib/InfiniteArray.ml[43,1585+56]..[43,1585+57])
                                  "default" (lib/InfiniteArray.ml[43,1585+58]..[43,1585+65])
                            ]
                      ]
                      expression (lib/InfiniteArray.ml[44,1654+4]..[45,1694+21])
                        Pexp_sequence
                        expression (lib/InfiniteArray.ml[44,1654+4]..[44,1654+38])
                          Pexp_apply
                          expression (lib/InfiniteArray.ml[44,1654+4]..[44,1654+14])
                            Pexp_ident "Array.blit" (lib/InfiniteArray.ml[44,1654+4]..[44,1654+14])
                          [
                            <arg>
                            Nolabel
                              expression (lib/InfiniteArray.ml[44,1654+15]..[44,1654+20])
                                Pexp_ident "table" (lib/InfiniteArray.ml[44,1654+15]..[44,1654+20])
                            <arg>
                            Nolabel
                              expression (lib/InfiniteArray.ml[44,1654+21]..[44,1654+22])
                                Pexp_constant PConst_int (0,None)
                            <arg>
                            Nolabel
                              expression (lib/InfiniteArray.ml[44,1654+23]..[44,1654+29])
                                Pexp_ident "table'" (lib/InfiniteArray.ml[44,1654+23]..[44,1654+29])
                            <arg>
                            Nolabel
                              expression (lib/InfiniteArray.ml[44,1654+30]..[44,1654+31])
                                Pexp_constant PConst_int (0,None)
                            <arg>
                            Nolabel
                              expression (lib/InfiniteArray.ml[44,1654+32]..[44,1654+38])
                                Pexp_ident "length" (lib/InfiniteArray.ml[44,1654+32]..[44,1654+38])
                          ]
                        expression (lib/InfiniteArray.ml[45,1694+4]..[45,1694+21])
                          Pexp_setfield
                          expression (lib/InfiniteArray.ml[45,1694+4]..[45,1694+5])
                            Pexp_ident "a" (lib/InfiniteArray.ml[45,1694+4]..[45,1694+5])
                          "table" (lib/InfiniteArray.ml[45,1694+6]..[45,1694+11])
                          expression (lib/InfiniteArray.ml[45,1694+15]..[45,1694+21])
                            Pexp_ident "table'" (lib/InfiniteArray.ml[45,1694+15]..[45,1694+21])
                    None
    ]
  structure_item (lib/InfiniteArray.ml[48,1723+0]..[50,1751+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[48,1723+4]..[48,1723+7])
          Ppat_var "get" (lib/InfiniteArray.ml[48,1723+4]..[48,1723+7])
        expression (lib/InfiniteArray.ml[48,1723+8]..[50,1751+30]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[48,1723+8]..[48,1723+9])
            Ppat_var "a" (lib/InfiniteArray.ml[48,1723+8]..[48,1723+9])
          expression (lib/InfiniteArray.ml[48,1723+10]..[50,1751+30]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/InfiniteArray.ml[48,1723+10]..[48,1723+11])
              Ppat_var "i" (lib/InfiniteArray.ml[48,1723+10]..[48,1723+11])
            expression (lib/InfiniteArray.ml[49,1737+2]..[50,1751+30])
              Pexp_sequence
              expression (lib/InfiniteArray.ml[49,1737+2]..[49,1737+12])
                Pexp_apply
                expression (lib/InfiniteArray.ml[49,1737+2]..[49,1737+8])
                  Pexp_ident "ensure" (lib/InfiniteArray.ml[49,1737+2]..[49,1737+8])
                [
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[49,1737+9]..[49,1737+10])
                      Pexp_ident "a" (lib/InfiniteArray.ml[49,1737+9]..[49,1737+10])
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[49,1737+11]..[49,1737+12])
                      Pexp_ident "i" (lib/InfiniteArray.ml[49,1737+11]..[49,1737+12])
                ]
              expression (lib/InfiniteArray.ml[50,1751+2]..[50,1751+30])
                Pexp_apply
                expression (lib/InfiniteArray.ml[50,1751+2]..[50,1751+18])
                  Pexp_ident "Array.unsafe_get" (lib/InfiniteArray.ml[50,1751+2]..[50,1751+18])
                [
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[50,1751+19]..[50,1751+26])
                      Pexp_field
                      expression (lib/InfiniteArray.ml[50,1751+19]..[50,1751+20])
                        Pexp_ident "a" (lib/InfiniteArray.ml[50,1751+19]..[50,1751+20])
                      "table" (lib/InfiniteArray.ml[50,1751+21]..[50,1751+26])
                  <arg>
                  Nolabel
                    expression (lib/InfiniteArray.ml[50,1751+27]..[50,1751+30])
                      Pexp_ident "i" (lib/InfiniteArray.ml[50,1751+28]..[50,1751+29])
                ]
    ]
  structure_item (lib/InfiniteArray.ml[52,1783+0]..[56,1871+21])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[52,1783+4]..[52,1783+7])
          Ppat_var "set" (lib/InfiniteArray.ml[52,1783+4]..[52,1783+7])
        expression (lib/InfiniteArray.ml[52,1783+8]..[56,1871+21]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[52,1783+8]..[52,1783+9])
            Ppat_var "a" (lib/InfiniteArray.ml[52,1783+8]..[52,1783+9])
          expression (lib/InfiniteArray.ml[52,1783+10]..[56,1871+21]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/InfiniteArray.ml[52,1783+10]..[52,1783+11])
              Ppat_var "i" (lib/InfiniteArray.ml[52,1783+10]..[52,1783+11])
            expression (lib/InfiniteArray.ml[52,1783+12]..[56,1871+21]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (lib/InfiniteArray.ml[52,1783+12]..[52,1783+13])
                Ppat_var "x" (lib/InfiniteArray.ml[52,1783+12]..[52,1783+13])
              expression (lib/InfiniteArray.ml[53,1799+2]..[56,1871+21])
                Pexp_sequence
                expression (lib/InfiniteArray.ml[53,1799+2]..[53,1799+12])
                  Pexp_apply
                  expression (lib/InfiniteArray.ml[53,1799+2]..[53,1799+8])
                    Pexp_ident "ensure" (lib/InfiniteArray.ml[53,1799+2]..[53,1799+8])
                  [
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[53,1799+9]..[53,1799+10])
                        Pexp_ident "a" (lib/InfiniteArray.ml[53,1799+9]..[53,1799+10])
                    <arg>
                    Nolabel
                      expression (lib/InfiniteArray.ml[53,1799+11]..[53,1799+12])
                        Pexp_ident "i" (lib/InfiniteArray.ml[53,1799+11]..[53,1799+12])
                  ]
                expression (lib/InfiniteArray.ml[54,1813+2]..[56,1871+21])
                  Pexp_sequence
                  expression (lib/InfiniteArray.ml[54,1813+2]..[54,1813+32])
                    Pexp_apply
                    expression (lib/InfiniteArray.ml[54,1813+2]..[54,1813+18])
                      Pexp_ident "Array.unsafe_set" (lib/InfiniteArray.ml[54,1813+2]..[54,1813+18])
                    [
                      <arg>
                      Nolabel
                        expression (lib/InfiniteArray.ml[54,1813+19]..[54,1813+26])
                          Pexp_field
                          expression (lib/InfiniteArray.ml[54,1813+19]..[54,1813+20])
                            Pexp_ident "a" (lib/InfiniteArray.ml[54,1813+19]..[54,1813+20])
                          "table" (lib/InfiniteArray.ml[54,1813+21]..[54,1813+26])
                      <arg>
                      Nolabel
                        expression (lib/InfiniteArray.ml[54,1813+27]..[54,1813+30])
                          Pexp_ident "i" (lib/InfiniteArray.ml[54,1813+28]..[54,1813+29])
                      <arg>
                      Nolabel
                        expression (lib/InfiniteArray.ml[54,1813+31]..[54,1813+32])
                          Pexp_ident "x" (lib/InfiniteArray.ml[54,1813+31]..[54,1813+32])
                    ]
                  expression (lib/InfiniteArray.ml[55,1847+2]..[56,1871+21])
                    Pexp_ifthenelse
                    expression (lib/InfiniteArray.ml[55,1847+5]..[55,1847+18])
                      Pexp_apply
                      expression (lib/InfiniteArray.ml[55,1847+14]..[55,1847+16])
                        Pexp_ident "<=" (lib/InfiniteArray.ml[55,1847+14]..[55,1847+16])
                      [
                        <arg>
                        Nolabel
                          expression (lib/InfiniteArray.ml[55,1847+5]..[55,1847+13])
                            Pexp_field
                            expression (lib/InfiniteArray.ml[55,1847+5]..[55,1847+6])
                              Pexp_ident "a" (lib/InfiniteArray.ml[55,1847+5]..[55,1847+6])
                            "extent" (lib/InfiniteArray.ml[55,1847+7]..[55,1847+13])
                        <arg>
                        Nolabel
                          expression (lib/InfiniteArray.ml[55,1847+17]..[55,1847+18])
                            Pexp_ident "i" (lib/InfiniteArray.ml[55,1847+17]..[55,1847+18])
                      ]
                    expression (lib/InfiniteArray.ml[56,1871+4]..[56,1871+21])
                      Pexp_setfield
                      expression (lib/InfiniteArray.ml[56,1871+4]..[56,1871+5])
                        Pexp_ident "a" (lib/InfiniteArray.ml[56,1871+4]..[56,1871+5])
                      "extent" (lib/InfiniteArray.ml[56,1871+6]..[56,1871+12])
                      expression (lib/InfiniteArray.ml[56,1871+16]..[56,1871+21])
                        Pexp_apply
                        expression (lib/InfiniteArray.ml[56,1871+18]..[56,1871+19])
                          Pexp_ident "+" (lib/InfiniteArray.ml[56,1871+18]..[56,1871+19])
                        [
                          <arg>
                          Nolabel
                            expression (lib/InfiniteArray.ml[56,1871+16]..[56,1871+17])
                              Pexp_ident "i" (lib/InfiniteArray.ml[56,1871+16]..[56,1871+17])
                          <arg>
                          Nolabel
                            expression (lib/InfiniteArray.ml[56,1871+20]..[56,1871+21])
                              Pexp_constant PConst_int (1,None)
                        ]
                    None
    ]
  structure_item (lib/InfiniteArray.ml[58,1894+0]..[59,1909+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[58,1894+4]..[58,1894+10])
          Ppat_var "extent" (lib/InfiniteArray.ml[58,1894+4]..[58,1894+10])
        expression (lib/InfiniteArray.ml[58,1894+11]..[59,1909+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[58,1894+11]..[58,1894+12])
            Ppat_var "a" (lib/InfiniteArray.ml[58,1894+11]..[58,1894+12])
          expression (lib/InfiniteArray.ml[59,1909+2]..[59,1909+10])
            Pexp_field
            expression (lib/InfiniteArray.ml[59,1909+2]..[59,1909+3])
              Pexp_ident "a" (lib/InfiniteArray.ml[59,1909+2]..[59,1909+3])
            "extent" (lib/InfiniteArray.ml[59,1909+4]..[59,1909+10])
    ]
  structure_item (lib/InfiniteArray.ml[61,1921+0]..[62,1936+30])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[61,1921+4]..[61,1921+10])
          Ppat_var "domain" (lib/InfiniteArray.ml[61,1921+4]..[61,1921+10])
        expression (lib/InfiniteArray.ml[61,1921+11]..[62,1936+30]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/InfiniteArray.ml[61,1921+11]..[61,1921+12])
            Ppat_var "a" (lib/InfiniteArray.ml[61,1921+11]..[61,1921+12])
          expression (lib/InfiniteArray.ml[62,1936+2]..[62,1936+30])
            Pexp_apply
            expression (lib/InfiniteArray.ml[62,1936+2]..[62,1936+11])
              Pexp_ident "Array.sub" (lib/InfiniteArray.ml[62,1936+2]..[62,1936+11])
            [
              <arg>
              Nolabel
                expression (lib/InfiniteArray.ml[62,1936+12]..[62,1936+19])
                  Pexp_field
                  expression (lib/InfiniteArray.ml[62,1936+12]..[62,1936+13])
                    Pexp_ident "a" (lib/InfiniteArray.ml[62,1936+12]..[62,1936+13])
                  "table" (lib/InfiniteArray.ml[62,1936+14]..[62,1936+19])
              <arg>
              Nolabel
                expression (lib/InfiniteArray.ml[62,1936+20]..[62,1936+21])
                  Pexp_constant PConst_int (0,None)
              <arg>
              Nolabel
                expression (lib/InfiniteArray.ml[62,1936+22]..[62,1936+30])
                  Pexp_field
                  expression (lib/InfiniteArray.ml[62,1936+22]..[62,1936+23])
                    Pexp_ident "a" (lib/InfiniteArray.ml[62,1936+22]..[62,1936+23])
                  "extent" (lib/InfiniteArray.ml[62,1936+24]..[62,1936+30])
            ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                Pexp_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                None
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                Pexp_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                None
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Ppat_construct "()" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          Pexp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          [
            <arg>
            Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/InfiniteArray.ml[62,1936+30]..[62,1936+30]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
[@@@ocaml.text
  " This module implements infinite arrays, that is, arrays that grow\n    transparently upon demand. "]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/InfiniteArray.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "InfiniteArray.ml"
type 'a t = {
  default: 'a ;
  mutable table: 'a array ;
  mutable extent: int }
let default_size = 16384
let make x = { default = x; table = (Array.make default_size x); extent = 0 }
let rec new_length length i =
  if i < length then length else new_length (2 * length) i
let ensure a i =
  assert (0 <= i);
  (let table = a.table in
   let length = Array.length table in
   if i >= length
   then
     let table' = Array.make (new_length (2 * length) i) a.default in
     (Array.blit table 0 table' 0 length; a.table <- table'))
let get a i = ensure a i; Array.unsafe_get a.table i
let set a i x =
  ensure a i;
  Array.unsafe_set a.table i x;
  if a.extent <= i then a.extent <- (i + 1)
let extent a = a.extent
let domain a = Array.sub a.table 0 a.extent
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/InfiniteArray.ml[14,976+0]..lib/InfiniteArray.ml[15,1046+33])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/InfiniteArray.ml[14,976+0]..[15,1046+33])
        Pstr_eval
        expression (lib/InfiniteArray.ml[14,976+0]..[15,1046+33])
          Pexp_constant PConst_string(" This module implements infinite arrays, that is, arrays that grow\n    transparently upon demand. ",(lib/InfiniteArray.ml[14,976+0]..[15,1046+33]),None)
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
                Texp_constant Const_string("lib/InfiniteArray.ml",(lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost
                Texp_constant Const_string("InfiniteArray.ml",(lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[17,1081+0]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[21,1219+3])
    Tstr_type Rec
    [
      type_declaration t/1128 (lib/InfiniteArray.ml[17,1081+0]..lib/InfiniteArray.ml[21,1219+3])
        ptype_params =
          [
            core_type (lib/InfiniteArray.ml[17,1081+5]..lib/InfiniteArray.ml[17,1081+7])
              Ttyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/InfiniteArray.ml[18,1095+4]..lib/InfiniteArray.ml[18,1095+16])
                Immutable
                default/1129                core_type (lib/InfiniteArray.ml[18,1095+13]..lib/InfiniteArray.ml[18,1095+15])
                  Ttyp_poly
                  core_type (lib/InfiniteArray.ml[18,1095+13]..lib/InfiniteArray.ml[18,1095+15])
                    Ttyp_var a
              (lib/InfiniteArray.ml[19,1112+4]..lib/InfiniteArray.ml[19,1112+28])
                Mutable
                table/1130                core_type (lib/InfiniteArray.ml[19,1112+19]..lib/InfiniteArray.ml[19,1112+27])
                  Ttyp_poly
                  core_type (lib/InfiniteArray.ml[19,1112+19]..lib/InfiniteArray.ml[19,1112+27])
                    Ttyp_constr "array/8!"
                    [
                      core_type (lib/InfiniteArray.ml[19,1112+19]..lib/InfiniteArray.ml[19,1112+21])
                        Ttyp_var a
                    ]
              (lib/InfiniteArray.ml[20,1141+4]..lib/InfiniteArray.ml[20,1141+24])
                Mutable
                extent/1131                core_type (lib/InfiniteArray.ml[20,1141+20]..lib/InfiniteArray.ml[20,1141+23])
                  Ttyp_poly
                  core_type (lib/InfiniteArray.ml[20,1141+20]..lib/InfiniteArray.ml[20,1141+23])
                    Ttyp_constr "int/1!"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/InfiniteArray.ml[23,1224+0]..lib/InfiniteArray.ml[24,1243+7])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[23,1224+4]..lib/InfiniteArray.ml[23,1224+16])
          Tpat_var "default_size/1132"
        expression (lib/InfiniteArray.ml[24,1243+2]..lib/InfiniteArray.ml[24,1243+7])
          Texp_constant Const_int 16384
    ]
  structure_item (lib/InfiniteArray.ml[26,1275+0]..lib/InfiniteArray.ml[30,1356+1])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[26,1275+4]..lib/InfiniteArray.ml[26,1275+8])
          Tpat_var "make/1133"
        expression (lib/InfiniteArray.ml[26,1275+9]..lib/InfiniteArray.ml[30,1356+1]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[26,1275+9]..lib/InfiniteArray.ml[26,1275+10])
                Tpat_var "x/1135"
              expression (lib/InfiniteArray.ml[26,1275+13]..lib/InfiniteArray.ml[30,1356+1])
                Texp_record
                  fields =
                    [
                      "default"
                        expression (lib/InfiniteArray.ml[27,1290+12]..lib/InfiniteArray.ml[27,1290+13])
                          Texp_ident "x/1135"
                      "table"
                        expression (lib/InfiniteArray.ml[28,1305+10]..lib/InfiniteArray.ml[28,1305+35])
                          Texp_apply
                          expression (lib/InfiniteArray.ml[28,1305+10]..lib/InfiniteArray.ml[28,1305+20])
                            Texp_ident "Stdlib!.Array.make"
                          [
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[28,1305+21]..lib/InfiniteArray.ml[28,1305+33])
                                Texp_ident "default_size/1132"
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[28,1305+34]..lib/InfiniteArray.ml[28,1305+35])
                                Texp_ident "x/1135"
                          ]
                      "extent"
                        expression (lib/InfiniteArray.ml[29,1342+11]..lib/InfiniteArray.ml[29,1342+12])
                          Texp_constant Const_int 0
                    ]
                  representation =
                    Record_regular
                  extended_expression =
                    None
          ]
    ]
  structure_item (lib/InfiniteArray.ml[32,1359+0]..lib/InfiniteArray.ml[36,1428+29])
    Tstr_value Rec
    [
      <def>
        pattern (lib/InfiniteArray.ml[32,1359+8]..lib/InfiniteArray.ml[32,1359+18])
          Tpat_var "new_length/1183"
        expression (lib/InfiniteArray.ml[32,1359+19]..lib/InfiniteArray.ml[36,1428+29]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[32,1359+19]..lib/InfiniteArray.ml[32,1359+25])
                Tpat_var "length/1184"
              expression (lib/InfiniteArray.ml[32,1359+26]..lib/InfiniteArray.ml[36,1428+29]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/InfiniteArray.ml[32,1359+26]..lib/InfiniteArray.ml[32,1359+27])
                      Tpat_var "i/1185"
                    expression (lib/InfiniteArray.ml[33,1389+2]..lib/InfiniteArray.ml[36,1428+29])
                      Texp_ifthenelse
                      expression (lib/InfiniteArray.ml[33,1389+5]..lib/InfiniteArray.ml[33,1389+15])
                        Texp_apply
                        expression (lib/InfiniteArray.ml[33,1389+7]..lib/InfiniteArray.ml[33,1389+8])
                          Texp_ident "Stdlib!.<"
                        [
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[33,1389+5]..lib/InfiniteArray.ml[33,1389+6])
                              Texp_ident "i/1185"
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[33,1389+9]..lib/InfiniteArray.ml[33,1389+15])
                              Texp_ident "length/1184"
                        ]
                      expression (lib/InfiniteArray.ml[34,1410+4]..lib/InfiniteArray.ml[34,1410+10])
                        Texp_ident "length/1184"
                      Some
                        expression (lib/InfiniteArray.ml[36,1428+4]..lib/InfiniteArray.ml[36,1428+29])
                          Texp_apply
                          expression (lib/InfiniteArray.ml[36,1428+4]..lib/InfiniteArray.ml[36,1428+14])
                            Texp_ident "new_length/1183"
                          [
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[36,1428+15]..lib/InfiniteArray.ml[36,1428+27])
                                Texp_apply
                                expression (lib/InfiniteArray.ml[36,1428+18]..lib/InfiniteArray.ml[36,1428+19])
                                  Texp_ident "Stdlib!.*"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[36,1428+16]..lib/InfiniteArray.ml[36,1428+17])
                                      Texp_constant Const_int 2
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[36,1428+20]..lib/InfiniteArray.ml[36,1428+26])
                                      Texp_ident "length/1184"
                                ]
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[36,1428+28]..lib/InfiniteArray.ml[36,1428+29])
                                Texp_ident "i/1185"
                          ]
                ]
          ]
    ]
  structure_item (lib/InfiniteArray.ml[38,1459+0]..lib/InfiniteArray.ml[46,1716+5])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[38,1459+4]..lib/InfiniteArray.ml[38,1459+10])
          Tpat_var "ensure/1186"
        expression (lib/InfiniteArray.ml[38,1459+11]..lib/InfiniteArray.ml[46,1716+5]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[38,1459+11]..lib/InfiniteArray.ml[38,1459+12])
                Tpat_var "a/1188"
              expression (lib/InfiniteArray.ml[38,1459+13]..lib/InfiniteArray.ml[46,1716+5]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/InfiniteArray.ml[38,1459+13]..lib/InfiniteArray.ml[38,1459+14])
                      Tpat_var "i/1189"
                    expression (lib/InfiniteArray.ml[39,1476+2]..lib/InfiniteArray.ml[46,1716+5])
                      Texp_sequence
                      expression (lib/InfiniteArray.ml[39,1476+2]..lib/InfiniteArray.ml[39,1476+17])
                        Texp_assert                        expression (lib/InfiniteArray.ml[39,1476+9]..lib/InfiniteArray.ml[39,1476+17])
                          Texp_apply
                          expression (lib/InfiniteArray.ml[39,1476+12]..lib/InfiniteArray.ml[39,1476+14])
                            Texp_ident "Stdlib!.<="
                          [
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[39,1476+10]..lib/InfiniteArray.ml[39,1476+11])
                                Texp_constant Const_int 0
                            <arg>
                              Nolabel
                              expression (lib/InfiniteArray.ml[39,1476+15]..lib/InfiniteArray.ml[39,1476+16])
                                Texp_ident "i/1189"
                          ]
                      expression (lib/InfiniteArray.ml[40,1495+2]..lib/InfiniteArray.ml[46,1716+5])
                        Texp_let Nonrec
                        [
                          <def>
                            pattern (lib/InfiniteArray.ml[40,1495+6]..lib/InfiniteArray.ml[40,1495+11])
                              Tpat_var "table/1190"
                            expression (lib/InfiniteArray.ml[40,1495+14]..lib/InfiniteArray.ml[40,1495+21])
                              Texp_field
                              expression (lib/InfiniteArray.ml[40,1495+14]..lib/InfiniteArray.ml[40,1495+15])
                                Texp_ident "a/1188"
                              "table"
                        ]
                        expression (lib/InfiniteArray.ml[41,1520+2]..lib/InfiniteArray.ml[46,1716+5])
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (lib/InfiniteArray.ml[41,1520+6]..lib/InfiniteArray.ml[41,1520+12])
                                Tpat_var "length/1191"
                              expression (lib/InfiniteArray.ml[41,1520+15]..lib/InfiniteArray.ml[41,1520+33])
                                Texp_apply
                                expression (lib/InfiniteArray.ml[41,1520+15]..lib/InfiniteArray.ml[41,1520+27])
                                  Texp_ident "Stdlib!.Array.length"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[41,1520+28]..lib/InfiniteArray.ml[41,1520+33])
                                      Texp_ident "table/1190"
                                ]
                          ]
                          expression (lib/InfiniteArray.ml[42,1557+2]..lib/InfiniteArray.ml[46,1716+5])
                            Texp_ifthenelse
                            expression (lib/InfiniteArray.ml[42,1557+5]..lib/InfiniteArray.ml[42,1557+16])
                              Texp_apply
                              expression (lib/InfiniteArray.ml[42,1557+7]..lib/InfiniteArray.ml[42,1557+9])
                                Texp_ident "Stdlib!.>="
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/InfiniteArray.ml[42,1557+5]..lib/InfiniteArray.ml[42,1557+6])
                                    Texp_ident "i/1189"
                                <arg>
                                  Nolabel
                                  expression (lib/InfiniteArray.ml[42,1557+10]..lib/InfiniteArray.ml[42,1557+16])
                                    Texp_ident "length/1191"
                              ]
                            expression (lib/InfiniteArray.ml[42,1557+22]..lib/InfiniteArray.ml[46,1716+5])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/InfiniteArray.ml[43,1585+8]..lib/InfiniteArray.ml[43,1585+14])
                                    Tpat_var "table'/1192"
                                  expression (lib/InfiniteArray.ml[43,1585+17]..lib/InfiniteArray.ml[43,1585+65])
                                    Texp_apply
                                    expression (lib/InfiniteArray.ml[43,1585+17]..lib/InfiniteArray.ml[43,1585+27])
                                      Texp_ident "Stdlib!.Array.make"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/InfiniteArray.ml[43,1585+28]..lib/InfiniteArray.ml[43,1585+55])
                                          Texp_apply
                                          expression (lib/InfiniteArray.ml[43,1585+29]..lib/InfiniteArray.ml[43,1585+39])
                                            Texp_ident "new_length/1183"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/InfiniteArray.ml[43,1585+40]..lib/InfiniteArray.ml[43,1585+52])
                                                Texp_apply
                                                expression (lib/InfiniteArray.ml[43,1585+43]..lib/InfiniteArray.ml[43,1585+44])
                                                  Texp_ident "Stdlib!.*"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/InfiniteArray.ml[43,1585+41]..lib/InfiniteArray.ml[43,1585+42])
                                                      Texp_constant Const_int 2
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/InfiniteArray.ml[43,1585+45]..lib/InfiniteArray.ml[43,1585+51])
                                                      Texp_ident "length/1191"
                                                ]
                                            <arg>
                                              Nolabel
                                              expression (lib/InfiniteArray.ml[43,1585+53]..lib/InfiniteArray.ml[43,1585+54])
                                                Texp_ident "i/1189"
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (lib/InfiniteArray.ml[43,1585+56]..lib/InfiniteArray.ml[43,1585+65])
                                          Texp_field
                                          expression (lib/InfiniteArray.ml[43,1585+56]..lib/InfiniteArray.ml[43,1585+57])
                                            Texp_ident "a/1188"
                                          "default"
                                    ]
                              ]
                              expression (lib/InfiniteArray.ml[44,1654+4]..lib/InfiniteArray.ml[45,1694+21])
                                Texp_sequence
                                expression (lib/InfiniteArray.ml[44,1654+4]..lib/InfiniteArray.ml[44,1654+38])
                                  Texp_apply
                                  expression (lib/InfiniteArray.ml[44,1654+4]..lib/InfiniteArray.ml[44,1654+14])
                                    Texp_ident "Stdlib!.Array.blit"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[44,1654+15]..lib/InfiniteArray.ml[44,1654+20])
                                        Texp_ident "table/1190"
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[44,1654+21]..lib/InfiniteArray.ml[44,1654+22])
                                        Texp_constant Const_int 0
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[44,1654+23]..lib/InfiniteArray.ml[44,1654+29])
                                        Texp_ident "table'/1192"
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[44,1654+30]..lib/InfiniteArray.ml[44,1654+31])
                                        Texp_constant Const_int 0
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[44,1654+32]..lib/InfiniteArray.ml[44,1654+38])
                                        Texp_ident "length/1191"
                                  ]
                                expression (lib/InfiniteArray.ml[45,1694+4]..lib/InfiniteArray.ml[45,1694+21])
                                  Texp_setfield
                                  expression (lib/InfiniteArray.ml[45,1694+4]..lib/InfiniteArray.ml[45,1694+5])
                                    Texp_ident "a/1188"
                                  "table"
                                  expression (lib/InfiniteArray.ml[45,1694+15]..lib/InfiniteArray.ml[45,1694+21])
                                    Texp_ident "table'/1192"
                            None
                ]
          ]
    ]
  structure_item (lib/InfiniteArray.ml[48,1723+0]..lib/InfiniteArray.ml[50,1751+30])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[48,1723+4]..lib/InfiniteArray.ml[48,1723+7])
          Tpat_var "get/1193"
        expression (lib/InfiniteArray.ml[48,1723+8]..lib/InfiniteArray.ml[50,1751+30]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[48,1723+8]..lib/InfiniteArray.ml[48,1723+9])
                Tpat_var "a/1195"
              expression (lib/InfiniteArray.ml[48,1723+10]..lib/InfiniteArray.ml[50,1751+30]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/InfiniteArray.ml[48,1723+10]..lib/InfiniteArray.ml[48,1723+11])
                      Tpat_var "i/1196"
                    expression (lib/InfiniteArray.ml[49,1737+2]..lib/InfiniteArray.ml[50,1751+30])
                      Texp_sequence
                      expression (lib/InfiniteArray.ml[49,1737+2]..lib/InfiniteArray.ml[49,1737+12])
                        Texp_apply
                        expression (lib/InfiniteArray.ml[49,1737+2]..lib/InfiniteArray.ml[49,1737+8])
                          Texp_ident "ensure/1186"
                        [
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[49,1737+9]..lib/InfiniteArray.ml[49,1737+10])
                              Texp_ident "a/1195"
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[49,1737+11]..lib/InfiniteArray.ml[49,1737+12])
                              Texp_ident "i/1196"
                        ]
                      expression (lib/InfiniteArray.ml[50,1751+2]..lib/InfiniteArray.ml[50,1751+30])
                        Texp_apply
                        expression (lib/InfiniteArray.ml[50,1751+2]..lib/InfiniteArray.ml[50,1751+18])
                          Texp_ident "Stdlib!.Array.unsafe_get"
                        [
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[50,1751+19]..lib/InfiniteArray.ml[50,1751+26])
                              Texp_field
                              expression (lib/InfiniteArray.ml[50,1751+19]..lib/InfiniteArray.ml[50,1751+20])
                                Texp_ident "a/1195"
                              "table"
                          <arg>
                            Nolabel
                            expression (lib/InfiniteArray.ml[50,1751+27]..lib/InfiniteArray.ml[50,1751+30])
                              Texp_ident "i/1196"
                        ]
                ]
          ]
    ]
  structure_item (lib/InfiniteArray.ml[52,1783+0]..lib/InfiniteArray.ml[56,1871+21])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[52,1783+4]..lib/InfiniteArray.ml[52,1783+7])
          Tpat_var "set/1197"
        expression (lib/InfiniteArray.ml[52,1783+8]..lib/InfiniteArray.ml[56,1871+21]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[52,1783+8]..lib/InfiniteArray.ml[52,1783+9])
                Tpat_var "a/1199"
              expression (lib/InfiniteArray.ml[52,1783+10]..lib/InfiniteArray.ml[56,1871+21]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/InfiniteArray.ml[52,1783+10]..lib/InfiniteArray.ml[52,1783+11])
                      Tpat_var "i/1200"
                    expression (lib/InfiniteArray.ml[52,1783+12]..lib/InfiniteArray.ml[56,1871+21]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/InfiniteArray.ml[52,1783+12]..lib/InfiniteArray.ml[52,1783+13])
                            Tpat_var "x/1201"
                          expression (lib/InfiniteArray.ml[53,1799+2]..lib/InfiniteArray.ml[56,1871+21])
                            Texp_sequence
                            expression (lib/InfiniteArray.ml[53,1799+2]..lib/InfiniteArray.ml[53,1799+12])
                              Texp_apply
                              expression (lib/InfiniteArray.ml[53,1799+2]..lib/InfiniteArray.ml[53,1799+8])
                                Texp_ident "ensure/1186"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/InfiniteArray.ml[53,1799+9]..lib/InfiniteArray.ml[53,1799+10])
                                    Texp_ident "a/1199"
                                <arg>
                                  Nolabel
                                  expression (lib/InfiniteArray.ml[53,1799+11]..lib/InfiniteArray.ml[53,1799+12])
                                    Texp_ident "i/1200"
                              ]
                            expression (lib/InfiniteArray.ml[54,1813+2]..lib/InfiniteArray.ml[56,1871+21])
                              Texp_sequence
                              expression (lib/InfiniteArray.ml[54,1813+2]..lib/InfiniteArray.ml[54,1813+32])
                                Texp_apply
                                expression (lib/InfiniteArray.ml[54,1813+2]..lib/InfiniteArray.ml[54,1813+18])
                                  Texp_ident "Stdlib!.Array.unsafe_set"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[54,1813+19]..lib/InfiniteArray.ml[54,1813+26])
                                      Texp_field
                                      expression (lib/InfiniteArray.ml[54,1813+19]..lib/InfiniteArray.ml[54,1813+20])
                                        Texp_ident "a/1199"
                                      "table"
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[54,1813+27]..lib/InfiniteArray.ml[54,1813+30])
                                      Texp_ident "i/1200"
                                  <arg>
                                    Nolabel
                                    expression (lib/InfiniteArray.ml[54,1813+31]..lib/InfiniteArray.ml[54,1813+32])
                                      Texp_ident "x/1201"
                                ]
                              expression (lib/InfiniteArray.ml[55,1847+2]..lib/InfiniteArray.ml[56,1871+21])
                                Texp_ifthenelse
                                expression (lib/InfiniteArray.ml[55,1847+5]..lib/InfiniteArray.ml[55,1847+18])
                                  Texp_apply
                                  expression (lib/InfiniteArray.ml[55,1847+14]..lib/InfiniteArray.ml[55,1847+16])
                                    Texp_ident "Stdlib!.<="
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[55,1847+5]..lib/InfiniteArray.ml[55,1847+13])
                                        Texp_field
                                        expression (lib/InfiniteArray.ml[55,1847+5]..lib/InfiniteArray.ml[55,1847+6])
                                          Texp_ident "a/1199"
                                        "extent"
                                    <arg>
                                      Nolabel
                                      expression (lib/InfiniteArray.ml[55,1847+17]..lib/InfiniteArray.ml[55,1847+18])
                                        Texp_ident "i/1200"
                                  ]
                                expression (lib/InfiniteArray.ml[56,1871+4]..lib/InfiniteArray.ml[56,1871+21])
                                  Texp_setfield
                                  expression (lib/InfiniteArray.ml[56,1871+4]..lib/InfiniteArray.ml[56,1871+5])
                                    Texp_ident "a/1199"
                                  "extent"
                                  expression (lib/InfiniteArray.ml[56,1871+16]..lib/InfiniteArray.ml[56,1871+21])
                                    Texp_apply
                                    expression (lib/InfiniteArray.ml[56,1871+18]..lib/InfiniteArray.ml[56,1871+19])
                                      Texp_ident "Stdlib!.+"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/InfiniteArray.ml[56,1871+16]..lib/InfiniteArray.ml[56,1871+17])
                                          Texp_ident "i/1200"
                                      <arg>
                                        Nolabel
                                        expression (lib/InfiniteArray.ml[56,1871+20]..lib/InfiniteArray.ml[56,1871+21])
                                          Texp_constant Const_int 1
                                    ]
                                None
                      ]
                ]
          ]
    ]
  structure_item (lib/InfiniteArray.ml[58,1894+0]..lib/InfiniteArray.ml[59,1909+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[58,1894+4]..lib/InfiniteArray.ml[58,1894+10])
          Tpat_var "extent/1202"
        expression (lib/InfiniteArray.ml[58,1894+11]..lib/InfiniteArray.ml[59,1909+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[58,1894+11]..lib/InfiniteArray.ml[58,1894+12])
                Tpat_var "a/1204"
              expression (lib/InfiniteArray.ml[59,1909+2]..lib/InfiniteArray.ml[59,1909+10])
                Texp_field
                expression (lib/InfiniteArray.ml[59,1909+2]..lib/InfiniteArray.ml[59,1909+3])
                  Texp_ident "a/1204"
                "extent"
          ]
    ]
  structure_item (lib/InfiniteArray.ml[61,1921+0]..lib/InfiniteArray.ml[62,1936+30])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[61,1921+4]..lib/InfiniteArray.ml[61,1921+10])
          Tpat_var "domain/1205"
        expression (lib/InfiniteArray.ml[61,1921+11]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/InfiniteArray.ml[61,1921+11]..lib/InfiniteArray.ml[61,1921+12])
                Tpat_var "a/1207"
              expression (lib/InfiniteArray.ml[62,1936+2]..lib/InfiniteArray.ml[62,1936+30])
                Texp_apply
                expression (lib/InfiniteArray.ml[62,1936+2]..lib/InfiniteArray.ml[62,1936+11])
                  Texp_ident "Stdlib!.Array.sub"
                [
                  <arg>
                    Nolabel
                    expression (lib/InfiniteArray.ml[62,1936+12]..lib/InfiniteArray.ml[62,1936+19])
                      Texp_field
                      expression (lib/InfiniteArray.ml[62,1936+12]..lib/InfiniteArray.ml[62,1936+13])
                        Texp_ident "a/1207"
                      "table"
                  <arg>
                    Nolabel
                    expression (lib/InfiniteArray.ml[62,1936+20]..lib/InfiniteArray.ml[62,1936+21])
                      Texp_constant Const_int 0
                  <arg>
                    Nolabel
                    expression (lib/InfiniteArray.ml[62,1936+22]..lib/InfiniteArray.ml[62,1936+30])
                      Texp_field
                      expression (lib/InfiniteArray.ml[62,1936+22]..lib/InfiniteArray.ml[62,1936+23])
                        Texp_ident "a/1207"
                      "extent"
                ]
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost,None)
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
          Texp_apply
          expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/InfiniteArray.ml[62,1936+30]..lib/InfiniteArray.ml[62,1936+30]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__InfiniteArray>
 "default_size"[value] -> <Gbnf_parser__InfiniteArray.4>;
 "domain"[value] -> <Gbnf_parser__InfiniteArray.25>;
 "ensure"[value] -> <Gbnf_parser__InfiniteArray.10>;
 "extent"[value] -> <Gbnf_parser__InfiniteArray.23>;
 "get"[value] -> <Gbnf_parser__InfiniteArray.16>;
 "make"[value] -> <Gbnf_parser__InfiniteArray.5>;
 "new_length"[value] -> <Gbnf_parser__InfiniteArray.7>;
 "set"[value] -> <Gbnf_parser__InfiniteArray.19>;
 "t"[type] -> <Gbnf_parser__InfiniteArray.0>;
 }

(setglobal Gbnf_parser__InfiniteArray!
  (let
    (*match*/1508 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__InfiniteArray"))
     *match*/1506 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1504 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/InfiniteArray.ml"))
     *match*/1502 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "InfiniteArray.ml"))
     default_size/1132 =[int] 16384
     make/1133 =
       (function x/1135
         (funct-body Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(26)<ghost>:1284-1357
           (before Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(26):1288-1357
             (makemutable 0 (*,*,int) x/1135
               (after Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(28):1315-1340
                 (caml_make_vect default_size/1132 x/1135))
               0)))))
    (letrec
      (new_length/1183
         (function length/1184[int] i/1185[int] : int
           (funct-body Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(32)<ghost>:1378-1457
             (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(33):1391-1457
               (if (< i/1185 length/1184)
                 (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(34):1414-1420
                   length/1184)
                 (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(36):1432-1457
                   (after Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(36):1432-1457
                     (apply new_length/1183 (* 2 length/1184) i/1185))))))))
      (let
        (ensure/1186 =
           (function a/1188 i/1189[int] : int
             (funct-body Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(38)<ghost>:1470-1721
               (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(39):1478-1721
                 (seq
                   (if (<= 0 i/1189) 0
                     (raise
                       (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(39):1478-1493
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "lib/InfiniteArray.ml" 39 2]))))
                   (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(40):1497-1721
                     (let (table/1190 = (field 1 a/1188))
                       (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(41):1522-1721
                         (let
                           (length/1191 =[int] (array.length[gen] table/1190))
                           (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(42):1559-1721
                             (if (>= i/1189 length/1191)
                               (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(42):1579-1721
                                 (let
                                   (table'/1192 =
                                      (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(43):1602-1650
                                        (caml_make_vect
                                          (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(43):1613-1640
                                            (apply new_length/1183
                                              (* 2 length/1191) i/1189))
                                          (field 0 a/1188))))
                                   (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(44):1658-1715
                                     (seq
                                       (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(44):1658-1692
                                         (apply
                                           (field 9 (global Stdlib__Array!))
                                           table/1190 0 table'/1192 0
                                           length/1191))
                                       (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(45):1698-1715
                                         (setfield_ptr 1 a/1188 table'/1192))))))
                               0))))))))))
         get/1193 =
           (function a/1195 i/1196[int]
             (funct-body Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(48)<ghost>:1731-1781
               (before Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(49):1739-1781
                 (seq
                   (after Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(49):1739-1749
                     (apply ensure/1186 a/1195 i/1196))
                   (before Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(50):1753-1781
                     (after Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(50):1753-1781
                       (array.unsafe_get[gen] (field 1 a/1195) i/1196)))))))
         set/1197 =
           (function a/1199 i/1200[int] x/1201 : int
             (funct-body Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(52)<ghost>:1791-1892
               (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(53):1801-1892
                 (seq
                   (after Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(53):1801-1811
                     (apply ensure/1186 a/1199 i/1200))
                   (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(54):1815-1892
                     (seq
                       (after Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(54):1815-1845
                         (array.unsafe_set[gen] (field 1 a/1199) i/1200
                           x/1201))
                       (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(55):1849-1892
                         (if (<= (field 2 a/1199) i/1200)
                           (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(56):1875-1892
                             (setfield_imm 2 a/1199 (+ i/1200 1)))
                           0))))))))
         extent/1202 =
           (function a/1204 : int
             (funct-body Gbnf_parser__InfiniteArray.extent lib/InfiniteArray.ml(58)<ghost>:1905-1919
               (before Gbnf_parser__InfiniteArray.extent lib/InfiniteArray.ml(59):1911-1919
                 (field 2 a/1204))))
         domain/1205 =
           (function a/1207
             (funct-body Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(61)<ghost>:1932-1966
               (before Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(62):1938-1966
                 (after Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(62):1938-1966
                   (apply (field 6 (global Stdlib__Array!)) (field 1 a/1207)
                     0 (field 2 a/1207))))))
         *match*/1500 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
         *match*/1498 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
         *match*/1496 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply
               (field 1
                 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
               0))
         *match*/1494 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 4 (global Ppx_module_timer_runtime!))
               #"Gbnf_parser__InfiniteArray")))
        (pseudo <unknown location>
          (makeblock 0 default_size/1132 make/1133 new_length/1183
            ensure/1186 get/1193 set/1197 extent/1202 domain/1205))))))
(setglobal Gbnf_parser__InfiniteArray!
  (let
    (*match*/1508 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__InfiniteArray"))
     *match*/1506 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1504 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/InfiniteArray.ml"))
     *match*/1502 =
       (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(17)<ghost>:1081-1081
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "InfiniteArray.ml"))
     default_size/1132 =[int] 16384
     make/1133 =
       (function x/1135
         (funct-body Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(26)<ghost>:1284-1357
           (before Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(26):1288-1357
             (makemutable 0 (*,*,int) x/1135
               (after Gbnf_parser__InfiniteArray.make lib/InfiniteArray.ml(28):1315-1340
                 (caml_make_vect default_size/1132 x/1135))
               0)))))
    (letrec
      (new_length/1183
         (function length/1184[int] i/1185[int] : int
           (funct-body Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(32)<ghost>:1378-1457
             (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(33):1391-1457
               (if (< i/1185 length/1184)
                 (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(34):1414-1420
                   length/1184)
                 (before Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(36):1432-1457
                   (after Gbnf_parser__InfiniteArray.new_length lib/InfiniteArray.ml(36):1432-1457
                     (apply new_length/1183 (* 2 length/1184) i/1185))))))))
      (let
        (ensure/1186 =
           (function a/1188 i/1189[int] : int
             (funct-body Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(38)<ghost>:1470-1721
               (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(39):1478-1721
                 (seq
                   (if (<= 0 i/1189) 0
                     (raise
                       (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(39):1478-1493
                         (makeblock 0 (global Assert_failure/28!)
                           [0: "lib/InfiniteArray.ml" 39 2]))))
                   (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(40):1497-1721
                     (let (table/1190 = (field 1 a/1188))
                       (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(41):1522-1721
                         (let
                           (length/1191 =[int] (array.length[gen] table/1190))
                           (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(42):1559-1721
                             (if (>= i/1189 length/1191)
                               (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(42):1579-1721
                                 (let
                                   (table'/1192 =
                                      (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(43):1602-1650
                                        (caml_make_vect
                                          (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(43):1613-1640
                                            (apply new_length/1183
                                              (* 2 length/1191) i/1189))
                                          (field 0 a/1188))))
                                   (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(44):1658-1715
                                     (seq
                                       (after Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(44):1658-1692
                                         (apply
                                           (field 9 (global Stdlib__Array!))
                                           table/1190 0 table'/1192 0
                                           length/1191))
                                       (before Gbnf_parser__InfiniteArray.ensure lib/InfiniteArray.ml(45):1698-1715
                                         (setfield_ptr 1 a/1188 table'/1192))))))
                               0))))))))))
         get/1193 =
           (function a/1195 i/1196[int]
             (funct-body Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(48)<ghost>:1731-1781
               (before Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(49):1739-1781
                 (seq
                   (after Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(49):1739-1749
                     (apply ensure/1186 a/1195 i/1196))
                   (before Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(50):1753-1781
                     (after Gbnf_parser__InfiniteArray.get lib/InfiniteArray.ml(50):1753-1781
                       (array.unsafe_get[gen] (field 1 a/1195) i/1196)))))))
         set/1197 =
           (function a/1199 i/1200[int] x/1201 : int
             (funct-body Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(52)<ghost>:1791-1892
               (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(53):1801-1892
                 (seq
                   (after Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(53):1801-1811
                     (apply ensure/1186 a/1199 i/1200))
                   (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(54):1815-1892
                     (seq
                       (after Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(54):1815-1845
                         (array.unsafe_set[gen] (field 1 a/1199) i/1200
                           x/1201))
                       (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(55):1849-1892
                         (if (<= (field 2 a/1199) i/1200)
                           (before Gbnf_parser__InfiniteArray.set lib/InfiniteArray.ml(56):1875-1892
                             (setfield_imm 2 a/1199 (+ i/1200 1)))
                           0))))))))
         extent/1202 =
           (function a/1204 : int
             (funct-body Gbnf_parser__InfiniteArray.extent lib/InfiniteArray.ml(58)<ghost>:1905-1919
               (before Gbnf_parser__InfiniteArray.extent lib/InfiniteArray.ml(59):1911-1919
                 (field 2 a/1204))))
         domain/1205 =
           (function a/1207
             (funct-body Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(61)<ghost>:1932-1966
               (before Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(62):1938-1966
                 (after Gbnf_parser__InfiniteArray.domain lib/InfiniteArray.ml(62):1938-1966
                   (apply (field 6 (global Stdlib__Array!)) (field 1 a/1207)
                     0 (field 2 a/1207))))))
         *match*/1500 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
         *match*/1498 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
         *match*/1496 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply
               (field 1
                 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
               0))
         *match*/1494 =
           (after Gbnf_parser__InfiniteArray lib/InfiniteArray.ml(62)<ghost>:1966-1966
             (apply (field 4 (global Ppx_module_timer_runtime!))
               #"Gbnf_parser__InfiniteArray")))
        (pseudo <unknown location>
          (makeblock 0 default_size/1132 make/1133 new_length/1183
            ensure/1186 get/1193 set/1197 extent/1202 domain/1205))))))
