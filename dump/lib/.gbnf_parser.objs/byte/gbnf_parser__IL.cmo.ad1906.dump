[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/IL.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/IL.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("lib/IL.ml",(lib/IL.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/IL.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/IL.ml[14,976+0]..[14,976+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/IL.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("IL.ml",(lib/IL.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..[14,976+14])
    Pstr_open Fresh
    module_expr (lib/IL.ml[14,976+5]..[14,976+14])
      Pmod_ident "Positions" (lib/IL.ml[14,976+5]..[14,976+14])
  structure_item (lib/IL.ml[18,1057+0]..[271,6517+23])
    Pstr_type Rec
    [
      type_declaration "interface" (lib/IL.ml[18,1057+5]..[18,1057+14]) (lib/IL.ml[18,1057+0]..[19,1074+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[19,1074+2]..[19,1074+21])
              Ptyp_constr "list" (lib/IL.ml[19,1074+17]..[19,1074+21])
              [
                core_type (lib/IL.ml[19,1074+2]..[19,1074+16])
                  Ptyp_constr "interface_item" (lib/IL.ml[19,1074+2]..[19,1074+16])
                  []
              ]
      type_declaration "interface_item" (lib/IL.ml[21,1097+4]..[21,1097+18]) (lib/IL.ml[21,1097+0]..[35,1609+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[23,1194+2]..[23,1194+43])
                "IIFunctor" (lib/IL.ml[23,1194+4]..[23,1194+13])
                [
                  core_type (lib/IL.ml[23,1194+17]..[23,1194+31])
                    Ptyp_constr "list" (lib/IL.ml[23,1194+27]..[23,1194+31])
                    [
                      core_type (lib/IL.ml[23,1194+17]..[23,1194+26])
                        Ptyp_constr "Stretch.t" (lib/IL.ml[23,1194+17]..[23,1194+26])
                        []
                    ]
                  core_type (lib/IL.ml[23,1194+34]..[23,1194+43])
                    Ptyp_constr "interface" (lib/IL.ml[23,1194+34]..[23,1194+43])
                    []
                ]
                None
              (lib/IL.ml[25,1272+2]..[25,1272+29])
                "IIExcDecls" (lib/IL.ml[25,1272+4]..[25,1272+14])
                [
                  core_type (lib/IL.ml[25,1272+18]..[25,1272+29])
                    Ptyp_constr "list" (lib/IL.ml[25,1272+25]..[25,1272+29])
                    [
                      core_type (lib/IL.ml[25,1272+18]..[25,1272+24])
                        Ptyp_constr "excdef" (lib/IL.ml[25,1272+18]..[25,1272+24])
                        []
                    ]
                ]
                None
              (lib/IL.ml[27,1367+2]..[27,1367+31])
                "IITypeDecls" (lib/IL.ml[27,1367+4]..[27,1367+15])
                [
                  core_type (lib/IL.ml[27,1367+19]..[27,1367+31])
                    Ptyp_constr "list" (lib/IL.ml[27,1367+27]..[27,1367+31])
                    [
                      core_type (lib/IL.ml[27,1367+19]..[27,1367+26])
                        Ptyp_constr "typedef" (lib/IL.ml[27,1367+19]..[27,1367+26])
                        []
                    ]
                ]
                None
              (lib/IL.ml[29,1429+2]..[29,1429+44])
                "IIValDecls" (lib/IL.ml[29,1429+4]..[29,1429+14])
                [
                  core_type (lib/IL.ml[29,1429+18]..[29,1429+44])
                    Ptyp_constr "list" (lib/IL.ml[29,1429+40]..[29,1429+44])
                    [
                      core_type (lib/IL.ml[29,1429+19]..[29,1429+38])
                        Ptyp_tuple
                        [
                          core_type (lib/IL.ml[29,1429+19]..[29,1429+25])
                            Ptyp_constr "string" (lib/IL.ml[29,1429+19]..[29,1429+25])
                            []
                          core_type (lib/IL.ml[29,1429+28]..[29,1429+38])
                            Ptyp_constr "typescheme" (lib/IL.ml[29,1429+28]..[29,1429+38])
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[31,1503+2]..[31,1503+28])
                "IIInclude" (lib/IL.ml[31,1503+4]..[31,1503+13])
                [
                  core_type (lib/IL.ml[31,1503+17]..[31,1503+28])
                    Ptyp_constr "module_type" (lib/IL.ml[31,1503+17]..[31,1503+28])
                    []
                ]
                None
              (lib/IL.ml[33,1553+2]..[33,1553+36])
                "IIModule" (lib/IL.ml[33,1553+4]..[33,1553+12])
                [
                  core_type (lib/IL.ml[33,1553+16]..[33,1553+22])
                    Ptyp_constr "string" (lib/IL.ml[33,1553+16]..[33,1553+22])
                    []
                  core_type (lib/IL.ml[33,1553+25]..[33,1553+36])
                    Ptyp_constr "module_type" (lib/IL.ml[33,1553+25]..[33,1553+36])
                    []
                ]
                None
              (lib/IL.ml[35,1609+2]..[35,1609+23])
                "IIComment" (lib/IL.ml[35,1609+4]..[35,1609+13])
                [
                  core_type (lib/IL.ml[35,1609+17]..[35,1609+23])
                    Ptyp_constr "string" (lib/IL.ml[35,1609+17]..[35,1609+23])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "module_type" (lib/IL.ml[37,1634+4]..[37,1634+15]) (lib/IL.ml[37,1634+0]..[40,1755+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[38,1652+2]..[38,1652+31])
                "MTNamedModuleType" (lib/IL.ml[38,1652+4]..[38,1652+21])
                [
                  core_type (lib/IL.ml[38,1652+25]..[38,1652+31])
                    Ptyp_constr "string" (lib/IL.ml[38,1652+25]..[38,1652+31])
                    []
                ]
                None
              (lib/IL.ml[39,1684+2]..[39,1684+70])
                "MTWithType" (lib/IL.ml[39,1684+4]..[39,1684+14])
                [
                  core_type (lib/IL.ml[39,1684+18]..[39,1684+29])
                    Ptyp_constr "module_type" (lib/IL.ml[39,1684+18]..[39,1684+29])
                    []
                  core_type (lib/IL.ml[39,1684+32]..[39,1684+43])
                    Ptyp_constr "list" (lib/IL.ml[39,1684+39]..[39,1684+43])
                    [
                      core_type (lib/IL.ml[39,1684+32]..[39,1684+38])
                        Ptyp_constr "string" (lib/IL.ml[39,1684+32]..[39,1684+38])
                        []
                    ]
                  core_type (lib/IL.ml[39,1684+46]..[39,1684+52])
                    Ptyp_constr "string" (lib/IL.ml[39,1684+46]..[39,1684+52])
                    []
                  core_type (lib/IL.ml[39,1684+55]..[39,1684+64])
                    Ptyp_constr "with_kind" (lib/IL.ml[39,1684+55]..[39,1684+64])
                    []
                  core_type (lib/IL.ml[39,1684+67]..[39,1684+70])
                    Ptyp_constr "typ" (lib/IL.ml[39,1684+67]..[39,1684+70])
                    []
                ]
                None
              (lib/IL.ml[40,1755+2]..[40,1755+25])
                "MTSigEnd" (lib/IL.ml[40,1755+4]..[40,1755+12])
                [
                  core_type (lib/IL.ml[40,1755+16]..[40,1755+25])
                    Ptyp_constr "interface" (lib/IL.ml[40,1755+16]..[40,1755+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "with_kind" (lib/IL.ml[42,1782+4]..[42,1782+13]) (lib/IL.ml[42,1782+0]..[44,1827+17])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[43,1798+2]..[43,1798+20])
                "WKNonDestructive" (lib/IL.ml[43,1798+4]..[43,1798+20])
                []
                None
              (lib/IL.ml[44,1827+2]..[44,1827+17])
                "WKDestructive" (lib/IL.ml[44,1827+4]..[44,1827+17])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "excdef" (lib/IL.ml[46,1857+4]..[46,1857+10]) (lib/IL.ml[46,1857+0]..[54,1984+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[49,1906+4]..[49,1906+20])
                Immutable
                "excname" (lib/IL.ml[49,1906+4]..[49,1906+11])                core_type (lib/IL.ml[49,1906+13]..[49,1906+19])
                  Ptyp_constr "string" (lib/IL.ml[49,1906+13]..[49,1906+19])
                  []
              (lib/IL.ml[52,1957+4]..[52,1957+25])
                Immutable
                "exceq" (lib/IL.ml[52,1957+4]..[52,1957+9])                core_type (lib/IL.ml[52,1957+11]..[52,1957+24])
                  Ptyp_constr "option" (lib/IL.ml[52,1957+18]..[52,1957+24])
                  [
                    core_type (lib/IL.ml[52,1957+11]..[52,1957+17])
                      Ptyp_constr "string" (lib/IL.ml[52,1957+11]..[52,1957+17])
                      []
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typedef" (lib/IL.ml[56,1989+4]..[56,1989+11]) (lib/IL.ml[56,1989+0]..[72,2386+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[59,2049+4]..[59,2049+21])
                Immutable
                "typename" (lib/IL.ml[59,2049+4]..[59,2049+12])                core_type (lib/IL.ml[59,2049+14]..[59,2049+20])
                  Ptyp_constr "string" (lib/IL.ml[59,2049+14]..[59,2049+20])
                  []
              (lib/IL.ml[64,2239+4]..[64,2239+28])
                Immutable
                "typeparams" (lib/IL.ml[64,2239+4]..[64,2239+14])                core_type (lib/IL.ml[64,2239+16]..[64,2239+27])
                  Ptyp_constr "list" (lib/IL.ml[64,2239+23]..[64,2239+27])
                  [
                    core_type (lib/IL.ml[64,2239+16]..[64,2239+22])
                      Ptyp_constr "string" (lib/IL.ml[64,2239+16]..[64,2239+22])
                      []
                  ]
              (lib/IL.ml[67,2298+4]..[67,2298+24])
                Immutable
                "typerhs" (lib/IL.ml[67,2298+4]..[67,2298+11])                core_type (lib/IL.ml[67,2298+13]..[67,2298+23])
                  Ptyp_constr "typedefrhs" (lib/IL.ml[67,2298+13]..[67,2298+23])
                  []
              (lib/IL.ml[70,2346+4]..[70,2346+38])
                Immutable
                "typeconstraint" (lib/IL.ml[70,2346+4]..[70,2346+18])                core_type (lib/IL.ml[70,2346+20]..[70,2346+38])
                  Ptyp_constr "option" (lib/IL.ml[70,2346+32]..[70,2346+38])
                  [
                    core_type (lib/IL.ml[70,2346+21]..[70,2346+30])
                      Ptyp_tuple
                      [
                        core_type (lib/IL.ml[70,2346+21]..[70,2346+24])
                          Ptyp_constr "typ" (lib/IL.ml[70,2346+21]..[70,2346+24])
                          []
                        core_type (lib/IL.ml[70,2346+27]..[70,2346+30])
                          Ptyp_constr "typ" (lib/IL.ml[70,2346+27]..[70,2346+30])
                          []
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typedefrhs" (lib/IL.ml[74,2391+4]..[74,2391+14]) (lib/IL.ml[74,2391+0]..[77,2468+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[75,2408+2]..[75,2408+31])
                "TDefRecord" (lib/IL.ml[75,2408+4]..[75,2408+14])
                [
                  core_type (lib/IL.ml[75,2408+18]..[75,2408+31])
                    Ptyp_constr "list" (lib/IL.ml[75,2408+27]..[75,2408+31])
                    [
                      core_type (lib/IL.ml[75,2408+18]..[75,2408+26])
                        Ptyp_constr "fielddef" (lib/IL.ml[75,2408+18]..[75,2408+26])
                        []
                    ]
                ]
                None
              (lib/IL.ml[76,2440+2]..[76,2440+27])
                "TDefSum" (lib/IL.ml[76,2440+4]..[76,2440+11])
                [
                  core_type (lib/IL.ml[76,2440+15]..[76,2440+27])
                    Ptyp_constr "list" (lib/IL.ml[76,2440+23]..[76,2440+27])
                    [
                      core_type (lib/IL.ml[76,2440+15]..[76,2440+22])
                        Ptyp_constr "datadef" (lib/IL.ml[76,2440+15]..[76,2440+22])
                        []
                    ]
                ]
                None
              (lib/IL.ml[77,2468+2]..[77,2468+18])
                "TAbbrev" (lib/IL.ml[77,2468+4]..[77,2468+11])
                [
                  core_type (lib/IL.ml[77,2468+15]..[77,2468+18])
                    Ptyp_constr "typ" (lib/IL.ml[77,2468+15]..[77,2468+18])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "fielddef" (lib/IL.ml[79,2488+4]..[79,2488+12]) (lib/IL.ml[79,2488+0]..[90,2678+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[82,2546+4]..[82,2546+21])
                Immutable
                "modifiable" (lib/IL.ml[82,2546+4]..[82,2546+14])                core_type (lib/IL.ml[82,2546+16]..[82,2546+20])
                  Ptyp_constr "bool" (lib/IL.ml[82,2546+16]..[82,2546+20])
                  []
              (lib/IL.ml[85,2598+4]..[85,2598+22])
                Immutable
                "fieldname" (lib/IL.ml[85,2598+4]..[85,2598+13])                core_type (lib/IL.ml[85,2598+15]..[85,2598+21])
                  Ptyp_constr "string" (lib/IL.ml[85,2598+15]..[85,2598+21])
                  []
              (lib/IL.ml[88,2651+4]..[88,2651+25])
                Immutable
                "fieldtype" (lib/IL.ml[88,2651+4]..[88,2651+13])                core_type (lib/IL.ml[88,2651+15]..[88,2651+25])
                  Ptyp_constr "typescheme" (lib/IL.ml[88,2651+15]..[88,2651+25])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "datadef" (lib/IL.ml[92,2683+4]..[92,2683+11]) (lib/IL.ml[92,2683+0]..[104,2975+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[95,2740+4]..[95,2740+21])
                Immutable
                "dataname" (lib/IL.ml[95,2740+4]..[95,2740+12])                core_type (lib/IL.ml[95,2740+14]..[95,2740+20])
                  Ptyp_constr "string" (lib/IL.ml[95,2740+14]..[95,2740+20])
                  []
              (lib/IL.ml[98,2804+4]..[98,2804+28])
                Immutable
                "datavalparams" (lib/IL.ml[98,2804+4]..[98,2804+17])                core_type (lib/IL.ml[98,2804+19]..[98,2804+27])
                  Ptyp_constr "list" (lib/IL.ml[98,2804+23]..[98,2804+27])
                  [
                    core_type (lib/IL.ml[98,2804+19]..[98,2804+22])
                      Ptyp_constr "typ" (lib/IL.ml[98,2804+19]..[98,2804+22])
                      []
                  ]
              (lib/IL.ml[102,2937+4]..[102,2937+36])
                Immutable
                "datatypeparams" (lib/IL.ml[102,2937+4]..[102,2937+18])                core_type (lib/IL.ml[102,2937+20]..[102,2937+35])
                  Ptyp_constr "option" (lib/IL.ml[102,2937+29]..[102,2937+35])
                  [
                    core_type (lib/IL.ml[102,2937+20]..[102,2937+28])
                      Ptyp_constr "list" (lib/IL.ml[102,2937+24]..[102,2937+28])
                      [
                        core_type (lib/IL.ml[102,2937+20]..[102,2937+23])
                          Ptyp_constr "typ" (lib/IL.ml[102,2937+20]..[102,2937+23])
                          []
                      ]
                  ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typ" (lib/IL.ml[106,2980+4]..[106,2980+7]) (lib/IL.ml[106,2980+0]..[121,3308+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[109,3019+2]..[109,3019+35])
                "TypTextual" (lib/IL.ml[109,3019+4]..[109,3019+14])
                [
                  core_type (lib/IL.ml[109,3019+18]..[109,3019+35])
                    Ptyp_constr "Stretch.ocamltype" (lib/IL.ml[109,3019+18]..[109,3019+35])
                    []
                ]
                None
              (lib/IL.ml[112,3123+2]..[112,3123+20])
                "TypVar" (lib/IL.ml[112,3123+4]..[112,3123+10])
                [
                  core_type (lib/IL.ml[112,3123+14]..[112,3123+20])
                    Ptyp_constr "string" (lib/IL.ml[112,3123+14]..[112,3123+20])
                    []
                ]
                None
              (lib/IL.ml[115,3204+2]..[115,3204+31])
                "TypApp" (lib/IL.ml[115,3204+4]..[115,3204+10])
                [
                  core_type (lib/IL.ml[115,3204+14]..[115,3204+20])
                    Ptyp_constr "string" (lib/IL.ml[115,3204+14]..[115,3204+20])
                    []
                  core_type (lib/IL.ml[115,3204+23]..[115,3204+31])
                    Ptyp_constr "list" (lib/IL.ml[115,3204+27]..[115,3204+31])
                    [
                      core_type (lib/IL.ml[115,3204+23]..[115,3204+26])
                        Ptyp_constr "typ" (lib/IL.ml[115,3204+23]..[115,3204+26])
                        []
                    ]
                ]
                None
              (lib/IL.ml[118,3262+2]..[118,3262+24])
                "TypTuple" (lib/IL.ml[118,3262+4]..[118,3262+12])
                [
                  core_type (lib/IL.ml[118,3262+16]..[118,3262+24])
                    Ptyp_constr "list" (lib/IL.ml[118,3262+20]..[118,3262+24])
                    [
                      core_type (lib/IL.ml[118,3262+16]..[118,3262+19])
                        Ptyp_constr "typ" (lib/IL.ml[118,3262+16]..[118,3262+19])
                        []
                    ]
                ]
                None
              (lib/IL.ml[121,3308+2]..[121,3308+25])
                "TypArrow" (lib/IL.ml[121,3308+4]..[121,3308+12])
                [
                  core_type (lib/IL.ml[121,3308+16]..[121,3308+19])
                    Ptyp_constr "typ" (lib/IL.ml[121,3308+16]..[121,3308+19])
                    []
                  core_type (lib/IL.ml[121,3308+22]..[121,3308+25])
                    Ptyp_constr "typ" (lib/IL.ml[121,3308+22]..[121,3308+25])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "typescheme" (lib/IL.ml[123,3335+4]..[123,3335+14]) (lib/IL.ml[123,3335+0]..[131,3467+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[126,3410+2]..[126,3410+27])
                Immutable
                "quantifiers" (lib/IL.ml[126,3410+2]..[126,3410+13])                core_type (lib/IL.ml[126,3410+15]..[126,3410+26])
                  Ptyp_constr "list" (lib/IL.ml[126,3410+22]..[126,3410+26])
                  [
                    core_type (lib/IL.ml[126,3410+15]..[126,3410+21])
                      Ptyp_constr "string" (lib/IL.ml[126,3410+15]..[126,3410+21])
                      []
                  ]
              (lib/IL.ml[129,3453+2]..[129,3453+12])
                Immutable
                "body" (lib/IL.ml[129,3453+2]..[129,3453+6])                core_type (lib/IL.ml[129,3453+8]..[129,3453+11])
                  Ptyp_constr "typ" (lib/IL.ml[129,3453+8]..[129,3453+11])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "valdef" (lib/IL.ml[133,3472+4]..[133,3472+10]) (lib/IL.ml[133,3472+0]..[147,3764+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[139,3635+2]..[139,3635+18])
                Immutable
                "valpublic" (lib/IL.ml[139,3635+2]..[139,3635+11])                core_type (lib/IL.ml[139,3635+13]..[139,3635+17])
                  Ptyp_constr "bool" (lib/IL.ml[139,3635+13]..[139,3635+17])
                  []
              (lib/IL.ml[142,3692+2]..[142,3692+18])
                Immutable
                "valpat" (lib/IL.ml[142,3692+2]..[142,3692+8])                core_type (lib/IL.ml[142,3692+10]..[142,3692+17])
                  Ptyp_constr "pattern" (lib/IL.ml[142,3692+10]..[142,3692+17])
                  []
              (lib/IL.ml[145,3748+2]..[145,3748+14])
                Immutable
                "valval" (lib/IL.ml[145,3748+2]..[145,3748+8])                core_type (lib/IL.ml[145,3748+10]..[145,3748+14])
                  Ptyp_constr "expr" (lib/IL.ml[145,3748+10]..[145,3748+14])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "expr" (lib/IL.ml[149,3769+4]..[149,3769+8]) (lib/IL.ml[149,3769+0]..[205,5016+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[152,3799+2]..[152,3799+18])
                "EVar" (lib/IL.ml[152,3799+4]..[152,3799+8])
                [
                  core_type (lib/IL.ml[152,3799+12]..[152,3799+18])
                    Ptyp_constr "string" (lib/IL.ml[152,3799+12]..[152,3799+18])
                    []
                ]
                None
              (lib/IL.ml[155,3837+2]..[155,3837+31])
                "EFun" (lib/IL.ml[155,3837+4]..[155,3837+8])
                [
                  core_type (lib/IL.ml[155,3837+12]..[155,3837+24])
                    Ptyp_constr "list" (lib/IL.ml[155,3837+20]..[155,3837+24])
                    [
                      core_type (lib/IL.ml[155,3837+12]..[155,3837+19])
                        Ptyp_constr "pattern" (lib/IL.ml[155,3837+12]..[155,3837+19])
                        []
                    ]
                  core_type (lib/IL.ml[155,3837+27]..[155,3837+31])
                    Ptyp_constr "expr" (lib/IL.ml[155,3837+27]..[155,3837+31])
                    []
                ]
                None
              (lib/IL.ml[158,3893+2]..[158,3893+28])
                "EApp" (lib/IL.ml[158,3893+4]..[158,3893+8])
                [
                  core_type (lib/IL.ml[158,3893+12]..[158,3893+16])
                    Ptyp_constr "expr" (lib/IL.ml[158,3893+12]..[158,3893+16])
                    []
                  core_type (lib/IL.ml[158,3893+19]..[158,3893+28])
                    Ptyp_constr "list" (lib/IL.ml[158,3893+24]..[158,3893+28])
                    [
                      core_type (lib/IL.ml[158,3893+19]..[158,3893+23])
                        Ptyp_constr "expr" (lib/IL.ml[158,3893+19]..[158,3893+23])
                        []
                    ]
                ]
                None
              (lib/IL.ml[162,4003+2]..[162,4003+40])
                "ELet" (lib/IL.ml[162,4003+4]..[162,4003+8])
                [
                  core_type (lib/IL.ml[162,4003+12]..[162,4003+33])
                    Ptyp_constr "list" (lib/IL.ml[162,4003+29]..[162,4003+33])
                    [
                      core_type (lib/IL.ml[162,4003+13]..[162,4003+27])
                        Ptyp_tuple
                        [
                          core_type (lib/IL.ml[162,4003+13]..[162,4003+20])
                            Ptyp_constr "pattern" (lib/IL.ml[162,4003+13]..[162,4003+20])
                            []
                          core_type (lib/IL.ml[162,4003+23]..[162,4003+27])
                            Ptyp_constr "expr" (lib/IL.ml[162,4003+23]..[162,4003+27])
                            []
                        ]
                    ]
                  core_type (lib/IL.ml[162,4003+36]..[162,4003+40])
                    Ptyp_constr "expr" (lib/IL.ml[162,4003+36]..[162,4003+40])
                    []
                ]
                None
              (lib/IL.ml[165,4068+2]..[165,4068+32])
                "EMatch" (lib/IL.ml[165,4068+4]..[165,4068+10])
                [
                  core_type (lib/IL.ml[165,4068+14]..[165,4068+18])
                    Ptyp_constr "expr" (lib/IL.ml[165,4068+14]..[165,4068+18])
                    []
                  core_type (lib/IL.ml[165,4068+21]..[165,4068+32])
                    Ptyp_constr "list" (lib/IL.ml[165,4068+28]..[165,4068+32])
                    [
                      core_type (lib/IL.ml[165,4068+21]..[165,4068+27])
                        Ptyp_constr "branch" (lib/IL.ml[165,4068+21]..[165,4068+27])
                        []
                    ]
                ]
                None
              (lib/IL.ml[166,4101+2]..[166,4101+26])
                "EIfThen" (lib/IL.ml[166,4101+4]..[166,4101+11])
                [
                  core_type (lib/IL.ml[166,4101+15]..[166,4101+19])
                    Ptyp_constr "expr" (lib/IL.ml[166,4101+15]..[166,4101+19])
                    []
                  core_type (lib/IL.ml[166,4101+22]..[166,4101+26])
                    Ptyp_constr "expr" (lib/IL.ml[166,4101+22]..[166,4101+26])
                    []
                ]
                None
              (lib/IL.ml[167,4128+2]..[167,4128+37])
                "EIfThenElse" (lib/IL.ml[167,4128+4]..[167,4128+15])
                [
                  core_type (lib/IL.ml[167,4128+19]..[167,4128+23])
                    Ptyp_constr "expr" (lib/IL.ml[167,4128+19]..[167,4128+23])
                    []
                  core_type (lib/IL.ml[167,4128+26]..[167,4128+30])
                    Ptyp_constr "expr" (lib/IL.ml[167,4128+26]..[167,4128+30])
                    []
                  core_type (lib/IL.ml[167,4128+33]..[167,4128+37])
                    Ptyp_constr "expr" (lib/IL.ml[167,4128+33]..[167,4128+37])
                    []
                ]
                None
              (lib/IL.ml[170,4195+2]..[170,4195+18])
                "ERaise" (lib/IL.ml[170,4195+4]..[170,4195+10])
                [
                  core_type (lib/IL.ml[170,4195+14]..[170,4195+18])
                    Ptyp_constr "expr" (lib/IL.ml[170,4195+14]..[170,4195+18])
                    []
                ]
                None
              (lib/IL.ml[173,4243+2]..[173,4243+30])
                "ETry" (lib/IL.ml[173,4243+4]..[173,4243+8])
                [
                  core_type (lib/IL.ml[173,4243+12]..[173,4243+16])
                    Ptyp_constr "expr" (lib/IL.ml[173,4243+12]..[173,4243+16])
                    []
                  core_type (lib/IL.ml[173,4243+19]..[173,4243+30])
                    Ptyp_constr "list" (lib/IL.ml[173,4243+26]..[173,4243+30])
                    [
                      core_type (lib/IL.ml[173,4243+19]..[173,4243+25])
                        Ptyp_constr "branch" (lib/IL.ml[173,4243+19]..[173,4243+25])
                        []
                    ]
                ]
                None
              (lib/IL.ml[178,4419+2]..[178,4419+9])
                "EUnit" (lib/IL.ml[178,4419+4]..[178,4419+9])
                []
                None
              (lib/IL.ml[179,4429+2]..[179,4429+20])
                "EIntConst" (lib/IL.ml[179,4429+4]..[179,4429+13])
                [
                  core_type (lib/IL.ml[179,4429+17]..[179,4429+20])
                    Ptyp_constr "int" (lib/IL.ml[179,4429+17]..[179,4429+20])
                    []
                ]
                None
              (lib/IL.ml[180,4450+2]..[180,4450+26])
                "EStringConst" (lib/IL.ml[180,4450+4]..[180,4450+16])
                [
                  core_type (lib/IL.ml[180,4450+20]..[180,4450+26])
                    Ptyp_constr "string" (lib/IL.ml[180,4450+20]..[180,4450+26])
                    []
                ]
                None
              (lib/IL.ml[181,4477+2]..[181,4477+31])
                "EData" (lib/IL.ml[181,4477+4]..[181,4477+9])
                [
                  core_type (lib/IL.ml[181,4477+13]..[181,4477+19])
                    Ptyp_constr "string" (lib/IL.ml[181,4477+13]..[181,4477+19])
                    []
                  core_type (lib/IL.ml[181,4477+22]..[181,4477+31])
                    Ptyp_constr "list" (lib/IL.ml[181,4477+27]..[181,4477+31])
                    [
                      core_type (lib/IL.ml[181,4477+22]..[181,4477+26])
                        Ptyp_constr "expr" (lib/IL.ml[181,4477+22]..[181,4477+26])
                        []
                    ]
                ]
                None
              (lib/IL.ml[182,4509+2]..[182,4509+23])
                "ETuple" (lib/IL.ml[182,4509+4]..[182,4509+10])
                [
                  core_type (lib/IL.ml[182,4509+14]..[182,4509+23])
                    Ptyp_constr "list" (lib/IL.ml[182,4509+19]..[182,4509+23])
                    [
                      core_type (lib/IL.ml[182,4509+14]..[182,4509+18])
                        Ptyp_constr "expr" (lib/IL.ml[182,4509+14]..[182,4509+18])
                        []
                    ]
                ]
                None
              (lib/IL.ml[185,4559+2]..[185,4559+31])
                "EAnnot" (lib/IL.ml[185,4559+4]..[185,4559+10])
                [
                  core_type (lib/IL.ml[185,4559+14]..[185,4559+18])
                    Ptyp_constr "expr" (lib/IL.ml[185,4559+14]..[185,4559+18])
                    []
                  core_type (lib/IL.ml[185,4559+21]..[185,4559+31])
                    Ptyp_constr "typescheme" (lib/IL.ml[185,4559+21]..[185,4559+31])
                    []
                ]
                None
              (lib/IL.ml[188,4629+2]..[188,4629+18])
                "EMagic" (lib/IL.ml[188,4629+4]..[188,4629+10])
                [
                  core_type (lib/IL.ml[188,4629+14]..[188,4629+18])
                    Ptyp_constr "expr" (lib/IL.ml[188,4629+14]..[188,4629+18])
                    []
                ]
                None
              (lib/IL.ml[189,4664+2]..[189,4664+17])
                "ERepr" (lib/IL.ml[189,4664+4]..[189,4664+9])
                [
                  core_type (lib/IL.ml[189,4664+13]..[189,4664+17])
                    Ptyp_constr "expr" (lib/IL.ml[189,4664+13]..[189,4664+17])
                    []
                ]
                None
              (lib/IL.ml[192,4716+2]..[192,4716+35])
                "ERecord" (lib/IL.ml[192,4716+4]..[192,4716+11])
                [
                  core_type (lib/IL.ml[192,4716+15]..[192,4716+35])
                    Ptyp_constr "list" (lib/IL.ml[192,4716+31]..[192,4716+35])
                    [
                      core_type (lib/IL.ml[192,4716+16]..[192,4716+29])
                        Ptyp_tuple
                        [
                          core_type (lib/IL.ml[192,4716+16]..[192,4716+22])
                            Ptyp_constr "string" (lib/IL.ml[192,4716+16]..[192,4716+22])
                            []
                          core_type (lib/IL.ml[192,4716+25]..[192,4716+29])
                            Ptyp_constr "expr" (lib/IL.ml[192,4716+25]..[192,4716+29])
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[193,4752+2]..[193,4752+34])
                "ERecordAccess" (lib/IL.ml[193,4752+4]..[193,4752+17])
                [
                  core_type (lib/IL.ml[193,4752+21]..[193,4752+25])
                    Ptyp_constr "expr" (lib/IL.ml[193,4752+21]..[193,4752+25])
                    []
                  core_type (lib/IL.ml[193,4752+28]..[193,4752+34])
                    Ptyp_constr "string" (lib/IL.ml[193,4752+28]..[193,4752+34])
                    []
                ]
                None
              (lib/IL.ml[194,4787+2]..[194,4787+40])
                "ERecordWrite" (lib/IL.ml[194,4787+4]..[194,4787+16])
                [
                  core_type (lib/IL.ml[194,4787+20]..[194,4787+24])
                    Ptyp_constr "expr" (lib/IL.ml[194,4787+20]..[194,4787+24])
                    []
                  core_type (lib/IL.ml[194,4787+27]..[194,4787+33])
                    Ptyp_constr "string" (lib/IL.ml[194,4787+27]..[194,4787+33])
                    []
                  core_type (lib/IL.ml[194,4787+36]..[194,4787+40])
                    Ptyp_constr "expr" (lib/IL.ml[194,4787+36]..[194,4787+40])
                    []
                ]
                None
              (lib/IL.ml[197,4857+2]..[197,4857+25])
                "ETextual" (lib/IL.ml[197,4857+4]..[197,4857+12])
                [
                  core_type (lib/IL.ml[197,4857+16]..[197,4857+25])
                    Ptyp_constr "Stretch.t" (lib/IL.ml[197,4857+16]..[197,4857+25])
                    []
                ]
                None
              (lib/IL.ml[200,4902+2]..[200,4902+29])
                "EComment" (lib/IL.ml[200,4902+4]..[200,4902+12])
                [
                  core_type (lib/IL.ml[200,4902+16]..[200,4902+22])
                    Ptyp_constr "string" (lib/IL.ml[200,4902+16]..[200,4902+22])
                    []
                  core_type (lib/IL.ml[200,4902+25]..[200,4902+29])
                    Ptyp_constr "expr" (lib/IL.ml[200,4902+25]..[200,4902+29])
                    []
                ]
                None
              (lib/IL.ml[201,4932+2]..[201,4932+42])
                "EPatComment" (lib/IL.ml[201,4932+4]..[201,4932+15])
                [
                  core_type (lib/IL.ml[201,4932+19]..[201,4932+25])
                    Ptyp_constr "string" (lib/IL.ml[201,4932+19]..[201,4932+25])
                    []
                  core_type (lib/IL.ml[201,4932+28]..[201,4932+35])
                    Ptyp_constr "pattern" (lib/IL.ml[201,4932+28]..[201,4932+35])
                    []
                  core_type (lib/IL.ml[201,4932+38]..[201,4932+42])
                    Ptyp_constr "expr" (lib/IL.ml[201,4932+38]..[201,4932+42])
                    []
                ]
                None
              (lib/IL.ml[204,4992+2]..[204,4992+23])
                "EArray" (lib/IL.ml[204,4992+4]..[204,4992+10])
                [
                  core_type (lib/IL.ml[204,4992+14]..[204,4992+23])
                    Ptyp_constr "list" (lib/IL.ml[204,4992+19]..[204,4992+23])
                    [
                      core_type (lib/IL.ml[204,4992+14]..[204,4992+18])
                        Ptyp_constr "expr" (lib/IL.ml[204,4992+14]..[204,4992+18])
                        []
                    ]
                ]
                None
              (lib/IL.ml[205,5016+2]..[205,5016+31])
                "EArrayAccess" (lib/IL.ml[205,5016+4]..[205,5016+16])
                [
                  core_type (lib/IL.ml[205,5016+20]..[205,5016+24])
                    Ptyp_constr "expr" (lib/IL.ml[205,5016+20]..[205,5016+24])
                    []
                  core_type (lib/IL.ml[205,5016+27]..[205,5016+31])
                    Ptyp_constr "expr" (lib/IL.ml[205,5016+27]..[205,5016+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "branch" (lib/IL.ml[207,5049+4]..[207,5049+10]) (lib/IL.ml[207,5049+0]..[215,5154+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_record
            [
              (lib/IL.ml[210,5089+2]..[210,5089+21])
                Immutable
                "branchpat" (lib/IL.ml[210,5089+2]..[210,5089+11])                core_type (lib/IL.ml[210,5089+13]..[210,5089+20])
                  Ptyp_constr "pattern" (lib/IL.ml[210,5089+13]..[210,5089+20])
                  []
              (lib/IL.ml[213,5133+2]..[213,5133+19])
                Immutable
                "branchbody" (lib/IL.ml[213,5133+2]..[213,5133+12])                core_type (lib/IL.ml[213,5133+14]..[213,5133+18])
                  Ptyp_constr "expr" (lib/IL.ml[213,5133+14]..[213,5133+18])
                  []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "pattern" (lib/IL.ml[217,5159+4]..[217,5159+11]) (lib/IL.ml[217,5159+0]..[238,5670+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[220,5192+2]..[220,5192+13])
                "PWildcard" (lib/IL.ml[220,5192+4]..[220,5192+13])
                []
                None
              (lib/IL.ml[223,5225+2]..[223,5225+18])
                "PVar" (lib/IL.ml[223,5225+4]..[223,5225+8])
                [
                  core_type (lib/IL.ml[223,5225+12]..[223,5225+18])
                    Ptyp_constr "string" (lib/IL.ml[223,5225+12]..[223,5225+18])
                    []
                ]
                None
              (lib/IL.ml[224,5244+2]..[224,5244+33])
                "PVarLocated" (lib/IL.ml[224,5244+4]..[224,5244+15])
                [
                  core_type (lib/IL.ml[224,5244+19]..[224,5244+33])
                    Ptyp_constr "located" (lib/IL.ml[224,5244+26]..[224,5244+33])
                    [
                      core_type (lib/IL.ml[224,5244+19]..[224,5244+25])
                        Ptyp_constr "string" (lib/IL.ml[224,5244+19]..[224,5244+25])
                        []
                    ]
                ]
                None
              (lib/IL.ml[229,5487+2]..[229,5487+9])
                "PUnit" (lib/IL.ml[229,5487+4]..[229,5487+9])
                []
                None
              (lib/IL.ml[230,5497+2]..[230,5497+34])
                "PData" (lib/IL.ml[230,5497+4]..[230,5497+9])
                [
                  core_type (lib/IL.ml[230,5497+13]..[230,5497+19])
                    Ptyp_constr "string" (lib/IL.ml[230,5497+13]..[230,5497+19])
                    []
                  core_type (lib/IL.ml[230,5497+22]..[230,5497+34])
                    Ptyp_constr "list" (lib/IL.ml[230,5497+30]..[230,5497+34])
                    [
                      core_type (lib/IL.ml[230,5497+22]..[230,5497+29])
                        Ptyp_constr "pattern" (lib/IL.ml[230,5497+22]..[230,5497+29])
                        []
                    ]
                ]
                None
              (lib/IL.ml[231,5532+2]..[231,5532+26])
                "PTuple" (lib/IL.ml[231,5532+4]..[231,5532+10])
                [
                  core_type (lib/IL.ml[231,5532+14]..[231,5532+26])
                    Ptyp_constr "list" (lib/IL.ml[231,5532+22]..[231,5532+26])
                    [
                      core_type (lib/IL.ml[231,5532+14]..[231,5532+21])
                        Ptyp_constr "pattern" (lib/IL.ml[231,5532+14]..[231,5532+21])
                        []
                    ]
                ]
                None
              (lib/IL.ml[232,5559+2]..[232,5559+38])
                "PRecord" (lib/IL.ml[232,5559+4]..[232,5559+11])
                [
                  core_type (lib/IL.ml[232,5559+15]..[232,5559+38])
                    Ptyp_constr "list" (lib/IL.ml[232,5559+34]..[232,5559+38])
                    [
                      core_type (lib/IL.ml[232,5559+16]..[232,5559+32])
                        Ptyp_tuple
                        [
                          core_type (lib/IL.ml[232,5559+16]..[232,5559+22])
                            Ptyp_constr "string" (lib/IL.ml[232,5559+16]..[232,5559+22])
                            []
                          core_type (lib/IL.ml[232,5559+25]..[232,5559+32])
                            Ptyp_constr "pattern" (lib/IL.ml[232,5559+25]..[232,5559+32])
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[235,5620+2]..[235,5620+23])
                "POr" (lib/IL.ml[235,5620+4]..[235,5620+7])
                [
                  core_type (lib/IL.ml[235,5620+11]..[235,5620+23])
                    Ptyp_constr "list" (lib/IL.ml[235,5620+19]..[235,5620+23])
                    [
                      core_type (lib/IL.ml[235,5620+11]..[235,5620+18])
                        Ptyp_constr "pattern" (lib/IL.ml[235,5620+11]..[235,5620+18])
                        []
                    ]
                ]
                None
              (lib/IL.ml[238,5670+2]..[238,5670+27])
                "PAnnot" (lib/IL.ml[238,5670+4]..[238,5670+10])
                [
                  core_type (lib/IL.ml[238,5670+14]..[238,5670+21])
                    Ptyp_constr "pattern" (lib/IL.ml[238,5670+14]..[238,5670+21])
                    []
                  core_type (lib/IL.ml[238,5670+24]..[238,5670+27])
                    Ptyp_constr "typ" (lib/IL.ml[238,5670+24]..[238,5670+27])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "modexpr" (lib/IL.ml[242,5726+4]..[242,5726+11]) (lib/IL.ml[242,5726+0]..[245,5788+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[243,5740+4]..[243,5740+20])
                "MVar" (lib/IL.ml[243,5740+6]..[243,5740+10])
                [
                  core_type (lib/IL.ml[243,5740+14]..[243,5740+20])
                    Ptyp_constr "string" (lib/IL.ml[243,5740+14]..[243,5740+20])
                    []
                ]
                None
              (lib/IL.ml[244,5761+4]..[244,5761+26])
                "MStruct" (lib/IL.ml[244,5761+6]..[244,5761+13])
                [
                  core_type (lib/IL.ml[244,5761+17]..[244,5761+26])
                    Ptyp_constr "structure" (lib/IL.ml[244,5761+17]..[244,5761+26])
                    []
                ]
                None
              (lib/IL.ml[245,5788+4]..[245,5788+31])
                "MApp" (lib/IL.ml[245,5788+6]..[245,5788+10])
                [
                  core_type (lib/IL.ml[245,5788+14]..[245,5788+21])
                    Ptyp_constr "modexpr" (lib/IL.ml[245,5788+14]..[245,5788+21])
                    []
                  core_type (lib/IL.ml[245,5788+24]..[245,5788+31])
                    Ptyp_constr "modexpr" (lib/IL.ml[245,5788+24]..[245,5788+31])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration "program" (lib/IL.ml[249,5840+4]..[249,5840+11]) (lib/IL.ml[249,5840+0]..[250,5854+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[250,5854+4]..[250,5854+13])
              Ptyp_constr "structure" (lib/IL.ml[250,5854+4]..[250,5854+13])
              []
      type_declaration "structure" (lib/IL.ml[252,5869+4]..[252,5869+13]) (lib/IL.ml[252,5869+0]..[253,5885+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[253,5885+4]..[253,5885+23])
              Ptyp_constr "list" (lib/IL.ml[253,5885+19]..[253,5885+23])
              [
                core_type (lib/IL.ml[253,5885+4]..[253,5885+18])
                  Ptyp_constr "structure_item" (lib/IL.ml[253,5885+4]..[253,5885+18])
                  []
              ]
      type_declaration "structure_item" (lib/IL.ml[255,5910+4]..[255,5910+18]) (lib/IL.ml[255,5910+0]..[271,6517+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[257,6007+2]..[257,6007+43])
                "SIFunctor" (lib/IL.ml[257,6007+4]..[257,6007+13])
                [
                  core_type (lib/IL.ml[257,6007+17]..[257,6007+31])
                    Ptyp_constr "list" (lib/IL.ml[257,6007+27]..[257,6007+31])
                    [
                      core_type (lib/IL.ml[257,6007+17]..[257,6007+26])
                        Ptyp_constr "Stretch.t" (lib/IL.ml[257,6007+17]..[257,6007+26])
                        []
                    ]
                  core_type (lib/IL.ml[257,6007+34]..[257,6007+43])
                    Ptyp_constr "structure" (lib/IL.ml[257,6007+34]..[257,6007+43])
                    []
                ]
                None
              (lib/IL.ml[259,6084+2]..[259,6084+28])
                "SIExcDefs" (lib/IL.ml[259,6084+4]..[259,6084+13])
                [
                  core_type (lib/IL.ml[259,6084+17]..[259,6084+28])
                    Ptyp_constr "list" (lib/IL.ml[259,6084+24]..[259,6084+28])
                    [
                      core_type (lib/IL.ml[259,6084+17]..[259,6084+23])
                        Ptyp_constr "excdef" (lib/IL.ml[259,6084+17]..[259,6084+23])
                        []
                    ]
                ]
                None
              (lib/IL.ml[261,6177+2]..[261,6177+30])
                "SITypeDefs" (lib/IL.ml[261,6177+4]..[261,6177+14])
                [
                  core_type (lib/IL.ml[261,6177+18]..[261,6177+30])
                    Ptyp_constr "list" (lib/IL.ml[261,6177+26]..[261,6177+30])
                    [
                      core_type (lib/IL.ml[261,6177+18]..[261,6177+25])
                        Ptyp_constr "typedef" (lib/IL.ml[261,6177+18]..[261,6177+25])
                        []
                    ]
                ]
                None
              (lib/IL.ml[263,6282+2]..[263,6282+35])
                "SIValDefs" (lib/IL.ml[263,6282+4]..[263,6282+13])
                [
                  core_type (lib/IL.ml[263,6282+17]..[263,6282+21])
                    Ptyp_constr "bool" (lib/IL.ml[263,6282+17]..[263,6282+21])
                    []
                  core_type (lib/IL.ml[263,6282+24]..[263,6282+35])
                    Ptyp_constr "list" (lib/IL.ml[263,6282+31]..[263,6282+35])
                    [
                      core_type (lib/IL.ml[263,6282+24]..[263,6282+30])
                        Ptyp_constr "valdef" (lib/IL.ml[263,6282+24]..[263,6282+30])
                        []
                    ]
                ]
                None
              (lib/IL.ml[265,6344+2]..[265,6344+31])
                "SIStretch" (lib/IL.ml[265,6344+4]..[265,6344+13])
                [
                  core_type (lib/IL.ml[265,6344+17]..[265,6344+31])
                    Ptyp_constr "list" (lib/IL.ml[265,6344+27]..[265,6344+31])
                    [
                      core_type (lib/IL.ml[265,6344+17]..[265,6344+26])
                        Ptyp_constr "Stretch.t" (lib/IL.ml[265,6344+17]..[265,6344+26])
                        []
                    ]
                ]
                None
              (lib/IL.ml[267,6409+2]..[267,6409+35])
                "SIModuleDef" (lib/IL.ml[267,6409+4]..[267,6409+15])
                [
                  core_type (lib/IL.ml[267,6409+19]..[267,6409+25])
                    Ptyp_constr "string" (lib/IL.ml[267,6409+19]..[267,6409+25])
                    []
                  core_type (lib/IL.ml[267,6409+28]..[267,6409+35])
                    Ptyp_constr "modexpr" (lib/IL.ml[267,6409+28]..[267,6409+35])
                    []
                ]
                None
              (lib/IL.ml[269,6473+2]..[269,6473+24])
                "SIInclude" (lib/IL.ml[269,6473+4]..[269,6473+13])
                [
                  core_type (lib/IL.ml[269,6473+17]..[269,6473+24])
                    Ptyp_constr "modexpr" (lib/IL.ml[269,6473+17]..[269,6473+24])
                    []
                ]
                None
              (lib/IL.ml[271,6517+2]..[271,6517+23])
                "SIComment" (lib/IL.ml[271,6517+4]..[271,6517+13])
                [
                  core_type (lib/IL.ml[271,6517+17]..[271,6517+23])
                    Ptyp_constr "string" (lib/IL.ml[271,6517+17]..[271,6517+23])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/IL.ml[276,6671+0]..[278,6704+20])
    Pstr_type Rec
    [
      type_declaration "xparam" (lib/IL.ml[276,6671+5]..[276,6671+11]) (lib/IL.ml[276,6671+0]..[278,6704+20])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/IL.ml[277,6685+2]..[277,6685+18])
                "XVar" (lib/IL.ml[277,6685+4]..[277,6685+8])
                [
                  core_type (lib/IL.ml[277,6685+12]..[277,6685+18])
                    Ptyp_constr "string" (lib/IL.ml[277,6685+12]..[277,6685+18])
                    []
                ]
                None
              (lib/IL.ml[278,6704+2]..[278,6704+20])
                "XMagic" (lib/IL.ml[278,6704+4]..[278,6704+10])
                [
                  core_type (lib/IL.ml[278,6704+14]..[278,6704+20])
                    Ptyp_constr "xparam" (lib/IL.ml[278,6704+14]..[278,6704+20])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/IL.ml[280,6726+0]..[281,6739+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[280,6726+4]..[280,6726+8])
          Ppat_var "xvar" (lib/IL.ml[280,6726+4]..[280,6726+8])
        expression (lib/IL.ml[280,6726+9]..[281,6739+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/IL.ml[280,6726+9]..[280,6726+10])
            Ppat_var "x" (lib/IL.ml[280,6726+9]..[280,6726+10])
          expression (lib/IL.ml[281,6739+2]..[281,6739+8])
            Pexp_construct "XVar" (lib/IL.ml[281,6739+2]..[281,6739+6])
            Some
              expression (lib/IL.ml[281,6739+7]..[281,6739+8])
                Pexp_ident "x" (lib/IL.ml[281,6739+7]..[281,6739+8])
    ]
  structure_item (lib/IL.ml[283,6749+0]..[284,6765+11])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[283,6749+4]..[283,6749+10])
          Ppat_var "xmagic" (lib/IL.ml[283,6749+4]..[283,6749+10])
        expression (lib/IL.ml[283,6749+11]..[284,6765+11]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/IL.ml[283,6749+11]..[283,6749+13])
            Ppat_var "xp" (lib/IL.ml[283,6749+11]..[283,6749+13])
          expression (lib/IL.ml[284,6765+2]..[284,6765+11])
            Pexp_construct "XMagic" (lib/IL.ml[284,6765+2]..[284,6765+8])
            Some
              expression (lib/IL.ml[284,6765+9]..[284,6765+11])
                Pexp_ident "xp" (lib/IL.ml[284,6765+9]..[284,6765+11])
    ]
  structure_item (lib/IL.ml[286,6778+0]..[290,6853+29])
    Pstr_value Rec
    [
      <def>
        pattern (lib/IL.ml[286,6778+8]..[286,6778+19])
          Ppat_var "xparam2expr" (lib/IL.ml[286,6778+8]..[286,6778+19])
        expression (lib/IL.ml[286,6778+22]..[290,6853+29])
          Pexp_function
          [
            <case>
              pattern (lib/IL.ml[287,6809+4]..[287,6809+10])
                Ppat_construct "XVar" (lib/IL.ml[287,6809+4]..[287,6809+8])
                Some
                  []
                  pattern (lib/IL.ml[287,6809+9]..[287,6809+10])
                    Ppat_var "x" (lib/IL.ml[287,6809+9]..[287,6809+10])
              expression (lib/IL.ml[288,6823+6]..[288,6823+12])
                Pexp_construct "EVar" (lib/IL.ml[288,6823+6]..[288,6823+10])
                Some
                  expression (lib/IL.ml[288,6823+11]..[288,6823+12])
                    Pexp_ident "x" (lib/IL.ml[288,6823+11]..[288,6823+12])
            <case>
              pattern (lib/IL.ml[289,6836+4]..[289,6836+13])
                Ppat_construct "XMagic" (lib/IL.ml[289,6836+4]..[289,6836+10])
                Some
                  []
                  pattern (lib/IL.ml[289,6836+11]..[289,6836+13])
                    Ppat_var "xp" (lib/IL.ml[289,6836+11]..[289,6836+13])
              expression (lib/IL.ml[290,6853+6]..[290,6853+29])
                Pexp_construct "EMagic" (lib/IL.ml[290,6853+6]..[290,6853+12])
                Some
                  expression (lib/IL.ml[290,6853+13]..[290,6853+29])
                    Pexp_apply
                    expression (lib/IL.ml[290,6853+14]..[290,6853+25])
                      Pexp_ident "xparam2expr" (lib/IL.ml[290,6853+14]..[290,6853+25])
                    [
                      <arg>
                      Nolabel
                        expression (lib/IL.ml[290,6853+26]..[290,6853+28])
                          Pexp_ident "xp" (lib/IL.ml[290,6853+26]..[290,6853+28])
                    ]
          ]
    ]
  structure_item (lib/IL.ml[292,6884+0]..[296,6958+19])
    Pstr_value Rec
    [
      <def>
        pattern (lib/IL.ml[292,6884+8]..[292,6884+18])
          Ppat_var "xparam2pat" (lib/IL.ml[292,6884+8]..[292,6884+18])
        expression (lib/IL.ml[292,6884+21]..[296,6958+19])
          Pexp_function
          [
            <case>
              pattern (lib/IL.ml[293,6914+4]..[293,6914+10])
                Ppat_construct "XVar" (lib/IL.ml[293,6914+4]..[293,6914+8])
                Some
                  []
                  pattern (lib/IL.ml[293,6914+9]..[293,6914+10])
                    Ppat_var "x" (lib/IL.ml[293,6914+9]..[293,6914+10])
              expression (lib/IL.ml[294,6928+6]..[294,6928+12])
                Pexp_construct "PVar" (lib/IL.ml[294,6928+6]..[294,6928+10])
                Some
                  expression (lib/IL.ml[294,6928+11]..[294,6928+12])
                    Pexp_ident "x" (lib/IL.ml[294,6928+11]..[294,6928+12])
            <case>
              pattern (lib/IL.ml[295,6941+4]..[295,6941+13])
                Ppat_construct "XMagic" (lib/IL.ml[295,6941+4]..[295,6941+10])
                Some
                  []
                  pattern (lib/IL.ml[295,6941+11]..[295,6941+13])
                    Ppat_var "xp" (lib/IL.ml[295,6941+11]..[295,6941+13])
              expression (lib/IL.ml[296,6958+6]..[296,6958+19])
                Pexp_apply
                expression (lib/IL.ml[296,6958+6]..[296,6958+16])
                  Pexp_ident "xparam2pat" (lib/IL.ml[296,6958+6]..[296,6958+16])
                [
                  <arg>
                  Nolabel
                    expression (lib/IL.ml[296,6958+17]..[296,6958+19])
                      Pexp_ident "xp" (lib/IL.ml[296,6958+17]..[296,6958+19])
                ]
          ]
    ]
  structure_item (lib/IL.ml[298,6994+0]..[299,7009+13])
    Pstr_type Rec
    [
      type_declaration "xparams" (lib/IL.ml[298,6994+5]..[298,6994+12]) (lib/IL.ml[298,6994+0]..[299,7009+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[299,7009+2]..[299,7009+13])
              Ptyp_constr "list" (lib/IL.ml[299,7009+9]..[299,7009+13])
              [
                core_type (lib/IL.ml[299,7009+2]..[299,7009+8])
                  Ptyp_constr "xparam" (lib/IL.ml[299,7009+2]..[299,7009+8])
                  []
              ]
    ]
  structure_item (lib/IL.ml[301,7024+0]..[302,7048+26])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[301,7024+4]..[301,7024+17])
          Ppat_var "xparams2exprs" (lib/IL.ml[301,7024+4]..[301,7024+17])
        expression (lib/IL.ml[301,7024+18]..[302,7048+26]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/IL.ml[301,7024+18]..[301,7024+21])
            Ppat_var "xps" (lib/IL.ml[301,7024+18]..[301,7024+21])
          expression (lib/IL.ml[302,7048+2]..[302,7048+26])
            Pexp_apply
            expression (lib/IL.ml[302,7048+2]..[302,7048+10])
              Pexp_ident "List.map" (lib/IL.ml[302,7048+2]..[302,7048+10])
            [
              <arg>
              Nolabel
                expression (lib/IL.ml[302,7048+11]..[302,7048+22])
                  Pexp_ident "xparam2expr" (lib/IL.ml[302,7048+11]..[302,7048+22])
              <arg>
              Nolabel
                expression (lib/IL.ml[302,7048+23]..[302,7048+26])
                  Pexp_ident "xps" (lib/IL.ml[302,7048+23]..[302,7048+26])
            ]
    ]
  structure_item (lib/IL.ml[304,7076+0]..[305,7099+25])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[304,7076+4]..[304,7076+16])
          Ppat_var "xparams2pats" (lib/IL.ml[304,7076+4]..[304,7076+16])
        expression (lib/IL.ml[304,7076+17]..[305,7099+25]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/IL.ml[304,7076+17]..[304,7076+20])
            Ppat_var "xps" (lib/IL.ml[304,7076+17]..[304,7076+20])
          expression (lib/IL.ml[305,7099+2]..[305,7099+25])
            Pexp_apply
            expression (lib/IL.ml[305,7099+2]..[305,7099+10])
              Pexp_ident "List.map" (lib/IL.ml[305,7099+2]..[305,7099+10])
            [
              <arg>
              Nolabel
                expression (lib/IL.ml[305,7099+11]..[305,7099+21])
                  Pexp_ident "xparam2pat" (lib/IL.ml[305,7099+11]..[305,7099+21])
              <arg>
              Nolabel
                expression (lib/IL.ml[305,7099+22]..[305,7099+25])
                  Pexp_ident "xps" (lib/IL.ml[305,7099+22]..[305,7099+25])
            ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Ppat_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          None
        expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Pexp_apply
          expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/IL.ml[305,7099+25]..[305,7099+25]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Ppat_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          None
        expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Pexp_apply
          expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                Pexp_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                None
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Ppat_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          None
        expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Pexp_apply
          expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                Pexp_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                None
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Ppat_construct "()" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          None
        expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          Pexp_apply
          expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          [
            <arg>
            Nolabel
              expression (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/IL.ml[305,7099+25]..[305,7099+25]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set ~absolute_filename:"lib/IL.ml"
let () = Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "IL.ml"
open Positions
type interface = interface_item list
and interface_item =
  | IIFunctor of Stretch.t list * interface 
  | IIExcDecls of excdef list 
  | IITypeDecls of typedef list 
  | IIValDecls of (string * typescheme) list 
  | IIInclude of module_type 
  | IIModule of string * module_type 
  | IIComment of string 
and module_type =
  | MTNamedModuleType of string 
  | MTWithType of module_type * string list * string * with_kind * typ 
  | MTSigEnd of interface 
and with_kind =
  | WKNonDestructive 
  | WKDestructive 
and excdef = {
  excname: string ;
  exceq: string option }
and typedef =
  {
  typename: string ;
  typeparams: string list ;
  typerhs: typedefrhs ;
  typeconstraint: (typ * typ) option }
and typedefrhs =
  | TDefRecord of fielddef list 
  | TDefSum of datadef list 
  | TAbbrev of typ 
and fielddef = {
  modifiable: bool ;
  fieldname: string ;
  fieldtype: typescheme }
and datadef =
  {
  dataname: string ;
  datavalparams: typ list ;
  datatypeparams: typ list option }
and typ =
  | TypTextual of Stretch.ocamltype 
  | TypVar of string 
  | TypApp of string * typ list 
  | TypTuple of typ list 
  | TypArrow of typ * typ 
and typescheme = {
  quantifiers: string list ;
  body: typ }
and valdef = {
  valpublic: bool ;
  valpat: pattern ;
  valval: expr }
and expr =
  | EVar of string 
  | EFun of pattern list * expr 
  | EApp of expr * expr list 
  | ELet of (pattern * expr) list * expr 
  | EMatch of expr * branch list 
  | EIfThen of expr * expr 
  | EIfThenElse of expr * expr * expr 
  | ERaise of expr 
  | ETry of expr * branch list 
  | EUnit 
  | EIntConst of int 
  | EStringConst of string 
  | EData of string * expr list 
  | ETuple of expr list 
  | EAnnot of expr * typescheme 
  | EMagic of expr 
  | ERepr of expr 
  | ERecord of (string * expr) list 
  | ERecordAccess of expr * string 
  | ERecordWrite of expr * string * expr 
  | ETextual of Stretch.t 
  | EComment of string * expr 
  | EPatComment of string * pattern * expr 
  | EArray of expr list 
  | EArrayAccess of expr * expr 
and branch = {
  branchpat: pattern ;
  branchbody: expr }
and pattern =
  | PWildcard 
  | PVar of string 
  | PVarLocated of string located 
  | PUnit 
  | PData of string * pattern list 
  | PTuple of pattern list 
  | PRecord of (string * pattern) list 
  | POr of pattern list 
  | PAnnot of pattern * typ 
and modexpr =
  | MVar of string 
  | MStruct of structure 
  | MApp of modexpr * modexpr 
and program = structure
and structure = structure_item list
and structure_item =
  | SIFunctor of Stretch.t list * structure 
  | SIExcDefs of excdef list 
  | SITypeDefs of typedef list 
  | SIValDefs of bool * valdef list 
  | SIStretch of Stretch.t list 
  | SIModuleDef of string * modexpr 
  | SIInclude of modexpr 
  | SIComment of string 
type xparam =
  | XVar of string 
  | XMagic of xparam 
let xvar x = XVar x
let xmagic xp = XMagic xp
let rec xparam2expr =
  function | XVar x -> EVar x | XMagic xp -> EMagic (xparam2expr xp)
let rec xparam2pat = function | XVar x -> PVar x | XMagic xp -> xparam2pat xp
type xparams = xparam list
let xparams2exprs xps = List.map xparam2expr xps
let xparams2pats xps = List.map xparam2pat xps
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
                Texp_constant Const_string("lib/IL.ml",(lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost
                Texp_constant Const_string("IL.ml",(lib/IL.ml[14,976+0]..lib/IL.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[14,976+0]..lib/IL.ml[14,976+14])
    Tstr_open Fresh
    module_expr (lib/IL.ml[14,976+5]..lib/IL.ml[14,976+14])
      Tmod_ident "Gbnf_parser!.Positions"
  structure_item (lib/IL.ml[18,1057+0]..lib/IL.ml[271,6517+23])
    Tstr_type Rec
    [
      type_declaration interface/1167 (lib/IL.ml[18,1057+0]..lib/IL.ml[19,1074+21])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[19,1074+2]..lib/IL.ml[19,1074+21])
              Ttyp_constr "list/9!"
              [
                core_type (lib/IL.ml[19,1074+2]..lib/IL.ml[19,1074+16])
                  Ttyp_constr "interface_item/1168"
                  []
              ]
      type_declaration interface_item/1168 (lib/IL.ml[21,1097+0]..lib/IL.ml[35,1609+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[23,1194+2]..lib/IL.ml[23,1194+43])
                IIFunctor/1186
                [
                  core_type (lib/IL.ml[23,1194+17]..lib/IL.ml[23,1194+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[23,1194+17]..lib/IL.ml[23,1194+26])
                        Ttyp_constr "Gbnf_parser!.Stretch.t"
                        []
                    ]
                  core_type (lib/IL.ml[23,1194+34]..lib/IL.ml[23,1194+43])
                    Ttyp_constr "interface/1167"
                    []
                ]
                None
              (lib/IL.ml[25,1272+2]..lib/IL.ml[25,1272+29])
                IIExcDecls/1189
                [
                  core_type (lib/IL.ml[25,1272+18]..lib/IL.ml[25,1272+29])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[25,1272+18]..lib/IL.ml[25,1272+24])
                        Ttyp_constr "excdef/1171"
                        []
                    ]
                ]
                None
              (lib/IL.ml[27,1367+2]..lib/IL.ml[27,1367+31])
                IITypeDecls/1190
                [
                  core_type (lib/IL.ml[27,1367+19]..lib/IL.ml[27,1367+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[27,1367+19]..lib/IL.ml[27,1367+26])
                        Ttyp_constr "typedef/1172"
                        []
                    ]
                ]
                None
              (lib/IL.ml[29,1429+2]..lib/IL.ml[29,1429+44])
                IIValDecls/1191
                [
                  core_type (lib/IL.ml[29,1429+18]..lib/IL.ml[29,1429+44])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[29,1429+19]..lib/IL.ml[29,1429+38])
                        Ttyp_tuple
                        [
                          core_type (lib/IL.ml[29,1429+19]..lib/IL.ml[29,1429+25])
                            Ttyp_constr "string/15!"
                            []
                          core_type (lib/IL.ml[29,1429+28]..lib/IL.ml[29,1429+38])
                            Ttyp_constr "typescheme/1177"
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[31,1503+2]..lib/IL.ml[31,1503+28])
                IIInclude/1192
                [
                  core_type (lib/IL.ml[31,1503+17]..lib/IL.ml[31,1503+28])
                    Ttyp_constr "module_type/1169"
                    []
                ]
                None
              (lib/IL.ml[33,1553+2]..lib/IL.ml[33,1553+36])
                IIModule/1193
                [
                  core_type (lib/IL.ml[33,1553+16]..lib/IL.ml[33,1553+22])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[33,1553+25]..lib/IL.ml[33,1553+36])
                    Ttyp_constr "module_type/1169"
                    []
                ]
                None
              (lib/IL.ml[35,1609+2]..lib/IL.ml[35,1609+23])
                IIComment/1194
                [
                  core_type (lib/IL.ml[35,1609+17]..lib/IL.ml[35,1609+23])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration module_type/1169 (lib/IL.ml[37,1634+0]..lib/IL.ml[40,1755+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[38,1652+2]..lib/IL.ml[38,1652+31])
                MTNamedModuleType/1195
                [
                  core_type (lib/IL.ml[38,1652+25]..lib/IL.ml[38,1652+31])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[39,1684+2]..lib/IL.ml[39,1684+70])
                MTWithType/1196
                [
                  core_type (lib/IL.ml[39,1684+18]..lib/IL.ml[39,1684+29])
                    Ttyp_constr "module_type/1169"
                    []
                  core_type (lib/IL.ml[39,1684+32]..lib/IL.ml[39,1684+43])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[39,1684+32]..lib/IL.ml[39,1684+38])
                        Ttyp_constr "string/15!"
                        []
                    ]
                  core_type (lib/IL.ml[39,1684+46]..lib/IL.ml[39,1684+52])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[39,1684+55]..lib/IL.ml[39,1684+64])
                    Ttyp_constr "with_kind/1170"
                    []
                  core_type (lib/IL.ml[39,1684+67]..lib/IL.ml[39,1684+70])
                    Ttyp_constr "typ/1176"
                    []
                ]
                None
              (lib/IL.ml[40,1755+2]..lib/IL.ml[40,1755+25])
                MTSigEnd/1197
                [
                  core_type (lib/IL.ml[40,1755+16]..lib/IL.ml[40,1755+25])
                    Ttyp_constr "interface/1167"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration with_kind/1170 (lib/IL.ml[42,1782+0]..lib/IL.ml[44,1827+17])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[43,1798+2]..lib/IL.ml[43,1798+20])
                WKNonDestructive/1198
                []
                None
              (lib/IL.ml[44,1827+2]..lib/IL.ml[44,1827+17])
                WKDestructive/1199
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration excdef/1171 (lib/IL.ml[46,1857+0]..lib/IL.ml[54,1984+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[49,1906+4]..lib/IL.ml[49,1906+20])
                Immutable
                excname/1200                core_type (lib/IL.ml[49,1906+13]..lib/IL.ml[49,1906+19])
                  Ttyp_poly
                  core_type (lib/IL.ml[49,1906+13]..lib/IL.ml[49,1906+19])
                    Ttyp_constr "string/15!"
                    []
              (lib/IL.ml[52,1957+4]..lib/IL.ml[52,1957+25])
                Immutable
                exceq/1201                core_type (lib/IL.ml[52,1957+11]..lib/IL.ml[52,1957+24])
                  Ttyp_poly
                  core_type (lib/IL.ml[52,1957+11]..lib/IL.ml[52,1957+24])
                    Ttyp_constr "option/10!"
                    [
                      core_type (lib/IL.ml[52,1957+11]..lib/IL.ml[52,1957+17])
                        Ttyp_constr "string/15!"
                        []
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typedef/1172 (lib/IL.ml[56,1989+0]..lib/IL.ml[72,2386+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[59,2049+4]..lib/IL.ml[59,2049+21])
                Immutable
                typename/1202                core_type (lib/IL.ml[59,2049+14]..lib/IL.ml[59,2049+20])
                  Ttyp_poly
                  core_type (lib/IL.ml[59,2049+14]..lib/IL.ml[59,2049+20])
                    Ttyp_constr "string/15!"
                    []
              (lib/IL.ml[64,2239+4]..lib/IL.ml[64,2239+28])
                Immutable
                typeparams/1203                core_type (lib/IL.ml[64,2239+16]..lib/IL.ml[64,2239+27])
                  Ttyp_poly
                  core_type (lib/IL.ml[64,2239+16]..lib/IL.ml[64,2239+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[64,2239+16]..lib/IL.ml[64,2239+22])
                        Ttyp_constr "string/15!"
                        []
                    ]
              (lib/IL.ml[67,2298+4]..lib/IL.ml[67,2298+24])
                Immutable
                typerhs/1204                core_type (lib/IL.ml[67,2298+13]..lib/IL.ml[67,2298+23])
                  Ttyp_poly
                  core_type (lib/IL.ml[67,2298+13]..lib/IL.ml[67,2298+23])
                    Ttyp_constr "typedefrhs/1173"
                    []
              (lib/IL.ml[70,2346+4]..lib/IL.ml[70,2346+38])
                Immutable
                typeconstraint/1205                core_type (lib/IL.ml[70,2346+20]..lib/IL.ml[70,2346+38])
                  Ttyp_poly
                  core_type (lib/IL.ml[70,2346+20]..lib/IL.ml[70,2346+38])
                    Ttyp_constr "option/10!"
                    [
                      core_type (lib/IL.ml[70,2346+21]..lib/IL.ml[70,2346+30])
                        Ttyp_tuple
                        [
                          core_type (lib/IL.ml[70,2346+21]..lib/IL.ml[70,2346+24])
                            Ttyp_constr "typ/1176"
                            []
                          core_type (lib/IL.ml[70,2346+27]..lib/IL.ml[70,2346+30])
                            Ttyp_constr "typ/1176"
                            []
                        ]
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typedefrhs/1173 (lib/IL.ml[74,2391+0]..lib/IL.ml[77,2468+18])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[75,2408+2]..lib/IL.ml[75,2408+31])
                TDefRecord/1206
                [
                  core_type (lib/IL.ml[75,2408+18]..lib/IL.ml[75,2408+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[75,2408+18]..lib/IL.ml[75,2408+26])
                        Ttyp_constr "fielddef/1174"
                        []
                    ]
                ]
                None
              (lib/IL.ml[76,2440+2]..lib/IL.ml[76,2440+27])
                TDefSum/1207
                [
                  core_type (lib/IL.ml[76,2440+15]..lib/IL.ml[76,2440+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[76,2440+15]..lib/IL.ml[76,2440+22])
                        Ttyp_constr "datadef/1175"
                        []
                    ]
                ]
                None
              (lib/IL.ml[77,2468+2]..lib/IL.ml[77,2468+18])
                TAbbrev/1208
                [
                  core_type (lib/IL.ml[77,2468+15]..lib/IL.ml[77,2468+18])
                    Ttyp_constr "typ/1176"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration fielddef/1174 (lib/IL.ml[79,2488+0]..lib/IL.ml[90,2678+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[82,2546+4]..lib/IL.ml[82,2546+21])
                Immutable
                modifiable/1209                core_type (lib/IL.ml[82,2546+16]..lib/IL.ml[82,2546+20])
                  Ttyp_poly
                  core_type (lib/IL.ml[82,2546+16]..lib/IL.ml[82,2546+20])
                    Ttyp_constr "bool/5!"
                    []
              (lib/IL.ml[85,2598+4]..lib/IL.ml[85,2598+22])
                Immutable
                fieldname/1210                core_type (lib/IL.ml[85,2598+15]..lib/IL.ml[85,2598+21])
                  Ttyp_poly
                  core_type (lib/IL.ml[85,2598+15]..lib/IL.ml[85,2598+21])
                    Ttyp_constr "string/15!"
                    []
              (lib/IL.ml[88,2651+4]..lib/IL.ml[88,2651+25])
                Immutable
                fieldtype/1211                core_type (lib/IL.ml[88,2651+15]..lib/IL.ml[88,2651+25])
                  Ttyp_poly
                  core_type (lib/IL.ml[88,2651+15]..lib/IL.ml[88,2651+25])
                    Ttyp_constr "typescheme/1177"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration datadef/1175 (lib/IL.ml[92,2683+0]..lib/IL.ml[104,2975+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[95,2740+4]..lib/IL.ml[95,2740+21])
                Immutable
                dataname/1212                core_type (lib/IL.ml[95,2740+14]..lib/IL.ml[95,2740+20])
                  Ttyp_poly
                  core_type (lib/IL.ml[95,2740+14]..lib/IL.ml[95,2740+20])
                    Ttyp_constr "string/15!"
                    []
              (lib/IL.ml[98,2804+4]..lib/IL.ml[98,2804+28])
                Immutable
                datavalparams/1213                core_type (lib/IL.ml[98,2804+19]..lib/IL.ml[98,2804+27])
                  Ttyp_poly
                  core_type (lib/IL.ml[98,2804+19]..lib/IL.ml[98,2804+27])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[98,2804+19]..lib/IL.ml[98,2804+22])
                        Ttyp_constr "typ/1176"
                        []
                    ]
              (lib/IL.ml[102,2937+4]..lib/IL.ml[102,2937+36])
                Immutable
                datatypeparams/1214                core_type (lib/IL.ml[102,2937+20]..lib/IL.ml[102,2937+35])
                  Ttyp_poly
                  core_type (lib/IL.ml[102,2937+20]..lib/IL.ml[102,2937+35])
                    Ttyp_constr "option/10!"
                    [
                      core_type (lib/IL.ml[102,2937+20]..lib/IL.ml[102,2937+28])
                        Ttyp_constr "list/9!"
                        [
                          core_type (lib/IL.ml[102,2937+20]..lib/IL.ml[102,2937+23])
                            Ttyp_constr "typ/1176"
                            []
                        ]
                    ]
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typ/1176 (lib/IL.ml[106,2980+0]..lib/IL.ml[121,3308+25])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[109,3019+2]..lib/IL.ml[109,3019+35])
                TypTextual/1215
                [
                  core_type (lib/IL.ml[109,3019+18]..lib/IL.ml[109,3019+35])
                    Ttyp_constr "Gbnf_parser!.Stretch.ocamltype"
                    []
                ]
                None
              (lib/IL.ml[112,3123+2]..lib/IL.ml[112,3123+20])
                TypVar/1216
                [
                  core_type (lib/IL.ml[112,3123+14]..lib/IL.ml[112,3123+20])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[115,3204+2]..lib/IL.ml[115,3204+31])
                TypApp/1217
                [
                  core_type (lib/IL.ml[115,3204+14]..lib/IL.ml[115,3204+20])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[115,3204+23]..lib/IL.ml[115,3204+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[115,3204+23]..lib/IL.ml[115,3204+26])
                        Ttyp_constr "typ/1176"
                        []
                    ]
                ]
                None
              (lib/IL.ml[118,3262+2]..lib/IL.ml[118,3262+24])
                TypTuple/1218
                [
                  core_type (lib/IL.ml[118,3262+16]..lib/IL.ml[118,3262+24])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[118,3262+16]..lib/IL.ml[118,3262+19])
                        Ttyp_constr "typ/1176"
                        []
                    ]
                ]
                None
              (lib/IL.ml[121,3308+2]..lib/IL.ml[121,3308+25])
                TypArrow/1219
                [
                  core_type (lib/IL.ml[121,3308+16]..lib/IL.ml[121,3308+19])
                    Ttyp_constr "typ/1176"
                    []
                  core_type (lib/IL.ml[121,3308+22]..lib/IL.ml[121,3308+25])
                    Ttyp_constr "typ/1176"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration typescheme/1177 (lib/IL.ml[123,3335+0]..lib/IL.ml[131,3467+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[126,3410+2]..lib/IL.ml[126,3410+27])
                Immutable
                quantifiers/1220                core_type (lib/IL.ml[126,3410+15]..lib/IL.ml[126,3410+26])
                  Ttyp_poly
                  core_type (lib/IL.ml[126,3410+15]..lib/IL.ml[126,3410+26])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[126,3410+15]..lib/IL.ml[126,3410+21])
                        Ttyp_constr "string/15!"
                        []
                    ]
              (lib/IL.ml[129,3453+2]..lib/IL.ml[129,3453+12])
                Immutable
                body/1221                core_type (lib/IL.ml[129,3453+8]..lib/IL.ml[129,3453+11])
                  Ttyp_poly
                  core_type (lib/IL.ml[129,3453+8]..lib/IL.ml[129,3453+11])
                    Ttyp_constr "typ/1176"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration valdef/1178 (lib/IL.ml[133,3472+0]..lib/IL.ml[147,3764+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[139,3635+2]..lib/IL.ml[139,3635+18])
                Immutable
                valpublic/1222                core_type (lib/IL.ml[139,3635+13]..lib/IL.ml[139,3635+17])
                  Ttyp_poly
                  core_type (lib/IL.ml[139,3635+13]..lib/IL.ml[139,3635+17])
                    Ttyp_constr "bool/5!"
                    []
              (lib/IL.ml[142,3692+2]..lib/IL.ml[142,3692+18])
                Immutable
                valpat/1223                core_type (lib/IL.ml[142,3692+10]..lib/IL.ml[142,3692+17])
                  Ttyp_poly
                  core_type (lib/IL.ml[142,3692+10]..lib/IL.ml[142,3692+17])
                    Ttyp_constr "pattern/1181"
                    []
              (lib/IL.ml[145,3748+2]..lib/IL.ml[145,3748+14])
                Immutable
                valval/1224                core_type (lib/IL.ml[145,3748+10]..lib/IL.ml[145,3748+14])
                  Ttyp_poly
                  core_type (lib/IL.ml[145,3748+10]..lib/IL.ml[145,3748+14])
                    Ttyp_constr "expr/1179"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration expr/1179 (lib/IL.ml[149,3769+0]..lib/IL.ml[205,5016+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[152,3799+2]..lib/IL.ml[152,3799+18])
                EVar/1225
                [
                  core_type (lib/IL.ml[152,3799+12]..lib/IL.ml[152,3799+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[155,3837+2]..lib/IL.ml[155,3837+31])
                EFun/1226
                [
                  core_type (lib/IL.ml[155,3837+12]..lib/IL.ml[155,3837+24])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[155,3837+12]..lib/IL.ml[155,3837+19])
                        Ttyp_constr "pattern/1181"
                        []
                    ]
                  core_type (lib/IL.ml[155,3837+27]..lib/IL.ml[155,3837+31])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[158,3893+2]..lib/IL.ml[158,3893+28])
                EApp/1227
                [
                  core_type (lib/IL.ml[158,3893+12]..lib/IL.ml[158,3893+16])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[158,3893+19]..lib/IL.ml[158,3893+28])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[158,3893+19]..lib/IL.ml[158,3893+23])
                        Ttyp_constr "expr/1179"
                        []
                    ]
                ]
                None
              (lib/IL.ml[162,4003+2]..lib/IL.ml[162,4003+40])
                ELet/1228
                [
                  core_type (lib/IL.ml[162,4003+12]..lib/IL.ml[162,4003+33])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[162,4003+13]..lib/IL.ml[162,4003+27])
                        Ttyp_tuple
                        [
                          core_type (lib/IL.ml[162,4003+13]..lib/IL.ml[162,4003+20])
                            Ttyp_constr "pattern/1181"
                            []
                          core_type (lib/IL.ml[162,4003+23]..lib/IL.ml[162,4003+27])
                            Ttyp_constr "expr/1179"
                            []
                        ]
                    ]
                  core_type (lib/IL.ml[162,4003+36]..lib/IL.ml[162,4003+40])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[165,4068+2]..lib/IL.ml[165,4068+32])
                EMatch/1229
                [
                  core_type (lib/IL.ml[165,4068+14]..lib/IL.ml[165,4068+18])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[165,4068+21]..lib/IL.ml[165,4068+32])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[165,4068+21]..lib/IL.ml[165,4068+27])
                        Ttyp_constr "branch/1180"
                        []
                    ]
                ]
                None
              (lib/IL.ml[166,4101+2]..lib/IL.ml[166,4101+26])
                EIfThen/1230
                [
                  core_type (lib/IL.ml[166,4101+15]..lib/IL.ml[166,4101+19])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[166,4101+22]..lib/IL.ml[166,4101+26])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[167,4128+2]..lib/IL.ml[167,4128+37])
                EIfThenElse/1231
                [
                  core_type (lib/IL.ml[167,4128+19]..lib/IL.ml[167,4128+23])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[167,4128+26]..lib/IL.ml[167,4128+30])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[167,4128+33]..lib/IL.ml[167,4128+37])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[170,4195+2]..lib/IL.ml[170,4195+18])
                ERaise/1232
                [
                  core_type (lib/IL.ml[170,4195+14]..lib/IL.ml[170,4195+18])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[173,4243+2]..lib/IL.ml[173,4243+30])
                ETry/1233
                [
                  core_type (lib/IL.ml[173,4243+12]..lib/IL.ml[173,4243+16])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[173,4243+19]..lib/IL.ml[173,4243+30])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[173,4243+19]..lib/IL.ml[173,4243+25])
                        Ttyp_constr "branch/1180"
                        []
                    ]
                ]
                None
              (lib/IL.ml[178,4419+2]..lib/IL.ml[178,4419+9])
                EUnit/1234
                []
                None
              (lib/IL.ml[179,4429+2]..lib/IL.ml[179,4429+20])
                EIntConst/1235
                [
                  core_type (lib/IL.ml[179,4429+17]..lib/IL.ml[179,4429+20])
                    Ttyp_constr "int/1!"
                    []
                ]
                None
              (lib/IL.ml[180,4450+2]..lib/IL.ml[180,4450+26])
                EStringConst/1236
                [
                  core_type (lib/IL.ml[180,4450+20]..lib/IL.ml[180,4450+26])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[181,4477+2]..lib/IL.ml[181,4477+31])
                EData/1237
                [
                  core_type (lib/IL.ml[181,4477+13]..lib/IL.ml[181,4477+19])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[181,4477+22]..lib/IL.ml[181,4477+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[181,4477+22]..lib/IL.ml[181,4477+26])
                        Ttyp_constr "expr/1179"
                        []
                    ]
                ]
                None
              (lib/IL.ml[182,4509+2]..lib/IL.ml[182,4509+23])
                ETuple/1238
                [
                  core_type (lib/IL.ml[182,4509+14]..lib/IL.ml[182,4509+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[182,4509+14]..lib/IL.ml[182,4509+18])
                        Ttyp_constr "expr/1179"
                        []
                    ]
                ]
                None
              (lib/IL.ml[185,4559+2]..lib/IL.ml[185,4559+31])
                EAnnot/1239
                [
                  core_type (lib/IL.ml[185,4559+14]..lib/IL.ml[185,4559+18])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[185,4559+21]..lib/IL.ml[185,4559+31])
                    Ttyp_constr "typescheme/1177"
                    []
                ]
                None
              (lib/IL.ml[188,4629+2]..lib/IL.ml[188,4629+18])
                EMagic/1240
                [
                  core_type (lib/IL.ml[188,4629+14]..lib/IL.ml[188,4629+18])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[189,4664+2]..lib/IL.ml[189,4664+17])
                ERepr/1241
                [
                  core_type (lib/IL.ml[189,4664+13]..lib/IL.ml[189,4664+17])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[192,4716+2]..lib/IL.ml[192,4716+35])
                ERecord/1242
                [
                  core_type (lib/IL.ml[192,4716+15]..lib/IL.ml[192,4716+35])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[192,4716+16]..lib/IL.ml[192,4716+29])
                        Ttyp_tuple
                        [
                          core_type (lib/IL.ml[192,4716+16]..lib/IL.ml[192,4716+22])
                            Ttyp_constr "string/15!"
                            []
                          core_type (lib/IL.ml[192,4716+25]..lib/IL.ml[192,4716+29])
                            Ttyp_constr "expr/1179"
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[193,4752+2]..lib/IL.ml[193,4752+34])
                ERecordAccess/1243
                [
                  core_type (lib/IL.ml[193,4752+21]..lib/IL.ml[193,4752+25])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[193,4752+28]..lib/IL.ml[193,4752+34])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[194,4787+2]..lib/IL.ml[194,4787+40])
                ERecordWrite/1244
                [
                  core_type (lib/IL.ml[194,4787+20]..lib/IL.ml[194,4787+24])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[194,4787+27]..lib/IL.ml[194,4787+33])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[194,4787+36]..lib/IL.ml[194,4787+40])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[197,4857+2]..lib/IL.ml[197,4857+25])
                ETextual/1245
                [
                  core_type (lib/IL.ml[197,4857+16]..lib/IL.ml[197,4857+25])
                    Ttyp_constr "Gbnf_parser!.Stretch.t"
                    []
                ]
                None
              (lib/IL.ml[200,4902+2]..lib/IL.ml[200,4902+29])
                EComment/1246
                [
                  core_type (lib/IL.ml[200,4902+16]..lib/IL.ml[200,4902+22])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[200,4902+25]..lib/IL.ml[200,4902+29])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[201,4932+2]..lib/IL.ml[201,4932+42])
                EPatComment/1247
                [
                  core_type (lib/IL.ml[201,4932+19]..lib/IL.ml[201,4932+25])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[201,4932+28]..lib/IL.ml[201,4932+35])
                    Ttyp_constr "pattern/1181"
                    []
                  core_type (lib/IL.ml[201,4932+38]..lib/IL.ml[201,4932+42])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
              (lib/IL.ml[204,4992+2]..lib/IL.ml[204,4992+23])
                EArray/1248
                [
                  core_type (lib/IL.ml[204,4992+14]..lib/IL.ml[204,4992+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[204,4992+14]..lib/IL.ml[204,4992+18])
                        Ttyp_constr "expr/1179"
                        []
                    ]
                ]
                None
              (lib/IL.ml[205,5016+2]..lib/IL.ml[205,5016+31])
                EArrayAccess/1249
                [
                  core_type (lib/IL.ml[205,5016+20]..lib/IL.ml[205,5016+24])
                    Ttyp_constr "expr/1179"
                    []
                  core_type (lib/IL.ml[205,5016+27]..lib/IL.ml[205,5016+31])
                    Ttyp_constr "expr/1179"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration branch/1180 (lib/IL.ml[207,5049+0]..lib/IL.ml[215,5154+3])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_record
            [
              (lib/IL.ml[210,5089+2]..lib/IL.ml[210,5089+21])
                Immutable
                branchpat/1250                core_type (lib/IL.ml[210,5089+13]..lib/IL.ml[210,5089+20])
                  Ttyp_poly
                  core_type (lib/IL.ml[210,5089+13]..lib/IL.ml[210,5089+20])
                    Ttyp_constr "pattern/1181"
                    []
              (lib/IL.ml[213,5133+2]..lib/IL.ml[213,5133+19])
                Immutable
                branchbody/1251                core_type (lib/IL.ml[213,5133+14]..lib/IL.ml[213,5133+18])
                  Ttyp_poly
                  core_type (lib/IL.ml[213,5133+14]..lib/IL.ml[213,5133+18])
                    Ttyp_constr "expr/1179"
                    []
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration pattern/1181 (lib/IL.ml[217,5159+0]..lib/IL.ml[238,5670+27])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[220,5192+2]..lib/IL.ml[220,5192+13])
                PWildcard/1252
                []
                None
              (lib/IL.ml[223,5225+2]..lib/IL.ml[223,5225+18])
                PVar/1253
                [
                  core_type (lib/IL.ml[223,5225+12]..lib/IL.ml[223,5225+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[224,5244+2]..lib/IL.ml[224,5244+33])
                PVarLocated/1254
                [
                  core_type (lib/IL.ml[224,5244+19]..lib/IL.ml[224,5244+33])
                    Ttyp_constr "Gbnf_parser!.Positions.located"
                    [
                      core_type (lib/IL.ml[224,5244+19]..lib/IL.ml[224,5244+25])
                        Ttyp_constr "string/15!"
                        []
                    ]
                ]
                None
              (lib/IL.ml[229,5487+2]..lib/IL.ml[229,5487+9])
                PUnit/1255
                []
                None
              (lib/IL.ml[230,5497+2]..lib/IL.ml[230,5497+34])
                PData/1256
                [
                  core_type (lib/IL.ml[230,5497+13]..lib/IL.ml[230,5497+19])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[230,5497+22]..lib/IL.ml[230,5497+34])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[230,5497+22]..lib/IL.ml[230,5497+29])
                        Ttyp_constr "pattern/1181"
                        []
                    ]
                ]
                None
              (lib/IL.ml[231,5532+2]..lib/IL.ml[231,5532+26])
                PTuple/1257
                [
                  core_type (lib/IL.ml[231,5532+14]..lib/IL.ml[231,5532+26])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[231,5532+14]..lib/IL.ml[231,5532+21])
                        Ttyp_constr "pattern/1181"
                        []
                    ]
                ]
                None
              (lib/IL.ml[232,5559+2]..lib/IL.ml[232,5559+38])
                PRecord/1258
                [
                  core_type (lib/IL.ml[232,5559+15]..lib/IL.ml[232,5559+38])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[232,5559+16]..lib/IL.ml[232,5559+32])
                        Ttyp_tuple
                        [
                          core_type (lib/IL.ml[232,5559+16]..lib/IL.ml[232,5559+22])
                            Ttyp_constr "string/15!"
                            []
                          core_type (lib/IL.ml[232,5559+25]..lib/IL.ml[232,5559+32])
                            Ttyp_constr "pattern/1181"
                            []
                        ]
                    ]
                ]
                None
              (lib/IL.ml[235,5620+2]..lib/IL.ml[235,5620+23])
                POr/1259
                [
                  core_type (lib/IL.ml[235,5620+11]..lib/IL.ml[235,5620+23])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[235,5620+11]..lib/IL.ml[235,5620+18])
                        Ttyp_constr "pattern/1181"
                        []
                    ]
                ]
                None
              (lib/IL.ml[238,5670+2]..lib/IL.ml[238,5670+27])
                PAnnot/1260
                [
                  core_type (lib/IL.ml[238,5670+14]..lib/IL.ml[238,5670+21])
                    Ttyp_constr "pattern/1181"
                    []
                  core_type (lib/IL.ml[238,5670+24]..lib/IL.ml[238,5670+27])
                    Ttyp_constr "typ/1176"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration modexpr/1182 (lib/IL.ml[242,5726+0]..lib/IL.ml[245,5788+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[243,5740+4]..lib/IL.ml[243,5740+20])
                MVar/1261
                [
                  core_type (lib/IL.ml[243,5740+14]..lib/IL.ml[243,5740+20])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[244,5761+4]..lib/IL.ml[244,5761+26])
                MStruct/1262
                [
                  core_type (lib/IL.ml[244,5761+17]..lib/IL.ml[244,5761+26])
                    Ttyp_constr "structure/1184"
                    []
                ]
                None
              (lib/IL.ml[245,5788+4]..lib/IL.ml[245,5788+31])
                MApp/1263
                [
                  core_type (lib/IL.ml[245,5788+14]..lib/IL.ml[245,5788+21])
                    Ttyp_constr "modexpr/1182"
                    []
                  core_type (lib/IL.ml[245,5788+24]..lib/IL.ml[245,5788+31])
                    Ttyp_constr "modexpr/1182"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
      type_declaration program/1183 (lib/IL.ml[249,5840+0]..lib/IL.ml[250,5854+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[250,5854+4]..lib/IL.ml[250,5854+13])
              Ttyp_constr "structure/1184"
              []
      type_declaration structure/1184 (lib/IL.ml[252,5869+0]..lib/IL.ml[253,5885+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[253,5885+4]..lib/IL.ml[253,5885+23])
              Ttyp_constr "list/9!"
              [
                core_type (lib/IL.ml[253,5885+4]..lib/IL.ml[253,5885+18])
                  Ttyp_constr "structure_item/1185"
                  []
              ]
      type_declaration structure_item/1185 (lib/IL.ml[255,5910+0]..lib/IL.ml[271,6517+23])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[257,6007+2]..lib/IL.ml[257,6007+43])
                SIFunctor/1264
                [
                  core_type (lib/IL.ml[257,6007+17]..lib/IL.ml[257,6007+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[257,6007+17]..lib/IL.ml[257,6007+26])
                        Ttyp_constr "Gbnf_parser!.Stretch.t"
                        []
                    ]
                  core_type (lib/IL.ml[257,6007+34]..lib/IL.ml[257,6007+43])
                    Ttyp_constr "structure/1184"
                    []
                ]
                None
              (lib/IL.ml[259,6084+2]..lib/IL.ml[259,6084+28])
                SIExcDefs/1265
                [
                  core_type (lib/IL.ml[259,6084+17]..lib/IL.ml[259,6084+28])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[259,6084+17]..lib/IL.ml[259,6084+23])
                        Ttyp_constr "excdef/1171"
                        []
                    ]
                ]
                None
              (lib/IL.ml[261,6177+2]..lib/IL.ml[261,6177+30])
                SITypeDefs/1266
                [
                  core_type (lib/IL.ml[261,6177+18]..lib/IL.ml[261,6177+30])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[261,6177+18]..lib/IL.ml[261,6177+25])
                        Ttyp_constr "typedef/1172"
                        []
                    ]
                ]
                None
              (lib/IL.ml[263,6282+2]..lib/IL.ml[263,6282+35])
                SIValDefs/1267
                [
                  core_type (lib/IL.ml[263,6282+17]..lib/IL.ml[263,6282+21])
                    Ttyp_constr "bool/5!"
                    []
                  core_type (lib/IL.ml[263,6282+24]..lib/IL.ml[263,6282+35])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[263,6282+24]..lib/IL.ml[263,6282+30])
                        Ttyp_constr "valdef/1178"
                        []
                    ]
                ]
                None
              (lib/IL.ml[265,6344+2]..lib/IL.ml[265,6344+31])
                SIStretch/1268
                [
                  core_type (lib/IL.ml[265,6344+17]..lib/IL.ml[265,6344+31])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/IL.ml[265,6344+17]..lib/IL.ml[265,6344+26])
                        Ttyp_constr "Gbnf_parser!.Stretch.t"
                        []
                    ]
                ]
                None
              (lib/IL.ml[267,6409+2]..lib/IL.ml[267,6409+35])
                SIModuleDef/1269
                [
                  core_type (lib/IL.ml[267,6409+19]..lib/IL.ml[267,6409+25])
                    Ttyp_constr "string/15!"
                    []
                  core_type (lib/IL.ml[267,6409+28]..lib/IL.ml[267,6409+35])
                    Ttyp_constr "modexpr/1182"
                    []
                ]
                None
              (lib/IL.ml[269,6473+2]..lib/IL.ml[269,6473+24])
                SIInclude/1270
                [
                  core_type (lib/IL.ml[269,6473+17]..lib/IL.ml[269,6473+24])
                    Ttyp_constr "modexpr/1182"
                    []
                ]
                None
              (lib/IL.ml[271,6517+2]..lib/IL.ml[271,6517+23])
                SIComment/1271
                [
                  core_type (lib/IL.ml[271,6517+17]..lib/IL.ml[271,6517+23])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/IL.ml[276,6671+0]..lib/IL.ml[278,6704+20])
    Tstr_type Rec
    [
      type_declaration xparam/1309 (lib/IL.ml[276,6671+0]..lib/IL.ml[278,6704+20])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/IL.ml[277,6685+2]..lib/IL.ml[277,6685+18])
                XVar/1310
                [
                  core_type (lib/IL.ml[277,6685+12]..lib/IL.ml[277,6685+18])
                    Ttyp_constr "string/15!"
                    []
                ]
                None
              (lib/IL.ml[278,6704+2]..lib/IL.ml[278,6704+20])
                XMagic/1311
                [
                  core_type (lib/IL.ml[278,6704+14]..lib/IL.ml[278,6704+20])
                    Ttyp_constr "xparam/1309"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/IL.ml[280,6726+0]..lib/IL.ml[281,6739+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[280,6726+4]..lib/IL.ml[280,6726+8])
          Tpat_var "xvar/1312"
        expression (lib/IL.ml[280,6726+9]..lib/IL.ml[281,6739+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[280,6726+9]..lib/IL.ml[280,6726+10])
                Tpat_var "x/1314"
              expression (lib/IL.ml[281,6739+2]..lib/IL.ml[281,6739+8])
                Texp_construct "XVar"
                [
                  expression (lib/IL.ml[281,6739+7]..lib/IL.ml[281,6739+8])
                    Texp_ident "x/1314"
                ]
          ]
    ]
  structure_item (lib/IL.ml[283,6749+0]..lib/IL.ml[284,6765+11])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[283,6749+4]..lib/IL.ml[283,6749+10])
          Tpat_var "xmagic/1315"
        expression (lib/IL.ml[283,6749+11]..lib/IL.ml[284,6765+11]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[283,6749+11]..lib/IL.ml[283,6749+13])
                Tpat_var "xp/1317"
              expression (lib/IL.ml[284,6765+2]..lib/IL.ml[284,6765+11])
                Texp_construct "XMagic"
                [
                  expression (lib/IL.ml[284,6765+9]..lib/IL.ml[284,6765+11])
                    Texp_ident "xp/1317"
                ]
          ]
    ]
  structure_item (lib/IL.ml[286,6778+0]..lib/IL.ml[290,6853+29])
    Tstr_value Rec
    [
      <def>
        pattern (lib/IL.ml[286,6778+8]..lib/IL.ml[286,6778+19])
          Tpat_var "xparam2expr/1318"
        expression (lib/IL.ml[286,6778+22]..lib/IL.ml[290,6853+29])
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[287,6809+4]..lib/IL.ml[287,6809+10])
                Tpat_construct "XVar"
                [
                  pattern (lib/IL.ml[287,6809+9]..lib/IL.ml[287,6809+10])
                    Tpat_var "x/1319"
                ]
                None
              expression (lib/IL.ml[288,6823+6]..lib/IL.ml[288,6823+12])
                Texp_construct "EVar"
                [
                  expression (lib/IL.ml[288,6823+11]..lib/IL.ml[288,6823+12])
                    Texp_ident "x/1319"
                ]
            <case>
              pattern (lib/IL.ml[289,6836+4]..lib/IL.ml[289,6836+13])
                Tpat_construct "XMagic"
                [
                  pattern (lib/IL.ml[289,6836+11]..lib/IL.ml[289,6836+13])
                    Tpat_var "xp/1320"
                ]
                None
              expression (lib/IL.ml[290,6853+6]..lib/IL.ml[290,6853+29])
                Texp_construct "EMagic"
                [
                  expression (lib/IL.ml[290,6853+13]..lib/IL.ml[290,6853+29])
                    Texp_apply
                    expression (lib/IL.ml[290,6853+14]..lib/IL.ml[290,6853+25])
                      Texp_ident "xparam2expr/1318"
                    [
                      <arg>
                        Nolabel
                        expression (lib/IL.ml[290,6853+26]..lib/IL.ml[290,6853+28])
                          Texp_ident "xp/1320"
                    ]
                ]
          ]
    ]
  structure_item (lib/IL.ml[292,6884+0]..lib/IL.ml[296,6958+19])
    Tstr_value Rec
    [
      <def>
        pattern (lib/IL.ml[292,6884+8]..lib/IL.ml[292,6884+18])
          Tpat_var "xparam2pat/1322"
        expression (lib/IL.ml[292,6884+21]..lib/IL.ml[296,6958+19])
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[293,6914+4]..lib/IL.ml[293,6914+10])
                Tpat_construct "XVar"
                [
                  pattern (lib/IL.ml[293,6914+9]..lib/IL.ml[293,6914+10])
                    Tpat_var "x/1323"
                ]
                None
              expression (lib/IL.ml[294,6928+6]..lib/IL.ml[294,6928+12])
                Texp_construct "PVar"
                [
                  expression (lib/IL.ml[294,6928+11]..lib/IL.ml[294,6928+12])
                    Texp_ident "x/1323"
                ]
            <case>
              pattern (lib/IL.ml[295,6941+4]..lib/IL.ml[295,6941+13])
                Tpat_construct "XMagic"
                [
                  pattern (lib/IL.ml[295,6941+11]..lib/IL.ml[295,6941+13])
                    Tpat_var "xp/1324"
                ]
                None
              expression (lib/IL.ml[296,6958+6]..lib/IL.ml[296,6958+19])
                Texp_apply
                expression (lib/IL.ml[296,6958+6]..lib/IL.ml[296,6958+16])
                  Texp_ident "xparam2pat/1322"
                [
                  <arg>
                    Nolabel
                    expression (lib/IL.ml[296,6958+17]..lib/IL.ml[296,6958+19])
                      Texp_ident "xp/1324"
                ]
          ]
    ]
  structure_item (lib/IL.ml[298,6994+0]..lib/IL.ml[299,7009+13])
    Tstr_type Rec
    [
      type_declaration xparams/1326 (lib/IL.ml[298,6994+0]..lib/IL.ml[299,7009+13])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/IL.ml[299,7009+2]..lib/IL.ml[299,7009+13])
              Ttyp_constr "list/9!"
              [
                core_type (lib/IL.ml[299,7009+2]..lib/IL.ml[299,7009+8])
                  Ttyp_constr "xparam/1309"
                  []
              ]
    ]
  structure_item (lib/IL.ml[301,7024+0]..lib/IL.ml[302,7048+26])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[301,7024+4]..lib/IL.ml[301,7024+17])
          Tpat_var "xparams2exprs/1327"
        expression (lib/IL.ml[301,7024+18]..lib/IL.ml[302,7048+26]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[301,7024+18]..lib/IL.ml[301,7024+21])
                Tpat_var "xps/1329"
              expression (lib/IL.ml[302,7048+2]..lib/IL.ml[302,7048+26])
                Texp_apply
                expression (lib/IL.ml[302,7048+2]..lib/IL.ml[302,7048+10])
                  Texp_ident "Stdlib!.List.map"
                [
                  <arg>
                    Nolabel
                    expression (lib/IL.ml[302,7048+11]..lib/IL.ml[302,7048+22])
                      Texp_ident "xparam2expr/1318"
                  <arg>
                    Nolabel
                    expression (lib/IL.ml[302,7048+23]..lib/IL.ml[302,7048+26])
                      Texp_ident "xps/1329"
                ]
          ]
    ]
  structure_item (lib/IL.ml[304,7076+0]..lib/IL.ml[305,7099+25])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[304,7076+4]..lib/IL.ml[304,7076+16])
          Tpat_var "xparams2pats/1396"
        expression (lib/IL.ml[304,7076+17]..lib/IL.ml[305,7099+25]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/IL.ml[304,7076+17]..lib/IL.ml[304,7076+20])
                Tpat_var "xps/1398"
              expression (lib/IL.ml[305,7099+2]..lib/IL.ml[305,7099+25])
                Texp_apply
                expression (lib/IL.ml[305,7099+2]..lib/IL.ml[305,7099+10])
                  Texp_ident "Stdlib!.List.map"
                [
                  <arg>
                    Nolabel
                    expression (lib/IL.ml[305,7099+11]..lib/IL.ml[305,7099+21])
                      Texp_ident "xparam2pat/1322"
                  <arg>
                    Nolabel
                    expression (lib/IL.ml[305,7099+22]..lib/IL.ml[305,7099+25])
                      Texp_ident "xps/1398"
                ]
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Texp_apply
          expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost,None)
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Texp_apply
          expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Texp_apply
          expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
          Texp_apply
          expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/IL.ml[305,7099+25]..lib/IL.ml[305,7099+25]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__IL>
 "branch"[type] -> <Gbnf_parser__IL.13>;
 "datadef"[type] -> <Gbnf_parser__IL.8>;
 "excdef"[type] -> <Gbnf_parser__IL.4>;
 "expr"[type] -> <Gbnf_parser__IL.12>;
 "fielddef"[type] -> <Gbnf_parser__IL.7>;
 "interface"[type] -> <Gbnf_parser__IL.0>;
 "interface_item"[type] -> <Gbnf_parser__IL.1>;
 "modexpr"[type] -> <Gbnf_parser__IL.15>;
 "module_type"[type] -> <Gbnf_parser__IL.2>;
 "pattern"[type] -> <Gbnf_parser__IL.14>;
 "program"[type] -> <Gbnf_parser__IL.16>;
 "structure"[type] -> <Gbnf_parser__IL.17>;
 "structure_item"[type] -> <Gbnf_parser__IL.18>;
 "typ"[type] -> <Gbnf_parser__IL.9>;
 "typedef"[type] -> <Gbnf_parser__IL.5>;
 "typedefrhs"[type] -> <Gbnf_parser__IL.6>;
 "typescheme"[type] -> <Gbnf_parser__IL.10>;
 "valdef"[type] -> <Gbnf_parser__IL.11>;
 "with_kind"[type] -> <Gbnf_parser__IL.3>;
 "xmagic"[value] -> <Gbnf_parser__IL.108>;
 "xparam"[type] -> <Gbnf_parser__IL.103>;
 "xparam2expr"[value] -> <Gbnf_parser__IL.110>;
 "xparam2pat"[value] -> <Gbnf_parser__IL.113>;
 "xparams"[type] -> <Gbnf_parser__IL.116>;
 "xparams2exprs"[value] -> <Gbnf_parser__IL.117>;
 "xparams2pats"[value] -> <Gbnf_parser__IL.119>;
 "xvar"[value] -> <Gbnf_parser__IL.106>;
 }

(setglobal Gbnf_parser__IL!
  (let
    (*match*/1860 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__IL"))
     *match*/1858 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply
           (field_imm 0
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1856 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
           "lib/IL.ml"))
     *match*/1854 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "IL.ml"))
     xvar/1312 =
       (function x/1314
         (funct-body Gbnf_parser__IL.xvar lib/IL.ml(280)<ghost>:6735-6747
           (before Gbnf_parser__IL.xvar lib/IL.ml(281):6741-6747
             (makeblock 0 x/1314))))
     xmagic/1315 =
       (function xp/1317
         (funct-body Gbnf_parser__IL.xmagic lib/IL.ml(283)<ghost>:6760-6776
           (before Gbnf_parser__IL.xmagic lib/IL.ml(284):6767-6776
             (makeblock 1 xp/1317)))))
    (letrec
      (xparam2expr/1318
         (function param/1321
           (funct-body Gbnf_parser__IL.xparam2expr lib/IL.ml(286):6800-6882
             (switch* param/1321
              case tag 0:
               (let (x/1319 =a (field_imm 0 param/1321))
                 (before Gbnf_parser__IL.xparam2expr lib/IL.ml(288):6829-6835
                   (makeblock 0 x/1319)))
              case tag 1:
               (let (xp/1320 =a (field_imm 0 param/1321))
                 (before Gbnf_parser__IL.xparam2expr lib/IL.ml(290):6859-6882
                   (makeblock 14
                     (after Gbnf_parser__IL.xparam2expr lib/IL.ml(290):6866-6882
                       (apply xparam2expr/1318 xp/1320)))))))))
      (letrec
        (xparam2pat/1322
           (function param/1325
             (funct-body Gbnf_parser__IL.xparam2pat lib/IL.ml(292):6905-6977
               (switch* param/1325
                case tag 0:
                 (let (x/1323 =a (field_imm 0 param/1325))
                   (before Gbnf_parser__IL.xparam2pat lib/IL.ml(294):6934-6940
                     (makeblock 0 x/1323)))
                case tag 1:
                 (let (xp/1324 =a (field_imm 0 param/1325))
                   (before Gbnf_parser__IL.xparam2pat lib/IL.ml(296):6964-6977
                     (after Gbnf_parser__IL.xparam2pat lib/IL.ml(296):6964-6977
                       (apply xparam2pat/1322 xp/1324))))))))
        (let
          (xparams2exprs/1327 =
             (function xps/1329
               (funct-body Gbnf_parser__IL.xparams2exprs lib/IL.ml(301)<ghost>:7042-7074
                 (before Gbnf_parser__IL.xparams2exprs lib/IL.ml(302):7050-7074
                   (after Gbnf_parser__IL.xparams2exprs lib/IL.ml(302):7050-7074
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2expr/1318 xps/1329)))))
           xparams2pats/1396 =
             (function xps/1398
               (funct-body Gbnf_parser__IL.xparams2pats lib/IL.ml(304)<ghost>:7093-7124
                 (before Gbnf_parser__IL.xparams2pats lib/IL.ml(305):7101-7124
                   (after Gbnf_parser__IL.xparams2pats lib/IL.ml(305):7101-7124
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2pat/1322 xps/1398)))))
           *match*/1852 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply (field_imm 5 (global Ppx_inline_test_lib!))
                 "gbnf_parser"))
           *match*/1850 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply
                 (field_imm 1 (field_imm 5 (global Expect_test_collector!)))
                 0))
           *match*/1848 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply
                 (field_imm 1
                   (field_imm 0
                     (global Ppx_bench_lib__Benchmark_accumulator!)))
                 0))
           *match*/1846 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply (field_imm 4 (global Ppx_module_timer_runtime!))
                 #"Gbnf_parser__IL")))
          (pseudo <unknown location>
            (makeblock 0 xvar/1312 xmagic/1315 xparam2expr/1318
              xparam2pat/1322 xparams2exprs/1327 xparams2pats/1396)))))))
(setglobal Gbnf_parser__IL!
  (let
    (*match*/1860 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__IL"))
     *match*/1858 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply
           (field_imm 0
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1856 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
           "lib/IL.ml"))
     *match*/1854 =
       (after Gbnf_parser__IL lib/IL.ml(14)<ghost>:976-976
         (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "IL.ml"))
     xvar/1312 =
       (function x/1314
         (funct-body Gbnf_parser__IL.xvar lib/IL.ml(280)<ghost>:6735-6747
           (before Gbnf_parser__IL.xvar lib/IL.ml(281):6741-6747
             (makeblock 0 x/1314))))
     xmagic/1315 =
       (function xp/1317
         (funct-body Gbnf_parser__IL.xmagic lib/IL.ml(283)<ghost>:6760-6776
           (before Gbnf_parser__IL.xmagic lib/IL.ml(284):6767-6776
             (makeblock 1 xp/1317)))))
    (letrec
      (xparam2expr/1318
         (function param/1321
           (funct-body Gbnf_parser__IL.xparam2expr lib/IL.ml(286):6800-6882
             (switch* param/1321
              case tag 0:
               (let (x/1319 =a (field_imm 0 param/1321))
                 (before Gbnf_parser__IL.xparam2expr lib/IL.ml(288):6829-6835
                   (makeblock 0 x/1319)))
              case tag 1:
               (let (xp/1320 =a (field_imm 0 param/1321))
                 (before Gbnf_parser__IL.xparam2expr lib/IL.ml(290):6859-6882
                   (makeblock 14
                     (after Gbnf_parser__IL.xparam2expr lib/IL.ml(290):6866-6882
                       (apply xparam2expr/1318 xp/1320)))))))))
      (letrec
        (xparam2pat/1322
           (function param/1325
             (funct-body Gbnf_parser__IL.xparam2pat lib/IL.ml(292):6905-6977
               (switch* param/1325
                case tag 0:
                 (let (x/1323 =a (field_imm 0 param/1325))
                   (before Gbnf_parser__IL.xparam2pat lib/IL.ml(294):6934-6940
                     (makeblock 0 x/1323)))
                case tag 1:
                 (let (xp/1324 =a (field_imm 0 param/1325))
                   (before Gbnf_parser__IL.xparam2pat lib/IL.ml(296):6964-6977
                     (after Gbnf_parser__IL.xparam2pat lib/IL.ml(296):6964-6977
                       (apply xparam2pat/1322 xp/1324))))))))
        (let
          (xparams2exprs/1327 =
             (function xps/1329
               (funct-body Gbnf_parser__IL.xparams2exprs lib/IL.ml(301)<ghost>:7042-7074
                 (before Gbnf_parser__IL.xparams2exprs lib/IL.ml(302):7050-7074
                   (after Gbnf_parser__IL.xparams2exprs lib/IL.ml(302):7050-7074
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2expr/1318 xps/1329)))))
           xparams2pats/1396 =
             (function xps/1398
               (funct-body Gbnf_parser__IL.xparams2pats lib/IL.ml(304)<ghost>:7093-7124
                 (before Gbnf_parser__IL.xparams2pats lib/IL.ml(305):7101-7124
                   (after Gbnf_parser__IL.xparams2pats lib/IL.ml(305):7101-7124
                     (apply (field_imm 19 (global Stdlib__List!))
                       xparam2pat/1322 xps/1398)))))
           *match*/1852 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply (field_imm 5 (global Ppx_inline_test_lib!))
                 "gbnf_parser"))
           *match*/1850 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply
                 (field_imm 1 (field_imm 5 (global Expect_test_collector!)))
                 0))
           *match*/1848 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply
                 (field_imm 1
                   (field_imm 0
                     (global Ppx_bench_lib__Benchmark_accumulator!)))
                 0))
           *match*/1846 =
             (after Gbnf_parser__IL lib/IL.ml(305)<ghost>:7124-7124
               (apply (field_imm 4 (global Ppx_module_timer_runtime!))
                 #"Gbnf_parser__IL")))
          (pseudo <unknown location>
            (makeblock 0 xvar/1312 xmagic/1315 xparam2expr/1318
              xparam2pat/1322 xparams2exprs/1327 xparams2pats/1396)))))))
