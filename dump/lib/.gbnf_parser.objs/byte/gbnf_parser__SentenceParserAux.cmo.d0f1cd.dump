[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
                Pexp_constant PConst_string("lib/sentenceParserAux.ml",(lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost
                Pexp_constant PConst_string("sentenceParserAux.ml",(lib/sentenceParserAux.ml[22,1070+0]..[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..[23,1088+44])
    Pstr_type Rec
    [
      type_declaration "raw_symbol" (lib/sentenceParserAux.ml[22,1070+5]..[22,1070+15]) (lib/sentenceParserAux.ml[22,1070+0]..[23,1088+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[23,1088+2]..[23,1088+44])
              Ptyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[23,1088+2]..[23,1088+8])
                  Ptyp_constr "string" (lib/sentenceParserAux.ml[23,1088+2]..[23,1088+8])
                  []
                core_type (lib/sentenceParserAux.ml[23,1088+11]..[23,1088+26])
                  Ptyp_constr "Lexing.position" (lib/sentenceParserAux.ml[23,1088+11]..[23,1088+26])
                  []
                core_type (lib/sentenceParserAux.ml[23,1088+29]..[23,1088+44])
                  Ptyp_constr "Lexing.position" (lib/sentenceParserAux.ml[23,1088+29]..[23,1088+44])
                  []
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[25,1134+0]..[26,1157+12])
    Pstr_type Rec
    [
      type_declaration "raw_nonterminal" (lib/sentenceParserAux.ml[25,1134+5]..[25,1134+20]) (lib/sentenceParserAux.ml[25,1134+0]..[26,1157+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[26,1157+2]..[26,1157+12])
              Ptyp_constr "raw_symbol" (lib/sentenceParserAux.ml[26,1157+2]..[26,1157+12])
              []
    ]
  structure_item (lib/sentenceParserAux.ml[28,1171+0]..[29,1191+12])
    Pstr_type Rec
    [
      type_declaration "raw_terminal" (lib/sentenceParserAux.ml[28,1171+5]..[28,1171+17]) (lib/sentenceParserAux.ml[28,1171+0]..[29,1191+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[29,1191+2]..[29,1191+12])
              Ptyp_constr "raw_symbol" (lib/sentenceParserAux.ml[29,1191+2]..[29,1191+12])
              []
    ]
  structure_item (lib/sentenceParserAux.ml[31,1205+0]..[32,1225+44])
    Pstr_type Rec
    [
      type_declaration "raw_sentence" (lib/sentenceParserAux.ml[31,1205+5]..[31,1205+17]) (lib/sentenceParserAux.ml[31,1205+0]..[32,1225+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[32,1225+2]..[32,1225+44])
              Ptyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[32,1225+2]..[32,1225+24])
                  Ptyp_constr "option" (lib/sentenceParserAux.ml[32,1225+18]..[32,1225+24])
                  [
                    core_type (lib/sentenceParserAux.ml[32,1225+2]..[32,1225+17])
                      Ptyp_constr "raw_nonterminal" (lib/sentenceParserAux.ml[32,1225+2]..[32,1225+17])
                      []
                  ]
                core_type (lib/sentenceParserAux.ml[32,1225+27]..[32,1225+44])
                  Ptyp_constr "list" (lib/sentenceParserAux.ml[32,1225+40]..[32,1225+44])
                  [
                    core_type (lib/sentenceParserAux.ml[32,1225+27]..[32,1225+39])
                      Ptyp_constr "raw_terminal" (lib/sentenceParserAux.ml[32,1225+27]..[32,1225+39])
                      []
                  ]
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[33,1270+0]..[34,1299+35])
    Pstr_type Rec
    [
      type_declaration "located_raw_sentence" (lib/sentenceParserAux.ml[33,1270+5]..[33,1270+25]) (lib/sentenceParserAux.ml[33,1270+0]..[34,1299+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[34,1299+1]..[34,1299+35])
              Ptyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[34,1299+1]..[34,1299+20])
                  Ptyp_constr "Positions.positions" (lib/sentenceParserAux.ml[34,1299+1]..[34,1299+20])
                  []
                core_type (lib/sentenceParserAux.ml[34,1299+23]..[34,1299+35])
                  Ptyp_constr "raw_sentence" (lib/sentenceParserAux.ml[34,1299+23]..[34,1299+35])
                  []
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[40,1407+0]..[41,1422+8])
    Pstr_type Rec
    [
      type_declaration "comment" (lib/sentenceParserAux.ml[40,1407+5]..[40,1407+12]) (lib/sentenceParserAux.ml[40,1407+0]..[41,1422+8])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[41,1422+2]..[41,1422+8])
              Ptyp_constr "string" (lib/sentenceParserAux.ml[41,1422+2]..[41,1422+8])
              []
    ]
  structure_item (lib/sentenceParserAux.ml[43,1432+0]..[45,1467+20])
    Pstr_type Rec
    [
      type_declaration "or_comment" (lib/sentenceParserAux.ml[43,1432+8]..[43,1432+18]) (lib/sentenceParserAux.ml[43,1432+0]..[45,1467+20])
        ptype_params =
          [
            core_type (lib/sentenceParserAux.ml[43,1432+5]..[43,1432+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (lib/sentenceParserAux.ml[44,1453+0]..[44,1453+13])
                "Thing" (lib/sentenceParserAux.ml[44,1453+2]..[44,1453+7])
                [
                  core_type (lib/sentenceParserAux.ml[44,1453+11]..[44,1453+13])
                    Ptyp_var a
                ]
                None
              (lib/sentenceParserAux.ml[45,1467+0]..[45,1467+20])
                "Comment" (lib/sentenceParserAux.ml[45,1467+2]..[45,1467+9])
                [
                  core_type (lib/sentenceParserAux.ml[45,1467+13]..[45,1467+20])
                    Ptyp_constr "comment" (lib/sentenceParserAux.ml[45,1467+13]..[45,1467+20])
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/sentenceParserAux.ml[47,1489+0]..[51,1564+8])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[47,1489+4]..[47,1489+19])
          Ppat_var "or_comment_iter" (lib/sentenceParserAux.ml[47,1489+4]..[47,1489+19])
        expression (lib/sentenceParserAux.ml[47,1489+20]..[51,1564+8]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[47,1489+20]..[47,1489+21])
            Ppat_var "f" (lib/sentenceParserAux.ml[47,1489+20]..[47,1489+21])
          expression (lib/sentenceParserAux.ml[47,1489+24]..[51,1564+8])
            Pexp_function
            [
              <case>
                pattern (lib/sentenceParserAux.ml[48,1522+4]..[48,1522+11])
                  Ppat_construct "Thing" (lib/sentenceParserAux.ml[48,1522+4]..[48,1522+9])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[48,1522+10]..[48,1522+11])
                      Ppat_var "s" (lib/sentenceParserAux.ml[48,1522+10]..[48,1522+11])
                expression (lib/sentenceParserAux.ml[49,1537+6]..[49,1537+9])
                  Pexp_apply
                  expression (lib/sentenceParserAux.ml[49,1537+6]..[49,1537+7])
                    Pexp_ident "f" (lib/sentenceParserAux.ml[49,1537+6]..[49,1537+7])
                  [
                    <arg>
                    Nolabel
                      expression (lib/sentenceParserAux.ml[49,1537+8]..[49,1537+9])
                        Pexp_ident "s" (lib/sentenceParserAux.ml[49,1537+8]..[49,1537+9])
                  ]
              <case>
                pattern (lib/sentenceParserAux.ml[50,1547+4]..[50,1547+13])
                  Ppat_construct "Comment" (lib/sentenceParserAux.ml[50,1547+4]..[50,1547+11])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[50,1547+12]..[50,1547+13])
                      Ppat_any
                expression (lib/sentenceParserAux.ml[51,1564+6]..[51,1564+8])
                  Pexp_construct "()" (lib/sentenceParserAux.ml[51,1564+6]..[51,1564+8])
                  None
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[53,1574+0]..[57,1659+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[53,1574+4]..[53,1574+19])
          Ppat_var "or_comment_fold" (lib/sentenceParserAux.ml[53,1574+4]..[53,1574+19])
        expression (lib/sentenceParserAux.ml[53,1574+20]..[57,1659+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[53,1574+20]..[53,1574+21])
            Ppat_var "f" (lib/sentenceParserAux.ml[53,1574+20]..[53,1574+21])
          expression (lib/sentenceParserAux.ml[53,1574+22]..[57,1659+10]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/sentenceParserAux.ml[53,1574+22]..[53,1574+26])
              Ppat_var "accu" (lib/sentenceParserAux.ml[53,1574+22]..[53,1574+26])
            expression (lib/sentenceParserAux.ml[53,1574+29]..[57,1659+10])
              Pexp_function
              [
                <case>
                  pattern (lib/sentenceParserAux.ml[54,1612+4]..[54,1612+11])
                    Ppat_construct "Thing" (lib/sentenceParserAux.ml[54,1612+4]..[54,1612+9])
                    Some
                      []
                      pattern (lib/sentenceParserAux.ml[54,1612+10]..[54,1612+11])
                        Ppat_var "s" (lib/sentenceParserAux.ml[54,1612+10]..[54,1612+11])
                  expression (lib/sentenceParserAux.ml[55,1627+6]..[55,1627+14])
                    Pexp_apply
                    expression (lib/sentenceParserAux.ml[55,1627+6]..[55,1627+7])
                      Pexp_ident "f" (lib/sentenceParserAux.ml[55,1627+6]..[55,1627+7])
                    [
                      <arg>
                      Nolabel
                        expression (lib/sentenceParserAux.ml[55,1627+8]..[55,1627+12])
                          Pexp_ident "accu" (lib/sentenceParserAux.ml[55,1627+8]..[55,1627+12])
                      <arg>
                      Nolabel
                        expression (lib/sentenceParserAux.ml[55,1627+13]..[55,1627+14])
                          Pexp_ident "s" (lib/sentenceParserAux.ml[55,1627+13]..[55,1627+14])
                    ]
                <case>
                  pattern (lib/sentenceParserAux.ml[56,1642+4]..[56,1642+13])
                    Ppat_construct "Comment" (lib/sentenceParserAux.ml[56,1642+4]..[56,1642+11])
                    Some
                      []
                      pattern (lib/sentenceParserAux.ml[56,1642+12]..[56,1642+13])
                        Ppat_any
                  expression (lib/sentenceParserAux.ml[57,1659+6]..[57,1659+10])
                    Pexp_ident "accu" (lib/sentenceParserAux.ml[57,1659+6]..[57,1659+10])
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[59,1671+0]..[63,1753+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[59,1671+4]..[59,1671+18])
          Ppat_var "or_comment_map" (lib/sentenceParserAux.ml[59,1671+4]..[59,1671+18])
        expression (lib/sentenceParserAux.ml[59,1671+19]..[63,1753+15]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[59,1671+19]..[59,1671+20])
            Ppat_var "f" (lib/sentenceParserAux.ml[59,1671+19]..[59,1671+20])
          expression (lib/sentenceParserAux.ml[59,1671+23]..[63,1753+15])
            Pexp_function
            [
              <case>
                pattern (lib/sentenceParserAux.ml[60,1703+4]..[60,1703+11])
                  Ppat_construct "Thing" (lib/sentenceParserAux.ml[60,1703+4]..[60,1703+9])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[60,1703+10]..[60,1703+11])
                      Ppat_var "s" (lib/sentenceParserAux.ml[60,1703+10]..[60,1703+11])
                expression (lib/sentenceParserAux.ml[61,1718+6]..[61,1718+17])
                  Pexp_construct "Thing" (lib/sentenceParserAux.ml[61,1718+6]..[61,1718+11])
                  Some
                    expression (lib/sentenceParserAux.ml[61,1718+12]..[61,1718+17])
                      Pexp_apply
                      expression (lib/sentenceParserAux.ml[61,1718+13]..[61,1718+14])
                        Pexp_ident "f" (lib/sentenceParserAux.ml[61,1718+13]..[61,1718+14])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParserAux.ml[61,1718+15]..[61,1718+16])
                            Pexp_ident "s" (lib/sentenceParserAux.ml[61,1718+15]..[61,1718+16])
                      ]
              <case>
                pattern (lib/sentenceParserAux.ml[62,1736+4]..[62,1736+13])
                  Ppat_construct "Comment" (lib/sentenceParserAux.ml[62,1736+4]..[62,1736+11])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[62,1736+12]..[62,1736+13])
                      Ppat_var "c" (lib/sentenceParserAux.ml[62,1736+12]..[62,1736+13])
                expression (lib/sentenceParserAux.ml[63,1753+6]..[63,1753+15])
                  Pexp_construct "Comment" (lib/sentenceParserAux.ml[63,1753+6]..[63,1753+13])
                  Some
                    expression (lib/sentenceParserAux.ml[63,1753+14]..[63,1753+15])
                      Pexp_ident "c" (lib/sentenceParserAux.ml[63,1753+14]..[63,1753+15])
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[65,1770+0]..[69,1858+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[65,1770+4]..[65,1770+25])
          Ppat_var "or_comment_filter_map" (lib/sentenceParserAux.ml[65,1770+4]..[65,1770+25])
        expression (lib/sentenceParserAux.ml[65,1770+26]..[69,1858+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[65,1770+26]..[65,1770+27])
            Ppat_var "f" (lib/sentenceParserAux.ml[65,1770+26]..[65,1770+27])
          expression (lib/sentenceParserAux.ml[65,1770+30]..[69,1858+10])
            Pexp_function
            [
              <case>
                pattern (lib/sentenceParserAux.ml[66,1809+4]..[66,1809+11])
                  Ppat_construct "Thing" (lib/sentenceParserAux.ml[66,1809+4]..[66,1809+9])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[66,1809+10]..[66,1809+11])
                      Ppat_var "s" (lib/sentenceParserAux.ml[66,1809+10]..[66,1809+11])
                expression (lib/sentenceParserAux.ml[67,1824+6]..[67,1824+16])
                  Pexp_construct "Some" (lib/sentenceParserAux.ml[67,1824+6]..[67,1824+10])
                  Some
                    expression (lib/sentenceParserAux.ml[67,1824+11]..[67,1824+16])
                      Pexp_apply
                      expression (lib/sentenceParserAux.ml[67,1824+12]..[67,1824+13])
                        Pexp_ident "f" (lib/sentenceParserAux.ml[67,1824+12]..[67,1824+13])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParserAux.ml[67,1824+14]..[67,1824+15])
                            Pexp_ident "s" (lib/sentenceParserAux.ml[67,1824+14]..[67,1824+15])
                      ]
              <case>
                pattern (lib/sentenceParserAux.ml[68,1841+4]..[68,1841+13])
                  Ppat_construct "Comment" (lib/sentenceParserAux.ml[68,1841+4]..[68,1841+11])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[68,1841+12]..[68,1841+13])
                      Ppat_any
                expression (lib/sentenceParserAux.ml[69,1858+6]..[69,1858+10])
                  Pexp_construct "None" (lib/sentenceParserAux.ml[69,1858+6]..[69,1858+10])
                  None
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[71,1870+0]..[75,1954+10])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[71,1870+4]..[71,1870+20])
          Ppat_var "or_comment_count" (lib/sentenceParserAux.ml[71,1870+4]..[71,1870+20])
        expression (lib/sentenceParserAux.ml[71,1870+21]..[75,1954+10]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[71,1870+21]..[71,1870+25])
            Ppat_var "accu" (lib/sentenceParserAux.ml[71,1870+21]..[71,1870+25])
          expression (lib/sentenceParserAux.ml[71,1870+28]..[75,1954+10])
            Pexp_function
            [
              <case>
                pattern (lib/sentenceParserAux.ml[72,1907+4]..[72,1907+11])
                  Ppat_construct "Thing" (lib/sentenceParserAux.ml[72,1907+4]..[72,1907+9])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[72,1907+10]..[72,1907+11])
                      Ppat_any
                expression (lib/sentenceParserAux.ml[73,1922+6]..[73,1922+14])
                  Pexp_apply
                  expression (lib/sentenceParserAux.ml[73,1922+11]..[73,1922+12])
                    Pexp_ident "+" (lib/sentenceParserAux.ml[73,1922+11]..[73,1922+12])
                  [
                    <arg>
                    Nolabel
                      expression (lib/sentenceParserAux.ml[73,1922+6]..[73,1922+10])
                        Pexp_ident "accu" (lib/sentenceParserAux.ml[73,1922+6]..[73,1922+10])
                    <arg>
                    Nolabel
                      expression (lib/sentenceParserAux.ml[73,1922+13]..[73,1922+14])
                        Pexp_constant PConst_int (1,None)
                  ]
              <case>
                pattern (lib/sentenceParserAux.ml[74,1937+4]..[74,1937+13])
                  Ppat_construct "Comment" (lib/sentenceParserAux.ml[74,1937+4]..[74,1937+11])
                  Some
                    []
                    pattern (lib/sentenceParserAux.ml[74,1937+12]..[74,1937+13])
                      Ppat_any
                expression (lib/sentenceParserAux.ml[75,1954+6]..[75,1954+10])
                  Pexp_ident "accu" (lib/sentenceParserAux.ml[75,1954+6]..[75,1954+10])
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[77,1966+0]..[78,2011+38])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[77,1966+4]..[77,1966+16])
          Ppat_var "count_things" (lib/sentenceParserAux.ml[77,1966+4]..[77,1966+16])
        expression (lib/sentenceParserAux.ml[77,1966+17]..[78,2011+38]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[77,1966+17]..[77,1966+42])
            Ppat_constraint
            pattern (lib/sentenceParserAux.ml[77,1966+18]..[77,1966+20])
              Ppat_var "xs" (lib/sentenceParserAux.ml[77,1966+18]..[77,1966+20])
            core_type (lib/sentenceParserAux.ml[77,1966+23]..[77,1966+41])
              Ptyp_constr "list" (lib/sentenceParserAux.ml[77,1966+37]..[77,1966+41])
              [
                core_type (lib/sentenceParserAux.ml[77,1966+23]..[77,1966+36])
                  Ptyp_constr "or_comment" (lib/sentenceParserAux.ml[77,1966+26]..[77,1966+36])
                  [
                    core_type (lib/sentenceParserAux.ml[77,1966+23]..[77,1966+25])
                      Ptyp_var a
                  ]
              ]
          expression (lib/sentenceParserAux.ml[78,2011+2]..[78,2011+38])
            Pexp_apply
            expression (lib/sentenceParserAux.ml[78,2011+2]..[78,2011+16])
              Pexp_ident "List.fold_left" (lib/sentenceParserAux.ml[78,2011+2]..[78,2011+16])
            [
              <arg>
              Nolabel
                expression (lib/sentenceParserAux.ml[78,2011+17]..[78,2011+33])
                  Pexp_ident "or_comment_count" (lib/sentenceParserAux.ml[78,2011+17]..[78,2011+33])
              <arg>
              Nolabel
                expression (lib/sentenceParserAux.ml[78,2011+34]..[78,2011+35])
                  Pexp_constant PConst_int (0,None)
              <arg>
              Nolabel
                expression (lib/sentenceParserAux.ml[78,2011+36]..[78,2011+38])
                  Pexp_ident "xs" (lib/sentenceParserAux.ml[78,2011+36]..[78,2011+38])
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[80,2051+0]..[89,2283+5])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[80,2051+4]..[80,2051+10])
          Ppat_var "inject" (lib/sentenceParserAux.ml[80,2051+4]..[80,2051+10])
        expression (lib/sentenceParserAux.ml[80,2051+11]..[89,2283+5]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParserAux.ml[80,2051+11]..[80,2051+14])
            Ppat_var "e" (lib/sentenceParserAux.ml[80,2051+12]..[80,2051+13])
          expression (lib/sentenceParserAux.ml[81,2069+2]..[89,2283+5])
            Pexp_apply
            expression (lib/sentenceParserAux.ml[81,2069+2]..[81,2069+16])
              Pexp_ident "Positions.pmap" (lib/sentenceParserAux.ml[81,2069+2]..[81,2069+16])
            [
              <arg>
              Nolabel
                expression (lib/sentenceParserAux.ml[81,2069+17]..[89,2283+3])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParserAux.ml[81,2069+22]..[81,2069+25])
                    Ppat_var "pos" (lib/sentenceParserAux.ml[81,2069+22]..[81,2069+25])
                  expression (lib/sentenceParserAux.ml[81,2069+26]..[88,2253+29]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/sentenceParserAux.ml[81,2069+26]..[81,2069+27])
                      Ppat_var "e" (lib/sentenceParserAux.ml[81,2069+26]..[81,2069+27])
                    expression (lib/sentenceParserAux.ml[82,2100+4]..[88,2253+29])
                      Pexp_let Nonrec
                      [
                        <def>
                          pattern (lib/sentenceParserAux.ml[82,2100+8]..[82,2100+14])
                            Ppat_var "branch" (lib/sentenceParserAux.ml[82,2100+8]..[82,2100+14])
                          expression (lib/sentenceParserAux.ml[83,2117+6]..[86,2238+7])
                            Pexp_construct "Syntax.Branch" (lib/sentenceParserAux.ml[83,2117+6]..[83,2117+19])
                            Some
                              expression (lib/sentenceParserAux.ml[83,2117+20]..[86,2238+7])
                                Pexp_tuple
                                [
                                  expression (lib/sentenceParserAux.ml[84,2139+10]..[84,2139+54])
                                    Pexp_apply
                                    expression (lib/sentenceParserAux.ml[84,2139+10]..[84,2139+28])
                                      Pexp_ident "Positions.with_pos" (lib/sentenceParserAux.ml[84,2139+10]..[84,2139+28])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParserAux.ml[84,2139+29]..[84,2139+32])
                                          Pexp_ident "pos" (lib/sentenceParserAux.ml[84,2139+29]..[84,2139+32])
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParserAux.ml[84,2139+33]..[84,2139+54])
                                          Pexp_construct "Syntax.ESingleton" (lib/sentenceParserAux.ml[84,2139+34]..[84,2139+51])
                                          Some
                                            expression (lib/sentenceParserAux.ml[84,2139+52]..[84,2139+53])
                                              Pexp_ident "e" (lib/sentenceParserAux.ml[84,2139+52]..[84,2139+53])
                                    ]
                                  expression (lib/sentenceParserAux.ml[85,2195+10]..[85,2195+42])
                                    Pexp_apply
                                    expression (lib/sentenceParserAux.ml[85,2195+10]..[85,2195+40])
                                      Pexp_ident "ParserAux.new_production_level" (lib/sentenceParserAux.ml[85,2195+10]..[85,2195+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParserAux.ml[85,2195+40]..[85,2195+42])
                                          Pexp_construct "()" (lib/sentenceParserAux.ml[85,2195+40]..[85,2195+42])
                                          None
                                    ]
                                ]
                      ]
                      expression (lib/sentenceParserAux.ml[88,2253+4]..[88,2253+29])
                        Pexp_construct "Syntax.EChoice" (lib/sentenceParserAux.ml[88,2253+4]..[88,2253+18])
                        Some
                          expression (lib/sentenceParserAux.ml[88,2253+19]..[88,2253+29])
                            Pexp_construct "::" (lib/sentenceParserAux.ml[88,2253+21]..[88,2253+29]) ghost
                            Some
                              expression (lib/sentenceParserAux.ml[88,2253+21]..[88,2253+29]) ghost
                                Pexp_tuple
                                [
                                  expression (lib/sentenceParserAux.ml[88,2253+21]..[88,2253+27])
                                    Pexp_ident "branch" (lib/sentenceParserAux.ml[88,2253+21]..[88,2253+27])
                                  expression (lib/sentenceParserAux.ml[88,2253+28]..[88,2253+29]) ghost
                                    Pexp_construct "[]" (lib/sentenceParserAux.ml[88,2253+28]..[88,2253+29]) ghost
                                    None
                                ]
              <arg>
              Nolabel
                expression (lib/sentenceParserAux.ml[89,2283+4]..[89,2283+5])
                  Pexp_ident "e" (lib/sentenceParserAux.ml[89,2283+4]..[89,2283+5])
            ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                Pexp_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                Pexp_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Ppat_construct "()" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          Pexp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParserAux.ml[89,2283+5]..[89,2283+5]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/sentenceParserAux.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser"
    "sentenceParserAux.ml"
type raw_symbol = (string * Lexing.position * Lexing.position)
type raw_nonterminal = raw_symbol
type raw_terminal = raw_symbol
type raw_sentence = (raw_nonterminal option * raw_terminal list)
type located_raw_sentence = (Positions.positions * raw_sentence)
type comment = string
type 'a or_comment =
  | Thing of 'a 
  | Comment of comment 
let or_comment_iter f = function | Thing s -> f s | Comment _ -> ()
let or_comment_fold f accu =
  function | Thing s -> f accu s | Comment _ -> accu
let or_comment_map f =
  function | Thing s -> Thing (f s) | Comment c -> Comment c
let or_comment_filter_map f =
  function | Thing s -> Some (f s) | Comment _ -> None
let or_comment_count accu =
  function | Thing _ -> accu + 1 | Comment _ -> accu
let count_things (xs : 'a or_comment list) =
  List.fold_left or_comment_count 0 xs
let inject e =
  Positions.pmap
    (fun pos ->
       fun e ->
         let branch =
           Syntax.Branch
             ((Positions.with_pos pos (Syntax.ESingleton e)),
               (ParserAux.new_production_level ())) in
         Syntax.EChoice [branch]) e
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
                Texp_constant Const_string("lib/sentenceParserAux.ml",(lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost
                Texp_constant Const_string("sentenceParserAux.ml",(lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[22,1070+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[23,1088+44])
    Tstr_type Rec
    [
      type_declaration raw_symbol/1132 (lib/sentenceParserAux.ml[22,1070+0]..lib/sentenceParserAux.ml[23,1088+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[23,1088+2]..lib/sentenceParserAux.ml[23,1088+44])
              Ttyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[23,1088+2]..lib/sentenceParserAux.ml[23,1088+8])
                  Ttyp_constr "string/15!"
                  []
                core_type (lib/sentenceParserAux.ml[23,1088+11]..lib/sentenceParserAux.ml[23,1088+26])
                  Ttyp_constr "Stdlib!.Lexing.position"
                  []
                core_type (lib/sentenceParserAux.ml[23,1088+29]..lib/sentenceParserAux.ml[23,1088+44])
                  Ttyp_constr "Stdlib!.Lexing.position"
                  []
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[25,1134+0]..lib/sentenceParserAux.ml[26,1157+12])
    Tstr_type Rec
    [
      type_declaration raw_nonterminal/1181 (lib/sentenceParserAux.ml[25,1134+0]..lib/sentenceParserAux.ml[26,1157+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[26,1157+2]..lib/sentenceParserAux.ml[26,1157+12])
              Ttyp_constr "raw_symbol/1132"
              []
    ]
  structure_item (lib/sentenceParserAux.ml[28,1171+0]..lib/sentenceParserAux.ml[29,1191+12])
    Tstr_type Rec
    [
      type_declaration raw_terminal/1182 (lib/sentenceParserAux.ml[28,1171+0]..lib/sentenceParserAux.ml[29,1191+12])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[29,1191+2]..lib/sentenceParserAux.ml[29,1191+12])
              Ttyp_constr "raw_symbol/1132"
              []
    ]
  structure_item (lib/sentenceParserAux.ml[31,1205+0]..lib/sentenceParserAux.ml[32,1225+44])
    Tstr_type Rec
    [
      type_declaration raw_sentence/1183 (lib/sentenceParserAux.ml[31,1205+0]..lib/sentenceParserAux.ml[32,1225+44])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[32,1225+2]..lib/sentenceParserAux.ml[32,1225+44])
              Ttyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[32,1225+2]..lib/sentenceParserAux.ml[32,1225+24])
                  Ttyp_constr "option/10!"
                  [
                    core_type (lib/sentenceParserAux.ml[32,1225+2]..lib/sentenceParserAux.ml[32,1225+17])
                      Ttyp_constr "raw_nonterminal/1181"
                      []
                  ]
                core_type (lib/sentenceParserAux.ml[32,1225+27]..lib/sentenceParserAux.ml[32,1225+44])
                  Ttyp_constr "list/9!"
                  [
                    core_type (lib/sentenceParserAux.ml[32,1225+27]..lib/sentenceParserAux.ml[32,1225+39])
                      Ttyp_constr "raw_terminal/1182"
                      []
                  ]
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[33,1270+0]..lib/sentenceParserAux.ml[34,1299+35])
    Tstr_type Rec
    [
      type_declaration located_raw_sentence/1184 (lib/sentenceParserAux.ml[33,1270+0]..lib/sentenceParserAux.ml[34,1299+35])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[34,1299+1]..lib/sentenceParserAux.ml[34,1299+35])
              Ttyp_tuple
              [
                core_type (lib/sentenceParserAux.ml[34,1299+1]..lib/sentenceParserAux.ml[34,1299+20])
                  Ttyp_constr "Gbnf_parser!.Positions.positions"
                  []
                core_type (lib/sentenceParserAux.ml[34,1299+23]..lib/sentenceParserAux.ml[34,1299+35])
                  Ttyp_constr "raw_sentence/1183"
                  []
              ]
    ]
  structure_item (lib/sentenceParserAux.ml[40,1407+0]..lib/sentenceParserAux.ml[41,1422+8])
    Tstr_type Rec
    [
      type_declaration comment/1220 (lib/sentenceParserAux.ml[40,1407+0]..lib/sentenceParserAux.ml[41,1422+8])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/sentenceParserAux.ml[41,1422+2]..lib/sentenceParserAux.ml[41,1422+8])
              Ttyp_constr "string/15!"
              []
    ]
  structure_item (lib/sentenceParserAux.ml[43,1432+0]..lib/sentenceParserAux.ml[45,1467+20])
    Tstr_type Rec
    [
      type_declaration or_comment/1221 (lib/sentenceParserAux.ml[43,1432+0]..lib/sentenceParserAux.ml[45,1467+20])
        ptype_params =
          [
            core_type (lib/sentenceParserAux.ml[43,1432+5]..lib/sentenceParserAux.ml[43,1432+7])
              Ttyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_variant
            [
              (lib/sentenceParserAux.ml[44,1453+0]..lib/sentenceParserAux.ml[44,1453+13])
                Thing/1222
                [
                  core_type (lib/sentenceParserAux.ml[44,1453+11]..lib/sentenceParserAux.ml[44,1453+13])
                    Ttyp_var a
                ]
                None
              (lib/sentenceParserAux.ml[45,1467+0]..lib/sentenceParserAux.ml[45,1467+20])
                Comment/1223
                [
                  core_type (lib/sentenceParserAux.ml[45,1467+13]..lib/sentenceParserAux.ml[45,1467+20])
                    Ttyp_constr "comment/1220"
                    []
                ]
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (lib/sentenceParserAux.ml[47,1489+0]..lib/sentenceParserAux.ml[51,1564+8])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[47,1489+4]..lib/sentenceParserAux.ml[47,1489+19])
          Tpat_var "or_comment_iter/1224"
        expression (lib/sentenceParserAux.ml[47,1489+20]..lib/sentenceParserAux.ml[51,1564+8]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[47,1489+20]..lib/sentenceParserAux.ml[47,1489+21])
                Tpat_var "f/1226"
              expression (lib/sentenceParserAux.ml[47,1489+24]..lib/sentenceParserAux.ml[51,1564+8])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParserAux.ml[48,1522+4]..lib/sentenceParserAux.ml[48,1522+11])
                      Tpat_construct "Thing"
                      [
                        pattern (lib/sentenceParserAux.ml[48,1522+10]..lib/sentenceParserAux.ml[48,1522+11])
                          Tpat_var "s/1227"
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[49,1537+6]..lib/sentenceParserAux.ml[49,1537+9])
                      Texp_apply
                      expression (lib/sentenceParserAux.ml[49,1537+6]..lib/sentenceParserAux.ml[49,1537+7])
                        Texp_ident "f/1226"
                      [
                        <arg>
                          Nolabel
                          expression (lib/sentenceParserAux.ml[49,1537+8]..lib/sentenceParserAux.ml[49,1537+9])
                            Texp_ident "s/1227"
                      ]
                  <case>
                    pattern (lib/sentenceParserAux.ml[50,1547+4]..lib/sentenceParserAux.ml[50,1547+13])
                      Tpat_construct "Comment"
                      [
                        pattern (lib/sentenceParserAux.ml[50,1547+12]..lib/sentenceParserAux.ml[50,1547+13])
                          Tpat_any
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[51,1564+6]..lib/sentenceParserAux.ml[51,1564+8])
                      Texp_construct "()"
                      []
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[53,1574+0]..lib/sentenceParserAux.ml[57,1659+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[53,1574+4]..lib/sentenceParserAux.ml[53,1574+19])
          Tpat_var "or_comment_fold/1229"
        expression (lib/sentenceParserAux.ml[53,1574+20]..lib/sentenceParserAux.ml[57,1659+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[53,1574+20]..lib/sentenceParserAux.ml[53,1574+21])
                Tpat_var "f/1231"
              expression (lib/sentenceParserAux.ml[53,1574+22]..lib/sentenceParserAux.ml[57,1659+10]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParserAux.ml[53,1574+22]..lib/sentenceParserAux.ml[53,1574+26])
                      Tpat_var "accu/1232"
                    expression (lib/sentenceParserAux.ml[53,1574+29]..lib/sentenceParserAux.ml[57,1659+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParserAux.ml[54,1612+4]..lib/sentenceParserAux.ml[54,1612+11])
                            Tpat_construct "Thing"
                            [
                              pattern (lib/sentenceParserAux.ml[54,1612+10]..lib/sentenceParserAux.ml[54,1612+11])
                                Tpat_var "s/1233"
                            ]
                            None
                          expression (lib/sentenceParserAux.ml[55,1627+6]..lib/sentenceParserAux.ml[55,1627+14])
                            Texp_apply
                            expression (lib/sentenceParserAux.ml[55,1627+6]..lib/sentenceParserAux.ml[55,1627+7])
                              Texp_ident "f/1231"
                            [
                              <arg>
                                Nolabel
                                expression (lib/sentenceParserAux.ml[55,1627+8]..lib/sentenceParserAux.ml[55,1627+12])
                                  Texp_ident "accu/1232"
                              <arg>
                                Nolabel
                                expression (lib/sentenceParserAux.ml[55,1627+13]..lib/sentenceParserAux.ml[55,1627+14])
                                  Texp_ident "s/1233"
                            ]
                        <case>
                          pattern (lib/sentenceParserAux.ml[56,1642+4]..lib/sentenceParserAux.ml[56,1642+13])
                            Tpat_construct "Comment"
                            [
                              pattern (lib/sentenceParserAux.ml[56,1642+12]..lib/sentenceParserAux.ml[56,1642+13])
                                Tpat_any
                            ]
                            None
                          expression (lib/sentenceParserAux.ml[57,1659+6]..lib/sentenceParserAux.ml[57,1659+10])
                            Texp_ident "accu/1232"
                      ]
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[59,1671+0]..lib/sentenceParserAux.ml[63,1753+15])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[59,1671+4]..lib/sentenceParserAux.ml[59,1671+18])
          Tpat_var "or_comment_map/1235"
        expression (lib/sentenceParserAux.ml[59,1671+19]..lib/sentenceParserAux.ml[63,1753+15]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[59,1671+19]..lib/sentenceParserAux.ml[59,1671+20])
                Tpat_var "f/1237"
              expression (lib/sentenceParserAux.ml[59,1671+23]..lib/sentenceParserAux.ml[63,1753+15])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParserAux.ml[60,1703+4]..lib/sentenceParserAux.ml[60,1703+11])
                      Tpat_construct "Thing"
                      [
                        pattern (lib/sentenceParserAux.ml[60,1703+10]..lib/sentenceParserAux.ml[60,1703+11])
                          Tpat_var "s/1238"
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[61,1718+6]..lib/sentenceParserAux.ml[61,1718+17])
                      Texp_construct "Thing"
                      [
                        expression (lib/sentenceParserAux.ml[61,1718+12]..lib/sentenceParserAux.ml[61,1718+17])
                          Texp_apply
                          expression (lib/sentenceParserAux.ml[61,1718+13]..lib/sentenceParserAux.ml[61,1718+14])
                            Texp_ident "f/1237"
                          [
                            <arg>
                              Nolabel
                              expression (lib/sentenceParserAux.ml[61,1718+15]..lib/sentenceParserAux.ml[61,1718+16])
                                Texp_ident "s/1238"
                          ]
                      ]
                  <case>
                    pattern (lib/sentenceParserAux.ml[62,1736+4]..lib/sentenceParserAux.ml[62,1736+13])
                      Tpat_construct "Comment"
                      [
                        pattern (lib/sentenceParserAux.ml[62,1736+12]..lib/sentenceParserAux.ml[62,1736+13])
                          Tpat_var "c/1239"
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[63,1753+6]..lib/sentenceParserAux.ml[63,1753+15])
                      Texp_construct "Comment"
                      [
                        expression (lib/sentenceParserAux.ml[63,1753+14]..lib/sentenceParserAux.ml[63,1753+15])
                          Texp_ident "c/1239"
                      ]
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[65,1770+0]..lib/sentenceParserAux.ml[69,1858+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[65,1770+4]..lib/sentenceParserAux.ml[65,1770+25])
          Tpat_var "or_comment_filter_map/1241"
        expression (lib/sentenceParserAux.ml[65,1770+26]..lib/sentenceParserAux.ml[69,1858+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[65,1770+26]..lib/sentenceParserAux.ml[65,1770+27])
                Tpat_var "f/1243"
              expression (lib/sentenceParserAux.ml[65,1770+30]..lib/sentenceParserAux.ml[69,1858+10])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParserAux.ml[66,1809+4]..lib/sentenceParserAux.ml[66,1809+11])
                      Tpat_construct "Thing"
                      [
                        pattern (lib/sentenceParserAux.ml[66,1809+10]..lib/sentenceParserAux.ml[66,1809+11])
                          Tpat_var "s/1244"
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[67,1824+6]..lib/sentenceParserAux.ml[67,1824+16])
                      Texp_construct "Some"
                      [
                        expression (lib/sentenceParserAux.ml[67,1824+11]..lib/sentenceParserAux.ml[67,1824+16])
                          Texp_apply
                          expression (lib/sentenceParserAux.ml[67,1824+12]..lib/sentenceParserAux.ml[67,1824+13])
                            Texp_ident "f/1243"
                          [
                            <arg>
                              Nolabel
                              expression (lib/sentenceParserAux.ml[67,1824+14]..lib/sentenceParserAux.ml[67,1824+15])
                                Texp_ident "s/1244"
                          ]
                      ]
                  <case>
                    pattern (lib/sentenceParserAux.ml[68,1841+4]..lib/sentenceParserAux.ml[68,1841+13])
                      Tpat_construct "Comment"
                      [
                        pattern (lib/sentenceParserAux.ml[68,1841+12]..lib/sentenceParserAux.ml[68,1841+13])
                          Tpat_any
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[69,1858+6]..lib/sentenceParserAux.ml[69,1858+10])
                      Texp_construct "None"
                      []
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[71,1870+0]..lib/sentenceParserAux.ml[75,1954+10])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[71,1870+4]..lib/sentenceParserAux.ml[71,1870+20])
          Tpat_var "or_comment_count/1246"
        expression (lib/sentenceParserAux.ml[71,1870+21]..lib/sentenceParserAux.ml[75,1954+10]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[71,1870+21]..lib/sentenceParserAux.ml[71,1870+25])
                Tpat_var "accu/1248"
              expression (lib/sentenceParserAux.ml[71,1870+28]..lib/sentenceParserAux.ml[75,1954+10])
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParserAux.ml[72,1907+4]..lib/sentenceParserAux.ml[72,1907+11])
                      Tpat_construct "Thing"
                      [
                        pattern (lib/sentenceParserAux.ml[72,1907+10]..lib/sentenceParserAux.ml[72,1907+11])
                          Tpat_any
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[73,1922+6]..lib/sentenceParserAux.ml[73,1922+14])
                      Texp_apply
                      expression (lib/sentenceParserAux.ml[73,1922+11]..lib/sentenceParserAux.ml[73,1922+12])
                        Texp_ident "Stdlib!.+"
                      [
                        <arg>
                          Nolabel
                          expression (lib/sentenceParserAux.ml[73,1922+6]..lib/sentenceParserAux.ml[73,1922+10])
                            Texp_ident "accu/1248"
                        <arg>
                          Nolabel
                          expression (lib/sentenceParserAux.ml[73,1922+13]..lib/sentenceParserAux.ml[73,1922+14])
                            Texp_constant Const_int 1
                      ]
                  <case>
                    pattern (lib/sentenceParserAux.ml[74,1937+4]..lib/sentenceParserAux.ml[74,1937+13])
                      Tpat_construct "Comment"
                      [
                        pattern (lib/sentenceParserAux.ml[74,1937+12]..lib/sentenceParserAux.ml[74,1937+13])
                          Tpat_any
                      ]
                      None
                    expression (lib/sentenceParserAux.ml[75,1954+6]..lib/sentenceParserAux.ml[75,1954+10])
                      Texp_ident "accu/1248"
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[77,1966+0]..lib/sentenceParserAux.ml[78,2011+38])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[77,1966+4]..lib/sentenceParserAux.ml[77,1966+16])
          Tpat_var "count_things/1250"
        expression (lib/sentenceParserAux.ml[77,1966+17]..lib/sentenceParserAux.ml[78,2011+38]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[77,1966+18]..lib/sentenceParserAux.ml[77,1966+20])
                extra
                  Tpat_extra_constraint
                  core_type (lib/sentenceParserAux.ml[77,1966+23]..lib/sentenceParserAux.ml[77,1966+41])
                    Ttyp_constr "list/9!"
                    [
                      core_type (lib/sentenceParserAux.ml[77,1966+23]..lib/sentenceParserAux.ml[77,1966+36])
                        Ttyp_constr "or_comment/1221"
                        [
                          core_type (lib/sentenceParserAux.ml[77,1966+23]..lib/sentenceParserAux.ml[77,1966+25])
                            Ttyp_var a
                        ]
                    ]
                Tpat_alias "xs/1252"
                pattern (lib/sentenceParserAux.ml[77,1966+18]..lib/sentenceParserAux.ml[77,1966+20])
                  Tpat_any
              expression (lib/sentenceParserAux.ml[78,2011+2]..lib/sentenceParserAux.ml[78,2011+38])
                Texp_apply
                expression (lib/sentenceParserAux.ml[78,2011+2]..lib/sentenceParserAux.ml[78,2011+16])
                  Texp_ident "Stdlib!.List.fold_left"
                [
                  <arg>
                    Nolabel
                    expression (lib/sentenceParserAux.ml[78,2011+17]..lib/sentenceParserAux.ml[78,2011+33])
                      Texp_ident "or_comment_count/1246"
                  <arg>
                    Nolabel
                    expression (lib/sentenceParserAux.ml[78,2011+34]..lib/sentenceParserAux.ml[78,2011+35])
                      Texp_constant Const_int 0
                  <arg>
                    Nolabel
                    expression (lib/sentenceParserAux.ml[78,2011+36]..lib/sentenceParserAux.ml[78,2011+38])
                      Texp_ident "xs/1252"
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[80,2051+0]..lib/sentenceParserAux.ml[89,2283+5])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[80,2051+4]..lib/sentenceParserAux.ml[80,2051+10])
          Tpat_var "inject/1319"
        expression (lib/sentenceParserAux.ml[80,2051+11]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParserAux.ml[80,2051+11]..lib/sentenceParserAux.ml[80,2051+14])
                Tpat_var "e/1321"
              expression (lib/sentenceParserAux.ml[81,2069+2]..lib/sentenceParserAux.ml[89,2283+5])
                Texp_apply
                expression (lib/sentenceParserAux.ml[81,2069+2]..lib/sentenceParserAux.ml[81,2069+16])
                  Texp_ident "Gbnf_parser!.Positions.pmap"
                [
                  <arg>
                    Nolabel
                    expression (lib/sentenceParserAux.ml[81,2069+17]..lib/sentenceParserAux.ml[89,2283+3])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParserAux.ml[81,2069+22]..lib/sentenceParserAux.ml[81,2069+25])
                            Tpat_var "pos/1357"
                          expression (lib/sentenceParserAux.ml[81,2069+26]..lib/sentenceParserAux.ml[88,2253+29]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/sentenceParserAux.ml[81,2069+26]..lib/sentenceParserAux.ml[81,2069+27])
                                  Tpat_var "e/1358"
                                expression (lib/sentenceParserAux.ml[82,2100+4]..lib/sentenceParserAux.ml[88,2253+29])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParserAux.ml[82,2100+8]..lib/sentenceParserAux.ml[82,2100+14])
                                        Tpat_var "branch/1359"
                                      expression (lib/sentenceParserAux.ml[83,2117+6]..lib/sentenceParserAux.ml[86,2238+7])
                                        Texp_construct "Syntax.Branch"
                                        [
                                          expression (lib/sentenceParserAux.ml[84,2139+10]..lib/sentenceParserAux.ml[84,2139+54])
                                            Texp_apply
                                            expression (lib/sentenceParserAux.ml[84,2139+10]..lib/sentenceParserAux.ml[84,2139+28])
                                              Texp_ident "Gbnf_parser!.Positions.with_pos"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/sentenceParserAux.ml[84,2139+29]..lib/sentenceParserAux.ml[84,2139+32])
                                                  Texp_ident "pos/1357"
                                              <arg>
                                                Nolabel
                                                expression (lib/sentenceParserAux.ml[84,2139+33]..lib/sentenceParserAux.ml[84,2139+54])
                                                  Texp_construct "Syntax.ESingleton"
                                                  [
                                                    expression (lib/sentenceParserAux.ml[84,2139+52]..lib/sentenceParserAux.ml[84,2139+53])
                                                      Texp_ident "e/1358"
                                                  ]
                                            ]
                                          expression (lib/sentenceParserAux.ml[85,2195+10]..lib/sentenceParserAux.ml[85,2195+42])
                                            Texp_apply
                                            expression (lib/sentenceParserAux.ml[85,2195+10]..lib/sentenceParserAux.ml[85,2195+40])
                                              Texp_ident "Gbnf_parser!.ParserAux.new_production_level"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/sentenceParserAux.ml[85,2195+40]..lib/sentenceParserAux.ml[85,2195+42])
                                                  Texp_construct "()"
                                                  []
                                            ]
                                        ]
                                  ]
                                  expression (lib/sentenceParserAux.ml[88,2253+4]..lib/sentenceParserAux.ml[88,2253+29])
                                    Texp_construct "Syntax.EChoice"
                                    [
                                      expression (lib/sentenceParserAux.ml[88,2253+19]..lib/sentenceParserAux.ml[88,2253+29])
                                        Texp_construct "::"
                                        [
                                          expression (lib/sentenceParserAux.ml[88,2253+21]..lib/sentenceParserAux.ml[88,2253+27])
                                            Texp_ident "branch/1359"
                                          expression (lib/sentenceParserAux.ml[88,2253+28]..lib/sentenceParserAux.ml[88,2253+29]) ghost
                                            Texp_construct "[]"
                                            []
                                        ]
                                    ]
                            ]
                      ]
                  <arg>
                    Nolabel
                    expression (lib/sentenceParserAux.ml[89,2283+4]..lib/sentenceParserAux.ml[89,2283+5])
                      Texp_ident "e/1321"
                ]
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
          Texp_apply
          expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParserAux.ml[89,2283+5]..lib/sentenceParserAux.ml[89,2283+5]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__SentenceParserAux>
 "comment"[type] -> <Gbnf_parser__SentenceParserAux.5>;
 "count_things"[value] -> <Gbnf_parser__SentenceParserAux.25>;
 "inject"[value] -> <Gbnf_parser__SentenceParserAux.27>;
 "located_raw_sentence"[type] -> <Gbnf_parser__SentenceParserAux.4>;
 "or_comment"[type] -> <Gbnf_parser__SentenceParserAux.6>;
 "or_comment_count"[value] -> <Gbnf_parser__SentenceParserAux.23>;
 "or_comment_filter_map"[value] -> <Gbnf_parser__SentenceParserAux.20>;
 "or_comment_fold"[value] -> <Gbnf_parser__SentenceParserAux.12>;
 "or_comment_iter"[value] -> <Gbnf_parser__SentenceParserAux.9>;
 "or_comment_map"[value] -> <Gbnf_parser__SentenceParserAux.16>;
 "raw_nonterminal"[type] -> <Gbnf_parser__SentenceParserAux.1>;
 "raw_sentence"[type] -> <Gbnf_parser__SentenceParserAux.3>;
 "raw_symbol"[type] -> <Gbnf_parser__SentenceParserAux.0>;
 "raw_terminal"[type] -> <Gbnf_parser__SentenceParserAux.2>;
 }

(setglobal Gbnf_parser__SentenceParserAux!
  (let
    (*match*/1963 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__SentenceParserAux"))
     *match*/1961 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply
           (field_imm 0
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1959 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
           "lib/sentenceParserAux.ml"))
     *match*/1957 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "sentenceParserAux.ml"))
     or_comment_iter/1224 =
       (function f/1226 param/1228 : int
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(47)<ghost>:1509-1572
           (switch* param/1228
            case tag 0:
             (let (s/1227 =a (field_imm 0 param/1228))
               (before Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(49):1543-1546
                 (after Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(49):1543-1546
                   (apply f/1226 s/1227))))
            case tag 1:
             (let (*match*/1943 =a (field_imm 0 param/1228))
               (before Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(51):1570-1572
                 0)))))
     or_comment_fold/1229 =
       (function f/1231 accu/1232 param/1234
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(53)<ghost>:1594-1669
           (switch* param/1234
            case tag 0:
             (let (s/1233 =a (field_imm 0 param/1234))
               (before Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(55):1633-1641
                 (after Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(55):1633-1641
                   (apply f/1231 accu/1232 s/1233))))
            case tag 1:
             (let (*match*/1944 =a (field_imm 0 param/1234))
               (before Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(57):1665-1669
                 accu/1232)))))
     or_comment_map/1235 =
       (function f/1237 param/1240
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(59)<ghost>:1690-1768
           (switch* param/1240
            case tag 0:
             (let (s/1238 =a (field_imm 0 param/1240))
               (before Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(61):1724-1735
                 (makeblock 0
                   (after Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(61):1730-1735
                     (apply f/1237 s/1238)))))
            case tag 1:
             (let (c/1239 =a (field_imm 0 param/1240))
               (before Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(63):1759-1768
                 (makeblock 1 c/1239))))))
     or_comment_filter_map/1241 =
       (function f/1243 param/1245
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(65)<ghost>:1796-1868
           (switch* param/1245
            case tag 0:
             (let (s/1244 =a (field_imm 0 param/1245))
               (before Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(67):1830-1840
                 (makeblock 0
                   (after Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(67):1835-1840
                     (apply f/1243 s/1244)))))
            case tag 1:
             (let (*match*/1945 =a (field_imm 0 param/1245))
               (before Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(69):1864-1868
                 0)))))
     or_comment_count/1246 =
       (function accu/1248[int] param/1249 : int
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(71)<ghost>:1891-1964
           (switch* param/1249
            case tag 0:
             (let (*match*/1946 =a (field_imm 0 param/1249))
               (before Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(73):1928-1936
                 (+ accu/1248 1)))
            case tag 1:
             (let (*match*/1947 =a (field_imm 0 param/1249))
               (before Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(75):1960-1964
                 accu/1248)))))
     count_things/1250 =
       (function xs/1252 : int
         (funct-body Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(77)<ghost>:1983-2049
           (before Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(78):2013-2049
             (after Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(78):2013-2049
               (apply (field_imm 25 (global Stdlib__List!))
                 or_comment_count/1246 0 xs/1252)))))
     inject/1319 =
       (function e/1321
         (funct-body Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(80)<ghost>:2062-2288
           (before Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(81):2071-2288
             (after Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(81):2071-2288
               (apply (field_imm 6 (global Gbnf_parser__Positions!))
                 (function pos/1357 e/1358
                   (funct-body Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(81):2086-2286
                     (before Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(82):2104-2282
                       (let
                         (branch/1359 =
                            (makeblock 0
                              (after Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(84):2149-2193
                                (apply
                                  (field_imm 3
                                    (global Gbnf_parser__Positions!))
                                  pos/1357 (makeblock 1 e/1358)))
                              (after Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(85):2205-2237
                                (apply
                                  (field_imm 1
                                    (global Gbnf_parser__ParserAux!))
                                  0))))
                         (before Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(88):2257-2282
                           (makeblock 0 (makeblock 0 branch/1359 0)))))))
                 e/1321)))))
     *match*/1955 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/1953 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 1 (field_imm 5 (global Expect_test_collector!)))
           0))
     *match*/1951 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply
           (field_imm 1
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/1949 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__SentenceParserAux")))
    (pseudo <unknown location>
      (makeblock 0 or_comment_iter/1224 or_comment_fold/1229
        or_comment_map/1235 or_comment_filter_map/1241 or_comment_count/1246
        count_things/1250 inject/1319))))
(setglobal Gbnf_parser__SentenceParserAux!
  (let
    (*match*/1963 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__SentenceParserAux"))
     *match*/1961 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply
           (field_imm 0
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1959 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
           "lib/sentenceParserAux.ml"))
     *match*/1957 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(22)<ghost>:1070-1070
         (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "sentenceParserAux.ml"))
     or_comment_iter/1224 =
       (function f/1226 param/1228 : int
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(47)<ghost>:1509-1572
           (switch* param/1228
            case tag 0:
             (let (s/1227 =a (field_imm 0 param/1228))
               (before Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(49):1543-1546
                 (after Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(49):1543-1546
                   (apply f/1226 s/1227))))
            case tag 1:
             (before Gbnf_parser__SentenceParserAux.or_comment_iter lib/sentenceParserAux.ml(51):1570-1572
               0))))
     or_comment_fold/1229 =
       (function f/1231 accu/1232 param/1234
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(53)<ghost>:1594-1669
           (switch* param/1234
            case tag 0:
             (let (s/1233 =a (field_imm 0 param/1234))
               (before Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(55):1633-1641
                 (after Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(55):1633-1641
                   (apply f/1231 accu/1232 s/1233))))
            case tag 1:
             (before Gbnf_parser__SentenceParserAux.or_comment_fold lib/sentenceParserAux.ml(57):1665-1669
               accu/1232))))
     or_comment_map/1235 =
       (function f/1237 param/1240
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(59)<ghost>:1690-1768
           (switch* param/1240
            case tag 0:
             (let (s/1238 =a (field_imm 0 param/1240))
               (before Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(61):1724-1735
                 (makeblock 0
                   (after Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(61):1730-1735
                     (apply f/1237 s/1238)))))
            case tag 1:
             (let (c/1239 =a (field_imm 0 param/1240))
               (before Gbnf_parser__SentenceParserAux.or_comment_map lib/sentenceParserAux.ml(63):1759-1768
                 (makeblock 1 c/1239))))))
     or_comment_filter_map/1241 =
       (function f/1243 param/1245
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(65)<ghost>:1796-1868
           (switch* param/1245
            case tag 0:
             (let (s/1244 =a (field_imm 0 param/1245))
               (before Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(67):1830-1840
                 (makeblock 0
                   (after Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(67):1835-1840
                     (apply f/1243 s/1244)))))
            case tag 1:
             (before Gbnf_parser__SentenceParserAux.or_comment_filter_map lib/sentenceParserAux.ml(69):1864-1868
               0))))
     or_comment_count/1246 =
       (function accu/1248[int] param/1249 : int
         (funct-body Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(71)<ghost>:1891-1964
           (switch* param/1249
            case tag 0:
             (before Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(73):1928-1936
               (+ accu/1248 1))
            case tag 1:
             (before Gbnf_parser__SentenceParserAux.or_comment_count lib/sentenceParserAux.ml(75):1960-1964
               accu/1248))))
     count_things/1250 =
       (function xs/1252 : int
         (funct-body Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(77)<ghost>:1983-2049
           (before Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(78):2013-2049
             (after Gbnf_parser__SentenceParserAux.count_things lib/sentenceParserAux.ml(78):2013-2049
               (apply (field_imm 25 (global Stdlib__List!))
                 or_comment_count/1246 0 xs/1252)))))
     inject/1319 =
       (function e/1321
         (funct-body Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(80)<ghost>:2062-2288
           (before Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(81):2071-2288
             (after Gbnf_parser__SentenceParserAux.inject lib/sentenceParserAux.ml(81):2071-2288
               (apply (field_imm 6 (global Gbnf_parser__Positions!))
                 (function pos/1357 e/1358
                   (funct-body Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(81):2086-2286
                     (before Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(82):2104-2282
                       (let
                         (branch/1359 =
                            (makeblock 0
                              (after Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(84):2149-2193
                                (apply
                                  (field_imm 3
                                    (global Gbnf_parser__Positions!))
                                  pos/1357 (makeblock 1 e/1358)))
                              (after Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(85):2205-2237
                                (apply
                                  (field_imm 1
                                    (global Gbnf_parser__ParserAux!))
                                  0))))
                         (before Gbnf_parser__SentenceParserAux.inject.(fun) lib/sentenceParserAux.ml(88):2257-2282
                           (makeblock 0 (makeblock 0 branch/1359 0)))))))
                 e/1321)))))
     *match*/1955 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/1953 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 1 (field_imm 5 (global Expect_test_collector!)))
           0))
     *match*/1951 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply
           (field_imm 1
             (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/1949 =
       (after Gbnf_parser__SentenceParserAux lib/sentenceParserAux.ml(89)<ghost>:2288-2288
         (apply (field_imm 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__SentenceParserAux")))
    (pseudo <unknown location>
      (makeblock 0 or_comment_iter/1224 or_comment_fold/1229
        or_comment_map/1235 or_comment_filter_map/1241 or_comment_count/1246
        count_things/1250 inject/1319))))
