[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Sigs.ml[15,975+0]..[15,975+19])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[15,975+0]..[15,975+19])
        Pstr_eval
        expression (lib/Sigs.ml[15,975+0]..[15,975+19])
          Pexp_constant PConst_string("A type alone. ",(lib/Sigs.ml[15,975+0]..[15,975+19]),None)
    ]
  structure_item (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Ppat_construct "()" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          None
        expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Ppat_construct "()" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          None
        expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Sigs.ml[17,996+0]..[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Ppat_construct "()" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          None
        expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
                Pexp_constant PConst_string("lib/Sigs.ml",(lib/Sigs.ml[17,996+0]..[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Ppat_construct "()" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          None
        expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Sigs.ml[17,996+0]..[17,996+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/Sigs.ml[17,996+0]..[17,996+0]) ghost
                Pexp_constant PConst_string("Sigs.ml",(lib/Sigs.ml[17,996+0]..[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..[19,1028+3])
    Pstr_modtype "TYPE" (lib/Sigs.ml[17,996+12]..[17,996+16])
      module_type (lib/Sigs.ml[17,996+19]..[19,1028+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[18,1019+2]..[18,1019+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[18,1019+7]..[18,1019+8]) (lib/Sigs.ml[18,1019+2]..[18,1019+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (lib/Sigs.ml[23,1115+0]..[23,1115+65])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[23,1115+0]..[23,1115+65])
        Pstr_eval
        expression (lib/Sigs.ml[23,1115+0]..[23,1115+65])
          Pexp_constant PConst_string("An ordered type. A hashed type. These are standard notions. ",(lib/Sigs.ml[23,1115+0]..[23,1115+65]),None)
    ]
  structure_item (lib/Sigs.ml[25,1182+0]..[26,1208+17])
    Pstr_modtype "OrderedType" (lib/Sigs.ml[25,1182+12]..[25,1182+23])
      module_type (lib/Sigs.ml[26,1208+2]..[26,1208+17])
        Pmty_ident "Map.OrderedType" (lib/Sigs.ml[26,1208+2]..[26,1208+17])
  structure_item (lib/Sigs.ml[28,1227+0]..[29,1252+20])
    Pstr_modtype "HashedType" (lib/Sigs.ml[28,1227+12]..[28,1227+22])
      module_type (lib/Sigs.ml[29,1252+2]..[29,1252+20])
        Pmty_ident "Hashtbl.HashedType" (lib/Sigs.ml[29,1252+2]..[29,1252+20])
  structure_item (lib/Sigs.ml[33,1356+0]..[33,1356+46])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[33,1356+0]..[33,1356+46])
        Pstr_eval
        expression (lib/Sigs.ml[33,1356+0]..[33,1356+46])
          Pexp_constant PConst_string("A type whose elements can be enumerated. ",(lib/Sigs.ml[33,1356+0]..[33,1356+46]),None)
    ]
  structure_item (lib/Sigs.ml[35,1404+0]..[38,1478+3])
    Pstr_modtype "FINITE_TYPE" (lib/Sigs.ml[35,1404+12]..[35,1404+23])
      module_type (lib/Sigs.ml[35,1404+26]..[38,1478+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[36,1434+2]..[36,1434+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[36,1434+7]..[36,1434+8]) (lib/Sigs.ml[36,1434+2]..[36,1434+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[37,1443+2]..[37,1443+34])
            Psig_value
            value_description "foreach" (lib/Sigs.ml[37,1443+6]..[37,1443+13]) (lib/Sigs.ml[37,1443+2]..[37,1443+34])
              core_type (lib/Sigs.ml[37,1443+15]..[37,1443+34])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[37,1443+16]..[37,1443+25])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[37,1443+16]..[37,1443+17])
                    Ptyp_constr "t" (lib/Sigs.ml[37,1443+16]..[37,1443+17])
                    []
                  core_type (lib/Sigs.ml[37,1443+21]..[37,1443+25])
                    Ptyp_constr "unit" (lib/Sigs.ml[37,1443+21]..[37,1443+25])
                    []
                core_type (lib/Sigs.ml[37,1443+30]..[37,1443+34])
                  Ptyp_constr "unit" (lib/Sigs.ml[37,1443+30]..[37,1443+34])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[42,1565+0]..[42,1565+23])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[42,1565+0]..[42,1565+23])
        Pstr_eval
        expression (lib/Sigs.ml[42,1565+0]..[42,1565+23])
          Pexp_constant PConst_string("Association maps. ",(lib/Sigs.ml[42,1565+0]..[42,1565+23]),None)
    ]
  structure_item (lib/Sigs.ml[44,1590+0]..[46,1741+40])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[44,1590+0]..[46,1741+40])
        Pstr_eval
        expression (lib/Sigs.ml[44,1590+0]..[46,1741+40])
          Pexp_constant PConst_string("Following the convention of the ocaml standard library, [find] raises the\n   exception [Not_found] when the key is not in the domain of the map. In\n   contrast, [get] returns an option. ",(lib/Sigs.ml[44,1590+0]..[46,1741+40]),None)
    ]
  structure_item (lib/Sigs.ml[48,1783+0]..[48,1783+80])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[48,1783+0]..[48,1783+80])
        Pstr_eval
        expression (lib/Sigs.ml[48,1783+0]..[48,1783+80])
          Pexp_constant PConst_string("Persistent maps. The empty map is a constant. Insertion creates a new map. ",(lib/Sigs.ml[48,1783+0]..[48,1783+80]),None)
    ]
  structure_item (lib/Sigs.ml[50,1865+0]..[50,1865+59])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[50,1865+0]..[50,1865+59])
        Pstr_eval
        expression (lib/Sigs.ml[50,1865+0]..[50,1865+59])
          Pexp_constant PConst_string("This is a fragment of the standard signature [Map.S]. ",(lib/Sigs.ml[50,1865+0]..[50,1865+59]),None)
    ]
  structure_item (lib/Sigs.ml[52,1926+0]..[59,2143+3])
    Pstr_modtype "PERSISTENT_MAPS" (lib/Sigs.ml[52,1926+12]..[52,1926+27])
      module_type (lib/Sigs.ml[52,1926+30]..[59,2143+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[53,1960+2]..[53,1960+10])
            Psig_type Rec
            [
              type_declaration "key" (lib/Sigs.ml[53,1960+7]..[53,1960+10]) (lib/Sigs.ml[53,1960+2]..[53,1960+10])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[54,1971+2]..[54,1971+14])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[54,1971+13]..[54,1971+14]) (lib/Sigs.ml[54,1971+2]..[54,1971+14])
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[54,1971+7]..[54,1971+12])
                      Ptyp_var data
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[55,1986+2]..[55,1986+20])
            Psig_value
            value_description "empty" (lib/Sigs.ml[55,1986+6]..[55,1986+11]) (lib/Sigs.ml[55,1986+2]..[55,1986+20])
              core_type (lib/Sigs.ml[55,1986+13]..[55,1986+20])
                Ptyp_constr "t" (lib/Sigs.ml[55,1986+19]..[55,1986+20])
                [
                  core_type (lib/Sigs.ml[55,1986+13]..[55,1986+18])
                    Ptyp_var data
                ]
              []
          signature_item (lib/Sigs.ml[56,2007+2]..[56,2007+45])
            Psig_value
            value_description "add" (lib/Sigs.ml[56,2007+6]..[56,2007+9]) (lib/Sigs.ml[56,2007+2]..[56,2007+45])
              core_type (lib/Sigs.ml[56,2007+11]..[56,2007+45])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[56,2007+11]..[56,2007+14])
                  Ptyp_constr "key" (lib/Sigs.ml[56,2007+11]..[56,2007+14])
                  []
                core_type (lib/Sigs.ml[56,2007+18]..[56,2007+45])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[56,2007+18]..[56,2007+23])
                    Ptyp_var data
                  core_type (lib/Sigs.ml[56,2007+27]..[56,2007+45])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[56,2007+27]..[56,2007+34])
                      Ptyp_constr "t" (lib/Sigs.ml[56,2007+33]..[56,2007+34])
                      [
                        core_type (lib/Sigs.ml[56,2007+27]..[56,2007+32])
                          Ptyp_var data
                      ]
                    core_type (lib/Sigs.ml[56,2007+38]..[56,2007+45])
                      Ptyp_constr "t" (lib/Sigs.ml[56,2007+44]..[56,2007+45])
                      [
                        core_type (lib/Sigs.ml[56,2007+38]..[56,2007+43])
                          Ptyp_var data
                      ]
              []
          signature_item (lib/Sigs.ml[57,2053+2]..[57,2053+35])
            Psig_value
            value_description "find" (lib/Sigs.ml[57,2053+6]..[57,2053+10]) (lib/Sigs.ml[57,2053+2]..[57,2053+35])
              core_type (lib/Sigs.ml[57,2053+12]..[57,2053+35])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[57,2053+12]..[57,2053+15])
                  Ptyp_constr "key" (lib/Sigs.ml[57,2053+12]..[57,2053+15])
                  []
                core_type (lib/Sigs.ml[57,2053+19]..[57,2053+35])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[57,2053+19]..[57,2053+26])
                    Ptyp_constr "t" (lib/Sigs.ml[57,2053+25]..[57,2053+26])
                    [
                      core_type (lib/Sigs.ml[57,2053+19]..[57,2053+24])
                        Ptyp_var data
                    ]
                  core_type (lib/Sigs.ml[57,2053+30]..[57,2053+35])
                    Ptyp_var data
              []
          signature_item (lib/Sigs.ml[58,2089+2]..[58,2089+53])
            Psig_value
            value_description "iter" (lib/Sigs.ml[58,2089+6]..[58,2089+10]) (lib/Sigs.ml[58,2089+2]..[58,2089+53])
              core_type (lib/Sigs.ml[58,2089+12]..[58,2089+53])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[58,2089+13]..[58,2089+33])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[58,2089+13]..[58,2089+16])
                    Ptyp_constr "key" (lib/Sigs.ml[58,2089+13]..[58,2089+16])
                    []
                  core_type (lib/Sigs.ml[58,2089+20]..[58,2089+33])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[58,2089+20]..[58,2089+25])
                      Ptyp_var data
                    core_type (lib/Sigs.ml[58,2089+29]..[58,2089+33])
                      Ptyp_constr "unit" (lib/Sigs.ml[58,2089+29]..[58,2089+33])
                      []
                core_type (lib/Sigs.ml[58,2089+38]..[58,2089+53])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[58,2089+38]..[58,2089+45])
                    Ptyp_constr "t" (lib/Sigs.ml[58,2089+44]..[58,2089+45])
                    [
                      core_type (lib/Sigs.ml[58,2089+38]..[58,2089+43])
                        Ptyp_var data
                    ]
                  core_type (lib/Sigs.ml[58,2089+49]..[58,2089+53])
                    Ptyp_constr "unit" (lib/Sigs.ml[58,2089+49]..[58,2089+53])
                    []
              []
        ]
  structure_item (lib/Sigs.ml[61,2148+0]..[63,2248+38])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[61,2148+0]..[63,2248+38])
        Pstr_eval
        expression (lib/Sigs.ml[61,2148+0]..[63,2248+38])
          Pexp_constant PConst_string("Imperative maps. A fresh empty map is produced by [create].\n   Insertion updates a map in place.\n   [clear] empties an existing map. ",(lib/Sigs.ml[61,2148+0]..[63,2248+38]),None)
    ]
  structure_item (lib/Sigs.ml[65,2288+0]..[67,2445+34])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[65,2288+0]..[67,2445+34])
        Pstr_eval
        expression (lib/Sigs.ml[65,2288+0]..[67,2445+34])
          Pexp_constant PConst_string("The order of the arguments to [add] and [find] is consistent with the order\n   used in [PERSISTENT_MAPS] above. Thus, it departs from the convention used\n   in OCaml's [Hashtbl] module. ",(lib/Sigs.ml[65,2288+0]..[67,2445+34]),None)
    ]
  structure_item (lib/Sigs.ml[69,2481+0]..[75,2658+3])
    Pstr_modtype "MINIMAL_IMPERATIVE_MAPS" (lib/Sigs.ml[69,2481+12]..[69,2481+35])
      module_type (lib/Sigs.ml[69,2481+38]..[75,2658+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[70,2523+2]..[70,2523+10])
            Psig_type Rec
            [
              type_declaration "key" (lib/Sigs.ml[70,2523+7]..[70,2523+10]) (lib/Sigs.ml[70,2523+2]..[70,2523+10])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[71,2534+2]..[71,2534+14])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[71,2534+13]..[71,2534+14]) (lib/Sigs.ml[71,2534+2]..[71,2534+14])
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[71,2534+7]..[71,2534+12])
                      Ptyp_var data
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[72,2549+2]..[72,2549+29])
            Psig_value
            value_description "create" (lib/Sigs.ml[72,2549+6]..[72,2549+12]) (lib/Sigs.ml[72,2549+2]..[72,2549+29])
              core_type (lib/Sigs.ml[72,2549+14]..[72,2549+29])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[72,2549+14]..[72,2549+18])
                  Ptyp_constr "unit" (lib/Sigs.ml[72,2549+14]..[72,2549+18])
                  []
                core_type (lib/Sigs.ml[72,2549+22]..[72,2549+29])
                  Ptyp_constr "t" (lib/Sigs.ml[72,2549+28]..[72,2549+29])
                  [
                    core_type (lib/Sigs.ml[72,2549+22]..[72,2549+27])
                      Ptyp_var data
                  ]
              []
          signature_item (lib/Sigs.ml[73,2579+2]..[73,2579+42])
            Psig_value
            value_description "add" (lib/Sigs.ml[73,2579+6]..[73,2579+9]) (lib/Sigs.ml[73,2579+2]..[73,2579+42])
              core_type (lib/Sigs.ml[73,2579+11]..[73,2579+42])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[73,2579+11]..[73,2579+14])
                  Ptyp_constr "key" (lib/Sigs.ml[73,2579+11]..[73,2579+14])
                  []
                core_type (lib/Sigs.ml[73,2579+18]..[73,2579+42])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[73,2579+18]..[73,2579+23])
                    Ptyp_var data
                  core_type (lib/Sigs.ml[73,2579+27]..[73,2579+42])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[73,2579+27]..[73,2579+34])
                      Ptyp_constr "t" (lib/Sigs.ml[73,2579+33]..[73,2579+34])
                      [
                        core_type (lib/Sigs.ml[73,2579+27]..[73,2579+32])
                          Ptyp_var data
                      ]
                    core_type (lib/Sigs.ml[73,2579+38]..[73,2579+42])
                      Ptyp_constr "unit" (lib/Sigs.ml[73,2579+38]..[73,2579+42])
                      []
              []
          signature_item (lib/Sigs.ml[74,2622+2]..[74,2622+35])
            Psig_value
            value_description "find" (lib/Sigs.ml[74,2622+6]..[74,2622+10]) (lib/Sigs.ml[74,2622+2]..[74,2622+35])
              core_type (lib/Sigs.ml[74,2622+12]..[74,2622+35])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[74,2622+12]..[74,2622+15])
                  Ptyp_constr "key" (lib/Sigs.ml[74,2622+12]..[74,2622+15])
                  []
                core_type (lib/Sigs.ml[74,2622+19]..[74,2622+35])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[74,2622+19]..[74,2622+26])
                    Ptyp_constr "t" (lib/Sigs.ml[74,2622+25]..[74,2622+26])
                    [
                      core_type (lib/Sigs.ml[74,2622+19]..[74,2622+24])
                        Ptyp_var data
                    ]
                  core_type (lib/Sigs.ml[74,2622+30]..[74,2622+35])
                    Ptyp_var data
              []
        ]
  structure_item (lib/Sigs.ml[77,2663+0]..[81,2814+3])
    Pstr_modtype "IMPERATIVE_MAPS" (lib/Sigs.ml[77,2663+12]..[77,2663+27])
      module_type (lib/Sigs.ml[77,2663+30]..[81,2814+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[78,2697+2]..[78,2697+33])
            Psig_include
            module_type (lib/Sigs.ml[78,2697+10]..[78,2697+33])
              Pmty_ident "MINIMAL_IMPERATIVE_MAPS" (lib/Sigs.ml[78,2697+10]..[78,2697+33])
          signature_item (lib/Sigs.ml[79,2731+2]..[79,2731+28])
            Psig_value
            value_description "clear" (lib/Sigs.ml[79,2731+6]..[79,2731+11]) (lib/Sigs.ml[79,2731+2]..[79,2731+28])
              core_type (lib/Sigs.ml[79,2731+13]..[79,2731+28])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[79,2731+13]..[79,2731+20])
                  Ptyp_constr "t" (lib/Sigs.ml[79,2731+19]..[79,2731+20])
                  [
                    core_type (lib/Sigs.ml[79,2731+13]..[79,2731+18])
                      Ptyp_var data
                  ]
                core_type (lib/Sigs.ml[79,2731+24]..[79,2731+28])
                  Ptyp_constr "unit" (lib/Sigs.ml[79,2731+24]..[79,2731+28])
                  []
              []
          signature_item (lib/Sigs.ml[80,2760+2]..[80,2760+53])
            Psig_value
            value_description "iter" (lib/Sigs.ml[80,2760+6]..[80,2760+10]) (lib/Sigs.ml[80,2760+2]..[80,2760+53])
              core_type (lib/Sigs.ml[80,2760+12]..[80,2760+53])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[80,2760+13]..[80,2760+33])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[80,2760+13]..[80,2760+16])
                    Ptyp_constr "key" (lib/Sigs.ml[80,2760+13]..[80,2760+16])
                    []
                  core_type (lib/Sigs.ml[80,2760+20]..[80,2760+33])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[80,2760+20]..[80,2760+25])
                      Ptyp_var data
                    core_type (lib/Sigs.ml[80,2760+29]..[80,2760+33])
                      Ptyp_constr "unit" (lib/Sigs.ml[80,2760+29]..[80,2760+33])
                      []
                core_type (lib/Sigs.ml[80,2760+38]..[80,2760+53])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[80,2760+38]..[80,2760+45])
                    Ptyp_constr "t" (lib/Sigs.ml[80,2760+44]..[80,2760+45])
                    [
                      core_type (lib/Sigs.ml[80,2760+38]..[80,2760+43])
                        Ptyp_var data
                    ]
                  core_type (lib/Sigs.ml[80,2760+49]..[80,2760+53])
                    Ptyp_constr "unit" (lib/Sigs.ml[80,2760+49]..[80,2760+53])
                    []
              []
        ]
  structure_item (lib/Sigs.ml[85,2901+0]..[86,2974+28])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[85,2901+0]..[86,2974+28])
        Pstr_eval
        expression (lib/Sigs.ml[85,2901+0]..[86,2974+28])
          Pexp_constant PConst_string("The signature [PROPERTY] is used by [Fix.Make], the least fixed point\n   computation algorithm. ",(lib/Sigs.ml[85,2901+0]..[86,2974+28]),None)
    ]
  structure_item (lib/Sigs.ml[88,3004+0]..[93,3392+27])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[88,3004+0]..[93,3392+27])
        Pstr_eval
        expression (lib/Sigs.ml[88,3004+0]..[93,3392+27])
          Pexp_constant PConst_string("The type [property] must form a partial order. It must be equipped with a\n   least element [bottom] and with an equality test [equal]. (In the function\n   call [equal p q], it is permitted to assume that [p <= q] holds.) We do not\n   require an ordering test [leq]. We do not require a join operation [lub].\n   We do require the ascending chain condition: every monotone sequence must\n   eventually stabilize. ",(lib/Sigs.ml[88,3004+0]..[93,3392+27]),None)
    ]
  structure_item (lib/Sigs.ml[95,3421+0]..[100,3812+14])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[95,3421+0]..[100,3812+14])
        Pstr_eval
        expression (lib/Sigs.ml[95,3421+0]..[100,3812+14])
          Pexp_constant PConst_string("The function [is_maximal] determines whether a property [p] is maximal with\n   respect to the partial order. Only a conservative check is required: in any\n   event, it is permitted for [is_maximal p] to be [false]. If [is_maximal p]\n   is [true], then [p] must have no strict upper bound. In particular, in the\n   case where properties form a lattice, this means that [p] must be the top\n   element. ",(lib/Sigs.ml[95,3421+0]..[100,3812+14]),None)
    ]
  structure_item (lib/Sigs.ml[102,3828+0]..[107,3971+3])
    Pstr_modtype "PROPERTY" (lib/Sigs.ml[102,3828+12]..[102,3828+20])
      module_type (lib/Sigs.ml[102,3828+23]..[107,3971+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[103,3855+2]..[103,3855+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[103,3855+7]..[103,3855+15]) (lib/Sigs.ml[103,3855+2]..[103,3855+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[104,3871+2]..[104,3871+22])
            Psig_value
            value_description "bottom" (lib/Sigs.ml[104,3871+6]..[104,3871+12]) (lib/Sigs.ml[104,3871+2]..[104,3871+22])
              core_type (lib/Sigs.ml[104,3871+14]..[104,3871+22])
                Ptyp_constr "property" (lib/Sigs.ml[104,3871+14]..[104,3871+22])
                []
              []
          signature_item (lib/Sigs.ml[105,3894+2]..[105,3894+41])
            Psig_value
            value_description "equal" (lib/Sigs.ml[105,3894+6]..[105,3894+11]) (lib/Sigs.ml[105,3894+2]..[105,3894+41])
              core_type (lib/Sigs.ml[105,3894+13]..[105,3894+41])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[105,3894+13]..[105,3894+21])
                  Ptyp_constr "property" (lib/Sigs.ml[105,3894+13]..[105,3894+21])
                  []
                core_type (lib/Sigs.ml[105,3894+25]..[105,3894+41])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[105,3894+25]..[105,3894+33])
                    Ptyp_constr "property" (lib/Sigs.ml[105,3894+25]..[105,3894+33])
                    []
                  core_type (lib/Sigs.ml[105,3894+37]..[105,3894+41])
                    Ptyp_constr "bool" (lib/Sigs.ml[105,3894+37]..[105,3894+41])
                    []
              []
          signature_item (lib/Sigs.ml[106,3936+2]..[106,3936+34])
            Psig_value
            value_description "is_maximal" (lib/Sigs.ml[106,3936+6]..[106,3936+16]) (lib/Sigs.ml[106,3936+2]..[106,3936+34])
              core_type (lib/Sigs.ml[106,3936+18]..[106,3936+34])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[106,3936+18]..[106,3936+26])
                  Ptyp_constr "property" (lib/Sigs.ml[106,3936+18]..[106,3936+26])
                  []
                core_type (lib/Sigs.ml[106,3936+30]..[106,3936+34])
                  Ptyp_constr "bool" (lib/Sigs.ml[106,3936+30]..[106,3936+34])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[111,4058+0]..[113,4213+47])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[111,4058+0]..[113,4213+47])
        Pstr_eval
        expression (lib/Sigs.ml[111,4058+0]..[113,4213+47])
          Pexp_constant PConst_string("The signature [SEMI_LATTICE] offers separate [leq] and [join] functions.\n   The functor [Glue.MinimalSemiLattice] can be used, if necessary, to convert\n   this signature to [MINIMAL_SEMI_LATTICE]. ",(lib/Sigs.ml[111,4058+0]..[113,4213+47]),None)
    ]
  structure_item (lib/Sigs.ml[115,4262+0]..[119,4394+3])
    Pstr_modtype "SEMI_LATTICE" (lib/Sigs.ml[115,4262+12]..[115,4262+24])
      module_type (lib/Sigs.ml[115,4262+27]..[119,4394+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[116,4293+2]..[116,4293+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[116,4293+7]..[116,4293+15]) (lib/Sigs.ml[116,4293+2]..[116,4293+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[117,4309+2]..[117,4309+39])
            Psig_value
            value_description "leq" (lib/Sigs.ml[117,4309+6]..[117,4309+9]) (lib/Sigs.ml[117,4309+2]..[117,4309+39])
              core_type (lib/Sigs.ml[117,4309+11]..[117,4309+39])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[117,4309+11]..[117,4309+19])
                  Ptyp_constr "property" (lib/Sigs.ml[117,4309+11]..[117,4309+19])
                  []
                core_type (lib/Sigs.ml[117,4309+23]..[117,4309+39])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[117,4309+23]..[117,4309+31])
                    Ptyp_constr "property" (lib/Sigs.ml[117,4309+23]..[117,4309+31])
                    []
                  core_type (lib/Sigs.ml[117,4309+35]..[117,4309+39])
                    Ptyp_constr "bool" (lib/Sigs.ml[117,4309+35]..[117,4309+39])
                    []
              []
          signature_item (lib/Sigs.ml[118,4349+2]..[118,4349+44])
            Psig_value
            value_description "join" (lib/Sigs.ml[118,4349+6]..[118,4349+10]) (lib/Sigs.ml[118,4349+2]..[118,4349+44])
              core_type (lib/Sigs.ml[118,4349+12]..[118,4349+44])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[118,4349+12]..[118,4349+20])
                  Ptyp_constr "property" (lib/Sigs.ml[118,4349+12]..[118,4349+20])
                  []
                core_type (lib/Sigs.ml[118,4349+24]..[118,4349+44])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[118,4349+24]..[118,4349+32])
                    Ptyp_constr "property" (lib/Sigs.ml[118,4349+24]..[118,4349+32])
                    []
                  core_type (lib/Sigs.ml[118,4349+36]..[118,4349+44])
                    Ptyp_constr "property" (lib/Sigs.ml[118,4349+36]..[118,4349+44])
                    []
              []
        ]
  structure_item (lib/Sigs.ml[121,4399+0]..[121,4399+69])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[121,4399+0]..[121,4399+69])
        Pstr_eval
        expression (lib/Sigs.ml[121,4399+0]..[121,4399+69])
          Pexp_constant PConst_string("The signature [MINIMAL_SEMI_LATTICE] is used by [Fix.DataFlow]. ",(lib/Sigs.ml[121,4399+0]..[121,4399+69]),None)
    ]
  structure_item (lib/Sigs.ml[123,4470+0]..[130,4790+3])
    Pstr_modtype "MINIMAL_SEMI_LATTICE" (lib/Sigs.ml[123,4470+12]..[123,4470+32])
      module_type (lib/Sigs.ml[123,4470+35]..[130,4790+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[124,4509+2]..[124,4509+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[124,4509+7]..[124,4509+15]) (lib/Sigs.ml[124,4509+2]..[124,4509+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[129,4741+2]..[129,4741+48])
            Psig_value
            value_description "leq_join" (lib/Sigs.ml[129,4741+6]..[129,4741+14]) (lib/Sigs.ml[129,4741+2]..[129,4741+48])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[126,4526+2]..[128,4672+68])
                    Pstr_eval
                    expression (lib/Sigs.ml[126,4526+2]..[128,4672+68])
                      Pexp_constant PConst_string(" [leq_join p q] must compute the join of [p] and [q]. If the result\n      is logically equal to [q], then [q] itself must be returned. Thus,\n      we have [leq_join p q == q] if and only if [leq p q] holds. ",(lib/Sigs.ml[126,4526+2]..[128,4672+68]),None)
                ]
              core_type (lib/Sigs.ml[129,4741+16]..[129,4741+48])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[129,4741+16]..[129,4741+24])
                  Ptyp_constr "property" (lib/Sigs.ml[129,4741+16]..[129,4741+24])
                  []
                core_type (lib/Sigs.ml[129,4741+28]..[129,4741+48])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[129,4741+28]..[129,4741+36])
                    Ptyp_constr "property" (lib/Sigs.ml[129,4741+28]..[129,4741+36])
                    []
                  core_type (lib/Sigs.ml[129,4741+40]..[129,4741+48])
                    Ptyp_constr "property" (lib/Sigs.ml[129,4741+40]..[129,4741+48])
                    []
              []
        ]
  structure_item (lib/Sigs.ml[134,4877+0]..[135,4944+17])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[134,4877+0]..[135,4944+17])
        Pstr_eval
        expression (lib/Sigs.ml[134,4877+0]..[135,4944+17])
          Pexp_constant PConst_string("The type of a fixed point combinator that constructs a value of\n    type ['a]. ",(lib/Sigs.ml[134,4877+0]..[135,4944+17]),None)
    ]
  structure_item (lib/Sigs.ml[137,4963+0]..[138,4977+18])
    Pstr_type Rec
    [
      type_declaration "fix" (lib/Sigs.ml[137,4963+8]..[137,4963+11]) (lib/Sigs.ml[137,4963+0]..[138,4977+18])
        ptype_params =
          [
            core_type (lib/Sigs.ml[137,4963+5]..[137,4963+7])
              Ptyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/Sigs.ml[138,4977+2]..[138,4977+18])
              Ptyp_arrow
              Nolabel
              core_type (lib/Sigs.ml[138,4977+3]..[138,4977+11])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[138,4977+3]..[138,4977+5])
                  Ptyp_var a
                core_type (lib/Sigs.ml[138,4977+9]..[138,4977+11])
                  Ptyp_var a
              core_type (lib/Sigs.ml[138,4977+16]..[138,4977+18])
                Ptyp_var a
    ]
  structure_item (lib/Sigs.ml[142,5079+0]..[142,5079+77])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[142,5079+0]..[142,5079+77])
        Pstr_eval
        expression (lib/Sigs.ml[142,5079+0]..[142,5079+77])
          Pexp_constant PConst_string("Memoizers -- higher-order functions that construct memoizing functions. ",(lib/Sigs.ml[142,5079+0]..[142,5079+77]),None)
    ]
  structure_item (lib/Sigs.ml[144,5158+0]..[176,6455+3])
    Pstr_modtype "MEMOIZER" (lib/Sigs.ml[144,5158+12]..[144,5158+20])
      module_type (lib/Sigs.ml[144,5158+23]..[176,6455+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[147,5210+2]..[147,5210+10])
            Psig_type Rec
            [
              type_declaration "key" (lib/Sigs.ml[147,5210+7]..[147,5210+10]) (lib/Sigs.ml[147,5210+2]..[147,5210+10])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[146,5186+2]..[146,5186+23])
                      Pstr_eval
                      expression (lib/Sigs.ml[146,5186+2]..[146,5186+23])
                        Pexp_constant PConst_string("A type of keys. ",(lib/Sigs.ml[146,5186+2]..[146,5186+23]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[150,5270+2]..[150,5270+41])
            Psig_value
            value_description "memoize" (lib/Sigs.ml[150,5270+6]..[150,5270+13]) (lib/Sigs.ml[150,5270+2]..[150,5270+41])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[149,5222+2]..[149,5222+47])
                    Pstr_eval
                    expression (lib/Sigs.ml[149,5222+2]..[149,5222+47])
                      Pexp_constant PConst_string("A memoization combinator for this type. ",(lib/Sigs.ml[149,5222+2]..[149,5222+47]),None)
                ]
              core_type (lib/Sigs.ml[150,5270+15]..[150,5270+41])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[150,5270+16]..[150,5270+25])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[150,5270+16]..[150,5270+19])
                    Ptyp_constr "key" (lib/Sigs.ml[150,5270+16]..[150,5270+19])
                    []
                  core_type (lib/Sigs.ml[150,5270+23]..[150,5270+25])
                    Ptyp_var a
                core_type (lib/Sigs.ml[150,5270+31]..[150,5270+40])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[150,5270+31]..[150,5270+34])
                    Ptyp_constr "key" (lib/Sigs.ml[150,5270+31]..[150,5270+34])
                    []
                  core_type (lib/Sigs.ml[150,5270+38]..[150,5270+40])
                    Ptyp_var a
              []
          signature_item (lib/Sigs.ml[153,5386+2]..[153,5386+11])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[153,5386+10]..[153,5386+11]) (lib/Sigs.ml[153,5386+2]..[153,5386+11])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[152,5313+2]..[152,5313+72])
                      Pstr_eval
                      expression (lib/Sigs.ml[152,5313+2]..[152,5313+72])
                        Pexp_constant PConst_string("A memoization combinator where the memoization table is exposed. ",(lib/Sigs.ml[152,5313+2]..[152,5313+72]),None)
                  ]
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[153,5386+7]..[153,5386+9])
                      Ptyp_var a
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[154,5398+2]..[154,5398+56])
            Psig_value
            value_description "visibly_memoize" (lib/Sigs.ml[154,5398+6]..[154,5398+21]) (lib/Sigs.ml[154,5398+2]..[154,5398+56])
              core_type (lib/Sigs.ml[154,5398+23]..[154,5398+56])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[154,5398+24]..[154,5398+33])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[154,5398+24]..[154,5398+27])
                    Ptyp_constr "key" (lib/Sigs.ml[154,5398+24]..[154,5398+27])
                    []
                  core_type (lib/Sigs.ml[154,5398+31]..[154,5398+33])
                    Ptyp_var a
                core_type (lib/Sigs.ml[154,5398+38]..[154,5398+56])
                  Ptyp_tuple
                  [
                    core_type (lib/Sigs.ml[154,5398+39]..[154,5398+48])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[154,5398+39]..[154,5398+42])
                        Ptyp_constr "key" (lib/Sigs.ml[154,5398+39]..[154,5398+42])
                        []
                      core_type (lib/Sigs.ml[154,5398+46]..[154,5398+48])
                        Ptyp_var a
                    core_type (lib/Sigs.ml[154,5398+52]..[154,5398+56])
                      Ptyp_constr "t" (lib/Sigs.ml[154,5398+55]..[154,5398+56])
                      [
                        core_type (lib/Sigs.ml[154,5398+52]..[154,5398+54])
                          Ptyp_var a
                      ]
                  ]
              []
          signature_item (lib/Sigs.ml[157,5500+2]..[157,5500+26])
            Psig_value
            value_description "fix" (lib/Sigs.ml[157,5500+6]..[157,5500+9]) (lib/Sigs.ml[157,5500+2]..[157,5500+26])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[156,5456+2]..[156,5456+43])
                    Pstr_eval
                    expression (lib/Sigs.ml[156,5456+2]..[156,5456+43])
                      Pexp_constant PConst_string("A recursive memoization combinator. ",(lib/Sigs.ml[156,5456+2]..[156,5456+43]),None)
                ]
              core_type (lib/Sigs.ml[157,5500+11]..[157,5500+26])
                Ptyp_constr "fix" (lib/Sigs.ml[157,5500+23]..[157,5500+26])
                [
                  core_type (lib/Sigs.ml[157,5500+12]..[157,5500+21])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[157,5500+12]..[157,5500+15])
                      Ptyp_constr "key" (lib/Sigs.ml[157,5500+12]..[157,5500+15])
                      []
                    core_type (lib/Sigs.ml[157,5500+19]..[157,5500+21])
                      Ptyp_var a
                ]
              []
          signature_item (lib/Sigs.ml[168,6156+2]..[168,6156+35])
            Psig_exception
            type_exception
              ptyext_constructor =
                extension_constructor (lib/Sigs.ml[168,6156+2]..[168,6156+35])
                  attribute "ocaml.doc"
                    [
                      structure_item (lib/Sigs.ml[159,5528+2]..[167,6141+14])
                        Pstr_eval
                        expression (lib/Sigs.ml[159,5528+2]..[167,6141+14])
                          Pexp_constant PConst_string("[defensive_fix] works like [fix], except it additionally detects circular\n     dependencies, which can arise if the second-order function supplied by\n     the user does not follow a well-founded recursion pattern. When the user\n     invokes [f x], where [f] is the function returned by [defensive_fix], if\n     a cyclic dependency is detected, then [Cycle (zs, z)] is raised, where\n     the list [zs] begins with [z] and continues with a series of intermediate\n     keys, leading back to [z]. Note that undetected divergence remains\n     possible; this corresponds to an infinite dependency chain, without a\n     cycle. ",(lib/Sigs.ml[159,5528+2]..[167,6141+14]),None)
                    ]
                  pext_name = "Cycle"
                  pext_kind =
                    Pext_decl
                      [
                        core_type (lib/Sigs.ml[168,6156+21]..[168,6156+29])
                          Ptyp_constr "list" (lib/Sigs.ml[168,6156+25]..[168,6156+29])
                          [
                            core_type (lib/Sigs.ml[168,6156+21]..[168,6156+24])
                              Ptyp_constr "key" (lib/Sigs.ml[168,6156+21]..[168,6156+24])
                              []
                          ]
                        core_type (lib/Sigs.ml[168,6156+32]..[168,6156+35])
                          Ptyp_constr "key" (lib/Sigs.ml[168,6156+32]..[168,6156+35])
                          []
                      ]
                      None
          signature_item (lib/Sigs.ml[169,6192+2]..[169,6192+36])
            Psig_value
            value_description "defensive_fix" (lib/Sigs.ml[169,6192+6]..[169,6192+19]) (lib/Sigs.ml[169,6192+2]..[169,6192+36])
              core_type (lib/Sigs.ml[169,6192+21]..[169,6192+36])
                Ptyp_constr "fix" (lib/Sigs.ml[169,6192+33]..[169,6192+36])
                [
                  core_type (lib/Sigs.ml[169,6192+22]..[169,6192+31])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[169,6192+22]..[169,6192+25])
                      Ptyp_constr "key" (lib/Sigs.ml[169,6192+22]..[169,6192+25])
                      []
                    core_type (lib/Sigs.ml[169,6192+29]..[169,6192+31])
                      Ptyp_var a
                ]
              []
          signature_item (lib/Sigs.ml[174,6395+2]..[174,6395+58])
            Psig_value
            value_description "curried" (lib/Sigs.ml[174,6395+6]..[174,6395+13]) (lib/Sigs.ml[174,6395+2]..[174,6395+58])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[171,6230+2]..[173,6373+21])
                    Pstr_eval
                    expression (lib/Sigs.ml[171,6230+2]..[173,6373+21])
                      Pexp_constant PConst_string("This combinator can be used to obtain a curried version of [fix] or\n     [defensive_fix] in a concrete instance where the type [key] is a\n     product type. ",(lib/Sigs.ml[171,6230+2]..[173,6373+21]),None)
                ]
              core_type (lib/Sigs.ml[174,6395+15]..[174,6395+58])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[174,6395+15]..[174,6395+34])
                  Ptyp_constr "fix" (lib/Sigs.ml[174,6395+31]..[174,6395+34])
                  [
                    core_type (lib/Sigs.ml[174,6395+16]..[174,6395+29])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[174,6395+16]..[174,6395+23])
                        Ptyp_tuple
                        [
                          core_type (lib/Sigs.ml[174,6395+16]..[174,6395+18])
                            Ptyp_var a
                          core_type (lib/Sigs.ml[174,6395+21]..[174,6395+23])
                            Ptyp_var b
                        ]
                      core_type (lib/Sigs.ml[174,6395+27]..[174,6395+29])
                        Ptyp_var c
                  ]
                core_type (lib/Sigs.ml[174,6395+38]..[174,6395+58])
                  Ptyp_constr "fix" (lib/Sigs.ml[174,6395+55]..[174,6395+58])
                  [
                    core_type (lib/Sigs.ml[174,6395+39]..[174,6395+53])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[174,6395+39]..[174,6395+41])
                        Ptyp_var a
                      core_type (lib/Sigs.ml[174,6395+45]..[174,6395+53])
                        Ptyp_arrow
                        Nolabel
                        core_type (lib/Sigs.ml[174,6395+45]..[174,6395+47])
                          Ptyp_var b
                        core_type (lib/Sigs.ml[174,6395+51]..[174,6395+53])
                          Ptyp_var c
                  ]
              []
        ]
  structure_item (lib/Sigs.ml[180,6542+0]..[180,6542+76])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[180,6542+0]..[180,6542+76])
        Pstr_eval
        expression (lib/Sigs.ml[180,6542+0]..[180,6542+76])
          Pexp_constant PConst_string("Tabulators: higher-order functions that construct tabulated functions. ",(lib/Sigs.ml[180,6542+0]..[180,6542+76]),None)
    ]
  structure_item (lib/Sigs.ml[182,6620+0]..[186,6933+63])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[182,6620+0]..[186,6933+63])
        Pstr_eval
        expression (lib/Sigs.ml[182,6620+0]..[186,6933+63])
          Pexp_constant PConst_string("Like memoization, tabulation guarantees that, for every key [x], the image\n   [f x] is computed at most once. Unlike memoization, where this computation\n   takes place on demand, in the case of tabulation, the computation of every\n   [f x] takes place immediately, when [tabulate] is invoked. The graph of the\n   function [f], a table, is constructed and held in memory. ",(lib/Sigs.ml[182,6620+0]..[186,6933+63]),None)
    ]
  structure_item (lib/Sigs.ml[188,6998+0]..[196,7154+3])
    Pstr_modtype "TABULATOR" (lib/Sigs.ml[188,6998+12]..[188,6998+21])
      module_type (lib/Sigs.ml[188,6998+24]..[196,7154+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[191,7051+2]..[191,7051+10])
            Psig_type Rec
            [
              type_declaration "key" (lib/Sigs.ml[191,7051+7]..[191,7051+10]) (lib/Sigs.ml[191,7051+2]..[191,7051+10])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[190,7027+2]..[190,7027+23])
                      Pstr_eval
                      expression (lib/Sigs.ml[190,7027+2]..[190,7027+23])
                        Pexp_constant PConst_string("A type of keys. ",(lib/Sigs.ml[190,7027+2]..[190,7027+23]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[194,7110+2]..[194,7110+42])
            Psig_value
            value_description "tabulate" (lib/Sigs.ml[194,7110+6]..[194,7110+14]) (lib/Sigs.ml[194,7110+2]..[194,7110+42])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[193,7063+2]..[193,7063+46])
                    Pstr_eval
                    expression (lib/Sigs.ml[193,7063+2]..[193,7063+46])
                      Pexp_constant PConst_string("A tabulation combinator for this type. ",(lib/Sigs.ml[193,7063+2]..[193,7063+46]),None)
                ]
              core_type (lib/Sigs.ml[194,7110+16]..[194,7110+42])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[194,7110+17]..[194,7110+26])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[194,7110+17]..[194,7110+20])
                    Ptyp_constr "key" (lib/Sigs.ml[194,7110+17]..[194,7110+20])
                    []
                  core_type (lib/Sigs.ml[194,7110+24]..[194,7110+26])
                    Ptyp_var a
                core_type (lib/Sigs.ml[194,7110+32]..[194,7110+41])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[194,7110+32]..[194,7110+35])
                    Ptyp_constr "key" (lib/Sigs.ml[194,7110+32]..[194,7110+35])
                    []
                  core_type (lib/Sigs.ml[194,7110+39]..[194,7110+41])
                    Ptyp_var a
              []
        ]
  structure_item (lib/Sigs.ml[200,7241+0]..[201,7313+35])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[200,7241+0]..[201,7313+35])
        Pstr_eval
        expression (lib/Sigs.ml[200,7241+0]..[201,7313+35])
          Pexp_constant PConst_string("Solvers: higher-order functions that compute the least solution of a\n   monotone system of equations. ",(lib/Sigs.ml[200,7241+0]..[201,7313+35]),None)
    ]
  structure_item (lib/Sigs.ml[203,7350+0]..[236,8666+3])
    Pstr_modtype "SOLVER" (lib/Sigs.ml[203,7350+12]..[203,7350+18])
      module_type (lib/Sigs.ml[203,7350+21]..[236,8666+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[205,7376+2]..[205,7376+15])
            Psig_type Rec
            [
              type_declaration "variable" (lib/Sigs.ml[205,7376+7]..[205,7376+15]) (lib/Sigs.ml[205,7376+2]..[205,7376+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[206,7392+2]..[206,7392+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[206,7392+7]..[206,7392+15]) (lib/Sigs.ml[206,7392+2]..[206,7392+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[209,7470+2]..[209,7470+39])
            Psig_type Rec
            [
              type_declaration "valuation" (lib/Sigs.ml[209,7470+7]..[209,7470+16]) (lib/Sigs.ml[209,7470+2]..[209,7470+39])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[208,7409+2]..[208,7409+60])
                      Pstr_eval
                      expression (lib/Sigs.ml[208,7409+2]..[208,7409+60])
                        Pexp_constant PConst_string("A valuation is a mapping of variables to properties. ",(lib/Sigs.ml[208,7409+2]..[208,7409+60]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[209,7470+19]..[209,7470+39])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[209,7470+19]..[209,7470+27])
                        Ptyp_constr "variable" (lib/Sigs.ml[209,7470+19]..[209,7470+27])
                        []
                      core_type (lib/Sigs.ml[209,7470+31]..[209,7470+39])
                        Ptyp_constr "property" (lib/Sigs.ml[209,7470+31]..[209,7470+39])
                        []
            ]
          signature_item (lib/Sigs.ml[215,7737+2]..[215,7737+34])
            Psig_type Rec
            [
              type_declaration "rhs" (lib/Sigs.ml[215,7737+7]..[215,7737+10]) (lib/Sigs.ml[215,7737+2]..[215,7737+34])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[211,7511+2]..[214,7703+33])
                      Pstr_eval
                      expression (lib/Sigs.ml[211,7511+2]..[214,7703+33])
                        Pexp_constant PConst_string("A right-hand side, when supplied with a valuation that gives\n     meaning to its free variables, evaluates to a property. More\n     precisely, a right-hand side is a monotone function of\n     valuations to properties. ",(lib/Sigs.ml[211,7511+2]..[214,7703+33]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[215,7737+13]..[215,7737+34])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[215,7737+13]..[215,7737+22])
                        Ptyp_constr "valuation" (lib/Sigs.ml[215,7737+13]..[215,7737+22])
                        []
                      core_type (lib/Sigs.ml[215,7737+26]..[215,7737+34])
                        Ptyp_constr "property" (lib/Sigs.ml[215,7737+26]..[215,7737+34])
                        []
            ]
          signature_item (lib/Sigs.ml[219,7855+2]..[219,7855+34])
            Psig_type Rec
            [
              type_declaration "equations" (lib/Sigs.ml[219,7855+7]..[219,7855+16]) (lib/Sigs.ml[219,7855+2]..[219,7855+34])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[217,7773+2]..[218,7840+14])
                      Pstr_eval
                      expression (lib/Sigs.ml[217,7773+2]..[218,7840+14])
                        Pexp_constant PConst_string("A system of equations is a mapping of variables to right-hand\n     sides. ",(lib/Sigs.ml[217,7773+2]..[218,7840+14]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[219,7855+19]..[219,7855+34])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[219,7855+19]..[219,7855+27])
                        Ptyp_constr "variable" (lib/Sigs.ml[219,7855+19]..[219,7855+27])
                        []
                      core_type (lib/Sigs.ml[219,7855+31]..[219,7855+34])
                        Ptyp_constr "rhs" (lib/Sigs.ml[219,7855+31]..[219,7855+34])
                        []
            ]
          signature_item (lib/Sigs.ml[221,7891+2]..[222,7960+24])
            Psig_attribute "ocaml.text"
            [
              structure_item (lib/Sigs.ml[221,7891+2]..[222,7960+24])
                Pstr_eval
                expression (lib/Sigs.ml[221,7891+2]..[222,7960+24])
                  Pexp_constant PConst_string("[lfp eqs] produces the least solution of the system of monotone\n     equations [eqs]. ",(lib/Sigs.ml[221,7891+2]..[222,7960+24]),None)
            ]
          signature_item (lib/Sigs.ml[224,7986+2]..[228,8298+41])
            Psig_attribute "ocaml.text"
            [
              structure_item (lib/Sigs.ml[224,7986+2]..[228,8298+41])
                Pstr_eval
                expression (lib/Sigs.ml[224,7986+2]..[228,8298+41])
                  Pexp_constant PConst_string("It is guaranteed that, for each variable [v], the application [eqs v] is\n     performed at most once (whereas the right-hand side produced by this\n     application is, in general, evaluated multiple times). This guarantee can\n     be used to perform costly pre-computation, or memory allocation, when [eqs]\n     is applied to its first argument. ",(lib/Sigs.ml[224,7986+2]..[228,8298+41]),None)
            ]
          signature_item (lib/Sigs.ml[234,8631+2]..[234,8631+33])
            Psig_value
            value_description "lfp" (lib/Sigs.ml[234,8631+6]..[234,8631+9]) (lib/Sigs.ml[234,8631+2]..[234,8631+33])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[230,8341+2]..[233,8564+66])
                    Pstr_eval
                    expression (lib/Sigs.ml[230,8341+2]..[233,8564+66])
                      Pexp_constant PConst_string("When [lfp] is applied to a system of equations [eqs], it performs no\n     actual computation. It produces a valuation, [get], which represents\n     the least solution of the system of equations. The actual fixed point\n     computation takes place, on demand, when [get] is applied. ",(lib/Sigs.ml[230,8341+2]..[233,8564+66]),None)
                ]
              core_type (lib/Sigs.ml[234,8631+11]..[234,8631+33])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[234,8631+11]..[234,8631+20])
                  Ptyp_constr "equations" (lib/Sigs.ml[234,8631+11]..[234,8631+20])
                  []
                core_type (lib/Sigs.ml[234,8631+24]..[234,8631+33])
                  Ptyp_constr "valuation" (lib/Sigs.ml[234,8631+24]..[234,8631+33])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[240,8753+0]..[241,8815+22])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[240,8753+0]..[241,8815+22])
        Pstr_eval
        expression (lib/Sigs.ml[240,8753+0]..[241,8815+22])
          Pexp_constant PConst_string("The signature [SOLUTION] is used to describe the result of\n    [Fix.DataFlow]. ",(lib/Sigs.ml[240,8753+0]..[241,8815+22]),None)
    ]
  structure_item (lib/Sigs.ml[243,8839+0]..[247,8935+3])
    Pstr_modtype "SOLUTION" (lib/Sigs.ml[243,8839+12]..[243,8839+20])
      module_type (lib/Sigs.ml[243,8839+23]..[247,8935+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[244,8866+2]..[244,8866+15])
            Psig_type Rec
            [
              type_declaration "variable" (lib/Sigs.ml[244,8866+7]..[244,8866+15]) (lib/Sigs.ml[244,8866+2]..[244,8866+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[245,8882+2]..[245,8882+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[245,8882+7]..[245,8882+15]) (lib/Sigs.ml[245,8882+2]..[245,8882+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[246,8898+2]..[246,8898+36])
            Psig_value
            value_description "solution" (lib/Sigs.ml[246,8898+6]..[246,8898+14]) (lib/Sigs.ml[246,8898+2]..[246,8898+36])
              core_type (lib/Sigs.ml[246,8898+16]..[246,8898+36])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[246,8898+16]..[246,8898+24])
                  Ptyp_constr "variable" (lib/Sigs.ml[246,8898+16]..[246,8898+24])
                  []
                core_type (lib/Sigs.ml[246,8898+28]..[246,8898+36])
                  Ptyp_constr "property" (lib/Sigs.ml[246,8898+28]..[246,8898+36])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[251,9022+0]..[251,9022+30])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[251,9022+0]..[251,9022+30])
        Pstr_eval
        expression (lib/Sigs.ml[251,9022+0]..[251,9022+30])
          Pexp_constant PConst_string("Directed, rooted graphs. ",(lib/Sigs.ml[251,9022+0]..[251,9022+30]),None)
    ]
  structure_item (lib/Sigs.ml[253,9054+0]..[257,9177+3])
    Pstr_modtype "GRAPH" (lib/Sigs.ml[253,9054+12]..[253,9054+17])
      module_type (lib/Sigs.ml[253,9054+20]..[257,9177+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[254,9078+2]..[254,9078+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[254,9078+7]..[254,9078+8]) (lib/Sigs.ml[254,9078+2]..[254,9078+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[255,9087+2]..[255,9087+39])
            Psig_value
            value_description "foreach_root" (lib/Sigs.ml[255,9087+6]..[255,9087+18]) (lib/Sigs.ml[255,9087+2]..[255,9087+39])
              core_type (lib/Sigs.ml[255,9087+20]..[255,9087+39])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[255,9087+21]..[255,9087+30])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[255,9087+21]..[255,9087+22])
                    Ptyp_constr "t" (lib/Sigs.ml[255,9087+21]..[255,9087+22])
                    []
                  core_type (lib/Sigs.ml[255,9087+26]..[255,9087+30])
                    Ptyp_constr "unit" (lib/Sigs.ml[255,9087+26]..[255,9087+30])
                    []
                core_type (lib/Sigs.ml[255,9087+35]..[255,9087+39])
                  Ptyp_constr "unit" (lib/Sigs.ml[255,9087+35]..[255,9087+39])
                  []
              []
          signature_item (lib/Sigs.ml[256,9127+2]..[256,9127+49])
            Psig_value
            value_description "foreach_successor" (lib/Sigs.ml[256,9127+6]..[256,9127+23]) (lib/Sigs.ml[256,9127+2]..[256,9127+49])
              core_type (lib/Sigs.ml[256,9127+25]..[256,9127+49])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[256,9127+25]..[256,9127+26])
                  Ptyp_constr "t" (lib/Sigs.ml[256,9127+25]..[256,9127+26])
                  []
                core_type (lib/Sigs.ml[256,9127+30]..[256,9127+49])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[256,9127+31]..[256,9127+40])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[256,9127+31]..[256,9127+32])
                      Ptyp_constr "t" (lib/Sigs.ml[256,9127+31]..[256,9127+32])
                      []
                    core_type (lib/Sigs.ml[256,9127+36]..[256,9127+40])
                      Ptyp_constr "unit" (lib/Sigs.ml[256,9127+36]..[256,9127+40])
                      []
                  core_type (lib/Sigs.ml[256,9127+45]..[256,9127+49])
                    Ptyp_constr "unit" (lib/Sigs.ml[256,9127+45]..[256,9127+49])
                    []
              []
        ]
  structure_item (lib/Sigs.ml[261,9264+0]..[262,9340+67])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[261,9264+0]..[262,9340+67])
        Pstr_eval
        expression (lib/Sigs.ml[261,9264+0]..[262,9340+67])
          Pexp_constant PConst_string("The signature [DATA_FLOW_GRAPH] is used to describe a data flow analysis\n    problem. It is used to describe the input to [Fix.DataFlow]. ",(lib/Sigs.ml[261,9264+0]..[262,9340+67]),None)
    ]
  structure_item (lib/Sigs.ml[264,9409+0]..[265,9488+54])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[264,9409+0]..[265,9488+54])
        Pstr_eval
        expression (lib/Sigs.ml[264,9409+0]..[265,9488+54])
          Pexp_constant PConst_string("The function [foreach_root] describes the root nodes of the data flow graph\n    as well as the properties associated with them. ",(lib/Sigs.ml[264,9409+0]..[265,9488+54]),None)
    ]
  structure_item (lib/Sigs.ml[267,9544+0]..[270,9771+76])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[267,9544+0]..[270,9771+76])
        Pstr_eval
        expression (lib/Sigs.ml[267,9544+0]..[270,9771+76])
          Pexp_constant PConst_string("The function [foreach_successor] describes the edges of the data flow graph\n    as well as the manner in which a property at the source of an edge is\n    transformed into a property at the target. The property at the target\n    must of course be a monotonic function of the property at the source. ",(lib/Sigs.ml[267,9544+0]..[270,9771+76]),None)
    ]
  structure_item (lib/Sigs.ml[272,9849+0]..[280,10074+3])
    Pstr_modtype "DATA_FLOW_GRAPH" (lib/Sigs.ml[272,9849+12]..[272,9849+27])
      module_type (lib/Sigs.ml[272,9849+30]..[280,10074+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[273,9883+2]..[273,9883+15])
            Psig_type Rec
            [
              type_declaration "variable" (lib/Sigs.ml[273,9883+7]..[273,9883+15]) (lib/Sigs.ml[273,9883+2]..[273,9883+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[274,9899+2]..[274,9899+15])
            Psig_type Rec
            [
              type_declaration "property" (lib/Sigs.ml[274,9899+7]..[274,9899+15]) (lib/Sigs.ml[274,9899+2]..[274,9899+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[275,9915+2]..[276,9935+42])
            Psig_value
            value_description "foreach_root" (lib/Sigs.ml[275,9915+6]..[275,9915+18]) (lib/Sigs.ml[275,9915+2]..[276,9935+42])
              core_type (lib/Sigs.ml[276,9935+4]..[276,9935+42])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[276,9935+5]..[276,9935+33])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[276,9935+5]..[276,9935+13])
                    Ptyp_constr "variable" (lib/Sigs.ml[276,9935+5]..[276,9935+13])
                    []
                  core_type (lib/Sigs.ml[276,9935+17]..[276,9935+33])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[276,9935+17]..[276,9935+25])
                      Ptyp_constr "property" (lib/Sigs.ml[276,9935+17]..[276,9935+25])
                      []
                    core_type (lib/Sigs.ml[276,9935+29]..[276,9935+33])
                      Ptyp_constr "unit" (lib/Sigs.ml[276,9935+29]..[276,9935+33])
                      []
                core_type (lib/Sigs.ml[276,9935+38]..[276,9935+42])
                  Ptyp_constr "unit" (lib/Sigs.ml[276,9935+38]..[276,9935+42])
                  []
              []
          signature_item (lib/Sigs.ml[277,9978+2]..[279,10031+42])
            Psig_value
            value_description "foreach_successor" (lib/Sigs.ml[277,9978+6]..[277,9978+23]) (lib/Sigs.ml[277,9978+2]..[279,10031+42])
              core_type (lib/Sigs.ml[278,10003+4]..[279,10031+42])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[278,10003+4]..[278,10003+12])
                  Ptyp_constr "variable" (lib/Sigs.ml[278,10003+4]..[278,10003+12])
                  []
                core_type (lib/Sigs.ml[278,10003+16]..[279,10031+42])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[278,10003+16]..[278,10003+24])
                    Ptyp_constr "property" (lib/Sigs.ml[278,10003+16]..[278,10003+24])
                    []
                  core_type (lib/Sigs.ml[279,10031+4]..[279,10031+42])
                    Ptyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[279,10031+5]..[279,10031+33])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[279,10031+5]..[279,10031+13])
                        Ptyp_constr "variable" (lib/Sigs.ml[279,10031+5]..[279,10031+13])
                        []
                      core_type (lib/Sigs.ml[279,10031+17]..[279,10031+33])
                        Ptyp_arrow
                        Nolabel
                        core_type (lib/Sigs.ml[279,10031+17]..[279,10031+25])
                          Ptyp_constr "property" (lib/Sigs.ml[279,10031+17]..[279,10031+25])
                          []
                        core_type (lib/Sigs.ml[279,10031+29]..[279,10031+33])
                          Ptyp_constr "unit" (lib/Sigs.ml[279,10031+29]..[279,10031+33])
                          []
                    core_type (lib/Sigs.ml[279,10031+38]..[279,10031+42])
                      Ptyp_constr "unit" (lib/Sigs.ml[279,10031+38]..[279,10031+42])
                      []
              []
        ]
  structure_item (lib/Sigs.ml[284,10161+0]..[284,10161+17])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[284,10161+0]..[284,10161+17])
        Pstr_eval
        expression (lib/Sigs.ml[284,10161+0]..[284,10161+17])
          Pexp_constant PConst_string("Numberings. ",(lib/Sigs.ml[284,10161+0]..[284,10161+17]),None)
    ]
  structure_item (lib/Sigs.ml[286,10180+0]..[292,10639+47])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[286,10180+0]..[292,10639+47])
        Pstr_eval
        expression (lib/Sigs.ml[286,10180+0]..[292,10639+47])
          Pexp_constant PConst_string("An ongoing numbering of (a subset of) a type [t] offers a function [encode]\n   which maps a value of type [t] to a unique integer code. If applied twice\n   to the same value, [encode] returns the same code; if applied to a value\n   that has never been encountered, it returns a fresh code. The function\n   [current] returns the next available code, which is also the number of\n   values that have been encoded so far. The function [has_been_encoded] tests\n   whether a value has been encoded already. ",(lib/Sigs.ml[286,10180+0]..[292,10639+47]),None)
    ]
  structure_item (lib/Sigs.ml[294,10688+0]..[299,10817+3])
    Pstr_modtype "ONGOING_NUMBERING" (lib/Sigs.ml[294,10688+12]..[294,10688+29])
      module_type (lib/Sigs.ml[294,10688+32]..[299,10817+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[295,10724+2]..[295,10724+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[295,10724+7]..[295,10724+8]) (lib/Sigs.ml[295,10724+2]..[295,10724+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[296,10733+2]..[296,10733+22])
            Psig_value
            value_description "encode" (lib/Sigs.ml[296,10733+6]..[296,10733+12]) (lib/Sigs.ml[296,10733+2]..[296,10733+22])
              core_type (lib/Sigs.ml[296,10733+14]..[296,10733+22])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[296,10733+14]..[296,10733+15])
                  Ptyp_constr "t" (lib/Sigs.ml[296,10733+14]..[296,10733+15])
                  []
                core_type (lib/Sigs.ml[296,10733+19]..[296,10733+22])
                  Ptyp_constr "int" (lib/Sigs.ml[296,10733+19]..[296,10733+22])
                  []
              []
          signature_item (lib/Sigs.ml[297,10756+2]..[297,10756+26])
            Psig_value
            value_description "current" (lib/Sigs.ml[297,10756+6]..[297,10756+13]) (lib/Sigs.ml[297,10756+2]..[297,10756+26])
              core_type (lib/Sigs.ml[297,10756+15]..[297,10756+26])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[297,10756+15]..[297,10756+19])
                  Ptyp_constr "unit" (lib/Sigs.ml[297,10756+15]..[297,10756+19])
                  []
                core_type (lib/Sigs.ml[297,10756+23]..[297,10756+26])
                  Ptyp_constr "int" (lib/Sigs.ml[297,10756+23]..[297,10756+26])
                  []
              []
          signature_item (lib/Sigs.ml[298,10783+2]..[298,10783+33])
            Psig_value
            value_description "has_been_encoded" (lib/Sigs.ml[298,10783+6]..[298,10783+22]) (lib/Sigs.ml[298,10783+2]..[298,10783+33])
              core_type (lib/Sigs.ml[298,10783+24]..[298,10783+33])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[298,10783+24]..[298,10783+25])
                  Ptyp_constr "t" (lib/Sigs.ml[298,10783+24]..[298,10783+25])
                  []
                core_type (lib/Sigs.ml[298,10783+29]..[298,10783+33])
                  Ptyp_constr "bool" (lib/Sigs.ml[298,10783+29]..[298,10783+33])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[301,10822+0]..[303,10977+52])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[301,10822+0]..[303,10977+52])
        Pstr_eval
        expression (lib/Sigs.ml[301,10822+0]..[303,10977+52])
          Pexp_constant PConst_string("A numbering of (a subset of) a type [t] is a triple of an integer [n] and\n   two functions [encode] and [decode] which represent an isomorphism between\n   this subset of [t] and the interval [\\[0..n)]. ",(lib/Sigs.ml[301,10822+0]..[303,10977+52]),None)
    ]
  structure_item (lib/Sigs.ml[305,11031+0]..[310,11127+3])
    Pstr_modtype "NUMBERING" (lib/Sigs.ml[305,11031+12]..[305,11031+21])
      module_type (lib/Sigs.ml[305,11031+24]..[310,11127+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[306,11059+2]..[306,11059+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[306,11059+7]..[306,11059+8]) (lib/Sigs.ml[306,11059+2]..[306,11059+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[307,11068+2]..[307,11068+12])
            Psig_value
            value_description "n" (lib/Sigs.ml[307,11068+6]..[307,11068+7]) (lib/Sigs.ml[307,11068+2]..[307,11068+12])
              core_type (lib/Sigs.ml[307,11068+9]..[307,11068+12])
                Ptyp_constr "int" (lib/Sigs.ml[307,11068+9]..[307,11068+12])
                []
              []
          signature_item (lib/Sigs.ml[308,11081+2]..[308,11081+22])
            Psig_value
            value_description "encode" (lib/Sigs.ml[308,11081+6]..[308,11081+12]) (lib/Sigs.ml[308,11081+2]..[308,11081+22])
              core_type (lib/Sigs.ml[308,11081+14]..[308,11081+22])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[308,11081+14]..[308,11081+15])
                  Ptyp_constr "t" (lib/Sigs.ml[308,11081+14]..[308,11081+15])
                  []
                core_type (lib/Sigs.ml[308,11081+19]..[308,11081+22])
                  Ptyp_constr "int" (lib/Sigs.ml[308,11081+19]..[308,11081+22])
                  []
              []
          signature_item (lib/Sigs.ml[309,11104+2]..[309,11104+22])
            Psig_value
            value_description "decode" (lib/Sigs.ml[309,11104+6]..[309,11104+12]) (lib/Sigs.ml[309,11104+2]..[309,11104+22])
              core_type (lib/Sigs.ml[309,11104+14]..[309,11104+22])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[309,11104+14]..[309,11104+17])
                  Ptyp_constr "int" (lib/Sigs.ml[309,11104+14]..[309,11104+17])
                  []
                core_type (lib/Sigs.ml[309,11104+21]..[309,11104+22])
                  Ptyp_constr "t" (lib/Sigs.ml[309,11104+21]..[309,11104+22])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[312,11132+0]..[317,11511+46])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[312,11132+0]..[317,11511+46])
        Pstr_eval
        expression (lib/Sigs.ml[312,11132+0]..[317,11511+46])
          Pexp_constant PConst_string("A combination of the above two signatures. According to this signature, a\n   numbering process is organized in two phases. During the first phase, the\n   numbering is ongoing; one can encode keys, but not decode. Applying the\n   functor [Done()] ends the first phase. A fixed numbering then becomes\n   available, which gives access to the total number [n] of encoded keys and\n   to both [encode] and [decode] functions. ",(lib/Sigs.ml[312,11132+0]..[317,11511+46]),None)
    ]
  structure_item (lib/Sigs.ml[319,11559+0]..[322,11670+3])
    Pstr_modtype "TWO_PHASE_NUMBERING" (lib/Sigs.ml[319,11559+12]..[319,11559+31])
      module_type (lib/Sigs.ml[319,11559+34]..[322,11670+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[320,11597+2]..[320,11597+27])
            Psig_include
            module_type (lib/Sigs.ml[320,11597+10]..[320,11597+27])
              Pmty_ident "ONGOING_NUMBERING" (lib/Sigs.ml[320,11597+10]..[320,11597+27])
          signature_item (lib/Sigs.ml[321,11625+2]..[321,11625+44])
            Psig_module "Done" (lib/Sigs.ml[321,11625+9]..[321,11625+13])
            module_type (lib/Sigs.ml[321,11625+14]..[321,11625+44])
              Pmty_functor ()
              module_type (lib/Sigs.ml[321,11625+19]..[321,11625+44])
                Pmty_with
                module_type (lib/Sigs.ml[321,11625+19]..[321,11625+28])
                  Pmty_ident "NUMBERING" (lib/Sigs.ml[321,11625+19]..[321,11625+28])
                [
                  Pwith_type "t" (lib/Sigs.ml[321,11625+39]..[321,11625+40])
                    type_declaration "t" (lib/Sigs.ml[321,11625+39]..[321,11625+40]) (lib/Sigs.ml[321,11625+34]..[321,11625+44])
                      ptype_params =
                        []
                      ptype_cstrs =
                        []
                      ptype_kind =
                        Ptype_abstract
                      ptype_private = Public
                      ptype_manifest =
                        Some
                          core_type (lib/Sigs.ml[321,11625+43]..[321,11625+44])
                            Ptyp_constr "t" (lib/Sigs.ml[321,11625+43]..[321,11625+44])
                            []
                ]
        ]
  structure_item (lib/Sigs.ml[326,11757+0]..[326,11757+17])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[326,11757+0]..[326,11757+17])
        Pstr_eval
        expression (lib/Sigs.ml[326,11757+0]..[326,11757+17])
          Pexp_constant PConst_string("Injections. ",(lib/Sigs.ml[326,11757+0]..[326,11757+17]),None)
    ]
  structure_item (lib/Sigs.ml[328,11776+0]..[330,11930+24])
    Pstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[328,11776+0]..[330,11930+24])
        Pstr_eval
        expression (lib/Sigs.ml[328,11776+0]..[330,11930+24])
          Pexp_constant PConst_string("An injection of [t] into [u] is an injective function of type [t -> u].\n   Because [encode] is injective, [encode x] can be thought of as the identity\n   of the object [x]. ",(lib/Sigs.ml[328,11776+0]..[330,11930+24]),None)
    ]
  structure_item (lib/Sigs.ml[332,11956+0]..[336,12023+3])
    Pstr_modtype "INJECTION" (lib/Sigs.ml[332,11956+12]..[332,11956+21])
      module_type (lib/Sigs.ml[332,11956+24]..[336,12023+3])
        Pmty_signature
        [
          signature_item (lib/Sigs.ml[333,11984+2]..[333,11984+8])
            Psig_type Rec
            [
              type_declaration "t" (lib/Sigs.ml[333,11984+7]..[333,11984+8]) (lib/Sigs.ml[333,11984+2]..[333,11984+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[334,11993+2]..[334,11993+8])
            Psig_type Rec
            [
              type_declaration "u" (lib/Sigs.ml[334,11993+7]..[334,11993+8]) (lib/Sigs.ml[334,11993+2]..[334,11993+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[335,12002+2]..[335,12002+20])
            Psig_value
            value_description "encode" (lib/Sigs.ml[335,12002+6]..[335,12002+12]) (lib/Sigs.ml[335,12002+2]..[335,12002+20])
              core_type (lib/Sigs.ml[335,12002+14]..[335,12002+20])
                Ptyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[335,12002+14]..[335,12002+15])
                  Ptyp_constr "t" (lib/Sigs.ml[335,12002+14]..[335,12002+15])
                  []
                core_type (lib/Sigs.ml[335,12002+19]..[335,12002+20])
                  Ptyp_constr "u" (lib/Sigs.ml[335,12002+19]..[335,12002+20])
                  []
              []
        ]
  structure_item (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Ppat_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          None
        expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Ppat_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          None
        expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                Pexp_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                None
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Ppat_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          None
        expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                Pexp_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                None
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Ppat_construct "()" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          None
        expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          Pexp_apply
          expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Sigs.ml[336,12023+3]..[336,12023+3]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
[@@@ocaml.text "A type alone. "]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set ~absolute_filename:"lib/Sigs.ml"
let () = Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "Sigs.ml"
module type TYPE  = sig type t end
[@@@ocaml.text
  "An ordered type. A hashed type. These are standard notions. "]
module type OrderedType  = Map.OrderedType
module type HashedType  = Hashtbl.HashedType
[@@@ocaml.text "A type whose elements can be enumerated. "]
module type FINITE_TYPE  = sig type t val foreach : (t -> unit) -> unit end
[@@@ocaml.text "Association maps. "]
[@@@ocaml.text
  "Following the convention of the ocaml standard library, [find] raises the\n   exception [Not_found] when the key is not in the domain of the map. In\n   contrast, [get] returns an option. "]
[@@@ocaml.text
  "Persistent maps. The empty map is a constant. Insertion creates a new map. "]
[@@@ocaml.text "This is a fragment of the standard signature [Map.S]. "]
module type PERSISTENT_MAPS  =
  sig
    type key
    type 'data t
    val empty : 'data t
    val add : key -> 'data -> 'data t -> 'data t
    val find : key -> 'data t -> 'data
    val iter : (key -> 'data -> unit) -> 'data t -> unit
  end
[@@@ocaml.text
  "Imperative maps. A fresh empty map is produced by [create].\n   Insertion updates a map in place.\n   [clear] empties an existing map. "]
[@@@ocaml.text
  "The order of the arguments to [add] and [find] is consistent with the order\n   used in [PERSISTENT_MAPS] above. Thus, it departs from the convention used\n   in OCaml's [Hashtbl] module. "]
module type MINIMAL_IMPERATIVE_MAPS  =
  sig
    type key
    type 'data t
    val create : unit -> 'data t
    val add : key -> 'data -> 'data t -> unit
    val find : key -> 'data t -> 'data
  end
module type IMPERATIVE_MAPS  =
  sig
    include MINIMAL_IMPERATIVE_MAPS
    val clear : 'data t -> unit
    val iter : (key -> 'data -> unit) -> 'data t -> unit
  end
[@@@ocaml.text
  "The signature [PROPERTY] is used by [Fix.Make], the least fixed point\n   computation algorithm. "]
[@@@ocaml.text
  "The type [property] must form a partial order. It must be equipped with a\n   least element [bottom] and with an equality test [equal]. (In the function\n   call [equal p q], it is permitted to assume that [p <= q] holds.) We do not\n   require an ordering test [leq]. We do not require a join operation [lub].\n   We do require the ascending chain condition: every monotone sequence must\n   eventually stabilize. "]
[@@@ocaml.text
  "The function [is_maximal] determines whether a property [p] is maximal with\n   respect to the partial order. Only a conservative check is required: in any\n   event, it is permitted for [is_maximal p] to be [false]. If [is_maximal p]\n   is [true], then [p] must have no strict upper bound. In particular, in the\n   case where properties form a lattice, this means that [p] must be the top\n   element. "]
module type PROPERTY  =
  sig
    type property
    val bottom : property
    val equal : property -> property -> bool
    val is_maximal : property -> bool
  end
[@@@ocaml.text
  "The signature [SEMI_LATTICE] offers separate [leq] and [join] functions.\n   The functor [Glue.MinimalSemiLattice] can be used, if necessary, to convert\n   this signature to [MINIMAL_SEMI_LATTICE]. "]
module type SEMI_LATTICE  =
  sig
    type property
    val leq : property -> property -> bool
    val join : property -> property -> property
  end
[@@@ocaml.text
  "The signature [MINIMAL_SEMI_LATTICE] is used by [Fix.DataFlow]. "]
module type MINIMAL_SEMI_LATTICE  =
  sig
    type property
    val leq_join : property -> property -> property[@@ocaml.doc
                                                     " [leq_join p q] must compute the join of [p] and [q]. If the result\n      is logically equal to [q], then [q] itself must be returned. Thus,\n      we have [leq_join p q == q] if and only if [leq p q] holds. "]
  end
[@@@ocaml.text
  "The type of a fixed point combinator that constructs a value of\n    type ['a]. "]
type 'a fix = ('a -> 'a) -> 'a
[@@@ocaml.text
  "Memoizers -- higher-order functions that construct memoizing functions. "]
module type MEMOIZER  =
  sig
    type key[@@ocaml.doc "A type of keys. "]
    val memoize : (key -> 'a) -> key -> 'a[@@ocaml.doc
                                            "A memoization combinator for this type. "]
    type 'a t[@@ocaml.doc
               "A memoization combinator where the memoization table is exposed. "]
    val visibly_memoize : (key -> 'a) -> ((key -> 'a) * 'a t)
    val fix : (key -> 'a) fix[@@ocaml.doc
                               "A recursive memoization combinator. "]
    exception Cycle of key list * key
      [@ocaml.doc
        "[defensive_fix] works like [fix], except it additionally detects circular\n     dependencies, which can arise if the second-order function supplied by\n     the user does not follow a well-founded recursion pattern. When the user\n     invokes [f x], where [f] is the function returned by [defensive_fix], if\n     a cyclic dependency is detected, then [Cycle (zs, z)] is raised, where\n     the list [zs] begins with [z] and continues with a series of intermediate\n     keys, leading back to [z]. Note that undetected divergence remains\n     possible; this corresponds to an infinite dependency chain, without a\n     cycle. "]
    val defensive_fix : (key -> 'a) fix
    val curried : (('a * 'b) -> 'c) fix -> ('a -> 'b -> 'c) fix[@@ocaml.doc
                                                                 "This combinator can be used to obtain a curried version of [fix] or\n     [defensive_fix] in a concrete instance where the type [key] is a\n     product type. "]
  end
[@@@ocaml.text
  "Tabulators: higher-order functions that construct tabulated functions. "]
[@@@ocaml.text
  "Like memoization, tabulation guarantees that, for every key [x], the image\n   [f x] is computed at most once. Unlike memoization, where this computation\n   takes place on demand, in the case of tabulation, the computation of every\n   [f x] takes place immediately, when [tabulate] is invoked. The graph of the\n   function [f], a table, is constructed and held in memory. "]
module type TABULATOR  =
  sig
    type key[@@ocaml.doc "A type of keys. "]
    val tabulate : (key -> 'a) -> key -> 'a[@@ocaml.doc
                                             "A tabulation combinator for this type. "]
  end
[@@@ocaml.text
  "Solvers: higher-order functions that compute the least solution of a\n   monotone system of equations. "]
module type SOLVER  =
  sig
    type variable
    type property
    type valuation = variable -> property[@@ocaml.doc
                                           "A valuation is a mapping of variables to properties. "]
    type rhs = valuation -> property[@@ocaml.doc
                                      "A right-hand side, when supplied with a valuation that gives\n     meaning to its free variables, evaluates to a property. More\n     precisely, a right-hand side is a monotone function of\n     valuations to properties. "]
    type equations = variable -> rhs[@@ocaml.doc
                                      "A system of equations is a mapping of variables to right-hand\n     sides. "]
    [@@@ocaml.text
      "[lfp eqs] produces the least solution of the system of monotone\n     equations [eqs]. "]
    [@@@ocaml.text
      "It is guaranteed that, for each variable [v], the application [eqs v] is\n     performed at most once (whereas the right-hand side produced by this\n     application is, in general, evaluated multiple times). This guarantee can\n     be used to perform costly pre-computation, or memory allocation, when [eqs]\n     is applied to its first argument. "]
    val lfp : equations -> valuation[@@ocaml.doc
                                      "When [lfp] is applied to a system of equations [eqs], it performs no\n     actual computation. It produces a valuation, [get], which represents\n     the least solution of the system of equations. The actual fixed point\n     computation takes place, on demand, when [get] is applied. "]
  end
[@@@ocaml.text
  "The signature [SOLUTION] is used to describe the result of\n    [Fix.DataFlow]. "]
module type SOLUTION  =
  sig type variable type property val solution : variable -> property end
[@@@ocaml.text "Directed, rooted graphs. "]
module type GRAPH  =
  sig
    type t
    val foreach_root : (t -> unit) -> unit
    val foreach_successor : t -> (t -> unit) -> unit
  end
[@@@ocaml.text
  "The signature [DATA_FLOW_GRAPH] is used to describe a data flow analysis\n    problem. It is used to describe the input to [Fix.DataFlow]. "]
[@@@ocaml.text
  "The function [foreach_root] describes the root nodes of the data flow graph\n    as well as the properties associated with them. "]
[@@@ocaml.text
  "The function [foreach_successor] describes the edges of the data flow graph\n    as well as the manner in which a property at the source of an edge is\n    transformed into a property at the target. The property at the target\n    must of course be a monotonic function of the property at the source. "]
module type DATA_FLOW_GRAPH  =
  sig
    type variable
    type property
    val foreach_root : (variable -> property -> unit) -> unit
    val foreach_successor :
      variable -> property -> (variable -> property -> unit) -> unit
  end
[@@@ocaml.text "Numberings. "]
[@@@ocaml.text
  "An ongoing numbering of (a subset of) a type [t] offers a function [encode]\n   which maps a value of type [t] to a unique integer code. If applied twice\n   to the same value, [encode] returns the same code; if applied to a value\n   that has never been encountered, it returns a fresh code. The function\n   [current] returns the next available code, which is also the number of\n   values that have been encoded so far. The function [has_been_encoded] tests\n   whether a value has been encoded already. "]
module type ONGOING_NUMBERING  =
  sig
    type t
    val encode : t -> int
    val current : unit -> int
    val has_been_encoded : t -> bool
  end
[@@@ocaml.text
  "A numbering of (a subset of) a type [t] is a triple of an integer [n] and\n   two functions [encode] and [decode] which represent an isomorphism between\n   this subset of [t] and the interval [\\[0..n)]. "]
module type NUMBERING  =
  sig type t val n : int val encode : t -> int val decode : int -> t end
[@@@ocaml.text
  "A combination of the above two signatures. According to this signature, a\n   numbering process is organized in two phases. During the first phase, the\n   numbering is ongoing; one can encode keys, but not decode. Applying the\n   functor [Done()] ends the first phase. A fixed numbering then becomes\n   available, which gives access to the total number [n] of encoded keys and\n   to both [encode] and [decode] functions. "]
module type TWO_PHASE_NUMBERING  =
  sig
    include ONGOING_NUMBERING
    module Done : functor () -> NUMBERING with type  t =  t
  end
[@@@ocaml.text "Injections. "]
[@@@ocaml.text
  "An injection of [t] into [u] is an injective function of type [t -> u].\n   Because [encode] is injective, [encode x] can be thought of as the identity\n   of the object [x]. "]
module type INJECTION  = sig type t type u val encode : t -> u end
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Sigs.ml[15,975+0]..lib/Sigs.ml[15,975+19])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[15,975+0]..[15,975+19])
        Pstr_eval
        expression (lib/Sigs.ml[15,975+0]..[15,975+19])
          Pexp_constant PConst_string("A type alone. ",(lib/Sigs.ml[15,975+0]..[15,975+19]),None)
    ]
  structure_item (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Texp_apply
          expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Texp_apply
          expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Texp_apply
          expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
                Texp_constant Const_string("lib/Sigs.ml",(lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
          Texp_apply
          expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost
                Texp_constant Const_string("Sigs.ml",(lib/Sigs.ml[17,996+0]..lib/Sigs.ml[17,996+0]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[17,996+0]..lib/Sigs.ml[19,1028+3])
    Tstr_modtype "TYPE/1129"
      module_type (lib/Sigs.ml[17,996+19]..lib/Sigs.ml[19,1028+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[18,1019+2]..lib/Sigs.ml[18,1019+8])
            Tsig_type Rec
            [
              type_declaration t/1128 (lib/Sigs.ml[18,1019+2]..lib/Sigs.ml[18,1019+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (lib/Sigs.ml[23,1115+0]..lib/Sigs.ml[23,1115+65])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[23,1115+0]..[23,1115+65])
        Pstr_eval
        expression (lib/Sigs.ml[23,1115+0]..[23,1115+65])
          Pexp_constant PConst_string("An ordered type. A hashed type. These are standard notions. ",(lib/Sigs.ml[23,1115+0]..[23,1115+65]),None)
    ]
  structure_item (lib/Sigs.ml[25,1182+0]..lib/Sigs.ml[26,1208+17])
    Tstr_modtype "OrderedType/1134"
      module_type (lib/Sigs.ml[26,1208+2]..lib/Sigs.ml[26,1208+17])
        Tmty_ident "Stdlib!.Map.OrderedType"
  structure_item (lib/Sigs.ml[28,1227+0]..lib/Sigs.ml[29,1252+20])
    Tstr_modtype "HashedType/1174"
      module_type (lib/Sigs.ml[29,1252+2]..lib/Sigs.ml[29,1252+20])
        Tmty_ident "Stdlib!.Hashtbl.HashedType"
  structure_item (lib/Sigs.ml[33,1356+0]..lib/Sigs.ml[33,1356+46])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[33,1356+0]..[33,1356+46])
        Pstr_eval
        expression (lib/Sigs.ml[33,1356+0]..[33,1356+46])
          Pexp_constant PConst_string("A type whose elements can be enumerated. ",(lib/Sigs.ml[33,1356+0]..[33,1356+46]),None)
    ]
  structure_item (lib/Sigs.ml[35,1404+0]..lib/Sigs.ml[38,1478+3])
    Tstr_modtype "FINITE_TYPE/1177"
      module_type (lib/Sigs.ml[35,1404+26]..lib/Sigs.ml[38,1478+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[36,1434+2]..lib/Sigs.ml[36,1434+8])
            Tsig_type Rec
            [
              type_declaration t/1175 (lib/Sigs.ml[36,1434+2]..lib/Sigs.ml[36,1434+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[37,1443+2]..lib/Sigs.ml[37,1443+34])
            Tsig_value
            value_description foreach/1176 (lib/Sigs.ml[37,1443+2]..lib/Sigs.ml[37,1443+34])
              core_type (lib/Sigs.ml[37,1443+15]..lib/Sigs.ml[37,1443+34])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[37,1443+16]..lib/Sigs.ml[37,1443+25])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[37,1443+16]..lib/Sigs.ml[37,1443+17])
                    Ttyp_constr "t/1175"
                    []
                  core_type (lib/Sigs.ml[37,1443+21]..lib/Sigs.ml[37,1443+25])
                    Ttyp_constr "unit/6!"
                    []
                core_type (lib/Sigs.ml[37,1443+30]..lib/Sigs.ml[37,1443+34])
                  Ttyp_constr "unit/6!"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[42,1565+0]..lib/Sigs.ml[42,1565+23])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[42,1565+0]..[42,1565+23])
        Pstr_eval
        expression (lib/Sigs.ml[42,1565+0]..[42,1565+23])
          Pexp_constant PConst_string("Association maps. ",(lib/Sigs.ml[42,1565+0]..[42,1565+23]),None)
    ]
  structure_item (lib/Sigs.ml[44,1590+0]..lib/Sigs.ml[46,1741+40])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[44,1590+0]..[46,1741+40])
        Pstr_eval
        expression (lib/Sigs.ml[44,1590+0]..[46,1741+40])
          Pexp_constant PConst_string("Following the convention of the ocaml standard library, [find] raises the\n   exception [Not_found] when the key is not in the domain of the map. In\n   contrast, [get] returns an option. ",(lib/Sigs.ml[44,1590+0]..[46,1741+40]),None)
    ]
  structure_item (lib/Sigs.ml[48,1783+0]..lib/Sigs.ml[48,1783+80])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[48,1783+0]..[48,1783+80])
        Pstr_eval
        expression (lib/Sigs.ml[48,1783+0]..[48,1783+80])
          Pexp_constant PConst_string("Persistent maps. The empty map is a constant. Insertion creates a new map. ",(lib/Sigs.ml[48,1783+0]..[48,1783+80]),None)
    ]
  structure_item (lib/Sigs.ml[50,1865+0]..lib/Sigs.ml[50,1865+59])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[50,1865+0]..[50,1865+59])
        Pstr_eval
        expression (lib/Sigs.ml[50,1865+0]..[50,1865+59])
          Pexp_constant PConst_string("This is a fragment of the standard signature [Map.S]. ",(lib/Sigs.ml[50,1865+0]..[50,1865+59]),None)
    ]
  structure_item (lib/Sigs.ml[52,1926+0]..lib/Sigs.ml[59,2143+3])
    Tstr_modtype "PERSISTENT_MAPS/1184"
      module_type (lib/Sigs.ml[52,1926+30]..lib/Sigs.ml[59,2143+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[53,1960+2]..lib/Sigs.ml[53,1960+10])
            Tsig_type Rec
            [
              type_declaration key/1178 (lib/Sigs.ml[53,1960+2]..lib/Sigs.ml[53,1960+10])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[54,1971+2]..lib/Sigs.ml[54,1971+14])
            Tsig_type Rec
            [
              type_declaration t/1179 (lib/Sigs.ml[54,1971+2]..lib/Sigs.ml[54,1971+14])
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[54,1971+7]..lib/Sigs.ml[54,1971+12])
                      Ttyp_var data
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[55,1986+2]..lib/Sigs.ml[55,1986+20])
            Tsig_value
            value_description empty/1180 (lib/Sigs.ml[55,1986+2]..lib/Sigs.ml[55,1986+20])
              core_type (lib/Sigs.ml[55,1986+13]..lib/Sigs.ml[55,1986+20])
                Ttyp_constr "t/1179"
                [
                  core_type (lib/Sigs.ml[55,1986+13]..lib/Sigs.ml[55,1986+18])
                    Ttyp_var data
                ]
              []
          signature_item (lib/Sigs.ml[56,2007+2]..lib/Sigs.ml[56,2007+45])
            Tsig_value
            value_description add/1181 (lib/Sigs.ml[56,2007+2]..lib/Sigs.ml[56,2007+45])
              core_type (lib/Sigs.ml[56,2007+11]..lib/Sigs.ml[56,2007+45])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[56,2007+11]..lib/Sigs.ml[56,2007+14])
                  Ttyp_constr "key/1178"
                  []
                core_type (lib/Sigs.ml[56,2007+18]..lib/Sigs.ml[56,2007+45])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[56,2007+18]..lib/Sigs.ml[56,2007+23])
                    Ttyp_var data
                  core_type (lib/Sigs.ml[56,2007+27]..lib/Sigs.ml[56,2007+45])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[56,2007+27]..lib/Sigs.ml[56,2007+34])
                      Ttyp_constr "t/1179"
                      [
                        core_type (lib/Sigs.ml[56,2007+27]..lib/Sigs.ml[56,2007+32])
                          Ttyp_var data
                      ]
                    core_type (lib/Sigs.ml[56,2007+38]..lib/Sigs.ml[56,2007+45])
                      Ttyp_constr "t/1179"
                      [
                        core_type (lib/Sigs.ml[56,2007+38]..lib/Sigs.ml[56,2007+43])
                          Ttyp_var data
                      ]
              []
          signature_item (lib/Sigs.ml[57,2053+2]..lib/Sigs.ml[57,2053+35])
            Tsig_value
            value_description find/1182 (lib/Sigs.ml[57,2053+2]..lib/Sigs.ml[57,2053+35])
              core_type (lib/Sigs.ml[57,2053+12]..lib/Sigs.ml[57,2053+35])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[57,2053+12]..lib/Sigs.ml[57,2053+15])
                  Ttyp_constr "key/1178"
                  []
                core_type (lib/Sigs.ml[57,2053+19]..lib/Sigs.ml[57,2053+35])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[57,2053+19]..lib/Sigs.ml[57,2053+26])
                    Ttyp_constr "t/1179"
                    [
                      core_type (lib/Sigs.ml[57,2053+19]..lib/Sigs.ml[57,2053+24])
                        Ttyp_var data
                    ]
                  core_type (lib/Sigs.ml[57,2053+30]..lib/Sigs.ml[57,2053+35])
                    Ttyp_var data
              []
          signature_item (lib/Sigs.ml[58,2089+2]..lib/Sigs.ml[58,2089+53])
            Tsig_value
            value_description iter/1183 (lib/Sigs.ml[58,2089+2]..lib/Sigs.ml[58,2089+53])
              core_type (lib/Sigs.ml[58,2089+12]..lib/Sigs.ml[58,2089+53])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[58,2089+13]..lib/Sigs.ml[58,2089+33])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[58,2089+13]..lib/Sigs.ml[58,2089+16])
                    Ttyp_constr "key/1178"
                    []
                  core_type (lib/Sigs.ml[58,2089+20]..lib/Sigs.ml[58,2089+33])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[58,2089+20]..lib/Sigs.ml[58,2089+25])
                      Ttyp_var data
                    core_type (lib/Sigs.ml[58,2089+29]..lib/Sigs.ml[58,2089+33])
                      Ttyp_constr "unit/6!"
                      []
                core_type (lib/Sigs.ml[58,2089+38]..lib/Sigs.ml[58,2089+53])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[58,2089+38]..lib/Sigs.ml[58,2089+45])
                    Ttyp_constr "t/1179"
                    [
                      core_type (lib/Sigs.ml[58,2089+38]..lib/Sigs.ml[58,2089+43])
                        Ttyp_var data
                    ]
                  core_type (lib/Sigs.ml[58,2089+49]..lib/Sigs.ml[58,2089+53])
                    Ttyp_constr "unit/6!"
                    []
              []
        ]
  structure_item (lib/Sigs.ml[61,2148+0]..lib/Sigs.ml[63,2248+38])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[61,2148+0]..[63,2248+38])
        Pstr_eval
        expression (lib/Sigs.ml[61,2148+0]..[63,2248+38])
          Pexp_constant PConst_string("Imperative maps. A fresh empty map is produced by [create].\n   Insertion updates a map in place.\n   [clear] empties an existing map. ",(lib/Sigs.ml[61,2148+0]..[63,2248+38]),None)
    ]
  structure_item (lib/Sigs.ml[65,2288+0]..lib/Sigs.ml[67,2445+34])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[65,2288+0]..[67,2445+34])
        Pstr_eval
        expression (lib/Sigs.ml[65,2288+0]..[67,2445+34])
          Pexp_constant PConst_string("The order of the arguments to [add] and [find] is consistent with the order\n   used in [PERSISTENT_MAPS] above. Thus, it departs from the convention used\n   in OCaml's [Hashtbl] module. ",(lib/Sigs.ml[65,2288+0]..[67,2445+34]),None)
    ]
  structure_item (lib/Sigs.ml[69,2481+0]..lib/Sigs.ml[75,2658+3])
    Tstr_modtype "MINIMAL_IMPERATIVE_MAPS/1190"
      module_type (lib/Sigs.ml[69,2481+38]..lib/Sigs.ml[75,2658+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[70,2523+2]..lib/Sigs.ml[70,2523+10])
            Tsig_type Rec
            [
              type_declaration key/1185 (lib/Sigs.ml[70,2523+2]..lib/Sigs.ml[70,2523+10])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[71,2534+2]..lib/Sigs.ml[71,2534+14])
            Tsig_type Rec
            [
              type_declaration t/1186 (lib/Sigs.ml[71,2534+2]..lib/Sigs.ml[71,2534+14])
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[71,2534+7]..lib/Sigs.ml[71,2534+12])
                      Ttyp_var data
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[72,2549+2]..lib/Sigs.ml[72,2549+29])
            Tsig_value
            value_description create/1187 (lib/Sigs.ml[72,2549+2]..lib/Sigs.ml[72,2549+29])
              core_type (lib/Sigs.ml[72,2549+14]..lib/Sigs.ml[72,2549+29])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[72,2549+14]..lib/Sigs.ml[72,2549+18])
                  Ttyp_constr "unit/6!"
                  []
                core_type (lib/Sigs.ml[72,2549+22]..lib/Sigs.ml[72,2549+29])
                  Ttyp_constr "t/1186"
                  [
                    core_type (lib/Sigs.ml[72,2549+22]..lib/Sigs.ml[72,2549+27])
                      Ttyp_var data
                  ]
              []
          signature_item (lib/Sigs.ml[73,2579+2]..lib/Sigs.ml[73,2579+42])
            Tsig_value
            value_description add/1188 (lib/Sigs.ml[73,2579+2]..lib/Sigs.ml[73,2579+42])
              core_type (lib/Sigs.ml[73,2579+11]..lib/Sigs.ml[73,2579+42])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[73,2579+11]..lib/Sigs.ml[73,2579+14])
                  Ttyp_constr "key/1185"
                  []
                core_type (lib/Sigs.ml[73,2579+18]..lib/Sigs.ml[73,2579+42])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[73,2579+18]..lib/Sigs.ml[73,2579+23])
                    Ttyp_var data
                  core_type (lib/Sigs.ml[73,2579+27]..lib/Sigs.ml[73,2579+42])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[73,2579+27]..lib/Sigs.ml[73,2579+34])
                      Ttyp_constr "t/1186"
                      [
                        core_type (lib/Sigs.ml[73,2579+27]..lib/Sigs.ml[73,2579+32])
                          Ttyp_var data
                      ]
                    core_type (lib/Sigs.ml[73,2579+38]..lib/Sigs.ml[73,2579+42])
                      Ttyp_constr "unit/6!"
                      []
              []
          signature_item (lib/Sigs.ml[74,2622+2]..lib/Sigs.ml[74,2622+35])
            Tsig_value
            value_description find/1189 (lib/Sigs.ml[74,2622+2]..lib/Sigs.ml[74,2622+35])
              core_type (lib/Sigs.ml[74,2622+12]..lib/Sigs.ml[74,2622+35])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[74,2622+12]..lib/Sigs.ml[74,2622+15])
                  Ttyp_constr "key/1185"
                  []
                core_type (lib/Sigs.ml[74,2622+19]..lib/Sigs.ml[74,2622+35])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[74,2622+19]..lib/Sigs.ml[74,2622+26])
                    Ttyp_constr "t/1186"
                    [
                      core_type (lib/Sigs.ml[74,2622+19]..lib/Sigs.ml[74,2622+24])
                        Ttyp_var data
                    ]
                  core_type (lib/Sigs.ml[74,2622+30]..lib/Sigs.ml[74,2622+35])
                    Ttyp_var data
              []
        ]
  structure_item (lib/Sigs.ml[77,2663+0]..lib/Sigs.ml[81,2814+3])
    Tstr_modtype "IMPERATIVE_MAPS/1198"
      module_type (lib/Sigs.ml[77,2663+30]..lib/Sigs.ml[81,2814+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[78,2697+2]..lib/Sigs.ml[78,2697+33])
            Tsig_include
            module_type (lib/Sigs.ml[78,2697+10]..lib/Sigs.ml[78,2697+33])
              Tmty_ident "MINIMAL_IMPERATIVE_MAPS/1190"
          signature_item (lib/Sigs.ml[79,2731+2]..lib/Sigs.ml[79,2731+28])
            Tsig_value
            value_description clear/1196 (lib/Sigs.ml[79,2731+2]..lib/Sigs.ml[79,2731+28])
              core_type (lib/Sigs.ml[79,2731+13]..lib/Sigs.ml[79,2731+28])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[79,2731+13]..lib/Sigs.ml[79,2731+20])
                  Ttyp_constr "t/1192"
                  [
                    core_type (lib/Sigs.ml[79,2731+13]..lib/Sigs.ml[79,2731+18])
                      Ttyp_var data
                  ]
                core_type (lib/Sigs.ml[79,2731+24]..lib/Sigs.ml[79,2731+28])
                  Ttyp_constr "unit/6!"
                  []
              []
          signature_item (lib/Sigs.ml[80,2760+2]..lib/Sigs.ml[80,2760+53])
            Tsig_value
            value_description iter/1197 (lib/Sigs.ml[80,2760+2]..lib/Sigs.ml[80,2760+53])
              core_type (lib/Sigs.ml[80,2760+12]..lib/Sigs.ml[80,2760+53])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[80,2760+13]..lib/Sigs.ml[80,2760+33])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[80,2760+13]..lib/Sigs.ml[80,2760+16])
                    Ttyp_constr "key/1191"
                    []
                  core_type (lib/Sigs.ml[80,2760+20]..lib/Sigs.ml[80,2760+33])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[80,2760+20]..lib/Sigs.ml[80,2760+25])
                      Ttyp_var data
                    core_type (lib/Sigs.ml[80,2760+29]..lib/Sigs.ml[80,2760+33])
                      Ttyp_constr "unit/6!"
                      []
                core_type (lib/Sigs.ml[80,2760+38]..lib/Sigs.ml[80,2760+53])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[80,2760+38]..lib/Sigs.ml[80,2760+45])
                    Ttyp_constr "t/1192"
                    [
                      core_type (lib/Sigs.ml[80,2760+38]..lib/Sigs.ml[80,2760+43])
                        Ttyp_var data
                    ]
                  core_type (lib/Sigs.ml[80,2760+49]..lib/Sigs.ml[80,2760+53])
                    Ttyp_constr "unit/6!"
                    []
              []
        ]
  structure_item (lib/Sigs.ml[85,2901+0]..lib/Sigs.ml[86,2974+28])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[85,2901+0]..[86,2974+28])
        Pstr_eval
        expression (lib/Sigs.ml[85,2901+0]..[86,2974+28])
          Pexp_constant PConst_string("The signature [PROPERTY] is used by [Fix.Make], the least fixed point\n   computation algorithm. ",(lib/Sigs.ml[85,2901+0]..[86,2974+28]),None)
    ]
  structure_item (lib/Sigs.ml[88,3004+0]..lib/Sigs.ml[93,3392+27])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[88,3004+0]..[93,3392+27])
        Pstr_eval
        expression (lib/Sigs.ml[88,3004+0]..[93,3392+27])
          Pexp_constant PConst_string("The type [property] must form a partial order. It must be equipped with a\n   least element [bottom] and with an equality test [equal]. (In the function\n   call [equal p q], it is permitted to assume that [p <= q] holds.) We do not\n   require an ordering test [leq]. We do not require a join operation [lub].\n   We do require the ascending chain condition: every monotone sequence must\n   eventually stabilize. ",(lib/Sigs.ml[88,3004+0]..[93,3392+27]),None)
    ]
  structure_item (lib/Sigs.ml[95,3421+0]..lib/Sigs.ml[100,3812+14])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[95,3421+0]..[100,3812+14])
        Pstr_eval
        expression (lib/Sigs.ml[95,3421+0]..[100,3812+14])
          Pexp_constant PConst_string("The function [is_maximal] determines whether a property [p] is maximal with\n   respect to the partial order. Only a conservative check is required: in any\n   event, it is permitted for [is_maximal p] to be [false]. If [is_maximal p]\n   is [true], then [p] must have no strict upper bound. In particular, in the\n   case where properties form a lattice, this means that [p] must be the top\n   element. ",(lib/Sigs.ml[95,3421+0]..[100,3812+14]),None)
    ]
  structure_item (lib/Sigs.ml[102,3828+0]..lib/Sigs.ml[107,3971+3])
    Tstr_modtype "PROPERTY/1203"
      module_type (lib/Sigs.ml[102,3828+23]..lib/Sigs.ml[107,3971+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[103,3855+2]..lib/Sigs.ml[103,3855+15])
            Tsig_type Rec
            [
              type_declaration property/1199 (lib/Sigs.ml[103,3855+2]..lib/Sigs.ml[103,3855+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[104,3871+2]..lib/Sigs.ml[104,3871+22])
            Tsig_value
            value_description bottom/1200 (lib/Sigs.ml[104,3871+2]..lib/Sigs.ml[104,3871+22])
              core_type (lib/Sigs.ml[104,3871+14]..lib/Sigs.ml[104,3871+22])
                Ttyp_constr "property/1199"
                []
              []
          signature_item (lib/Sigs.ml[105,3894+2]..lib/Sigs.ml[105,3894+41])
            Tsig_value
            value_description equal/1201 (lib/Sigs.ml[105,3894+2]..lib/Sigs.ml[105,3894+41])
              core_type (lib/Sigs.ml[105,3894+13]..lib/Sigs.ml[105,3894+41])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[105,3894+13]..lib/Sigs.ml[105,3894+21])
                  Ttyp_constr "property/1199"
                  []
                core_type (lib/Sigs.ml[105,3894+25]..lib/Sigs.ml[105,3894+41])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[105,3894+25]..lib/Sigs.ml[105,3894+33])
                    Ttyp_constr "property/1199"
                    []
                  core_type (lib/Sigs.ml[105,3894+37]..lib/Sigs.ml[105,3894+41])
                    Ttyp_constr "bool/5!"
                    []
              []
          signature_item (lib/Sigs.ml[106,3936+2]..lib/Sigs.ml[106,3936+34])
            Tsig_value
            value_description is_maximal/1202 (lib/Sigs.ml[106,3936+2]..lib/Sigs.ml[106,3936+34])
              core_type (lib/Sigs.ml[106,3936+18]..lib/Sigs.ml[106,3936+34])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[106,3936+18]..lib/Sigs.ml[106,3936+26])
                  Ttyp_constr "property/1199"
                  []
                core_type (lib/Sigs.ml[106,3936+30]..lib/Sigs.ml[106,3936+34])
                  Ttyp_constr "bool/5!"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[111,4058+0]..lib/Sigs.ml[113,4213+47])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[111,4058+0]..[113,4213+47])
        Pstr_eval
        expression (lib/Sigs.ml[111,4058+0]..[113,4213+47])
          Pexp_constant PConst_string("The signature [SEMI_LATTICE] offers separate [leq] and [join] functions.\n   The functor [Glue.MinimalSemiLattice] can be used, if necessary, to convert\n   this signature to [MINIMAL_SEMI_LATTICE]. ",(lib/Sigs.ml[111,4058+0]..[113,4213+47]),None)
    ]
  structure_item (lib/Sigs.ml[115,4262+0]..lib/Sigs.ml[119,4394+3])
    Tstr_modtype "SEMI_LATTICE/1207"
      module_type (lib/Sigs.ml[115,4262+27]..lib/Sigs.ml[119,4394+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[116,4293+2]..lib/Sigs.ml[116,4293+15])
            Tsig_type Rec
            [
              type_declaration property/1204 (lib/Sigs.ml[116,4293+2]..lib/Sigs.ml[116,4293+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[117,4309+2]..lib/Sigs.ml[117,4309+39])
            Tsig_value
            value_description leq/1205 (lib/Sigs.ml[117,4309+2]..lib/Sigs.ml[117,4309+39])
              core_type (lib/Sigs.ml[117,4309+11]..lib/Sigs.ml[117,4309+39])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[117,4309+11]..lib/Sigs.ml[117,4309+19])
                  Ttyp_constr "property/1204"
                  []
                core_type (lib/Sigs.ml[117,4309+23]..lib/Sigs.ml[117,4309+39])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[117,4309+23]..lib/Sigs.ml[117,4309+31])
                    Ttyp_constr "property/1204"
                    []
                  core_type (lib/Sigs.ml[117,4309+35]..lib/Sigs.ml[117,4309+39])
                    Ttyp_constr "bool/5!"
                    []
              []
          signature_item (lib/Sigs.ml[118,4349+2]..lib/Sigs.ml[118,4349+44])
            Tsig_value
            value_description join/1206 (lib/Sigs.ml[118,4349+2]..lib/Sigs.ml[118,4349+44])
              core_type (lib/Sigs.ml[118,4349+12]..lib/Sigs.ml[118,4349+44])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[118,4349+12]..lib/Sigs.ml[118,4349+20])
                  Ttyp_constr "property/1204"
                  []
                core_type (lib/Sigs.ml[118,4349+24]..lib/Sigs.ml[118,4349+44])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[118,4349+24]..lib/Sigs.ml[118,4349+32])
                    Ttyp_constr "property/1204"
                    []
                  core_type (lib/Sigs.ml[118,4349+36]..lib/Sigs.ml[118,4349+44])
                    Ttyp_constr "property/1204"
                    []
              []
        ]
  structure_item (lib/Sigs.ml[121,4399+0]..lib/Sigs.ml[121,4399+69])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[121,4399+0]..[121,4399+69])
        Pstr_eval
        expression (lib/Sigs.ml[121,4399+0]..[121,4399+69])
          Pexp_constant PConst_string("The signature [MINIMAL_SEMI_LATTICE] is used by [Fix.DataFlow]. ",(lib/Sigs.ml[121,4399+0]..[121,4399+69]),None)
    ]
  structure_item (lib/Sigs.ml[123,4470+0]..lib/Sigs.ml[130,4790+3])
    Tstr_modtype "MINIMAL_SEMI_LATTICE/1210"
      module_type (lib/Sigs.ml[123,4470+35]..lib/Sigs.ml[130,4790+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[124,4509+2]..lib/Sigs.ml[124,4509+15])
            Tsig_type Rec
            [
              type_declaration property/1208 (lib/Sigs.ml[124,4509+2]..lib/Sigs.ml[124,4509+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[129,4741+2]..lib/Sigs.ml[129,4741+48])
            Tsig_value
            value_description leq_join/1209 (lib/Sigs.ml[129,4741+2]..lib/Sigs.ml[129,4741+48])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[126,4526+2]..[128,4672+68])
                    Pstr_eval
                    expression (lib/Sigs.ml[126,4526+2]..[128,4672+68])
                      Pexp_constant PConst_string(" [leq_join p q] must compute the join of [p] and [q]. If the result\n      is logically equal to [q], then [q] itself must be returned. Thus,\n      we have [leq_join p q == q] if and only if [leq p q] holds. ",(lib/Sigs.ml[126,4526+2]..[128,4672+68]),None)
                ]
              core_type (lib/Sigs.ml[129,4741+16]..lib/Sigs.ml[129,4741+48])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[129,4741+16]..lib/Sigs.ml[129,4741+24])
                  Ttyp_constr "property/1208"
                  []
                core_type (lib/Sigs.ml[129,4741+28]..lib/Sigs.ml[129,4741+48])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[129,4741+28]..lib/Sigs.ml[129,4741+36])
                    Ttyp_constr "property/1208"
                    []
                  core_type (lib/Sigs.ml[129,4741+40]..lib/Sigs.ml[129,4741+48])
                    Ttyp_constr "property/1208"
                    []
              []
        ]
  structure_item (lib/Sigs.ml[134,4877+0]..lib/Sigs.ml[135,4944+17])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[134,4877+0]..[135,4944+17])
        Pstr_eval
        expression (lib/Sigs.ml[134,4877+0]..[135,4944+17])
          Pexp_constant PConst_string("The type of a fixed point combinator that constructs a value of\n    type ['a]. ",(lib/Sigs.ml[134,4877+0]..[135,4944+17]),None)
    ]
  structure_item (lib/Sigs.ml[137,4963+0]..lib/Sigs.ml[138,4977+18])
    Tstr_type Rec
    [
      type_declaration fix/1211 (lib/Sigs.ml[137,4963+0]..lib/Sigs.ml[138,4977+18])
        ptype_params =
          [
            core_type (lib/Sigs.ml[137,4963+5]..lib/Sigs.ml[137,4963+7])
              Ttyp_var a
          ]
        ptype_cstrs =
          []
        ptype_kind =
          Ttype_abstract
        ptype_private = Public
        ptype_manifest =
          Some
            core_type (lib/Sigs.ml[138,4977+2]..lib/Sigs.ml[138,4977+18])
              Ttyp_arrow
              Nolabel
              core_type (lib/Sigs.ml[138,4977+3]..lib/Sigs.ml[138,4977+11])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[138,4977+3]..lib/Sigs.ml[138,4977+5])
                  Ttyp_var a
                core_type (lib/Sigs.ml[138,4977+9]..lib/Sigs.ml[138,4977+11])
                  Ttyp_var a
              core_type (lib/Sigs.ml[138,4977+16]..lib/Sigs.ml[138,4977+18])
                Ttyp_var a
    ]
  structure_item (lib/Sigs.ml[142,5079+0]..lib/Sigs.ml[142,5079+77])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[142,5079+0]..[142,5079+77])
        Pstr_eval
        expression (lib/Sigs.ml[142,5079+0]..[142,5079+77])
          Pexp_constant PConst_string("Memoizers -- higher-order functions that construct memoizing functions. ",(lib/Sigs.ml[142,5079+0]..[142,5079+77]),None)
    ]
  structure_item (lib/Sigs.ml[144,5158+0]..lib/Sigs.ml[176,6455+3])
    Tstr_modtype "MEMOIZER/1220"
      module_type (lib/Sigs.ml[144,5158+23]..lib/Sigs.ml[176,6455+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[147,5210+2]..lib/Sigs.ml[147,5210+10])
            Tsig_type Rec
            [
              type_declaration key/1212 (lib/Sigs.ml[147,5210+2]..lib/Sigs.ml[147,5210+10])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[146,5186+2]..[146,5186+23])
                      Pstr_eval
                      expression (lib/Sigs.ml[146,5186+2]..[146,5186+23])
                        Pexp_constant PConst_string("A type of keys. ",(lib/Sigs.ml[146,5186+2]..[146,5186+23]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[150,5270+2]..lib/Sigs.ml[150,5270+41])
            Tsig_value
            value_description memoize/1213 (lib/Sigs.ml[150,5270+2]..lib/Sigs.ml[150,5270+41])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[149,5222+2]..[149,5222+47])
                    Pstr_eval
                    expression (lib/Sigs.ml[149,5222+2]..[149,5222+47])
                      Pexp_constant PConst_string("A memoization combinator for this type. ",(lib/Sigs.ml[149,5222+2]..[149,5222+47]),None)
                ]
              core_type (lib/Sigs.ml[150,5270+15]..lib/Sigs.ml[150,5270+41])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[150,5270+16]..lib/Sigs.ml[150,5270+25])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[150,5270+16]..lib/Sigs.ml[150,5270+19])
                    Ttyp_constr "key/1212"
                    []
                  core_type (lib/Sigs.ml[150,5270+23]..lib/Sigs.ml[150,5270+25])
                    Ttyp_var a
                core_type (lib/Sigs.ml[150,5270+31]..lib/Sigs.ml[150,5270+40])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[150,5270+31]..lib/Sigs.ml[150,5270+34])
                    Ttyp_constr "key/1212"
                    []
                  core_type (lib/Sigs.ml[150,5270+38]..lib/Sigs.ml[150,5270+40])
                    Ttyp_var a
              []
          signature_item (lib/Sigs.ml[153,5386+2]..lib/Sigs.ml[153,5386+11])
            Tsig_type Rec
            [
              type_declaration t/1214 (lib/Sigs.ml[153,5386+2]..lib/Sigs.ml[153,5386+11])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[152,5313+2]..[152,5313+72])
                      Pstr_eval
                      expression (lib/Sigs.ml[152,5313+2]..[152,5313+72])
                        Pexp_constant PConst_string("A memoization combinator where the memoization table is exposed. ",(lib/Sigs.ml[152,5313+2]..[152,5313+72]),None)
                  ]
                ptype_params =
                  [
                    core_type (lib/Sigs.ml[153,5386+7]..lib/Sigs.ml[153,5386+9])
                      Ttyp_var a
                  ]
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[154,5398+2]..lib/Sigs.ml[154,5398+56])
            Tsig_value
            value_description visibly_memoize/1215 (lib/Sigs.ml[154,5398+2]..lib/Sigs.ml[154,5398+56])
              core_type (lib/Sigs.ml[154,5398+23]..lib/Sigs.ml[154,5398+56])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[154,5398+24]..lib/Sigs.ml[154,5398+33])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[154,5398+24]..lib/Sigs.ml[154,5398+27])
                    Ttyp_constr "key/1212"
                    []
                  core_type (lib/Sigs.ml[154,5398+31]..lib/Sigs.ml[154,5398+33])
                    Ttyp_var a
                core_type (lib/Sigs.ml[154,5398+38]..lib/Sigs.ml[154,5398+56])
                  Ttyp_tuple
                  [
                    core_type (lib/Sigs.ml[154,5398+39]..lib/Sigs.ml[154,5398+48])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[154,5398+39]..lib/Sigs.ml[154,5398+42])
                        Ttyp_constr "key/1212"
                        []
                      core_type (lib/Sigs.ml[154,5398+46]..lib/Sigs.ml[154,5398+48])
                        Ttyp_var a
                    core_type (lib/Sigs.ml[154,5398+52]..lib/Sigs.ml[154,5398+56])
                      Ttyp_constr "t/1214"
                      [
                        core_type (lib/Sigs.ml[154,5398+52]..lib/Sigs.ml[154,5398+54])
                          Ttyp_var a
                      ]
                  ]
              []
          signature_item (lib/Sigs.ml[157,5500+2]..lib/Sigs.ml[157,5500+26])
            Tsig_value
            value_description fix/1216 (lib/Sigs.ml[157,5500+2]..lib/Sigs.ml[157,5500+26])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[156,5456+2]..[156,5456+43])
                    Pstr_eval
                    expression (lib/Sigs.ml[156,5456+2]..[156,5456+43])
                      Pexp_constant PConst_string("A recursive memoization combinator. ",(lib/Sigs.ml[156,5456+2]..[156,5456+43]),None)
                ]
              core_type (lib/Sigs.ml[157,5500+11]..lib/Sigs.ml[157,5500+26])
                Ttyp_constr "fix/1211"
                [
                  core_type (lib/Sigs.ml[157,5500+12]..lib/Sigs.ml[157,5500+21])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[157,5500+12]..lib/Sigs.ml[157,5500+15])
                      Ttyp_constr "key/1212"
                      []
                    core_type (lib/Sigs.ml[157,5500+19]..lib/Sigs.ml[157,5500+21])
                      Ttyp_var a
                ]
              []
          signature_item (lib/Sigs.ml[168,6156+2]..lib/Sigs.ml[168,6156+35])
            Tsig_exception
            type_exception
              ptyext_constructor =
                extension_constructor (lib/Sigs.ml[168,6156+2]..lib/Sigs.ml[168,6156+35])
                  attribute "ocaml.doc"
                    [
                      structure_item (lib/Sigs.ml[159,5528+2]..[167,6141+14])
                        Pstr_eval
                        expression (lib/Sigs.ml[159,5528+2]..[167,6141+14])
                          Pexp_constant PConst_string("[defensive_fix] works like [fix], except it additionally detects circular\n     dependencies, which can arise if the second-order function supplied by\n     the user does not follow a well-founded recursion pattern. When the user\n     invokes [f x], where [f] is the function returned by [defensive_fix], if\n     a cyclic dependency is detected, then [Cycle (zs, z)] is raised, where\n     the list [zs] begins with [z] and continues with a series of intermediate\n     keys, leading back to [z]. Note that undetected divergence remains\n     possible; this corresponds to an infinite dependency chain, without a\n     cycle. ",(lib/Sigs.ml[159,5528+2]..[167,6141+14]),None)
                    ]
                  pext_name = "Cycle/1217"
                  pext_kind =
                    Text_decl
                      [
                        core_type (lib/Sigs.ml[168,6156+21]..lib/Sigs.ml[168,6156+29])
                          Ttyp_constr "list/9!"
                          [
                            core_type (lib/Sigs.ml[168,6156+21]..lib/Sigs.ml[168,6156+24])
                              Ttyp_constr "key/1212"
                              []
                          ]
                        core_type (lib/Sigs.ml[168,6156+32]..lib/Sigs.ml[168,6156+35])
                          Ttyp_constr "key/1212"
                          []
                      ]
                      None
          signature_item (lib/Sigs.ml[169,6192+2]..lib/Sigs.ml[169,6192+36])
            Tsig_value
            value_description defensive_fix/1218 (lib/Sigs.ml[169,6192+2]..lib/Sigs.ml[169,6192+36])
              core_type (lib/Sigs.ml[169,6192+21]..lib/Sigs.ml[169,6192+36])
                Ttyp_constr "fix/1211"
                [
                  core_type (lib/Sigs.ml[169,6192+22]..lib/Sigs.ml[169,6192+31])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[169,6192+22]..lib/Sigs.ml[169,6192+25])
                      Ttyp_constr "key/1212"
                      []
                    core_type (lib/Sigs.ml[169,6192+29]..lib/Sigs.ml[169,6192+31])
                      Ttyp_var a
                ]
              []
          signature_item (lib/Sigs.ml[174,6395+2]..lib/Sigs.ml[174,6395+58])
            Tsig_value
            value_description curried/1219 (lib/Sigs.ml[174,6395+2]..lib/Sigs.ml[174,6395+58])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[171,6230+2]..[173,6373+21])
                    Pstr_eval
                    expression (lib/Sigs.ml[171,6230+2]..[173,6373+21])
                      Pexp_constant PConst_string("This combinator can be used to obtain a curried version of [fix] or\n     [defensive_fix] in a concrete instance where the type [key] is a\n     product type. ",(lib/Sigs.ml[171,6230+2]..[173,6373+21]),None)
                ]
              core_type (lib/Sigs.ml[174,6395+15]..lib/Sigs.ml[174,6395+58])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[174,6395+15]..lib/Sigs.ml[174,6395+34])
                  Ttyp_constr "fix/1211"
                  [
                    core_type (lib/Sigs.ml[174,6395+16]..lib/Sigs.ml[174,6395+29])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[174,6395+16]..lib/Sigs.ml[174,6395+23])
                        Ttyp_tuple
                        [
                          core_type (lib/Sigs.ml[174,6395+16]..lib/Sigs.ml[174,6395+18])
                            Ttyp_var a
                          core_type (lib/Sigs.ml[174,6395+21]..lib/Sigs.ml[174,6395+23])
                            Ttyp_var b
                        ]
                      core_type (lib/Sigs.ml[174,6395+27]..lib/Sigs.ml[174,6395+29])
                        Ttyp_var c
                  ]
                core_type (lib/Sigs.ml[174,6395+38]..lib/Sigs.ml[174,6395+58])
                  Ttyp_constr "fix/1211"
                  [
                    core_type (lib/Sigs.ml[174,6395+39]..lib/Sigs.ml[174,6395+53])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[174,6395+39]..lib/Sigs.ml[174,6395+41])
                        Ttyp_var a
                      core_type (lib/Sigs.ml[174,6395+45]..lib/Sigs.ml[174,6395+53])
                        Ttyp_arrow
                        Nolabel
                        core_type (lib/Sigs.ml[174,6395+45]..lib/Sigs.ml[174,6395+47])
                          Ttyp_var b
                        core_type (lib/Sigs.ml[174,6395+51]..lib/Sigs.ml[174,6395+53])
                          Ttyp_var c
                  ]
              []
        ]
  structure_item (lib/Sigs.ml[180,6542+0]..lib/Sigs.ml[180,6542+76])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[180,6542+0]..[180,6542+76])
        Pstr_eval
        expression (lib/Sigs.ml[180,6542+0]..[180,6542+76])
          Pexp_constant PConst_string("Tabulators: higher-order functions that construct tabulated functions. ",(lib/Sigs.ml[180,6542+0]..[180,6542+76]),None)
    ]
  structure_item (lib/Sigs.ml[182,6620+0]..lib/Sigs.ml[186,6933+63])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[182,6620+0]..[186,6933+63])
        Pstr_eval
        expression (lib/Sigs.ml[182,6620+0]..[186,6933+63])
          Pexp_constant PConst_string("Like memoization, tabulation guarantees that, for every key [x], the image\n   [f x] is computed at most once. Unlike memoization, where this computation\n   takes place on demand, in the case of tabulation, the computation of every\n   [f x] takes place immediately, when [tabulate] is invoked. The graph of the\n   function [f], a table, is constructed and held in memory. ",(lib/Sigs.ml[182,6620+0]..[186,6933+63]),None)
    ]
  structure_item (lib/Sigs.ml[188,6998+0]..lib/Sigs.ml[196,7154+3])
    Tstr_modtype "TABULATOR/1223"
      module_type (lib/Sigs.ml[188,6998+24]..lib/Sigs.ml[196,7154+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[191,7051+2]..lib/Sigs.ml[191,7051+10])
            Tsig_type Rec
            [
              type_declaration key/1221 (lib/Sigs.ml[191,7051+2]..lib/Sigs.ml[191,7051+10])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[190,7027+2]..[190,7027+23])
                      Pstr_eval
                      expression (lib/Sigs.ml[190,7027+2]..[190,7027+23])
                        Pexp_constant PConst_string("A type of keys. ",(lib/Sigs.ml[190,7027+2]..[190,7027+23]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[194,7110+2]..lib/Sigs.ml[194,7110+42])
            Tsig_value
            value_description tabulate/1222 (lib/Sigs.ml[194,7110+2]..lib/Sigs.ml[194,7110+42])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[193,7063+2]..[193,7063+46])
                    Pstr_eval
                    expression (lib/Sigs.ml[193,7063+2]..[193,7063+46])
                      Pexp_constant PConst_string("A tabulation combinator for this type. ",(lib/Sigs.ml[193,7063+2]..[193,7063+46]),None)
                ]
              core_type (lib/Sigs.ml[194,7110+16]..lib/Sigs.ml[194,7110+42])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[194,7110+17]..lib/Sigs.ml[194,7110+26])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[194,7110+17]..lib/Sigs.ml[194,7110+20])
                    Ttyp_constr "key/1221"
                    []
                  core_type (lib/Sigs.ml[194,7110+24]..lib/Sigs.ml[194,7110+26])
                    Ttyp_var a
                core_type (lib/Sigs.ml[194,7110+32]..lib/Sigs.ml[194,7110+41])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[194,7110+32]..lib/Sigs.ml[194,7110+35])
                    Ttyp_constr "key/1221"
                    []
                  core_type (lib/Sigs.ml[194,7110+39]..lib/Sigs.ml[194,7110+41])
                    Ttyp_var a
              []
        ]
  structure_item (lib/Sigs.ml[200,7241+0]..lib/Sigs.ml[201,7313+35])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[200,7241+0]..[201,7313+35])
        Pstr_eval
        expression (lib/Sigs.ml[200,7241+0]..[201,7313+35])
          Pexp_constant PConst_string("Solvers: higher-order functions that compute the least solution of a\n   monotone system of equations. ",(lib/Sigs.ml[200,7241+0]..[201,7313+35]),None)
    ]
  structure_item (lib/Sigs.ml[203,7350+0]..lib/Sigs.ml[236,8666+3])
    Tstr_modtype "SOLVER/1230"
      module_type (lib/Sigs.ml[203,7350+21]..lib/Sigs.ml[236,8666+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[205,7376+2]..lib/Sigs.ml[205,7376+15])
            Tsig_type Rec
            [
              type_declaration variable/1224 (lib/Sigs.ml[205,7376+2]..lib/Sigs.ml[205,7376+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[206,7392+2]..lib/Sigs.ml[206,7392+15])
            Tsig_type Rec
            [
              type_declaration property/1225 (lib/Sigs.ml[206,7392+2]..lib/Sigs.ml[206,7392+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[209,7470+2]..lib/Sigs.ml[209,7470+39])
            Tsig_type Rec
            [
              type_declaration valuation/1226 (lib/Sigs.ml[209,7470+2]..lib/Sigs.ml[209,7470+39])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[208,7409+2]..[208,7409+60])
                      Pstr_eval
                      expression (lib/Sigs.ml[208,7409+2]..[208,7409+60])
                        Pexp_constant PConst_string("A valuation is a mapping of variables to properties. ",(lib/Sigs.ml[208,7409+2]..[208,7409+60]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[209,7470+19]..lib/Sigs.ml[209,7470+39])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[209,7470+19]..lib/Sigs.ml[209,7470+27])
                        Ttyp_constr "variable/1224"
                        []
                      core_type (lib/Sigs.ml[209,7470+31]..lib/Sigs.ml[209,7470+39])
                        Ttyp_constr "property/1225"
                        []
            ]
          signature_item (lib/Sigs.ml[215,7737+2]..lib/Sigs.ml[215,7737+34])
            Tsig_type Rec
            [
              type_declaration rhs/1227 (lib/Sigs.ml[215,7737+2]..lib/Sigs.ml[215,7737+34])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[211,7511+2]..[214,7703+33])
                      Pstr_eval
                      expression (lib/Sigs.ml[211,7511+2]..[214,7703+33])
                        Pexp_constant PConst_string("A right-hand side, when supplied with a valuation that gives\n     meaning to its free variables, evaluates to a property. More\n     precisely, a right-hand side is a monotone function of\n     valuations to properties. ",(lib/Sigs.ml[211,7511+2]..[214,7703+33]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[215,7737+13]..lib/Sigs.ml[215,7737+34])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[215,7737+13]..lib/Sigs.ml[215,7737+22])
                        Ttyp_constr "valuation/1226"
                        []
                      core_type (lib/Sigs.ml[215,7737+26]..lib/Sigs.ml[215,7737+34])
                        Ttyp_constr "property/1225"
                        []
            ]
          signature_item (lib/Sigs.ml[219,7855+2]..lib/Sigs.ml[219,7855+34])
            Tsig_type Rec
            [
              type_declaration equations/1228 (lib/Sigs.ml[219,7855+2]..lib/Sigs.ml[219,7855+34])
                attribute "ocaml.doc"
                  [
                    structure_item (lib/Sigs.ml[217,7773+2]..[218,7840+14])
                      Pstr_eval
                      expression (lib/Sigs.ml[217,7773+2]..[218,7840+14])
                        Pexp_constant PConst_string("A system of equations is a mapping of variables to right-hand\n     sides. ",(lib/Sigs.ml[217,7773+2]..[218,7840+14]),None)
                  ]
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Sigs.ml[219,7855+19]..lib/Sigs.ml[219,7855+34])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[219,7855+19]..lib/Sigs.ml[219,7855+27])
                        Ttyp_constr "variable/1224"
                        []
                      core_type (lib/Sigs.ml[219,7855+31]..lib/Sigs.ml[219,7855+34])
                        Ttyp_constr "rhs/1227"
                        []
            ]
          signature_item (lib/Sigs.ml[221,7891+2]..lib/Sigs.ml[222,7960+24])
            Tsig_attribute "ocaml.text"
            [
              structure_item (lib/Sigs.ml[221,7891+2]..[222,7960+24])
                Pstr_eval
                expression (lib/Sigs.ml[221,7891+2]..[222,7960+24])
                  Pexp_constant PConst_string("[lfp eqs] produces the least solution of the system of monotone\n     equations [eqs]. ",(lib/Sigs.ml[221,7891+2]..[222,7960+24]),None)
            ]
          signature_item (lib/Sigs.ml[224,7986+2]..lib/Sigs.ml[228,8298+41])
            Tsig_attribute "ocaml.text"
            [
              structure_item (lib/Sigs.ml[224,7986+2]..[228,8298+41])
                Pstr_eval
                expression (lib/Sigs.ml[224,7986+2]..[228,8298+41])
                  Pexp_constant PConst_string("It is guaranteed that, for each variable [v], the application [eqs v] is\n     performed at most once (whereas the right-hand side produced by this\n     application is, in general, evaluated multiple times). This guarantee can\n     be used to perform costly pre-computation, or memory allocation, when [eqs]\n     is applied to its first argument. ",(lib/Sigs.ml[224,7986+2]..[228,8298+41]),None)
            ]
          signature_item (lib/Sigs.ml[234,8631+2]..lib/Sigs.ml[234,8631+33])
            Tsig_value
            value_description lfp/1229 (lib/Sigs.ml[234,8631+2]..lib/Sigs.ml[234,8631+33])
              attribute "ocaml.doc"
                [
                  structure_item (lib/Sigs.ml[230,8341+2]..[233,8564+66])
                    Pstr_eval
                    expression (lib/Sigs.ml[230,8341+2]..[233,8564+66])
                      Pexp_constant PConst_string("When [lfp] is applied to a system of equations [eqs], it performs no\n     actual computation. It produces a valuation, [get], which represents\n     the least solution of the system of equations. The actual fixed point\n     computation takes place, on demand, when [get] is applied. ",(lib/Sigs.ml[230,8341+2]..[233,8564+66]),None)
                ]
              core_type (lib/Sigs.ml[234,8631+11]..lib/Sigs.ml[234,8631+33])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[234,8631+11]..lib/Sigs.ml[234,8631+20])
                  Ttyp_constr "equations/1228"
                  []
                core_type (lib/Sigs.ml[234,8631+24]..lib/Sigs.ml[234,8631+33])
                  Ttyp_constr "valuation/1226"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[240,8753+0]..lib/Sigs.ml[241,8815+22])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[240,8753+0]..[241,8815+22])
        Pstr_eval
        expression (lib/Sigs.ml[240,8753+0]..[241,8815+22])
          Pexp_constant PConst_string("The signature [SOLUTION] is used to describe the result of\n    [Fix.DataFlow]. ",(lib/Sigs.ml[240,8753+0]..[241,8815+22]),None)
    ]
  structure_item (lib/Sigs.ml[243,8839+0]..lib/Sigs.ml[247,8935+3])
    Tstr_modtype "SOLUTION/1234"
      module_type (lib/Sigs.ml[243,8839+23]..lib/Sigs.ml[247,8935+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[244,8866+2]..lib/Sigs.ml[244,8866+15])
            Tsig_type Rec
            [
              type_declaration variable/1231 (lib/Sigs.ml[244,8866+2]..lib/Sigs.ml[244,8866+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[245,8882+2]..lib/Sigs.ml[245,8882+15])
            Tsig_type Rec
            [
              type_declaration property/1232 (lib/Sigs.ml[245,8882+2]..lib/Sigs.ml[245,8882+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[246,8898+2]..lib/Sigs.ml[246,8898+36])
            Tsig_value
            value_description solution/1233 (lib/Sigs.ml[246,8898+2]..lib/Sigs.ml[246,8898+36])
              core_type (lib/Sigs.ml[246,8898+16]..lib/Sigs.ml[246,8898+36])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[246,8898+16]..lib/Sigs.ml[246,8898+24])
                  Ttyp_constr "variable/1231"
                  []
                core_type (lib/Sigs.ml[246,8898+28]..lib/Sigs.ml[246,8898+36])
                  Ttyp_constr "property/1232"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[251,9022+0]..lib/Sigs.ml[251,9022+30])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[251,9022+0]..[251,9022+30])
        Pstr_eval
        expression (lib/Sigs.ml[251,9022+0]..[251,9022+30])
          Pexp_constant PConst_string("Directed, rooted graphs. ",(lib/Sigs.ml[251,9022+0]..[251,9022+30]),None)
    ]
  structure_item (lib/Sigs.ml[253,9054+0]..lib/Sigs.ml[257,9177+3])
    Tstr_modtype "GRAPH/1238"
      module_type (lib/Sigs.ml[253,9054+20]..lib/Sigs.ml[257,9177+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[254,9078+2]..lib/Sigs.ml[254,9078+8])
            Tsig_type Rec
            [
              type_declaration t/1235 (lib/Sigs.ml[254,9078+2]..lib/Sigs.ml[254,9078+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[255,9087+2]..lib/Sigs.ml[255,9087+39])
            Tsig_value
            value_description foreach_root/1236 (lib/Sigs.ml[255,9087+2]..lib/Sigs.ml[255,9087+39])
              core_type (lib/Sigs.ml[255,9087+20]..lib/Sigs.ml[255,9087+39])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[255,9087+21]..lib/Sigs.ml[255,9087+30])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[255,9087+21]..lib/Sigs.ml[255,9087+22])
                    Ttyp_constr "t/1235"
                    []
                  core_type (lib/Sigs.ml[255,9087+26]..lib/Sigs.ml[255,9087+30])
                    Ttyp_constr "unit/6!"
                    []
                core_type (lib/Sigs.ml[255,9087+35]..lib/Sigs.ml[255,9087+39])
                  Ttyp_constr "unit/6!"
                  []
              []
          signature_item (lib/Sigs.ml[256,9127+2]..lib/Sigs.ml[256,9127+49])
            Tsig_value
            value_description foreach_successor/1237 (lib/Sigs.ml[256,9127+2]..lib/Sigs.ml[256,9127+49])
              core_type (lib/Sigs.ml[256,9127+25]..lib/Sigs.ml[256,9127+49])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[256,9127+25]..lib/Sigs.ml[256,9127+26])
                  Ttyp_constr "t/1235"
                  []
                core_type (lib/Sigs.ml[256,9127+30]..lib/Sigs.ml[256,9127+49])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[256,9127+31]..lib/Sigs.ml[256,9127+40])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[256,9127+31]..lib/Sigs.ml[256,9127+32])
                      Ttyp_constr "t/1235"
                      []
                    core_type (lib/Sigs.ml[256,9127+36]..lib/Sigs.ml[256,9127+40])
                      Ttyp_constr "unit/6!"
                      []
                  core_type (lib/Sigs.ml[256,9127+45]..lib/Sigs.ml[256,9127+49])
                    Ttyp_constr "unit/6!"
                    []
              []
        ]
  structure_item (lib/Sigs.ml[261,9264+0]..lib/Sigs.ml[262,9340+67])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[261,9264+0]..[262,9340+67])
        Pstr_eval
        expression (lib/Sigs.ml[261,9264+0]..[262,9340+67])
          Pexp_constant PConst_string("The signature [DATA_FLOW_GRAPH] is used to describe a data flow analysis\n    problem. It is used to describe the input to [Fix.DataFlow]. ",(lib/Sigs.ml[261,9264+0]..[262,9340+67]),None)
    ]
  structure_item (lib/Sigs.ml[264,9409+0]..lib/Sigs.ml[265,9488+54])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[264,9409+0]..[265,9488+54])
        Pstr_eval
        expression (lib/Sigs.ml[264,9409+0]..[265,9488+54])
          Pexp_constant PConst_string("The function [foreach_root] describes the root nodes of the data flow graph\n    as well as the properties associated with them. ",(lib/Sigs.ml[264,9409+0]..[265,9488+54]),None)
    ]
  structure_item (lib/Sigs.ml[267,9544+0]..lib/Sigs.ml[270,9771+76])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[267,9544+0]..[270,9771+76])
        Pstr_eval
        expression (lib/Sigs.ml[267,9544+0]..[270,9771+76])
          Pexp_constant PConst_string("The function [foreach_successor] describes the edges of the data flow graph\n    as well as the manner in which a property at the source of an edge is\n    transformed into a property at the target. The property at the target\n    must of course be a monotonic function of the property at the source. ",(lib/Sigs.ml[267,9544+0]..[270,9771+76]),None)
    ]
  structure_item (lib/Sigs.ml[272,9849+0]..lib/Sigs.ml[280,10074+3])
    Tstr_modtype "DATA_FLOW_GRAPH/1243"
      module_type (lib/Sigs.ml[272,9849+30]..lib/Sigs.ml[280,10074+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[273,9883+2]..lib/Sigs.ml[273,9883+15])
            Tsig_type Rec
            [
              type_declaration variable/1239 (lib/Sigs.ml[273,9883+2]..lib/Sigs.ml[273,9883+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[274,9899+2]..lib/Sigs.ml[274,9899+15])
            Tsig_type Rec
            [
              type_declaration property/1240 (lib/Sigs.ml[274,9899+2]..lib/Sigs.ml[274,9899+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[275,9915+2]..lib/Sigs.ml[276,9935+42])
            Tsig_value
            value_description foreach_root/1241 (lib/Sigs.ml[275,9915+2]..lib/Sigs.ml[276,9935+42])
              core_type (lib/Sigs.ml[276,9935+4]..lib/Sigs.ml[276,9935+42])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[276,9935+5]..lib/Sigs.ml[276,9935+33])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[276,9935+5]..lib/Sigs.ml[276,9935+13])
                    Ttyp_constr "variable/1239"
                    []
                  core_type (lib/Sigs.ml[276,9935+17]..lib/Sigs.ml[276,9935+33])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[276,9935+17]..lib/Sigs.ml[276,9935+25])
                      Ttyp_constr "property/1240"
                      []
                    core_type (lib/Sigs.ml[276,9935+29]..lib/Sigs.ml[276,9935+33])
                      Ttyp_constr "unit/6!"
                      []
                core_type (lib/Sigs.ml[276,9935+38]..lib/Sigs.ml[276,9935+42])
                  Ttyp_constr "unit/6!"
                  []
              []
          signature_item (lib/Sigs.ml[277,9978+2]..lib/Sigs.ml[279,10031+42])
            Tsig_value
            value_description foreach_successor/1242 (lib/Sigs.ml[277,9978+2]..lib/Sigs.ml[279,10031+42])
              core_type (lib/Sigs.ml[278,10003+4]..lib/Sigs.ml[279,10031+42])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[278,10003+4]..lib/Sigs.ml[278,10003+12])
                  Ttyp_constr "variable/1239"
                  []
                core_type (lib/Sigs.ml[278,10003+16]..lib/Sigs.ml[279,10031+42])
                  Ttyp_arrow
                  Nolabel
                  core_type (lib/Sigs.ml[278,10003+16]..lib/Sigs.ml[278,10003+24])
                    Ttyp_constr "property/1240"
                    []
                  core_type (lib/Sigs.ml[279,10031+4]..lib/Sigs.ml[279,10031+42])
                    Ttyp_arrow
                    Nolabel
                    core_type (lib/Sigs.ml[279,10031+5]..lib/Sigs.ml[279,10031+33])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Sigs.ml[279,10031+5]..lib/Sigs.ml[279,10031+13])
                        Ttyp_constr "variable/1239"
                        []
                      core_type (lib/Sigs.ml[279,10031+17]..lib/Sigs.ml[279,10031+33])
                        Ttyp_arrow
                        Nolabel
                        core_type (lib/Sigs.ml[279,10031+17]..lib/Sigs.ml[279,10031+25])
                          Ttyp_constr "property/1240"
                          []
                        core_type (lib/Sigs.ml[279,10031+29]..lib/Sigs.ml[279,10031+33])
                          Ttyp_constr "unit/6!"
                          []
                    core_type (lib/Sigs.ml[279,10031+38]..lib/Sigs.ml[279,10031+42])
                      Ttyp_constr "unit/6!"
                      []
              []
        ]
  structure_item (lib/Sigs.ml[284,10161+0]..lib/Sigs.ml[284,10161+17])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[284,10161+0]..[284,10161+17])
        Pstr_eval
        expression (lib/Sigs.ml[284,10161+0]..[284,10161+17])
          Pexp_constant PConst_string("Numberings. ",(lib/Sigs.ml[284,10161+0]..[284,10161+17]),None)
    ]
  structure_item (lib/Sigs.ml[286,10180+0]..lib/Sigs.ml[292,10639+47])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[286,10180+0]..[292,10639+47])
        Pstr_eval
        expression (lib/Sigs.ml[286,10180+0]..[292,10639+47])
          Pexp_constant PConst_string("An ongoing numbering of (a subset of) a type [t] offers a function [encode]\n   which maps a value of type [t] to a unique integer code. If applied twice\n   to the same value, [encode] returns the same code; if applied to a value\n   that has never been encountered, it returns a fresh code. The function\n   [current] returns the next available code, which is also the number of\n   values that have been encoded so far. The function [has_been_encoded] tests\n   whether a value has been encoded already. ",(lib/Sigs.ml[286,10180+0]..[292,10639+47]),None)
    ]
  structure_item (lib/Sigs.ml[294,10688+0]..lib/Sigs.ml[299,10817+3])
    Tstr_modtype "ONGOING_NUMBERING/1248"
      module_type (lib/Sigs.ml[294,10688+32]..lib/Sigs.ml[299,10817+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[295,10724+2]..lib/Sigs.ml[295,10724+8])
            Tsig_type Rec
            [
              type_declaration t/1244 (lib/Sigs.ml[295,10724+2]..lib/Sigs.ml[295,10724+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[296,10733+2]..lib/Sigs.ml[296,10733+22])
            Tsig_value
            value_description encode/1245 (lib/Sigs.ml[296,10733+2]..lib/Sigs.ml[296,10733+22])
              core_type (lib/Sigs.ml[296,10733+14]..lib/Sigs.ml[296,10733+22])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[296,10733+14]..lib/Sigs.ml[296,10733+15])
                  Ttyp_constr "t/1244"
                  []
                core_type (lib/Sigs.ml[296,10733+19]..lib/Sigs.ml[296,10733+22])
                  Ttyp_constr "int/1!"
                  []
              []
          signature_item (lib/Sigs.ml[297,10756+2]..lib/Sigs.ml[297,10756+26])
            Tsig_value
            value_description current/1246 (lib/Sigs.ml[297,10756+2]..lib/Sigs.ml[297,10756+26])
              core_type (lib/Sigs.ml[297,10756+15]..lib/Sigs.ml[297,10756+26])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[297,10756+15]..lib/Sigs.ml[297,10756+19])
                  Ttyp_constr "unit/6!"
                  []
                core_type (lib/Sigs.ml[297,10756+23]..lib/Sigs.ml[297,10756+26])
                  Ttyp_constr "int/1!"
                  []
              []
          signature_item (lib/Sigs.ml[298,10783+2]..lib/Sigs.ml[298,10783+33])
            Tsig_value
            value_description has_been_encoded/1247 (lib/Sigs.ml[298,10783+2]..lib/Sigs.ml[298,10783+33])
              core_type (lib/Sigs.ml[298,10783+24]..lib/Sigs.ml[298,10783+33])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[298,10783+24]..lib/Sigs.ml[298,10783+25])
                  Ttyp_constr "t/1244"
                  []
                core_type (lib/Sigs.ml[298,10783+29]..lib/Sigs.ml[298,10783+33])
                  Ttyp_constr "bool/5!"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[301,10822+0]..lib/Sigs.ml[303,10977+52])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[301,10822+0]..[303,10977+52])
        Pstr_eval
        expression (lib/Sigs.ml[301,10822+0]..[303,10977+52])
          Pexp_constant PConst_string("A numbering of (a subset of) a type [t] is a triple of an integer [n] and\n   two functions [encode] and [decode] which represent an isomorphism between\n   this subset of [t] and the interval [\\[0..n)]. ",(lib/Sigs.ml[301,10822+0]..[303,10977+52]),None)
    ]
  structure_item (lib/Sigs.ml[305,11031+0]..lib/Sigs.ml[310,11127+3])
    Tstr_modtype "NUMBERING/1253"
      module_type (lib/Sigs.ml[305,11031+24]..lib/Sigs.ml[310,11127+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[306,11059+2]..lib/Sigs.ml[306,11059+8])
            Tsig_type Rec
            [
              type_declaration t/1249 (lib/Sigs.ml[306,11059+2]..lib/Sigs.ml[306,11059+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[307,11068+2]..lib/Sigs.ml[307,11068+12])
            Tsig_value
            value_description n/1250 (lib/Sigs.ml[307,11068+2]..lib/Sigs.ml[307,11068+12])
              core_type (lib/Sigs.ml[307,11068+9]..lib/Sigs.ml[307,11068+12])
                Ttyp_constr "int/1!"
                []
              []
          signature_item (lib/Sigs.ml[308,11081+2]..lib/Sigs.ml[308,11081+22])
            Tsig_value
            value_description encode/1251 (lib/Sigs.ml[308,11081+2]..lib/Sigs.ml[308,11081+22])
              core_type (lib/Sigs.ml[308,11081+14]..lib/Sigs.ml[308,11081+22])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[308,11081+14]..lib/Sigs.ml[308,11081+15])
                  Ttyp_constr "t/1249"
                  []
                core_type (lib/Sigs.ml[308,11081+19]..lib/Sigs.ml[308,11081+22])
                  Ttyp_constr "int/1!"
                  []
              []
          signature_item (lib/Sigs.ml[309,11104+2]..lib/Sigs.ml[309,11104+22])
            Tsig_value
            value_description decode/1252 (lib/Sigs.ml[309,11104+2]..lib/Sigs.ml[309,11104+22])
              core_type (lib/Sigs.ml[309,11104+14]..lib/Sigs.ml[309,11104+22])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[309,11104+14]..lib/Sigs.ml[309,11104+17])
                  Ttyp_constr "int/1!"
                  []
                core_type (lib/Sigs.ml[309,11104+21]..lib/Sigs.ml[309,11104+22])
                  Ttyp_constr "t/1249"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[312,11132+0]..lib/Sigs.ml[317,11511+46])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[312,11132+0]..[317,11511+46])
        Pstr_eval
        expression (lib/Sigs.ml[312,11132+0]..[317,11511+46])
          Pexp_constant PConst_string("A combination of the above two signatures. According to this signature, a\n   numbering process is organized in two phases. During the first phase, the\n   numbering is ongoing; one can encode keys, but not decode. Applying the\n   functor [Done()] ends the first phase. A fixed numbering then becomes\n   available, which gives access to the total number [n] of encoded keys and\n   to both [encode] and [decode] functions. ",(lib/Sigs.ml[312,11132+0]..[317,11511+46]),None)
    ]
  structure_item (lib/Sigs.ml[319,11559+0]..lib/Sigs.ml[322,11670+3])
    Tstr_modtype "TWO_PHASE_NUMBERING/1264"
      module_type (lib/Sigs.ml[319,11559+34]..lib/Sigs.ml[322,11670+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[320,11597+2]..lib/Sigs.ml[320,11597+27])
            Tsig_include
            module_type (lib/Sigs.ml[320,11597+10]..lib/Sigs.ml[320,11597+27])
              Tmty_ident "ONGOING_NUMBERING/1248"
          signature_item (lib/Sigs.ml[321,11625+2]..lib/Sigs.ml[321,11625+44])
            Tsig_module "Done/1263"
            module_type (lib/Sigs.ml[321,11625+14]..lib/Sigs.ml[321,11625+44])
              Tmty_functor ()
              module_type (lib/Sigs.ml[321,11625+19]..lib/Sigs.ml[321,11625+44])
                Tmty_with
                module_type (lib/Sigs.ml[321,11625+19]..lib/Sigs.ml[321,11625+28])
                  Tmty_ident "NUMBERING/1253"
                [
                  "t/1249"
                    Twith_type
                      type_declaration t/1249 (lib/Sigs.ml[321,11625+34]..lib/Sigs.ml[321,11625+44])
                        ptype_params =
                          []
                        ptype_cstrs =
                          []
                        ptype_kind =
                          Ttype_abstract
                        ptype_private = Public
                        ptype_manifest =
                          Some
                            core_type (lib/Sigs.ml[321,11625+43]..lib/Sigs.ml[321,11625+44])
                              Ttyp_constr "t/1254"
                              []
                ]
        ]
  structure_item (lib/Sigs.ml[326,11757+0]..lib/Sigs.ml[326,11757+17])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[326,11757+0]..[326,11757+17])
        Pstr_eval
        expression (lib/Sigs.ml[326,11757+0]..[326,11757+17])
          Pexp_constant PConst_string("Injections. ",(lib/Sigs.ml[326,11757+0]..[326,11757+17]),None)
    ]
  structure_item (lib/Sigs.ml[328,11776+0]..lib/Sigs.ml[330,11930+24])
    Tstr_attribute "ocaml.text"
    [
      structure_item (lib/Sigs.ml[328,11776+0]..[330,11930+24])
        Pstr_eval
        expression (lib/Sigs.ml[328,11776+0]..[330,11930+24])
          Pexp_constant PConst_string("An injection of [t] into [u] is an injective function of type [t -> u].\n   Because [encode] is injective, [encode x] can be thought of as the identity\n   of the object [x]. ",(lib/Sigs.ml[328,11776+0]..[330,11930+24]),None)
    ]
  structure_item (lib/Sigs.ml[332,11956+0]..lib/Sigs.ml[336,12023+3])
    Tstr_modtype "INJECTION/1268"
      module_type (lib/Sigs.ml[332,11956+24]..lib/Sigs.ml[336,12023+3])
        Tmty_signature
        [
          signature_item (lib/Sigs.ml[333,11984+2]..lib/Sigs.ml[333,11984+8])
            Tsig_type Rec
            [
              type_declaration t/1265 (lib/Sigs.ml[333,11984+2]..lib/Sigs.ml[333,11984+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[334,11993+2]..lib/Sigs.ml[334,11993+8])
            Tsig_type Rec
            [
              type_declaration u/1266 (lib/Sigs.ml[334,11993+2]..lib/Sigs.ml[334,11993+8])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  None
            ]
          signature_item (lib/Sigs.ml[335,12002+2]..lib/Sigs.ml[335,12002+20])
            Tsig_value
            value_description encode/1267 (lib/Sigs.ml[335,12002+2]..lib/Sigs.ml[335,12002+20])
              core_type (lib/Sigs.ml[335,12002+14]..lib/Sigs.ml[335,12002+20])
                Ttyp_arrow
                Nolabel
                core_type (lib/Sigs.ml[335,12002+14]..lib/Sigs.ml[335,12002+15])
                  Ttyp_constr "t/1265"
                  []
                core_type (lib/Sigs.ml[335,12002+19]..lib/Sigs.ml[335,12002+20])
                  Ttyp_constr "u/1266"
                  []
              []
        ]
  structure_item (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Texp_apply
          expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost,None)
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Texp_apply
          expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Texp_apply
          expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
          Texp_apply
          expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/Sigs.ml[336,12023+3]..lib/Sigs.ml[336,12023+3]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__Sigs>
 "DATA_FLOW_GRAPH"[module type] -> <Gbnf_parser__Sigs.67>;
 "FINITE_TYPE"[module type] -> <Gbnf_parser__Sigs.6>;
 "GRAPH"[module type] -> <Gbnf_parser__Sigs.62>;
 "HashedType"[module type] -> <Gbnf_parser__Sigs.3>;
 "IMPERATIVE_MAPS"[module type] -> <Gbnf_parser__Sigs.22>;
 "INJECTION"[module type] -> <Gbnf_parser__Sigs.84>;
 "MEMOIZER"[module type] -> <Gbnf_parser__Sigs.44>;
 "MINIMAL_IMPERATIVE_MAPS"[module type] -> <Gbnf_parser__Sigs.19>;
 "MINIMAL_SEMI_LATTICE"[module type] -> <Gbnf_parser__Sigs.34>;
 "NUMBERING"[module type] -> <Gbnf_parser__Sigs.77>;
 "ONGOING_NUMBERING"[module type] -> <Gbnf_parser__Sigs.72>;
 "OrderedType"[module type] -> <Gbnf_parser__Sigs.2>;
 "PERSISTENT_MAPS"[module type] -> <Gbnf_parser__Sigs.13>;
 "PROPERTY"[module type] -> <Gbnf_parser__Sigs.27>;
 "SEMI_LATTICE"[module type] -> <Gbnf_parser__Sigs.31>;
 "SOLUTION"[module type] -> <Gbnf_parser__Sigs.58>;
 "SOLVER"[module type] -> <Gbnf_parser__Sigs.54>;
 "TABULATOR"[module type] -> <Gbnf_parser__Sigs.47>;
 "TWO_PHASE_NUMBERING"[module type] -> <Gbnf_parser__Sigs.80>;
 "TYPE"[module type] -> <Gbnf_parser__Sigs.1>;
 "fix"[type] -> <Gbnf_parser__Sigs.35>;
 }

(setglobal Gbnf_parser__Sigs!
  (let
    (*match*/1505 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Sigs"))
     *match*/1503 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1501 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/Sigs.ml"))
     *match*/1499 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "Sigs.ml"))
     *match*/1497 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/1495 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/1493 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/1491 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Sigs")))
    (pseudo <unknown location> (makeblock 0))))
(setglobal Gbnf_parser__Sigs!
  (let
    (*match*/1505 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Sigs"))
     *match*/1503 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/1501 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/Sigs.ml"))
     *match*/1499 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(17)<ghost>:996-996
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "Sigs.ml"))
     *match*/1497 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/1495 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/1493 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/1491 =
       (after Gbnf_parser__Sigs lib/Sigs.ml(336)<ghost>:12026-12026
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Sigs")))
    (pseudo <unknown location> (makeblock 0))))
