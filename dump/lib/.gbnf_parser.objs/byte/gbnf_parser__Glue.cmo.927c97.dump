[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Glue.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("lib/Glue.ml",(lib/Glue.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Glue.ml[13,893+0]..[13,893+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/Glue.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("Glue.ml",(lib/Glue.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..[13,893+9])
    Pstr_open Fresh
    module_expr (lib/Glue.ml[13,893+5]..[13,893+9])
      Pmod_ident "Sigs" (lib/Glue.ml[13,893+5]..[13,893+9])
  structure_item (lib/Glue.ml[15,904+0]..[17,941+3])
    Pstr_module
    "CHAR" (lib/Glue.ml[15,904+7]..[15,904+11])
      module_expr (lib/Glue.ml[15,904+14]..[17,941+3])
        Pmod_structure
        [
          structure_item (lib/Glue.ml[16,925+2]..[16,925+15])
            Pstr_type Rec
            [
              type_declaration "t" (lib/Glue.ml[16,925+7]..[16,925+8]) (lib/Glue.ml[16,925+2]..[16,925+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[16,925+11]..[16,925+15])
                      Ptyp_constr "char" (lib/Glue.ml[16,925+11]..[16,925+15])
                      []
            ]
        ]
  structure_item (lib/Glue.ml[19,946+0]..[21,981+3])
    Pstr_module
    "INT" (lib/Glue.ml[19,946+7]..[19,946+10])
      module_expr (lib/Glue.ml[19,946+13]..[21,981+3])
        Pmod_structure
        [
          structure_item (lib/Glue.ml[20,966+2]..[20,966+14])
            Pstr_type Rec
            [
              type_declaration "t" (lib/Glue.ml[20,966+7]..[20,966+8]) (lib/Glue.ml[20,966+2]..[20,966+14])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[20,966+11]..[20,966+14])
                      Ptyp_constr "int" (lib/Glue.ml[20,966+11]..[20,966+14])
                      []
            ]
        ]
  structure_item (lib/Glue.ml[23,986+0]..[25,1027+3])
    Pstr_module
    "STRING" (lib/Glue.ml[23,986+7]..[23,986+13])
      module_expr (lib/Glue.ml[23,986+16]..[25,1027+3])
        Pmod_structure
        [
          structure_item (lib/Glue.ml[24,1009+2]..[24,1009+17])
            Pstr_type Rec
            [
              type_declaration "t" (lib/Glue.ml[24,1009+7]..[24,1009+8]) (lib/Glue.ml[24,1009+2]..[24,1009+17])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[24,1009+11]..[24,1009+17])
                      Ptyp_constr "string" (lib/Glue.ml[24,1009+11]..[24,1009+17])
                      []
            ]
        ]
  structure_item (lib/Glue.ml[27,1032+0]..[30,1114+3])
    Pstr_module
    "TrivialOrderedType" (lib/Glue.ml[27,1032+7]..[27,1032+25])
      module_expr (lib/Glue.ml[27,1032+26]..[30,1114+3])
        Pmod_functor "T" (lib/Glue.ml[27,1032+27]..[27,1032+28])
        module_type (lib/Glue.ml[27,1032+31]..[27,1032+35])
          Pmty_ident "TYPE" (lib/Glue.ml[27,1032+31]..[27,1032+35])
        module_expr (lib/Glue.ml[27,1032+39]..[30,1114+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[28,1078+2]..[28,1078+11])
              Pstr_include              module_expr (lib/Glue.ml[28,1078+10]..[28,1078+11])
                Pmod_ident "T" (lib/Glue.ml[28,1078+10]..[28,1078+11])
            structure_item (lib/Glue.ml[29,1090+2]..[29,1090+23])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[29,1090+6]..[29,1090+13])
                    Ppat_var "compare" (lib/Glue.ml[29,1090+6]..[29,1090+13])
                  expression (lib/Glue.ml[29,1090+16]..[29,1090+23])
                    Pexp_ident "compare" (lib/Glue.ml[29,1090+16]..[29,1090+23])
              ]
          ]
  structure_item (lib/Glue.ml[32,1119+0]..[36,1220+3])
    Pstr_module
    "TrivialHashedType" (lib/Glue.ml[32,1119+7]..[32,1119+24])
      module_expr (lib/Glue.ml[32,1119+25]..[36,1220+3])
        Pmod_functor "T" (lib/Glue.ml[32,1119+26]..[32,1119+27])
        module_type (lib/Glue.ml[32,1119+30]..[32,1119+34])
          Pmty_ident "TYPE" (lib/Glue.ml[32,1119+30]..[32,1119+34])
        module_expr (lib/Glue.ml[32,1119+38]..[36,1220+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[33,1164+2]..[33,1164+11])
              Pstr_include              module_expr (lib/Glue.ml[33,1164+10]..[33,1164+11])
                Pmod_ident "T" (lib/Glue.ml[33,1164+10]..[33,1164+11])
            structure_item (lib/Glue.ml[34,1176+2]..[34,1176+17])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[34,1176+6]..[34,1176+11])
                    Ppat_var "equal" (lib/Glue.ml[34,1176+6]..[34,1176+11])
                  expression (lib/Glue.ml[34,1176+14]..[34,1176+17])
                    Pexp_ident "=" (lib/Glue.ml[34,1176+14]..[34,1176+17])
              ]
            structure_item (lib/Glue.ml[35,1194+2]..[35,1194+25])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[35,1194+6]..[35,1194+10])
                    Ppat_var "hash" (lib/Glue.ml[35,1194+6]..[35,1194+10])
                  expression (lib/Glue.ml[35,1194+13]..[35,1194+25])
                    Pexp_ident "Hashtbl.hash" (lib/Glue.ml[35,1194+13]..[35,1194+25])
              ]
          ]
  structure_item (lib/Glue.ml[38,1225+0]..[44,1387+3])
    Pstr_module
    "InjectOrderedType" (lib/Glue.ml[38,1225+7]..[38,1225+24])
      module_expr (lib/Glue.ml[39,1250+2]..[44,1387+3])
        Pmod_functor "U" (lib/Glue.ml[39,1250+3]..[39,1250+4])
        module_type (lib/Glue.ml[39,1250+7]..[39,1250+18])
          Pmty_ident "OrderedType" (lib/Glue.ml[39,1250+7]..[39,1250+18])
        module_expr (lib/Glue.ml[40,1270+2]..[44,1387+3])
          Pmod_functor "I" (lib/Glue.ml[40,1270+3]..[40,1270+4])
          module_type (lib/Glue.ml[40,1270+7]..[40,1270+35])
            Pmty_with
            module_type (lib/Glue.ml[40,1270+7]..[40,1270+16])
              Pmty_ident "INJECTION" (lib/Glue.ml[40,1270+7]..[40,1270+16])
            [
              Pwith_typesubst "u" (lib/Glue.ml[40,1270+27]..[40,1270+28])
                type_declaration "u" (lib/Glue.ml[40,1270+27]..[40,1270+28]) (lib/Glue.ml[40,1270+22]..[40,1270+35])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[40,1270+32]..[40,1270+35])
                        Ptyp_constr "U.t" (lib/Glue.ml[40,1270+32]..[40,1270+35])
                        []
            ]
          module_expr (lib/Glue.ml[41,1307+2]..[44,1387+3])
            Pmod_structure
            [
              structure_item (lib/Glue.ml[42,1316+2]..[42,1316+14])
                Pstr_type Rec
                [
                  type_declaration "t" (lib/Glue.ml[42,1316+7]..[42,1316+8]) (lib/Glue.ml[42,1316+2]..[42,1316+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[42,1316+11]..[42,1316+14])
                          Ptyp_constr "I.t" (lib/Glue.ml[42,1316+11]..[42,1316+14])
                          []
                ]
              structure_item (lib/Glue.ml[43,1331+2]..[43,1331+55])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[43,1331+6]..[43,1331+13])
                      Ppat_var "compare" (lib/Glue.ml[43,1331+6]..[43,1331+13])
                    expression (lib/Glue.ml[43,1331+14]..[43,1331+55]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[43,1331+14]..[43,1331+15])
                        Ppat_var "x" (lib/Glue.ml[43,1331+14]..[43,1331+15])
                      expression (lib/Glue.ml[43,1331+16]..[43,1331+55]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[43,1331+16]..[43,1331+17])
                          Ppat_var "y" (lib/Glue.ml[43,1331+16]..[43,1331+17])
                        expression (lib/Glue.ml[43,1331+20]..[43,1331+55])
                          Pexp_apply
                          expression (lib/Glue.ml[43,1331+20]..[43,1331+29])
                            Pexp_ident "U.compare" (lib/Glue.ml[43,1331+20]..[43,1331+29])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[43,1331+30]..[43,1331+42])
                                Pexp_apply
                                expression (lib/Glue.ml[43,1331+31]..[43,1331+39])
                                  Pexp_ident "I.encode" (lib/Glue.ml[43,1331+31]..[43,1331+39])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[43,1331+40]..[43,1331+41])
                                      Pexp_ident "x" (lib/Glue.ml[43,1331+40]..[43,1331+41])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[43,1331+43]..[43,1331+55])
                                Pexp_apply
                                expression (lib/Glue.ml[43,1331+44]..[43,1331+52])
                                  Pexp_ident "I.encode" (lib/Glue.ml[43,1331+44]..[43,1331+52])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[43,1331+53]..[43,1331+54])
                                      Pexp_ident "y" (lib/Glue.ml[43,1331+53]..[43,1331+54])
                                ]
                          ]
                ]
            ]
  structure_item (lib/Glue.ml[46,1392+0]..[53,1583+3])
    Pstr_module
    "InjectHashedType" (lib/Glue.ml[46,1392+7]..[46,1392+23])
      module_expr (lib/Glue.ml[47,1416+2]..[53,1583+3])
        Pmod_functor "U" (lib/Glue.ml[47,1416+3]..[47,1416+4])
        module_type (lib/Glue.ml[47,1416+7]..[47,1416+17])
          Pmty_ident "HashedType" (lib/Glue.ml[47,1416+7]..[47,1416+17])
        module_expr (lib/Glue.ml[48,1435+2]..[53,1583+3])
          Pmod_functor "I" (lib/Glue.ml[48,1435+3]..[48,1435+4])
          module_type (lib/Glue.ml[48,1435+7]..[48,1435+35])
            Pmty_with
            module_type (lib/Glue.ml[48,1435+7]..[48,1435+16])
              Pmty_ident "INJECTION" (lib/Glue.ml[48,1435+7]..[48,1435+16])
            [
              Pwith_typesubst "u" (lib/Glue.ml[48,1435+27]..[48,1435+28])
                type_declaration "u" (lib/Glue.ml[48,1435+27]..[48,1435+28]) (lib/Glue.ml[48,1435+22]..[48,1435+35])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[48,1435+32]..[48,1435+35])
                        Ptyp_constr "U.t" (lib/Glue.ml[48,1435+32]..[48,1435+35])
                        []
            ]
          module_expr (lib/Glue.ml[49,1472+2]..[53,1583+3])
            Pmod_structure
            [
              structure_item (lib/Glue.ml[50,1481+2]..[50,1481+14])
                Pstr_type Rec
                [
                  type_declaration "t" (lib/Glue.ml[50,1481+7]..[50,1481+8]) (lib/Glue.ml[50,1481+2]..[50,1481+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[50,1481+11]..[50,1481+14])
                          Ptyp_constr "I.t" (lib/Glue.ml[50,1481+11]..[50,1481+14])
                          []
                ]
              structure_item (lib/Glue.ml[51,1496+2]..[51,1496+51])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[51,1496+6]..[51,1496+11])
                      Ppat_var "equal" (lib/Glue.ml[51,1496+6]..[51,1496+11])
                    expression (lib/Glue.ml[51,1496+12]..[51,1496+51]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[51,1496+12]..[51,1496+13])
                        Ppat_var "x" (lib/Glue.ml[51,1496+12]..[51,1496+13])
                      expression (lib/Glue.ml[51,1496+14]..[51,1496+51]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[51,1496+14]..[51,1496+15])
                          Ppat_var "y" (lib/Glue.ml[51,1496+14]..[51,1496+15])
                        expression (lib/Glue.ml[51,1496+18]..[51,1496+51])
                          Pexp_apply
                          expression (lib/Glue.ml[51,1496+18]..[51,1496+25])
                            Pexp_ident "U.equal" (lib/Glue.ml[51,1496+18]..[51,1496+25])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[51,1496+26]..[51,1496+38])
                                Pexp_apply
                                expression (lib/Glue.ml[51,1496+27]..[51,1496+35])
                                  Pexp_ident "I.encode" (lib/Glue.ml[51,1496+27]..[51,1496+35])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[51,1496+36]..[51,1496+37])
                                      Pexp_ident "x" (lib/Glue.ml[51,1496+36]..[51,1496+37])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[51,1496+39]..[51,1496+51])
                                Pexp_apply
                                expression (lib/Glue.ml[51,1496+40]..[51,1496+48])
                                  Pexp_ident "I.encode" (lib/Glue.ml[51,1496+40]..[51,1496+48])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[51,1496+49]..[51,1496+50])
                                      Pexp_ident "y" (lib/Glue.ml[51,1496+49]..[51,1496+50])
                                ]
                          ]
                ]
              structure_item (lib/Glue.ml[52,1548+2]..[52,1548+34])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[52,1548+6]..[52,1548+10])
                      Ppat_var "hash" (lib/Glue.ml[52,1548+6]..[52,1548+10])
                    expression (lib/Glue.ml[52,1548+11]..[52,1548+34]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[52,1548+11]..[52,1548+12])
                        Ppat_var "x" (lib/Glue.ml[52,1548+11]..[52,1548+12])
                      expression (lib/Glue.ml[52,1548+15]..[52,1548+34])
                        Pexp_apply
                        expression (lib/Glue.ml[52,1548+15]..[52,1548+21])
                          Pexp_ident "U.hash" (lib/Glue.ml[52,1548+15]..[52,1548+21])
                        [
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[52,1548+22]..[52,1548+34])
                              Pexp_apply
                              expression (lib/Glue.ml[52,1548+23]..[52,1548+31])
                                Pexp_ident "I.encode" (lib/Glue.ml[52,1548+23]..[52,1548+31])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Glue.ml[52,1548+32]..[52,1548+33])
                                    Pexp_ident "x" (lib/Glue.ml[52,1548+32]..[52,1548+33])
                              ]
                        ]
                ]
            ]
  structure_item (lib/Glue.ml[55,1588+0]..[64,1851+3])
    Pstr_module
    "InjectMinimalImperativeMaps" (lib/Glue.ml[55,1588+7]..[55,1588+34])
      module_expr (lib/Glue.ml[56,1623+2]..[64,1851+3])
        Pmod_functor "M" (lib/Glue.ml[56,1623+3]..[56,1623+4])
        module_type (lib/Glue.ml[56,1623+7]..[56,1623+30])
          Pmty_ident "MINIMAL_IMPERATIVE_MAPS" (lib/Glue.ml[56,1623+7]..[56,1623+30])
        module_expr (lib/Glue.ml[57,1655+2]..[64,1851+3])
          Pmod_functor "I" (lib/Glue.ml[57,1655+3]..[57,1655+4])
          module_type (lib/Glue.ml[57,1655+7]..[57,1655+37])
            Pmty_with
            module_type (lib/Glue.ml[57,1655+7]..[57,1655+16])
              Pmty_ident "INJECTION" (lib/Glue.ml[57,1655+7]..[57,1655+16])
            [
              Pwith_typesubst "u" (lib/Glue.ml[57,1655+27]..[57,1655+28])
                type_declaration "u" (lib/Glue.ml[57,1655+27]..[57,1655+28]) (lib/Glue.ml[57,1655+22]..[57,1655+37])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[57,1655+32]..[57,1655+37])
                        Ptyp_constr "M.key" (lib/Glue.ml[57,1655+32]..[57,1655+37])
                        []
            ]
          module_expr (lib/Glue.ml[58,1694+2]..[64,1851+3])
            Pmod_structure
            [
              structure_item (lib/Glue.ml[59,1703+2]..[59,1703+16])
                Pstr_type Rec
                [
                  type_declaration "key" (lib/Glue.ml[59,1703+7]..[59,1703+10]) (lib/Glue.ml[59,1703+2]..[59,1703+16])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[59,1703+13]..[59,1703+16])
                          Ptyp_constr "I.t" (lib/Glue.ml[59,1703+13]..[59,1703+16])
                          []
                ]
              structure_item (lib/Glue.ml[60,1720+2]..[60,1720+26])
                Pstr_type Rec
                [
                  type_declaration "t" (lib/Glue.ml[60,1720+13]..[60,1720+14]) (lib/Glue.ml[60,1720+2]..[60,1720+26])
                    ptype_params =
                      [
                        core_type (lib/Glue.ml[60,1720+7]..[60,1720+12])
                          Ptyp_var data
                      ]
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[60,1720+17]..[60,1720+26])
                          Ptyp_constr "M.t" (lib/Glue.ml[60,1720+23]..[60,1720+26])
                          [
                            core_type (lib/Glue.ml[60,1720+17]..[60,1720+22])
                              Ptyp_var data
                          ]
                ]
              structure_item (lib/Glue.ml[61,1747+2]..[61,1747+23])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[61,1747+6]..[61,1747+12])
                      Ppat_var "create" (lib/Glue.ml[61,1747+6]..[61,1747+12])
                    expression (lib/Glue.ml[61,1747+15]..[61,1747+23])
                      Pexp_ident "M.create" (lib/Glue.ml[61,1747+15]..[61,1747+23])
                ]
              structure_item (lib/Glue.ml[62,1771+2]..[62,1771+40])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[62,1771+6]..[62,1771+9])
                      Ppat_var "add" (lib/Glue.ml[62,1771+6]..[62,1771+9])
                    expression (lib/Glue.ml[62,1771+10]..[62,1771+40]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[62,1771+10]..[62,1771+11])
                        Ppat_var "x" (lib/Glue.ml[62,1771+10]..[62,1771+11])
                      expression (lib/Glue.ml[62,1771+12]..[62,1771+40]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[62,1771+12]..[62,1771+13])
                          Ppat_var "y" (lib/Glue.ml[62,1771+12]..[62,1771+13])
                        expression (lib/Glue.ml[62,1771+14]..[62,1771+40]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lib/Glue.ml[62,1771+14]..[62,1771+15])
                            Ppat_var "m" (lib/Glue.ml[62,1771+14]..[62,1771+15])
                          expression (lib/Glue.ml[62,1771+18]..[62,1771+40])
                            Pexp_apply
                            expression (lib/Glue.ml[62,1771+18]..[62,1771+23])
                              Pexp_ident "M.add" (lib/Glue.ml[62,1771+18]..[62,1771+23])
                            [
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[62,1771+24]..[62,1771+36])
                                  Pexp_apply
                                  expression (lib/Glue.ml[62,1771+25]..[62,1771+33])
                                    Pexp_ident "I.encode" (lib/Glue.ml[62,1771+25]..[62,1771+33])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Glue.ml[62,1771+34]..[62,1771+35])
                                        Pexp_ident "x" (lib/Glue.ml[62,1771+34]..[62,1771+35])
                                  ]
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[62,1771+37]..[62,1771+38])
                                  Pexp_ident "y" (lib/Glue.ml[62,1771+37]..[62,1771+38])
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[62,1771+39]..[62,1771+40])
                                  Pexp_ident "m" (lib/Glue.ml[62,1771+39]..[62,1771+40])
                            ]
                ]
              structure_item (lib/Glue.ml[63,1812+2]..[63,1812+38])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[63,1812+6]..[63,1812+10])
                      Ppat_var "find" (lib/Glue.ml[63,1812+6]..[63,1812+10])
                    expression (lib/Glue.ml[63,1812+11]..[63,1812+38]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[63,1812+11]..[63,1812+12])
                        Ppat_var "x" (lib/Glue.ml[63,1812+11]..[63,1812+12])
                      expression (lib/Glue.ml[63,1812+13]..[63,1812+38]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[63,1812+13]..[63,1812+14])
                          Ppat_var "m" (lib/Glue.ml[63,1812+13]..[63,1812+14])
                        expression (lib/Glue.ml[63,1812+17]..[63,1812+38])
                          Pexp_apply
                          expression (lib/Glue.ml[63,1812+17]..[63,1812+23])
                            Pexp_ident "M.find" (lib/Glue.ml[63,1812+17]..[63,1812+23])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[63,1812+24]..[63,1812+36])
                                Pexp_apply
                                expression (lib/Glue.ml[63,1812+25]..[63,1812+33])
                                  Pexp_ident "I.encode" (lib/Glue.ml[63,1812+25]..[63,1812+33])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[63,1812+34]..[63,1812+35])
                                      Pexp_ident "x" (lib/Glue.ml[63,1812+34]..[63,1812+35])
                                ]
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[63,1812+37]..[63,1812+38])
                                Pexp_ident "m" (lib/Glue.ml[63,1812+37]..[63,1812+38])
                          ]
                ]
            ]
  structure_item (lib/Glue.ml[66,1856+0]..[77,2134+3])
    Pstr_module
    "InjectImperativeMaps" (lib/Glue.ml[66,1856+7]..[66,1856+27])
      module_expr (lib/Glue.ml[67,1884+2]..[77,2134+3])
        Pmod_functor "M" (lib/Glue.ml[67,1884+3]..[67,1884+4])
        module_type (lib/Glue.ml[67,1884+7]..[67,1884+22])
          Pmty_ident "IMPERATIVE_MAPS" (lib/Glue.ml[67,1884+7]..[67,1884+22])
        module_expr (lib/Glue.ml[68,1908+2]..[77,2134+3])
          Pmod_functor "I" (lib/Glue.ml[68,1908+3]..[68,1908+4])
          module_type (lib/Glue.ml[68,1908+7]..[68,1908+37])
            Pmty_with
            module_type (lib/Glue.ml[68,1908+7]..[68,1908+16])
              Pmty_ident "INJECTION" (lib/Glue.ml[68,1908+7]..[68,1908+16])
            [
              Pwith_typesubst "u" (lib/Glue.ml[68,1908+27]..[68,1908+28])
                type_declaration "u" (lib/Glue.ml[68,1908+27]..[68,1908+28]) (lib/Glue.ml[68,1908+22]..[68,1908+37])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[68,1908+32]..[68,1908+37])
                        Ptyp_constr "M.key" (lib/Glue.ml[68,1908+32]..[68,1908+37])
                        []
            ]
          module_expr (lib/Glue.ml[69,1947+2]..[77,2134+3])
            Pmod_functor "J" (lib/Glue.ml[69,1947+3]..[69,1947+4])
            module_type (lib/Glue.ml[69,1947+7]..[69,1947+39])
              Pmty_signature
              [
                signature_item (lib/Glue.ml[69,1947+11]..[69,1947+35])
                  Psig_value
                  value_description "decode" (lib/Glue.ml[69,1947+15]..[69,1947+21]) (lib/Glue.ml[69,1947+11]..[69,1947+35])
                    core_type (lib/Glue.ml[69,1947+23]..[69,1947+35])
                      Ptyp_arrow
                      Nolabel
                      core_type (lib/Glue.ml[69,1947+23]..[69,1947+28])
                        Ptyp_constr "M.key" (lib/Glue.ml[69,1947+23]..[69,1947+28])
                        []
                      core_type (lib/Glue.ml[69,1947+32]..[69,1947+35])
                        Ptyp_constr "I.t" (lib/Glue.ml[69,1947+32]..[69,1947+35])
                        []
                    []
              ]
            module_expr (lib/Glue.ml[70,1988+2]..[77,2134+3])
              Pmod_structure
              [
                structure_item (lib/Glue.ml[71,1997+2]..[71,1997+43])
                  Pstr_include                  module_expr (lib/Glue.ml[71,1997+10]..[71,1997+43])
                    Pmod_apply
                    module_expr (lib/Glue.ml[71,1997+10]..[71,1997+40])
                      Pmod_apply
                      module_expr (lib/Glue.ml[71,1997+10]..[71,1997+37])
                        Pmod_ident "InjectMinimalImperativeMaps" (lib/Glue.ml[71,1997+10]..[71,1997+37])
                      module_expr (lib/Glue.ml[71,1997+38]..[71,1997+39])
                        Pmod_ident "M" (lib/Glue.ml[71,1997+38]..[71,1997+39])
                    module_expr (lib/Glue.ml[71,1997+41]..[71,1997+42])
                      Pmod_ident "I" (lib/Glue.ml[71,1997+41]..[71,1997+42])
                structure_item (lib/Glue.ml[72,2041+2]..[72,2041+21])
                  Pstr_value Nonrec
                  [
                    <def>
                      pattern (lib/Glue.ml[72,2041+6]..[72,2041+11])
                        Ppat_var "clear" (lib/Glue.ml[72,2041+6]..[72,2041+11])
                      expression (lib/Glue.ml[72,2041+14]..[72,2041+21])
                        Pexp_ident "M.clear" (lib/Glue.ml[72,2041+14]..[72,2041+21])
                  ]
                structure_item (lib/Glue.ml[73,2063+2]..[76,2126+7])
                  Pstr_value Nonrec
                  [
                    <def>
                      pattern (lib/Glue.ml[73,2063+6]..[73,2063+10])
                        Ppat_var "iter" (lib/Glue.ml[73,2063+6]..[73,2063+10])
                      expression (lib/Glue.ml[73,2063+11]..[76,2126+7]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[73,2063+11]..[73,2063+12])
                          Ppat_var "f" (lib/Glue.ml[73,2063+11]..[73,2063+12])
                        expression (lib/Glue.ml[73,2063+13]..[76,2126+7]) ghost
                          Pexp_fun
                          Nolabel
                          None
                          pattern (lib/Glue.ml[73,2063+13]..[73,2063+14])
                            Ppat_var "m" (lib/Glue.ml[73,2063+13]..[73,2063+14])
                          expression (lib/Glue.ml[74,2080+4]..[76,2126+7])
                            Pexp_apply
                            expression (lib/Glue.ml[74,2080+4]..[74,2080+10])
                              Pexp_ident "M.iter" (lib/Glue.ml[74,2080+4]..[74,2080+10])
                            [
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[74,2080+11]..[76,2126+5])
                                  Pexp_fun
                                  Nolabel
                                  None
                                  pattern (lib/Glue.ml[74,2080+16]..[74,2080+17])
                                    Ppat_var "x" (lib/Glue.ml[74,2080+16]..[74,2080+17])
                                  expression (lib/Glue.ml[74,2080+18]..[75,2103+22]) ghost
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (lib/Glue.ml[74,2080+18]..[74,2080+19])
                                      Ppat_var "y" (lib/Glue.ml[74,2080+18]..[74,2080+19])
                                    expression (lib/Glue.ml[75,2103+6]..[75,2103+22])
                                      Pexp_apply
                                      expression (lib/Glue.ml[75,2103+6]..[75,2103+7])
                                        Pexp_ident "f" (lib/Glue.ml[75,2103+6]..[75,2103+7])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/Glue.ml[75,2103+8]..[75,2103+20])
                                            Pexp_apply
                                            expression (lib/Glue.ml[75,2103+9]..[75,2103+17])
                                              Pexp_ident "J.decode" (lib/Glue.ml[75,2103+9]..[75,2103+17])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/Glue.ml[75,2103+18]..[75,2103+19])
                                                  Pexp_ident "x" (lib/Glue.ml[75,2103+18]..[75,2103+19])
                                            ]
                                        <arg>
                                        Nolabel
                                          expression (lib/Glue.ml[75,2103+21]..[75,2103+22])
                                            Pexp_ident "y" (lib/Glue.ml[75,2103+21]..[75,2103+22])
                                      ]
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[76,2126+6]..[76,2126+7])
                                  Pexp_ident "m" (lib/Glue.ml[76,2126+6]..[76,2126+7])
                            ]
                  ]
              ]
  structure_item (lib/Glue.ml[79,2139+0]..[102,2447+3])
    Pstr_module
    "PersistentMapsToImperativeMaps" (lib/Glue.ml[79,2139+7]..[79,2139+37])
      module_expr (lib/Glue.ml[79,2139+38]..[102,2447+3])
        Pmod_functor "M" (lib/Glue.ml[79,2139+39]..[79,2139+40])
        module_type (lib/Glue.ml[79,2139+43]..[79,2139+58])
          Pmty_ident "PERSISTENT_MAPS" (lib/Glue.ml[79,2139+43]..[79,2139+58])
        module_expr (lib/Glue.ml[79,2139+62]..[102,2447+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[81,2209+2]..[82,2222+9])
              Pstr_type Rec
              [
                type_declaration "key" (lib/Glue.ml[81,2209+7]..[81,2209+10]) (lib/Glue.ml[81,2209+2]..[82,2222+9])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[82,2222+4]..[82,2222+9])
                        Ptyp_constr "M.key" (lib/Glue.ml[82,2222+4]..[82,2222+9])
                        []
              ]
            structure_item (lib/Glue.ml[84,2233+2]..[85,2250+17])
              Pstr_type Rec
              [
                type_declaration "t" (lib/Glue.ml[84,2233+13]..[84,2233+14]) (lib/Glue.ml[84,2233+2]..[85,2250+17])
                  ptype_params =
                    [
                      core_type (lib/Glue.ml[84,2233+7]..[84,2233+12])
                        Ptyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[85,2250+4]..[85,2250+17])
                        Ptyp_constr "ref" (lib/Glue.ml[85,2250+14]..[85,2250+17])
                        [
                          core_type (lib/Glue.ml[85,2250+4]..[85,2250+13])
                            Ptyp_constr "M.t" (lib/Glue.ml[85,2250+10]..[85,2250+13])
                            [
                              core_type (lib/Glue.ml[85,2250+4]..[85,2250+9])
                                Ptyp_var data
                            ]
                        ]
              ]
            structure_item (lib/Glue.ml[87,2269+2]..[88,2287+15])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[87,2269+6]..[87,2269+12])
                    Ppat_var "create" (lib/Glue.ml[87,2269+6]..[87,2269+12])
                  expression (lib/Glue.ml[87,2269+13]..[88,2287+15]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[87,2269+13]..[87,2269+15])
                      Ppat_construct "()" (lib/Glue.ml[87,2269+13]..[87,2269+15])
                      None
                    expression (lib/Glue.ml[88,2287+4]..[88,2287+15])
                      Pexp_apply
                      expression (lib/Glue.ml[88,2287+4]..[88,2287+7])
                        Pexp_ident "ref" (lib/Glue.ml[88,2287+4]..[88,2287+7])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[88,2287+8]..[88,2287+15])
                            Pexp_ident "M.empty" (lib/Glue.ml[88,2287+8]..[88,2287+15])
                      ]
              ]
            structure_item (lib/Glue.ml[90,2304+2]..[91,2320+16])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[90,2304+6]..[90,2304+11])
                    Ppat_var "clear" (lib/Glue.ml[90,2304+6]..[90,2304+11])
                  expression (lib/Glue.ml[90,2304+12]..[91,2320+16]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[90,2304+12]..[90,2304+13])
                      Ppat_var "t" (lib/Glue.ml[90,2304+12]..[90,2304+13])
                    expression (lib/Glue.ml[91,2320+4]..[91,2320+16])
                      Pexp_apply
                      expression (lib/Glue.ml[91,2320+6]..[91,2320+8])
                        Pexp_ident ":=" (lib/Glue.ml[91,2320+6]..[91,2320+8])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[91,2320+4]..[91,2320+5])
                            Pexp_ident "t" (lib/Glue.ml[91,2320+4]..[91,2320+5])
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[91,2320+9]..[91,2320+16])
                            Pexp_ident "M.empty" (lib/Glue.ml[91,2320+9]..[91,2320+16])
                      ]
              ]
            structure_item (lib/Glue.ml[93,2338+2]..[94,2356+21])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[93,2338+6]..[93,2338+9])
                    Ppat_var "add" (lib/Glue.ml[93,2338+6]..[93,2338+9])
                  expression (lib/Glue.ml[93,2338+10]..[94,2356+21]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[93,2338+10]..[93,2338+11])
                      Ppat_var "k" (lib/Glue.ml[93,2338+10]..[93,2338+11])
                    expression (lib/Glue.ml[93,2338+12]..[94,2356+21]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[93,2338+12]..[93,2338+13])
                        Ppat_var "d" (lib/Glue.ml[93,2338+12]..[93,2338+13])
                      expression (lib/Glue.ml[93,2338+14]..[94,2356+21]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[93,2338+14]..[93,2338+15])
                          Ppat_var "t" (lib/Glue.ml[93,2338+14]..[93,2338+15])
                        expression (lib/Glue.ml[94,2356+4]..[94,2356+21])
                          Pexp_apply
                          expression (lib/Glue.ml[94,2356+6]..[94,2356+8])
                            Pexp_ident ":=" (lib/Glue.ml[94,2356+6]..[94,2356+8])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[94,2356+4]..[94,2356+5])
                                Pexp_ident "t" (lib/Glue.ml[94,2356+4]..[94,2356+5])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[94,2356+9]..[94,2356+21])
                                Pexp_apply
                                expression (lib/Glue.ml[94,2356+9]..[94,2356+14])
                                  Pexp_ident "M.add" (lib/Glue.ml[94,2356+9]..[94,2356+14])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[94,2356+15]..[94,2356+16])
                                      Pexp_ident "k" (lib/Glue.ml[94,2356+15]..[94,2356+16])
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[94,2356+17]..[94,2356+18])
                                      Pexp_ident "d" (lib/Glue.ml[94,2356+17]..[94,2356+18])
                                  <arg>
                                  Nolabel
                                    expression (lib/Glue.ml[94,2356+19]..[94,2356+21])
                                      Pexp_apply
                                      expression (lib/Glue.ml[94,2356+19]..[94,2356+20])
                                        Pexp_ident "!" (lib/Glue.ml[94,2356+19]..[94,2356+20])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/Glue.ml[94,2356+20]..[94,2356+21])
                                            Pexp_ident "t" (lib/Glue.ml[94,2356+20]..[94,2356+21])
                                      ]
                                ]
                          ]
              ]
            structure_item (lib/Glue.ml[96,2379+2]..[97,2396+15])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[96,2379+6]..[96,2379+10])
                    Ppat_var "find" (lib/Glue.ml[96,2379+6]..[96,2379+10])
                  expression (lib/Glue.ml[96,2379+11]..[97,2396+15]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[96,2379+11]..[96,2379+12])
                      Ppat_var "k" (lib/Glue.ml[96,2379+11]..[96,2379+12])
                    expression (lib/Glue.ml[96,2379+13]..[97,2396+15]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[96,2379+13]..[96,2379+14])
                        Ppat_var "t" (lib/Glue.ml[96,2379+13]..[96,2379+14])
                      expression (lib/Glue.ml[97,2396+4]..[97,2396+15])
                        Pexp_apply
                        expression (lib/Glue.ml[97,2396+4]..[97,2396+10])
                          Pexp_ident "M.find" (lib/Glue.ml[97,2396+4]..[97,2396+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[97,2396+11]..[97,2396+12])
                              Pexp_ident "k" (lib/Glue.ml[97,2396+11]..[97,2396+12])
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[97,2396+13]..[97,2396+15])
                              Pexp_apply
                              expression (lib/Glue.ml[97,2396+13]..[97,2396+14])
                                Pexp_ident "!" (lib/Glue.ml[97,2396+13]..[97,2396+14])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Glue.ml[97,2396+14]..[97,2396+15])
                                    Pexp_ident "t" (lib/Glue.ml[97,2396+14]..[97,2396+15])
                              ]
                        ]
              ]
            structure_item (lib/Glue.ml[99,2413+2]..[100,2430+15])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[99,2413+6]..[99,2413+10])
                    Ppat_var "iter" (lib/Glue.ml[99,2413+6]..[99,2413+10])
                  expression (lib/Glue.ml[99,2413+11]..[100,2430+15]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[99,2413+11]..[99,2413+12])
                      Ppat_var "f" (lib/Glue.ml[99,2413+11]..[99,2413+12])
                    expression (lib/Glue.ml[99,2413+13]..[100,2430+15]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[99,2413+13]..[99,2413+14])
                        Ppat_var "t" (lib/Glue.ml[99,2413+13]..[99,2413+14])
                      expression (lib/Glue.ml[100,2430+4]..[100,2430+15])
                        Pexp_apply
                        expression (lib/Glue.ml[100,2430+4]..[100,2430+10])
                          Pexp_ident "M.iter" (lib/Glue.ml[100,2430+4]..[100,2430+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[100,2430+11]..[100,2430+12])
                              Pexp_ident "f" (lib/Glue.ml[100,2430+11]..[100,2430+12])
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[100,2430+13]..[100,2430+15])
                              Pexp_apply
                              expression (lib/Glue.ml[100,2430+13]..[100,2430+14])
                                Pexp_ident "!" (lib/Glue.ml[100,2430+13]..[100,2430+14])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Glue.ml[100,2430+14]..[100,2430+15])
                                    Pexp_ident "t" (lib/Glue.ml[100,2430+14]..[100,2430+15])
                              ]
                        ]
              ]
          ]
  structure_item (lib/Glue.ml[104,2452+0]..[139,2960+3])
    Pstr_module
    "ArraysAsImperativeMaps" (lib/Glue.ml[104,2452+7]..[104,2452+29])
      module_expr (lib/Glue.ml[104,2452+30]..[139,2960+3])
        Pmod_functor "K" (lib/Glue.ml[104,2452+31]..[104,2452+32])
        module_type (lib/Glue.ml[104,2452+35]..[104,2452+53])
          Pmty_signature
          [
            signature_item (lib/Glue.ml[104,2452+39]..[104,2452+49])
              Psig_value
              value_description "n" (lib/Glue.ml[104,2452+43]..[104,2452+44]) (lib/Glue.ml[104,2452+39]..[104,2452+49])
                core_type (lib/Glue.ml[104,2452+46]..[104,2452+49])
                  Ptyp_constr "int" (lib/Glue.ml[104,2452+46]..[104,2452+49])
                  []
                []
          ]
        module_expr (lib/Glue.ml[104,2452+57]..[139,2960+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[106,2517+2]..[106,2517+8])
              Pstr_open Fresh
              module_expr (lib/Glue.ml[106,2517+7]..[106,2517+8])
                Pmod_ident "K" (lib/Glue.ml[106,2517+7]..[106,2517+8])
            structure_item (lib/Glue.ml[108,2527+2]..[109,2540+7])
              Pstr_type Rec
              [
                type_declaration "key" (lib/Glue.ml[108,2527+7]..[108,2527+10]) (lib/Glue.ml[108,2527+2]..[109,2540+7])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[109,2540+4]..[109,2540+7])
                        Ptyp_constr "int" (lib/Glue.ml[109,2540+4]..[109,2540+7])
                        []
              ]
            structure_item (lib/Glue.ml[111,2549+2]..[112,2566+22])
              Pstr_type Rec
              [
                type_declaration "t" (lib/Glue.ml[111,2549+13]..[111,2549+14]) (lib/Glue.ml[111,2549+2]..[112,2566+22])
                  ptype_params =
                    [
                      core_type (lib/Glue.ml[111,2549+7]..[111,2549+12])
                        Ptyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[112,2566+4]..[112,2566+22])
                        Ptyp_constr "array" (lib/Glue.ml[112,2566+17]..[112,2566+22])
                        [
                          core_type (lib/Glue.ml[112,2566+4]..[112,2566+16])
                            Ptyp_constr "option" (lib/Glue.ml[112,2566+10]..[112,2566+16])
                            [
                              core_type (lib/Glue.ml[112,2566+4]..[112,2566+9])
                                Ptyp_var data
                            ]
                        ]
              ]
            structure_item (lib/Glue.ml[114,2590+2]..[115,2608+21])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[114,2590+6]..[114,2590+12])
                    Ppat_var "create" (lib/Glue.ml[114,2590+6]..[114,2590+12])
                  expression (lib/Glue.ml[114,2590+13]..[115,2608+21]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[114,2590+13]..[114,2590+15])
                      Ppat_construct "()" (lib/Glue.ml[114,2590+13]..[114,2590+15])
                      None
                    expression (lib/Glue.ml[115,2608+4]..[115,2608+21])
                      Pexp_apply
                      expression (lib/Glue.ml[115,2608+4]..[115,2608+14])
                        Pexp_ident "Array.make" (lib/Glue.ml[115,2608+4]..[115,2608+14])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[115,2608+15]..[115,2608+16])
                            Pexp_ident "n" (lib/Glue.ml[115,2608+15]..[115,2608+16])
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[115,2608+17]..[115,2608+21])
                            Pexp_construct "None" (lib/Glue.ml[115,2608+17]..[115,2608+21])
                            None
                      ]
              ]
            structure_item (lib/Glue.ml[117,2631+2]..[118,2647+25])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[117,2631+6]..[117,2631+11])
                    Ppat_var "clear" (lib/Glue.ml[117,2631+6]..[117,2631+11])
                  expression (lib/Glue.ml[117,2631+12]..[118,2647+25]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[117,2631+12]..[117,2631+13])
                      Ppat_var "m" (lib/Glue.ml[117,2631+12]..[117,2631+13])
                    expression (lib/Glue.ml[118,2647+4]..[118,2647+25])
                      Pexp_apply
                      expression (lib/Glue.ml[118,2647+4]..[118,2647+14])
                        Pexp_ident "Array.fill" (lib/Glue.ml[118,2647+4]..[118,2647+14])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[118,2647+15]..[118,2647+16])
                            Pexp_ident "m" (lib/Glue.ml[118,2647+15]..[118,2647+16])
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[118,2647+17]..[118,2647+18])
                            Pexp_constant PConst_int (0,None)
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[118,2647+19]..[118,2647+20])
                            Pexp_ident "n" (lib/Glue.ml[118,2647+19]..[118,2647+20])
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[118,2647+21]..[118,2647+25])
                            Pexp_construct "None" (lib/Glue.ml[118,2647+21]..[118,2647+25])
                            None
                      ]
              ]
            structure_item (lib/Glue.ml[120,2674+2]..[121,2697+24])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[120,2674+6]..[120,2674+9])
                    Ppat_var "add" (lib/Glue.ml[120,2674+6]..[120,2674+9])
                  expression (lib/Glue.ml[120,2674+10]..[121,2697+24]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[120,2674+10]..[120,2674+13])
                      Ppat_var "key" (lib/Glue.ml[120,2674+10]..[120,2674+13])
                    expression (lib/Glue.ml[120,2674+14]..[121,2697+24]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[120,2674+14]..[120,2674+18])
                        Ppat_var "data" (lib/Glue.ml[120,2674+14]..[120,2674+18])
                      expression (lib/Glue.ml[120,2674+19]..[121,2697+24]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[120,2674+19]..[120,2674+20])
                          Ppat_var "m" (lib/Glue.ml[120,2674+19]..[120,2674+20])
                        expression (lib/Glue.ml[121,2697+4]..[121,2697+24])
                          Pexp_apply
                          expression (lib/Glue.ml[121,2697+4]..[121,2697+24]) ghost
                            Pexp_ident "Array.set" (lib/Glue.ml[121,2697+4]..[121,2697+24]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[121,2697+4]..[121,2697+5])
                                Pexp_ident "m" (lib/Glue.ml[121,2697+4]..[121,2697+5])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[121,2697+7]..[121,2697+10])
                                Pexp_ident "key" (lib/Glue.ml[121,2697+7]..[121,2697+10])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[121,2697+15]..[121,2697+24])
                                Pexp_construct "Some" (lib/Glue.ml[121,2697+15]..[121,2697+19])
                                Some
                                  expression (lib/Glue.ml[121,2697+20]..[121,2697+24])
                                    Pexp_ident "data" (lib/Glue.ml[121,2697+20]..[121,2697+24])
                          ]
              ]
            structure_item (lib/Glue.ml[123,2723+2]..[128,2815+5])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[123,2723+6]..[123,2723+10])
                    Ppat_var "find" (lib/Glue.ml[123,2723+6]..[123,2723+10])
                  expression (lib/Glue.ml[123,2723+11]..[128,2815+5]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[123,2723+11]..[123,2723+14])
                      Ppat_var "key" (lib/Glue.ml[123,2723+11]..[123,2723+14])
                    expression (lib/Glue.ml[123,2723+15]..[128,2815+5]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[123,2723+15]..[123,2723+16])
                        Ppat_var "m" (lib/Glue.ml[123,2723+15]..[123,2723+16])
                      expression (lib/Glue.ml[124,2742+4]..[128,2815+5])
                        Pexp_match
                        expression (lib/Glue.ml[124,2742+10]..[124,2742+17])
                          Pexp_apply
                          expression (lib/Glue.ml[124,2742+10]..[124,2742+17]) ghost
                            Pexp_ident "Array.get" (lib/Glue.ml[124,2742+10]..[124,2742+17]) ghost
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[124,2742+10]..[124,2742+11])
                                Pexp_ident "m" (lib/Glue.ml[124,2742+10]..[124,2742+11])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[124,2742+13]..[124,2742+16])
                                Pexp_ident "key" (lib/Glue.ml[124,2742+13]..[124,2742+16])
                          ]
                        [
                          <case>
                            pattern (lib/Glue.ml[125,2765+6]..[125,2765+10])
                              Ppat_construct "None" (lib/Glue.ml[125,2765+6]..[125,2765+10])
                              None
                            expression (lib/Glue.ml[126,2779+1]..[126,2779+16])
                              Pexp_apply
                              expression (lib/Glue.ml[126,2779+1]..[126,2779+6])
                                Pexp_ident "raise" (lib/Glue.ml[126,2779+1]..[126,2779+6])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Glue.ml[126,2779+7]..[126,2779+16])
                                    Pexp_construct "Not_found" (lib/Glue.ml[126,2779+7]..[126,2779+16])
                                    None
                              ]
                          <case>
                            pattern (lib/Glue.ml[127,2796+6]..[127,2796+15])
                              Ppat_construct "Some" (lib/Glue.ml[127,2796+6]..[127,2796+10])
                              Some
                                []
                                pattern (lib/Glue.ml[127,2796+11]..[127,2796+15])
                                  Ppat_var "data" (lib/Glue.ml[127,2796+11]..[127,2796+15])
                            expression (lib/Glue.ml[128,2815+1]..[128,2815+5])
                              Pexp_ident "data" (lib/Glue.ml[128,2815+1]..[128,2815+5])
                        ]
              ]
            structure_item (lib/Glue.ml[130,2822+2]..[137,2951+7])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[130,2822+6]..[130,2822+10])
                    Ppat_var "iter" (lib/Glue.ml[130,2822+6]..[130,2822+10])
                  expression (lib/Glue.ml[130,2822+11]..[137,2951+7]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[130,2822+11]..[130,2822+12])
                      Ppat_var "f" (lib/Glue.ml[130,2822+11]..[130,2822+12])
                    expression (lib/Glue.ml[130,2822+13]..[137,2951+7]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[130,2822+13]..[130,2822+14])
                        Ppat_var "m" (lib/Glue.ml[130,2822+13]..[130,2822+14])
                      expression (lib/Glue.ml[131,2839+4]..[137,2951+7])
                        Pexp_apply
                        expression (lib/Glue.ml[131,2839+4]..[131,2839+15])
                          Pexp_ident "Array.iteri" (lib/Glue.ml[131,2839+4]..[131,2839+15])
                        [
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[131,2839+16]..[137,2951+5])
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lib/Glue.ml[131,2839+21]..[131,2839+24])
                                Ppat_var "key" (lib/Glue.ml[131,2839+21]..[131,2839+24])
                              expression (lib/Glue.ml[131,2839+25]..[136,2937+13]) ghost
                                Pexp_fun
                                Nolabel
                                None
                                pattern (lib/Glue.ml[131,2839+25]..[131,2839+29])
                                  Ppat_var "data" (lib/Glue.ml[131,2839+25]..[131,2839+29])
                                expression (lib/Glue.ml[132,2872+6]..[136,2937+13])
                                  Pexp_match
                                  expression (lib/Glue.ml[132,2872+12]..[132,2872+16])
                                    Pexp_ident "data" (lib/Glue.ml[132,2872+12]..[132,2872+16])
                                  [
                                    <case>
                                      pattern (lib/Glue.ml[133,2894+8]..[133,2894+12])
                                        Ppat_construct "None" (lib/Glue.ml[133,2894+8]..[133,2894+12])
                                        None
                                      expression (lib/Glue.ml[134,2910+3]..[134,2910+5])
                                        Pexp_construct "()" (lib/Glue.ml[134,2910+3]..[134,2910+5])
                                        None
                                    <case>
                                      pattern (lib/Glue.ml[135,2916+8]..[135,2916+17])
                                        Ppat_construct "Some" (lib/Glue.ml[135,2916+8]..[135,2916+12])
                                        Some
                                          []
                                          pattern (lib/Glue.ml[135,2916+13]..[135,2916+17])
                                            Ppat_var "data" (lib/Glue.ml[135,2916+13]..[135,2916+17])
                                      expression (lib/Glue.ml[136,2937+3]..[136,2937+13])
                                        Pexp_apply
                                        expression (lib/Glue.ml[136,2937+3]..[136,2937+4])
                                          Pexp_ident "f" (lib/Glue.ml[136,2937+3]..[136,2937+4])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/Glue.ml[136,2937+5]..[136,2937+8])
                                              Pexp_ident "key" (lib/Glue.ml[136,2937+5]..[136,2937+8])
                                          <arg>
                                          Nolabel
                                            expression (lib/Glue.ml[136,2937+9]..[136,2937+13])
                                              Pexp_ident "data" (lib/Glue.ml[136,2937+9]..[136,2937+13])
                                        ]
                                  ]
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[137,2951+6]..[137,2951+7])
                              Pexp_ident "m" (lib/Glue.ml[137,2951+6]..[137,2951+7])
                        ]
              ]
          ]
  structure_item (lib/Glue.ml[141,2965+0]..[156,3222+3])
    Pstr_module
    "Adapt" (lib/Glue.ml[141,2965+7]..[141,2965+12])
      module_expr (lib/Glue.ml[141,2965+13]..[156,3222+3])
        Pmod_functor "T" (lib/Glue.ml[141,2965+14]..[141,2965+15])
        module_type (lib/Glue.ml[141,2965+18]..[141,2965+27])
          Pmty_ident "Hashtbl.S" (lib/Glue.ml[141,2965+18]..[141,2965+27])
        module_expr (lib/Glue.ml[141,2965+31]..[156,3222+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[143,3004+2]..[143,3004+11])
              Pstr_include              module_expr (lib/Glue.ml[143,3004+10]..[143,3004+11])
                Pmod_ident "T" (lib/Glue.ml[143,3004+10]..[143,3004+11])
            structure_item (lib/Glue.ml[147,3087+2]..[148,3105+17])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[147,3087+6]..[147,3087+12])
                    Ppat_var "create" (lib/Glue.ml[147,3087+6]..[147,3087+12])
                  expression (lib/Glue.ml[147,3087+13]..[148,3105+17]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[147,3087+13]..[147,3087+15])
                      Ppat_construct "()" (lib/Glue.ml[147,3087+13]..[147,3087+15])
                      None
                    expression (lib/Glue.ml[148,3105+4]..[148,3105+17])
                      Pexp_apply
                      expression (lib/Glue.ml[148,3105+4]..[148,3105+12])
                        Pexp_ident "T.create" (lib/Glue.ml[148,3105+4]..[148,3105+12])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Glue.ml[148,3105+13]..[148,3105+17])
                            Pexp_constant PConst_int (1023,None)
                      ]
              ]
            structure_item (lib/Glue.ml[150,3124+2]..[151,3151+24])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[150,3124+6]..[150,3124+9])
                    Ppat_var "add" (lib/Glue.ml[150,3124+6]..[150,3124+9])
                  expression (lib/Glue.ml[150,3124+10]..[151,3151+24]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[150,3124+10]..[150,3124+13])
                      Ppat_var "key" (lib/Glue.ml[150,3124+10]..[150,3124+13])
                    expression (lib/Glue.ml[150,3124+14]..[151,3151+24]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[150,3124+14]..[150,3124+18])
                        Ppat_var "data" (lib/Glue.ml[150,3124+14]..[150,3124+18])
                      expression (lib/Glue.ml[150,3124+19]..[151,3151+24]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/Glue.ml[150,3124+19]..[150,3124+24])
                          Ppat_var "table" (lib/Glue.ml[150,3124+19]..[150,3124+24])
                        expression (lib/Glue.ml[151,3151+4]..[151,3151+24])
                          Pexp_apply
                          expression (lib/Glue.ml[151,3151+4]..[151,3151+9])
                            Pexp_ident "T.add" (lib/Glue.ml[151,3151+4]..[151,3151+9])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[151,3151+10]..[151,3151+15])
                                Pexp_ident "table" (lib/Glue.ml[151,3151+10]..[151,3151+15])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[151,3151+16]..[151,3151+19])
                                Pexp_ident "key" (lib/Glue.ml[151,3151+16]..[151,3151+19])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[151,3151+20]..[151,3151+24])
                                Pexp_ident "data" (lib/Glue.ml[151,3151+20]..[151,3151+24])
                          ]
              ]
            structure_item (lib/Glue.ml[153,3177+2]..[154,3200+20])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[153,3177+6]..[153,3177+10])
                    Ppat_var "find" (lib/Glue.ml[153,3177+6]..[153,3177+10])
                  expression (lib/Glue.ml[153,3177+11]..[154,3200+20]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[153,3177+11]..[153,3177+16])
                      Ppat_var "table" (lib/Glue.ml[153,3177+11]..[153,3177+16])
                    expression (lib/Glue.ml[153,3177+17]..[154,3200+20]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[153,3177+17]..[153,3177+20])
                        Ppat_var "key" (lib/Glue.ml[153,3177+17]..[153,3177+20])
                      expression (lib/Glue.ml[154,3200+4]..[154,3200+20])
                        Pexp_apply
                        expression (lib/Glue.ml[154,3200+4]..[154,3200+10])
                          Pexp_ident "T.find" (lib/Glue.ml[154,3200+4]..[154,3200+10])
                        [
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[154,3200+11]..[154,3200+14])
                              Pexp_ident "key" (lib/Glue.ml[154,3200+11]..[154,3200+14])
                          <arg>
                          Nolabel
                            expression (lib/Glue.ml[154,3200+15]..[154,3200+20])
                              Pexp_ident "table" (lib/Glue.ml[154,3200+15]..[154,3200+20])
                        ]
              ]
          ]
  structure_item (lib/Glue.ml[158,3227+0]..[159,3280+24])
    Pstr_module
    "HashTablesAsImperativeMaps" (lib/Glue.ml[158,3227+7]..[158,3227+33])
      module_expr (lib/Glue.ml[158,3227+34]..[159,3280+24])
        Pmod_functor "H" (lib/Glue.ml[158,3227+35]..[158,3227+36])
        module_type (lib/Glue.ml[158,3227+39]..[158,3227+49])
          Pmty_ident "HashedType" (lib/Glue.ml[158,3227+39]..[158,3227+49])
        module_expr (lib/Glue.ml[159,3280+2]..[159,3280+24])
          Pmod_apply
          module_expr (lib/Glue.ml[159,3280+2]..[159,3280+7])
            Pmod_ident "Adapt" (lib/Glue.ml[159,3280+2]..[159,3280+7])
          module_expr (lib/Glue.ml[159,3280+8]..[159,3280+23])
            Pmod_apply
            module_expr (lib/Glue.ml[159,3280+8]..[159,3280+20])
              Pmod_ident "Hashtbl.Make" (lib/Glue.ml[159,3280+8]..[159,3280+20])
            module_expr (lib/Glue.ml[159,3280+21]..[159,3280+22])
              Pmod_ident "H" (lib/Glue.ml[159,3280+21]..[159,3280+22])
  structure_item (lib/Glue.ml[161,3306+0]..[172,3476+3])
    Pstr_module
    "MinimalSemiLattice" (lib/Glue.ml[161,3306+7]..[161,3306+25])
      module_expr (lib/Glue.ml[161,3306+26]..[172,3476+3])
        Pmod_functor "P" (lib/Glue.ml[161,3306+27]..[161,3306+28])
        module_type (lib/Glue.ml[161,3306+31]..[161,3306+43])
          Pmty_ident "SEMI_LATTICE" (lib/Glue.ml[161,3306+31]..[161,3306+43])
        module_expr (lib/Glue.ml[161,3306+47]..[172,3476+3])
          Pmod_structure
          [
            structure_item (lib/Glue.ml[163,3361+2]..[164,3379+14])
              Pstr_type Rec
              [
                type_declaration "property" (lib/Glue.ml[163,3361+7]..[163,3361+15]) (lib/Glue.ml[163,3361+2]..[164,3379+14])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[164,3379+4]..[164,3379+14])
                        Ptyp_constr "P.property" (lib/Glue.ml[164,3379+4]..[164,3379+14])
                        []
              ]
            structure_item (lib/Glue.ml[166,3395+2]..[170,3457+17])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[166,3395+6]..[166,3395+14])
                    Ppat_var "leq_join" (lib/Glue.ml[166,3395+6]..[166,3395+14])
                  expression (lib/Glue.ml[166,3395+15]..[170,3457+17]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Glue.ml[166,3395+15]..[166,3395+17])
                      Ppat_var "p'" (lib/Glue.ml[166,3395+15]..[166,3395+17])
                    expression (lib/Glue.ml[166,3395+18]..[170,3457+17]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/Glue.ml[166,3395+18]..[166,3395+19])
                        Ppat_var "p" (lib/Glue.ml[166,3395+18]..[166,3395+19])
                      expression (lib/Glue.ml[167,3417+4]..[170,3457+17])
                        Pexp_ifthenelse
                        expression (lib/Glue.ml[167,3417+7]..[167,3417+17])
                          Pexp_apply
                          expression (lib/Glue.ml[167,3417+7]..[167,3417+12])
                            Pexp_ident "P.leq" (lib/Glue.ml[167,3417+7]..[167,3417+12])
                          [
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[167,3417+13]..[167,3417+15])
                                Pexp_ident "p'" (lib/Glue.ml[167,3417+13]..[167,3417+15])
                            <arg>
                            Nolabel
                              expression (lib/Glue.ml[167,3417+16]..[167,3417+17])
                                Pexp_ident "p" (lib/Glue.ml[167,3417+16]..[167,3417+17])
                          ]
                        expression (lib/Glue.ml[168,3440+6]..[168,3440+7])
                          Pexp_ident "p" (lib/Glue.ml[168,3440+6]..[168,3440+7])
                        Some
                          expression (lib/Glue.ml[170,3457+6]..[170,3457+17])
                            Pexp_apply
                            expression (lib/Glue.ml[170,3457+6]..[170,3457+12])
                              Pexp_ident "P.join" (lib/Glue.ml[170,3457+6]..[170,3457+12])
                            [
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[170,3457+13]..[170,3457+15])
                                  Pexp_ident "p'" (lib/Glue.ml[170,3457+13]..[170,3457+15])
                              <arg>
                              Nolabel
                                expression (lib/Glue.ml[170,3457+16]..[170,3457+17])
                                  Pexp_ident "p" (lib/Glue.ml[170,3457+16]..[170,3457+17])
                            ]
              ]
          ]
  structure_item (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Ppat_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          None
        expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Pexp_apply
          expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Ppat_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          None
        expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Pexp_apply
          expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                Pexp_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                None
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Ppat_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          None
        expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Pexp_apply
          expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                Pexp_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                None
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Ppat_construct "()" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          None
        expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          Pexp_apply
          expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Glue.ml[172,3476+3]..[172,3476+3]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set ~absolute_filename:"lib/Glue.ml"
let () = Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "Glue.ml"
open Sigs
module CHAR = struct type t = char end
module INT = struct type t = int end
module STRING = struct type t = string end
module TrivialOrderedType(T:TYPE) = struct include T
                                           let compare = compare end
module TrivialHashedType(T:TYPE) =
  struct include T
         let equal = (=)
         let hash = Hashtbl.hash end
module InjectOrderedType(U:OrderedType)(I:INJECTION with type  u :=  U.t) =
  struct
    type t = I.t
    let compare x y = U.compare (I.encode x) (I.encode y)
  end
module InjectHashedType(U:HashedType)(I:INJECTION with type  u :=  U.t) =
  struct
    type t = I.t
    let equal x y = U.equal (I.encode x) (I.encode y)
    let hash x = U.hash (I.encode x)
  end
module InjectMinimalImperativeMaps(M:MINIMAL_IMPERATIVE_MAPS)(I:INJECTION
                                                                  with type
                                                                   u := 
                                                                  M.key) =
  struct
    type key = I.t
    type 'data t = 'data M.t
    let create = M.create
    let add x y m = M.add (I.encode x) y m
    let find x m = M.find (I.encode x) m
  end
module InjectImperativeMaps(M:IMPERATIVE_MAPS)(I:INJECTION with type  u := 
                                                   M.key)(J:sig
                                                              val decode :
                                                                M.key -> I.t
                                                            end) =
  struct
    include ((InjectMinimalImperativeMaps)(M))(I)
    let clear = M.clear
    let iter f m = M.iter (fun x -> fun y -> f (J.decode x) y) m
  end
module PersistentMapsToImperativeMaps(M:PERSISTENT_MAPS) =
  struct
    type key = M.key
    type 'data t = 'data M.t ref
    let create () = ref M.empty
    let clear t = t := M.empty
    let add k d t = t := (M.add k d (!t))
    let find k t = M.find k (!t)
    let iter f t = M.iter f (!t)
  end
module ArraysAsImperativeMaps(K:sig val n : int end) =
  struct
    open K
    type key = int
    type 'data t = 'data option array
    let create () = Array.make n None
    let clear m = Array.fill m 0 n None
    let add key data m = m.(key) <- (Some data)
    let find key m =
      match m.(key) with | None -> raise Not_found | Some data -> data
    let iter f m =
      Array.iteri
        (fun key ->
           fun data -> match data with | None -> () | Some data -> f key data)
        m
  end
module Adapt(T:Hashtbl.S) =
  struct
    include T
    let create () = T.create 1023
    let add key data table = T.add table key data
    let find table key = T.find key table
  end
module HashTablesAsImperativeMaps(H:HashedType) = (Adapt)((Hashtbl.Make)(H))
module MinimalSemiLattice(P:SEMI_LATTICE) =
  struct
    type property = P.property
    let leq_join p' p = if P.leq p' p then p else P.join p' p
  end
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
                Texp_constant Const_string("lib/Glue.ml",(lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost
                Texp_constant Const_string("Glue.ml",(lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[13,893+0]..lib/Glue.ml[13,893+9])
    Tstr_open Fresh
    module_expr (lib/Glue.ml[13,893+5]..lib/Glue.ml[13,893+9])
      Tmod_ident "Gbnf_parser!.Sigs"
  structure_item (lib/Glue.ml[15,904+0]..lib/Glue.ml[17,941+3])
    Tstr_module
    CHAR/1150
      module_expr (lib/Glue.ml[15,904+14]..lib/Glue.ml[17,941+3])
        Tmod_structure
        [
          structure_item (lib/Glue.ml[16,925+2]..lib/Glue.ml[16,925+15])
            Tstr_type Rec
            [
              type_declaration t/1149 (lib/Glue.ml[16,925+2]..lib/Glue.ml[16,925+15])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[16,925+11]..lib/Glue.ml[16,925+15])
                      Ttyp_constr "char/2!"
                      []
            ]
        ]
  structure_item (lib/Glue.ml[19,946+0]..lib/Glue.ml[21,981+3])
    Tstr_module
    INT/1152
      module_expr (lib/Glue.ml[19,946+13]..lib/Glue.ml[21,981+3])
        Tmod_structure
        [
          structure_item (lib/Glue.ml[20,966+2]..lib/Glue.ml[20,966+14])
            Tstr_type Rec
            [
              type_declaration t/1151 (lib/Glue.ml[20,966+2]..lib/Glue.ml[20,966+14])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[20,966+11]..lib/Glue.ml[20,966+14])
                      Ttyp_constr "int/1!"
                      []
            ]
        ]
  structure_item (lib/Glue.ml[23,986+0]..lib/Glue.ml[25,1027+3])
    Tstr_module
    STRING/1154
      module_expr (lib/Glue.ml[23,986+16]..lib/Glue.ml[25,1027+3])
        Tmod_structure
        [
          structure_item (lib/Glue.ml[24,1009+2]..lib/Glue.ml[24,1009+17])
            Tstr_type Rec
            [
              type_declaration t/1153 (lib/Glue.ml[24,1009+2]..lib/Glue.ml[24,1009+17])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_abstract
                ptype_private = Public
                ptype_manifest =
                  Some
                    core_type (lib/Glue.ml[24,1009+11]..lib/Glue.ml[24,1009+17])
                      Ttyp_constr "string/15!"
                      []
            ]
        ]
  structure_item (lib/Glue.ml[27,1032+0]..lib/Glue.ml[30,1114+3])
    Tstr_module
    TrivialOrderedType/1180
      module_expr (lib/Glue.ml[27,1032+26]..lib/Glue.ml[30,1114+3])
        Tmod_functor "T/1177"
        module_type (lib/Glue.ml[27,1032+31]..lib/Glue.ml[27,1032+35])
          Tmty_ident "Gbnf_parser!.Sigs.TYPE"
        module_expr (lib/Glue.ml[27,1032+39]..lib/Glue.ml[30,1114+3])
          Tmod_structure
          [
            structure_item (lib/Glue.ml[28,1078+2]..lib/Glue.ml[28,1078+11])
              Tstr_include              module_expr (lib/Glue.ml[28,1078+10]..lib/Glue.ml[28,1078+11])
                Tmod_ident "T/1177"
            structure_item (lib/Glue.ml[29,1090+2]..lib/Glue.ml[29,1090+23])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[29,1090+6]..lib/Glue.ml[29,1090+13])
                    Tpat_var "compare/1179"
                  expression (lib/Glue.ml[29,1090+16]..lib/Glue.ml[29,1090+23])
                    Texp_ident "Stdlib!.compare"
              ]
          ]
  structure_item (lib/Glue.ml[32,1119+0]..lib/Glue.ml[36,1220+3])
    Tstr_module
    TrivialHashedType/1224
      module_expr (lib/Glue.ml[32,1119+25]..lib/Glue.ml[36,1220+3])
        Tmod_functor "T/1181"
        module_type (lib/Glue.ml[32,1119+30]..lib/Glue.ml[32,1119+34])
          Tmty_ident "Gbnf_parser!.Sigs.TYPE"
        module_expr (lib/Glue.ml[32,1119+38]..lib/Glue.ml[36,1220+3])
          Tmod_structure
          [
            structure_item (lib/Glue.ml[33,1164+2]..lib/Glue.ml[33,1164+11])
              Tstr_include              module_expr (lib/Glue.ml[33,1164+10]..lib/Glue.ml[33,1164+11])
                Tmod_ident "T/1181"
            structure_item (lib/Glue.ml[34,1176+2]..lib/Glue.ml[34,1176+17])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[34,1176+6]..lib/Glue.ml[34,1176+11])
                    Tpat_var "equal/1183"
                  expression (lib/Glue.ml[34,1176+14]..lib/Glue.ml[34,1176+17])
                    Texp_ident "Stdlib!.="
              ]
            structure_item (lib/Glue.ml[35,1194+2]..lib/Glue.ml[35,1194+25])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[35,1194+6]..lib/Glue.ml[35,1194+10])
                    Tpat_var "hash/1184"
                  expression (lib/Glue.ml[35,1194+13]..lib/Glue.ml[35,1194+25])
                    Texp_ident "Stdlib!.Hashtbl.hash"
              ]
          ]
  structure_item (lib/Glue.ml[38,1225+0]..lib/Glue.ml[44,1387+3])
    Tstr_module
    InjectOrderedType/1250
      module_expr (lib/Glue.ml[39,1250+2]..lib/Glue.ml[44,1387+3])
        Tmod_functor "U/1236"
        module_type (lib/Glue.ml[39,1250+7]..lib/Glue.ml[39,1250+18])
          Tmty_ident "Gbnf_parser!.Sigs.OrderedType"
        module_expr (lib/Glue.ml[40,1270+2]..lib/Glue.ml[44,1387+3])
          Tmod_functor "I/1245"
          module_type (lib/Glue.ml[40,1270+7]..lib/Glue.ml[40,1270+35])
            Tmty_with
            module_type (lib/Glue.ml[40,1270+7]..lib/Glue.ml[40,1270+16])
              Tmty_ident "Gbnf_parser!.Sigs.INJECTION"
            [
              "u/1238"
                Twith_typesubst
                  type_declaration u/1238 (lib/Glue.ml[40,1270+22]..lib/Glue.ml[40,1270+35])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[40,1270+32]..lib/Glue.ml[40,1270+35])
                          Ttyp_constr "U/1236.t"
                          []
            ]
          module_expr (lib/Glue.ml[41,1307+2]..lib/Glue.ml[44,1387+3])
            Tmod_structure
            [
              structure_item (lib/Glue.ml[42,1316+2]..lib/Glue.ml[42,1316+14])
                Tstr_type Rec
                [
                  type_declaration t/1246 (lib/Glue.ml[42,1316+2]..lib/Glue.ml[42,1316+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[42,1316+11]..lib/Glue.ml[42,1316+14])
                          Ttyp_constr "I/1245.t"
                          []
                ]
              structure_item (lib/Glue.ml[43,1331+2]..lib/Glue.ml[43,1331+55])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[43,1331+6]..lib/Glue.ml[43,1331+13])
                      Tpat_var "compare/1247"
                    expression (lib/Glue.ml[43,1331+14]..lib/Glue.ml[43,1331+55]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[43,1331+14]..lib/Glue.ml[43,1331+15])
                            Tpat_var "x/1248"
                          expression (lib/Glue.ml[43,1331+16]..lib/Glue.ml[43,1331+55]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[43,1331+16]..lib/Glue.ml[43,1331+17])
                                  Tpat_var "y/1249"
                                expression (lib/Glue.ml[43,1331+20]..lib/Glue.ml[43,1331+55])
                                  Texp_apply
                                  expression (lib/Glue.ml[43,1331+20]..lib/Glue.ml[43,1331+29])
                                    Texp_ident "U/1236.compare"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[43,1331+30]..lib/Glue.ml[43,1331+42])
                                        Texp_apply
                                        expression (lib/Glue.ml[43,1331+31]..lib/Glue.ml[43,1331+39])
                                          Texp_ident "I/1245.encode"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[43,1331+40]..lib/Glue.ml[43,1331+41])
                                              Texp_ident "x/1248"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[43,1331+43]..lib/Glue.ml[43,1331+55])
                                        Texp_apply
                                        expression (lib/Glue.ml[43,1331+44]..lib/Glue.ml[43,1331+52])
                                          Texp_ident "I/1245.encode"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[43,1331+53]..lib/Glue.ml[43,1331+54])
                                              Texp_ident "y/1249"
                                        ]
                                  ]
                            ]
                      ]
                ]
            ]
  structure_item (lib/Glue.ml[46,1392+0]..lib/Glue.ml[53,1583+3])
    Tstr_module
    InjectHashedType/1310
      module_expr (lib/Glue.ml[47,1416+2]..lib/Glue.ml[53,1583+3])
        Tmod_functor "U/1295"
        module_type (lib/Glue.ml[47,1416+7]..lib/Glue.ml[47,1416+17])
          Tmty_ident "Gbnf_parser!.Sigs.HashedType"
        module_expr (lib/Glue.ml[48,1435+2]..lib/Glue.ml[53,1583+3])
          Tmod_functor "I/1301"
          module_type (lib/Glue.ml[48,1435+7]..lib/Glue.ml[48,1435+35])
            Tmty_with
            module_type (lib/Glue.ml[48,1435+7]..lib/Glue.ml[48,1435+16])
              Tmty_ident "Gbnf_parser!.Sigs.INJECTION"
            [
              "u/1238"
                Twith_typesubst
                  type_declaration u/1238 (lib/Glue.ml[48,1435+22]..lib/Glue.ml[48,1435+35])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[48,1435+32]..lib/Glue.ml[48,1435+35])
                          Ttyp_constr "U/1295.t"
                          []
            ]
          module_expr (lib/Glue.ml[49,1472+2]..lib/Glue.ml[53,1583+3])
            Tmod_structure
            [
              structure_item (lib/Glue.ml[50,1481+2]..lib/Glue.ml[50,1481+14])
                Tstr_type Rec
                [
                  type_declaration t/1302 (lib/Glue.ml[50,1481+2]..lib/Glue.ml[50,1481+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[50,1481+11]..lib/Glue.ml[50,1481+14])
                          Ttyp_constr "I/1301.t"
                          []
                ]
              structure_item (lib/Glue.ml[51,1496+2]..lib/Glue.ml[51,1496+51])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[51,1496+6]..lib/Glue.ml[51,1496+11])
                      Tpat_var "equal/1303"
                    expression (lib/Glue.ml[51,1496+12]..lib/Glue.ml[51,1496+51]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[51,1496+12]..lib/Glue.ml[51,1496+13])
                            Tpat_var "x/1305"
                          expression (lib/Glue.ml[51,1496+14]..lib/Glue.ml[51,1496+51]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[51,1496+14]..lib/Glue.ml[51,1496+15])
                                  Tpat_var "y/1306"
                                expression (lib/Glue.ml[51,1496+18]..lib/Glue.ml[51,1496+51])
                                  Texp_apply
                                  expression (lib/Glue.ml[51,1496+18]..lib/Glue.ml[51,1496+25])
                                    Texp_ident "U/1295.equal"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[51,1496+26]..lib/Glue.ml[51,1496+38])
                                        Texp_apply
                                        expression (lib/Glue.ml[51,1496+27]..lib/Glue.ml[51,1496+35])
                                          Texp_ident "I/1301.encode"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[51,1496+36]..lib/Glue.ml[51,1496+37])
                                              Texp_ident "x/1305"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[51,1496+39]..lib/Glue.ml[51,1496+51])
                                        Texp_apply
                                        expression (lib/Glue.ml[51,1496+40]..lib/Glue.ml[51,1496+48])
                                          Texp_ident "I/1301.encode"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[51,1496+49]..lib/Glue.ml[51,1496+50])
                                              Texp_ident "y/1306"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (lib/Glue.ml[52,1548+2]..lib/Glue.ml[52,1548+34])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[52,1548+6]..lib/Glue.ml[52,1548+10])
                      Tpat_var "hash/1307"
                    expression (lib/Glue.ml[52,1548+11]..lib/Glue.ml[52,1548+34]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[52,1548+11]..lib/Glue.ml[52,1548+12])
                            Tpat_var "x/1309"
                          expression (lib/Glue.ml[52,1548+15]..lib/Glue.ml[52,1548+34])
                            Texp_apply
                            expression (lib/Glue.ml[52,1548+15]..lib/Glue.ml[52,1548+21])
                              Texp_ident "U/1295.hash"
                            [
                              <arg>
                                Nolabel
                                expression (lib/Glue.ml[52,1548+22]..lib/Glue.ml[52,1548+34])
                                  Texp_apply
                                  expression (lib/Glue.ml[52,1548+23]..lib/Glue.ml[52,1548+31])
                                    Texp_ident "I/1301.encode"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[52,1548+32]..lib/Glue.ml[52,1548+33])
                                        Texp_ident "x/1309"
                                  ]
                            ]
                      ]
                ]
            ]
  structure_item (lib/Glue.ml[55,1588+0]..lib/Glue.ml[64,1851+3])
    Tstr_module
    InjectMinimalImperativeMaps/1335
      module_expr (lib/Glue.ml[56,1623+2]..lib/Glue.ml[64,1851+3])
        Tmod_functor "M/1316"
        module_type (lib/Glue.ml[56,1623+7]..lib/Glue.ml[56,1623+30])
          Tmty_ident "Gbnf_parser!.Sigs.MINIMAL_IMPERATIVE_MAPS"
        module_expr (lib/Glue.ml[57,1655+2]..lib/Glue.ml[64,1851+3])
          Tmod_functor "I/1322"
          module_type (lib/Glue.ml[57,1655+7]..lib/Glue.ml[57,1655+37])
            Tmty_with
            module_type (lib/Glue.ml[57,1655+7]..lib/Glue.ml[57,1655+16])
              Tmty_ident "Gbnf_parser!.Sigs.INJECTION"
            [
              "u/1238"
                Twith_typesubst
                  type_declaration u/1238 (lib/Glue.ml[57,1655+22]..lib/Glue.ml[57,1655+37])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[57,1655+32]..lib/Glue.ml[57,1655+37])
                          Ttyp_constr "M/1316.key"
                          []
            ]
          module_expr (lib/Glue.ml[58,1694+2]..lib/Glue.ml[64,1851+3])
            Tmod_structure
            [
              structure_item (lib/Glue.ml[59,1703+2]..lib/Glue.ml[59,1703+16])
                Tstr_type Rec
                [
                  type_declaration key/1323 (lib/Glue.ml[59,1703+2]..lib/Glue.ml[59,1703+16])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[59,1703+13]..lib/Glue.ml[59,1703+16])
                          Ttyp_constr "I/1322.t"
                          []
                ]
              structure_item (lib/Glue.ml[60,1720+2]..lib/Glue.ml[60,1720+26])
                Tstr_type Rec
                [
                  type_declaration t/1324 (lib/Glue.ml[60,1720+2]..lib/Glue.ml[60,1720+26])
                    ptype_params =
                      [
                        core_type (lib/Glue.ml[60,1720+7]..lib/Glue.ml[60,1720+12])
                          Ttyp_var data
                      ]
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[60,1720+17]..lib/Glue.ml[60,1720+26])
                          Ttyp_constr "M/1316.t"
                          [
                            core_type (lib/Glue.ml[60,1720+17]..lib/Glue.ml[60,1720+22])
                              Ttyp_var data
                          ]
                ]
              structure_item (lib/Glue.ml[61,1747+2]..lib/Glue.ml[61,1747+23])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[61,1747+6]..lib/Glue.ml[61,1747+12])
                      Tpat_var "create/1325"
                    expression (lib/Glue.ml[61,1747+15]..lib/Glue.ml[61,1747+23])
                      Texp_ident "M/1316.create"
                ]
              structure_item (lib/Glue.ml[62,1771+2]..lib/Glue.ml[62,1771+40])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[62,1771+6]..lib/Glue.ml[62,1771+9])
                      Tpat_var "add/1326"
                    expression (lib/Glue.ml[62,1771+10]..lib/Glue.ml[62,1771+40]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[62,1771+10]..lib/Glue.ml[62,1771+11])
                            Tpat_var "x/1328"
                          expression (lib/Glue.ml[62,1771+12]..lib/Glue.ml[62,1771+40]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[62,1771+12]..lib/Glue.ml[62,1771+13])
                                  Tpat_var "y/1329"
                                expression (lib/Glue.ml[62,1771+14]..lib/Glue.ml[62,1771+40]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (lib/Glue.ml[62,1771+14]..lib/Glue.ml[62,1771+15])
                                        Tpat_var "m/1330"
                                      expression (lib/Glue.ml[62,1771+18]..lib/Glue.ml[62,1771+40])
                                        Texp_apply
                                        expression (lib/Glue.ml[62,1771+18]..lib/Glue.ml[62,1771+23])
                                          Texp_ident "M/1316.add"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[62,1771+24]..lib/Glue.ml[62,1771+36])
                                              Texp_apply
                                              expression (lib/Glue.ml[62,1771+25]..lib/Glue.ml[62,1771+33])
                                                Texp_ident "I/1322.encode"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Glue.ml[62,1771+34]..lib/Glue.ml[62,1771+35])
                                                    Texp_ident "x/1328"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[62,1771+37]..lib/Glue.ml[62,1771+38])
                                              Texp_ident "y/1329"
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[62,1771+39]..lib/Glue.ml[62,1771+40])
                                              Texp_ident "m/1330"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (lib/Glue.ml[63,1812+2]..lib/Glue.ml[63,1812+38])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[63,1812+6]..lib/Glue.ml[63,1812+10])
                      Tpat_var "find/1331"
                    expression (lib/Glue.ml[63,1812+11]..lib/Glue.ml[63,1812+38]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[63,1812+11]..lib/Glue.ml[63,1812+12])
                            Tpat_var "x/1333"
                          expression (lib/Glue.ml[63,1812+13]..lib/Glue.ml[63,1812+38]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[63,1812+13]..lib/Glue.ml[63,1812+14])
                                  Tpat_var "m/1334"
                                expression (lib/Glue.ml[63,1812+17]..lib/Glue.ml[63,1812+38])
                                  Texp_apply
                                  expression (lib/Glue.ml[63,1812+17]..lib/Glue.ml[63,1812+23])
                                    Texp_ident "M/1316.find"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[63,1812+24]..lib/Glue.ml[63,1812+36])
                                        Texp_apply
                                        expression (lib/Glue.ml[63,1812+25]..lib/Glue.ml[63,1812+33])
                                          Texp_ident "I/1322.encode"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[63,1812+34]..lib/Glue.ml[63,1812+35])
                                              Texp_ident "x/1333"
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[63,1812+37]..lib/Glue.ml[63,1812+38])
                                        Texp_ident "m/1334"
                                  ]
                            ]
                      ]
                ]
            ]
  structure_item (lib/Glue.ml[66,1856+0]..lib/Glue.ml[77,2134+3])
    Tstr_module
    InjectImperativeMaps/1377
      module_expr (lib/Glue.ml[67,1884+2]..lib/Glue.ml[77,2134+3])
        Tmod_functor "M/1343"
        module_type (lib/Glue.ml[67,1884+7]..lib/Glue.ml[67,1884+22])
          Tmty_ident "Gbnf_parser!.Sigs.IMPERATIVE_MAPS"
        module_expr (lib/Glue.ml[68,1908+2]..lib/Glue.ml[77,2134+3])
          Tmod_functor "I/1349"
          module_type (lib/Glue.ml[68,1908+7]..lib/Glue.ml[68,1908+37])
            Tmty_with
            module_type (lib/Glue.ml[68,1908+7]..lib/Glue.ml[68,1908+16])
              Tmty_ident "Gbnf_parser!.Sigs.INJECTION"
            [
              "u/1238"
                Twith_typesubst
                  type_declaration u/1238 (lib/Glue.ml[68,1908+22]..lib/Glue.ml[68,1908+37])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/Glue.ml[68,1908+32]..lib/Glue.ml[68,1908+37])
                          Ttyp_constr "M/1343.key"
                          []
            ]
          module_expr (lib/Glue.ml[69,1947+2]..lib/Glue.ml[77,2134+3])
            Tmod_functor "J/1351"
            module_type (lib/Glue.ml[69,1947+7]..lib/Glue.ml[69,1947+39])
              Tmty_signature
              [
                signature_item (lib/Glue.ml[69,1947+11]..lib/Glue.ml[69,1947+35])
                  Tsig_value
                  value_description decode/1350 (lib/Glue.ml[69,1947+11]..lib/Glue.ml[69,1947+35])
                    core_type (lib/Glue.ml[69,1947+23]..lib/Glue.ml[69,1947+35])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/Glue.ml[69,1947+23]..lib/Glue.ml[69,1947+28])
                        Ttyp_constr "M/1343.key"
                        []
                      core_type (lib/Glue.ml[69,1947+32]..lib/Glue.ml[69,1947+35])
                        Ttyp_constr "I/1349.t"
                        []
                    []
              ]
            module_expr (lib/Glue.ml[70,1988+2]..lib/Glue.ml[77,2134+3])
              Tmod_structure
              [
                structure_item (lib/Glue.ml[71,1997+2]..lib/Glue.ml[71,1997+43])
                  Tstr_include                  module_expr (lib/Glue.ml[71,1997+10]..lib/Glue.ml[71,1997+43])
                    Tmod_apply
                    module_expr (lib/Glue.ml[71,1997+10]..lib/Glue.ml[71,1997+40])
                      Tmod_apply
                      module_expr (lib/Glue.ml[71,1997+10]..lib/Glue.ml[71,1997+37])
                        Tmod_ident "InjectMinimalImperativeMaps/1335"
                      module_expr (lib/Glue.ml[71,1997+38]..lib/Glue.ml[71,1997+39])
                        Tmod_ident "M/1343"
                    module_expr (lib/Glue.ml[71,1997+41]..lib/Glue.ml[71,1997+42])
                      Tmod_ident "I/1349"
                structure_item (lib/Glue.ml[72,2041+2]..lib/Glue.ml[72,2041+21])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (lib/Glue.ml[72,2041+6]..lib/Glue.ml[72,2041+11])
                        Tpat_var "clear/1370"
                      expression (lib/Glue.ml[72,2041+14]..lib/Glue.ml[72,2041+21])
                        Texp_ident "M/1343.clear"
                  ]
                structure_item (lib/Glue.ml[73,2063+2]..lib/Glue.ml[76,2126+7])
                  Tstr_value Nonrec
                  [
                    <def>
                      pattern (lib/Glue.ml[73,2063+6]..lib/Glue.ml[73,2063+10])
                        Tpat_var "iter/1371"
                      expression (lib/Glue.ml[73,2063+11]..lib/Glue.ml[76,2126+7]) ghost
                        Texp_function
                        Nolabel
                        [
                          <case>
                            pattern (lib/Glue.ml[73,2063+11]..lib/Glue.ml[73,2063+12])
                              Tpat_var "f/1373"
                            expression (lib/Glue.ml[73,2063+13]..lib/Glue.ml[76,2126+7]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (lib/Glue.ml[73,2063+13]..lib/Glue.ml[73,2063+14])
                                    Tpat_var "m/1374"
                                  expression (lib/Glue.ml[74,2080+4]..lib/Glue.ml[76,2126+7])
                                    Texp_apply
                                    expression (lib/Glue.ml[74,2080+4]..lib/Glue.ml[74,2080+10])
                                      Texp_ident "M/1343.iter"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/Glue.ml[74,2080+11]..lib/Glue.ml[76,2126+5])
                                          Texp_function
                                          Nolabel
                                          [
                                            <case>
                                              pattern (lib/Glue.ml[74,2080+16]..lib/Glue.ml[74,2080+17])
                                                Tpat_var "x/1375"
                                              expression (lib/Glue.ml[74,2080+18]..lib/Glue.ml[75,2103+22]) ghost
                                                Texp_function
                                                Nolabel
                                                [
                                                  <case>
                                                    pattern (lib/Glue.ml[74,2080+18]..lib/Glue.ml[74,2080+19])
                                                      Tpat_var "y/1376"
                                                    expression (lib/Glue.ml[75,2103+6]..lib/Glue.ml[75,2103+22])
                                                      Texp_apply
                                                      expression (lib/Glue.ml[75,2103+6]..lib/Glue.ml[75,2103+7])
                                                        Texp_ident "f/1373"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/Glue.ml[75,2103+8]..lib/Glue.ml[75,2103+20])
                                                            Texp_apply
                                                            expression (lib/Glue.ml[75,2103+9]..lib/Glue.ml[75,2103+17])
                                                              Texp_ident "J/1351.decode"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/Glue.ml[75,2103+18]..lib/Glue.ml[75,2103+19])
                                                                  Texp_ident "x/1375"
                                                            ]
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/Glue.ml[75,2103+21]..lib/Glue.ml[75,2103+22])
                                                            Texp_ident "y/1376"
                                                      ]
                                                ]
                                          ]
                                      <arg>
                                        Nolabel
                                        expression (lib/Glue.ml[76,2126+6]..lib/Glue.ml[76,2126+7])
                                          Texp_ident "m/1374"
                                    ]
                              ]
                        ]
                  ]
              ]
  structure_item (lib/Glue.ml[79,2139+0]..lib/Glue.ml[102,2447+3])
    Tstr_module
    PersistentMapsToImperativeMaps/1406
      module_expr (lib/Glue.ml[79,2139+38]..lib/Glue.ml[102,2447+3])
        Tmod_functor "M/1384"
        module_type (lib/Glue.ml[79,2139+43]..lib/Glue.ml[79,2139+58])
          Tmty_ident "Gbnf_parser!.Sigs.PERSISTENT_MAPS"
        module_expr (lib/Glue.ml[79,2139+62]..lib/Glue.ml[102,2447+3])
          Tmod_structure
          [
            structure_item (lib/Glue.ml[81,2209+2]..lib/Glue.ml[82,2222+9])
              Tstr_type Rec
              [
                type_declaration key/1385 (lib/Glue.ml[81,2209+2]..lib/Glue.ml[82,2222+9])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[82,2222+4]..lib/Glue.ml[82,2222+9])
                        Ttyp_constr "M/1384.key"
                        []
              ]
            structure_item (lib/Glue.ml[84,2233+2]..lib/Glue.ml[85,2250+17])
              Tstr_type Rec
              [
                type_declaration t/1386 (lib/Glue.ml[84,2233+2]..lib/Glue.ml[85,2250+17])
                  ptype_params =
                    [
                      core_type (lib/Glue.ml[84,2233+7]..lib/Glue.ml[84,2233+12])
                        Ttyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[85,2250+4]..lib/Glue.ml[85,2250+17])
                        Ttyp_constr "Stdlib!.ref"
                        [
                          core_type (lib/Glue.ml[85,2250+4]..lib/Glue.ml[85,2250+13])
                            Ttyp_constr "M/1384.t"
                            [
                              core_type (lib/Glue.ml[85,2250+4]..lib/Glue.ml[85,2250+9])
                                Ttyp_var data
                            ]
                        ]
              ]
            structure_item (lib/Glue.ml[87,2269+2]..lib/Glue.ml[88,2287+15])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[87,2269+6]..lib/Glue.ml[87,2269+12])
                    Tpat_var "create/1387"
                  expression (lib/Glue.ml[87,2269+13]..lib/Glue.ml[88,2287+15]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[87,2269+13]..lib/Glue.ml[87,2269+15])
                          Tpat_construct "()"
                          []
                          None
                        expression (lib/Glue.ml[88,2287+4]..lib/Glue.ml[88,2287+15])
                          Texp_apply
                          expression (lib/Glue.ml[88,2287+4]..lib/Glue.ml[88,2287+7])
                            Texp_ident "Stdlib!.ref"
                          [
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[88,2287+8]..lib/Glue.ml[88,2287+15])
                                Texp_ident "M/1384.empty"
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[90,2304+2]..lib/Glue.ml[91,2320+16])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[90,2304+6]..lib/Glue.ml[90,2304+11])
                    Tpat_var "clear/1390"
                  expression (lib/Glue.ml[90,2304+12]..lib/Glue.ml[91,2320+16]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[90,2304+12]..lib/Glue.ml[90,2304+13])
                          Tpat_var "t/1392"
                        expression (lib/Glue.ml[91,2320+4]..lib/Glue.ml[91,2320+16])
                          Texp_apply
                          expression (lib/Glue.ml[91,2320+6]..lib/Glue.ml[91,2320+8])
                            Texp_ident "Stdlib!.:="
                          [
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[91,2320+4]..lib/Glue.ml[91,2320+5])
                                Texp_ident "t/1392"
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[91,2320+9]..lib/Glue.ml[91,2320+16])
                                Texp_ident "M/1384.empty"
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[93,2338+2]..lib/Glue.ml[94,2356+21])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[93,2338+6]..lib/Glue.ml[93,2338+9])
                    Tpat_var "add/1393"
                  expression (lib/Glue.ml[93,2338+10]..lib/Glue.ml[94,2356+21]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[93,2338+10]..lib/Glue.ml[93,2338+11])
                          Tpat_var "k/1395"
                        expression (lib/Glue.ml[93,2338+12]..lib/Glue.ml[94,2356+21]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[93,2338+12]..lib/Glue.ml[93,2338+13])
                                Tpat_var "d/1396"
                              expression (lib/Glue.ml[93,2338+14]..lib/Glue.ml[94,2356+21]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (lib/Glue.ml[93,2338+14]..lib/Glue.ml[93,2338+15])
                                      Tpat_var "t/1397"
                                    expression (lib/Glue.ml[94,2356+4]..lib/Glue.ml[94,2356+21])
                                      Texp_apply
                                      expression (lib/Glue.ml[94,2356+6]..lib/Glue.ml[94,2356+8])
                                        Texp_ident "Stdlib!.:="
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[94,2356+4]..lib/Glue.ml[94,2356+5])
                                            Texp_ident "t/1397"
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[94,2356+9]..lib/Glue.ml[94,2356+21])
                                            Texp_apply
                                            expression (lib/Glue.ml[94,2356+9]..lib/Glue.ml[94,2356+14])
                                              Texp_ident "M/1384.add"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/Glue.ml[94,2356+15]..lib/Glue.ml[94,2356+16])
                                                  Texp_ident "k/1395"
                                              <arg>
                                                Nolabel
                                                expression (lib/Glue.ml[94,2356+17]..lib/Glue.ml[94,2356+18])
                                                  Texp_ident "d/1396"
                                              <arg>
                                                Nolabel
                                                expression (lib/Glue.ml[94,2356+19]..lib/Glue.ml[94,2356+21])
                                                  Texp_apply
                                                  expression (lib/Glue.ml[94,2356+19]..lib/Glue.ml[94,2356+20])
                                                    Texp_ident "Stdlib!.!"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/Glue.ml[94,2356+20]..lib/Glue.ml[94,2356+21])
                                                        Texp_ident "t/1397"
                                                  ]
                                            ]
                                      ]
                                ]
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[96,2379+2]..lib/Glue.ml[97,2396+15])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[96,2379+6]..lib/Glue.ml[96,2379+10])
                    Tpat_var "find/1398"
                  expression (lib/Glue.ml[96,2379+11]..lib/Glue.ml[97,2396+15]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[96,2379+11]..lib/Glue.ml[96,2379+12])
                          Tpat_var "k/1400"
                        expression (lib/Glue.ml[96,2379+13]..lib/Glue.ml[97,2396+15]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[96,2379+13]..lib/Glue.ml[96,2379+14])
                                Tpat_var "t/1401"
                              expression (lib/Glue.ml[97,2396+4]..lib/Glue.ml[97,2396+15])
                                Texp_apply
                                expression (lib/Glue.ml[97,2396+4]..lib/Glue.ml[97,2396+10])
                                  Texp_ident "M/1384.find"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[97,2396+11]..lib/Glue.ml[97,2396+12])
                                      Texp_ident "k/1400"
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[97,2396+13]..lib/Glue.ml[97,2396+15])
                                      Texp_apply
                                      expression (lib/Glue.ml[97,2396+13]..lib/Glue.ml[97,2396+14])
                                        Texp_ident "Stdlib!.!"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[97,2396+14]..lib/Glue.ml[97,2396+15])
                                            Texp_ident "t/1401"
                                      ]
                                ]
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[99,2413+2]..lib/Glue.ml[100,2430+15])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[99,2413+6]..lib/Glue.ml[99,2413+10])
                    Tpat_var "iter/1402"
                  expression (lib/Glue.ml[99,2413+11]..lib/Glue.ml[100,2430+15]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[99,2413+11]..lib/Glue.ml[99,2413+12])
                          Tpat_var "f/1404"
                        expression (lib/Glue.ml[99,2413+13]..lib/Glue.ml[100,2430+15]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[99,2413+13]..lib/Glue.ml[99,2413+14])
                                Tpat_var "t/1405"
                              expression (lib/Glue.ml[100,2430+4]..lib/Glue.ml[100,2430+15])
                                Texp_apply
                                expression (lib/Glue.ml[100,2430+4]..lib/Glue.ml[100,2430+10])
                                  Texp_ident "M/1384.iter"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[100,2430+11]..lib/Glue.ml[100,2430+12])
                                      Texp_ident "f/1404"
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[100,2430+13]..lib/Glue.ml[100,2430+15])
                                      Texp_apply
                                      expression (lib/Glue.ml[100,2430+13]..lib/Glue.ml[100,2430+14])
                                        Texp_ident "Stdlib!.!"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[100,2430+14]..lib/Glue.ml[100,2430+15])
                                            Texp_ident "t/1405"
                                      ]
                                ]
                          ]
                    ]
              ]
          ]
  structure_item (lib/Glue.ml[104,2452+0]..lib/Glue.ml[139,2960+3])
    Tstr_module
    ArraysAsImperativeMaps/1481
      module_expr (lib/Glue.ml[104,2452+30]..lib/Glue.ml[139,2960+3])
        Tmod_functor "K/1408"
        module_type (lib/Glue.ml[104,2452+35]..lib/Glue.ml[104,2452+53])
          Tmty_signature
          [
            signature_item (lib/Glue.ml[104,2452+39]..lib/Glue.ml[104,2452+49])
              Tsig_value
              value_description n/1407 (lib/Glue.ml[104,2452+39]..lib/Glue.ml[104,2452+49])
                core_type (lib/Glue.ml[104,2452+46]..lib/Glue.ml[104,2452+49])
                  Ttyp_constr "int/1!"
                  []
                []
          ]
        module_expr (lib/Glue.ml[104,2452+57]..lib/Glue.ml[139,2960+3])
          Tmod_structure
          [
            structure_item (lib/Glue.ml[106,2517+2]..lib/Glue.ml[106,2517+8])
              Tstr_open Fresh
              module_expr (lib/Glue.ml[106,2517+7]..lib/Glue.ml[106,2517+8])
                Tmod_ident "K/1408"
            structure_item (lib/Glue.ml[108,2527+2]..lib/Glue.ml[109,2540+7])
              Tstr_type Rec
              [
                type_declaration key/1409 (lib/Glue.ml[108,2527+2]..lib/Glue.ml[109,2540+7])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[109,2540+4]..lib/Glue.ml[109,2540+7])
                        Ttyp_constr "int/1!"
                        []
              ]
            structure_item (lib/Glue.ml[111,2549+2]..lib/Glue.ml[112,2566+22])
              Tstr_type Rec
              [
                type_declaration t/1410 (lib/Glue.ml[111,2549+2]..lib/Glue.ml[112,2566+22])
                  ptype_params =
                    [
                      core_type (lib/Glue.ml[111,2549+7]..lib/Glue.ml[111,2549+12])
                        Ttyp_var data
                    ]
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[112,2566+4]..lib/Glue.ml[112,2566+22])
                        Ttyp_constr "array/8!"
                        [
                          core_type (lib/Glue.ml[112,2566+4]..lib/Glue.ml[112,2566+16])
                            Ttyp_constr "option/10!"
                            [
                              core_type (lib/Glue.ml[112,2566+4]..lib/Glue.ml[112,2566+9])
                                Ttyp_var data
                            ]
                        ]
              ]
            structure_item (lib/Glue.ml[114,2590+2]..lib/Glue.ml[115,2608+21])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[114,2590+6]..lib/Glue.ml[114,2590+12])
                    Tpat_var "create/1411"
                  expression (lib/Glue.ml[114,2590+13]..lib/Glue.ml[115,2608+21]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[114,2590+13]..lib/Glue.ml[114,2590+15])
                          Tpat_construct "()"
                          []
                          None
                        expression (lib/Glue.ml[115,2608+4]..lib/Glue.ml[115,2608+21])
                          Texp_apply
                          expression (lib/Glue.ml[115,2608+4]..lib/Glue.ml[115,2608+14])
                            Texp_ident "Stdlib!.Array.make"
                          [
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[115,2608+15]..lib/Glue.ml[115,2608+16])
                                Texp_ident "K/1408.n"
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[115,2608+17]..lib/Glue.ml[115,2608+21])
                                Texp_construct "None"
                                []
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[117,2631+2]..lib/Glue.ml[118,2647+25])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[117,2631+6]..lib/Glue.ml[117,2631+11])
                    Tpat_var "clear/1461"
                  expression (lib/Glue.ml[117,2631+12]..lib/Glue.ml[118,2647+25]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[117,2631+12]..lib/Glue.ml[117,2631+13])
                          Tpat_var "m/1463"
                        expression (lib/Glue.ml[118,2647+4]..lib/Glue.ml[118,2647+25])
                          Texp_apply
                          expression (lib/Glue.ml[118,2647+4]..lib/Glue.ml[118,2647+14])
                            Texp_ident "Stdlib!.Array.fill"
                          [
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[118,2647+15]..lib/Glue.ml[118,2647+16])
                                Texp_ident "m/1463"
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[118,2647+17]..lib/Glue.ml[118,2647+18])
                                Texp_constant Const_int 0
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[118,2647+19]..lib/Glue.ml[118,2647+20])
                                Texp_ident "K/1408.n"
                            <arg>
                              Nolabel
                              expression (lib/Glue.ml[118,2647+21]..lib/Glue.ml[118,2647+25])
                                Texp_construct "None"
                                []
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[120,2674+2]..lib/Glue.ml[121,2697+24])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[120,2674+6]..lib/Glue.ml[120,2674+9])
                    Tpat_var "add/1464"
                  expression (lib/Glue.ml[120,2674+10]..lib/Glue.ml[121,2697+24]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[120,2674+10]..lib/Glue.ml[120,2674+13])
                          Tpat_var "key/1466"
                        expression (lib/Glue.ml[120,2674+14]..lib/Glue.ml[121,2697+24]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[120,2674+14]..lib/Glue.ml[120,2674+18])
                                Tpat_var "data/1467"
                              expression (lib/Glue.ml[120,2674+19]..lib/Glue.ml[121,2697+24]) ghost
                                Texp_function
                                Nolabel
                                [
                                  <case>
                                    pattern (lib/Glue.ml[120,2674+19]..lib/Glue.ml[120,2674+20])
                                      Tpat_var "m/1468"
                                    expression (lib/Glue.ml[121,2697+4]..lib/Glue.ml[121,2697+24])
                                      Texp_apply
                                      expression (lib/Glue.ml[121,2697+4]..lib/Glue.ml[121,2697+24]) ghost
                                        Texp_ident "Stdlib!.Array.set"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[121,2697+4]..lib/Glue.ml[121,2697+5])
                                            Texp_ident "m/1468"
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[121,2697+7]..lib/Glue.ml[121,2697+10])
                                            Texp_ident "key/1466"
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[121,2697+15]..lib/Glue.ml[121,2697+24])
                                            Texp_construct "Some"
                                            [
                                              expression (lib/Glue.ml[121,2697+20]..lib/Glue.ml[121,2697+24])
                                                Texp_ident "data/1467"
                                            ]
                                      ]
                                ]
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[123,2723+2]..lib/Glue.ml[128,2815+5])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[123,2723+6]..lib/Glue.ml[123,2723+10])
                    Tpat_var "find/1469"
                  expression (lib/Glue.ml[123,2723+11]..lib/Glue.ml[128,2815+5]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[123,2723+11]..lib/Glue.ml[123,2723+14])
                          Tpat_var "key/1471"
                        expression (lib/Glue.ml[123,2723+15]..lib/Glue.ml[128,2815+5]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[123,2723+15]..lib/Glue.ml[123,2723+16])
                                Tpat_var "m/1472"
                              expression (lib/Glue.ml[124,2742+4]..lib/Glue.ml[128,2815+5])
                                Texp_match
                                expression (lib/Glue.ml[124,2742+10]..lib/Glue.ml[124,2742+17])
                                  Texp_apply
                                  expression (lib/Glue.ml[124,2742+10]..lib/Glue.ml[124,2742+17]) ghost
                                    Texp_ident "Stdlib!.Array.get"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[124,2742+10]..lib/Glue.ml[124,2742+11])
                                        Texp_ident "m/1472"
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[124,2742+13]..lib/Glue.ml[124,2742+16])
                                        Texp_ident "key/1471"
                                  ]
                                [
                                  <case>
                                    pattern (lib/Glue.ml[125,2765+6]..lib/Glue.ml[125,2765+10])
                                      Tpat_value
                                      pattern (lib/Glue.ml[125,2765+6]..lib/Glue.ml[125,2765+10])
                                        Tpat_construct "None"
                                        []
                                        None
                                    expression (lib/Glue.ml[126,2779+1]..lib/Glue.ml[126,2779+16])
                                      Texp_apply
                                      expression (lib/Glue.ml[126,2779+1]..lib/Glue.ml[126,2779+6])
                                        Texp_ident "Stdlib!.raise"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Glue.ml[126,2779+7]..lib/Glue.ml[126,2779+16])
                                            Texp_construct "Not_found"
                                            []
                                      ]
                                  <case>
                                    pattern (lib/Glue.ml[127,2796+6]..lib/Glue.ml[127,2796+15])
                                      Tpat_value
                                      pattern (lib/Glue.ml[127,2796+6]..lib/Glue.ml[127,2796+15])
                                        Tpat_construct "Some"
                                        [
                                          pattern (lib/Glue.ml[127,2796+11]..lib/Glue.ml[127,2796+15])
                                            Tpat_var "data/1473"
                                        ]
                                        None
                                    expression (lib/Glue.ml[128,2815+1]..lib/Glue.ml[128,2815+5])
                                      Texp_ident "data/1473"
                                ]
                          ]
                    ]
              ]
            structure_item (lib/Glue.ml[130,2822+2]..lib/Glue.ml[137,2951+7])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[130,2822+6]..lib/Glue.ml[130,2822+10])
                    Tpat_var "iter/1474"
                  expression (lib/Glue.ml[130,2822+11]..lib/Glue.ml[137,2951+7]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[130,2822+11]..lib/Glue.ml[130,2822+12])
                          Tpat_var "f/1476"
                        expression (lib/Glue.ml[130,2822+13]..lib/Glue.ml[137,2951+7]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[130,2822+13]..lib/Glue.ml[130,2822+14])
                                Tpat_var "m/1477"
                              expression (lib/Glue.ml[131,2839+4]..lib/Glue.ml[137,2951+7])
                                Texp_apply
                                expression (lib/Glue.ml[131,2839+4]..lib/Glue.ml[131,2839+15])
                                  Texp_ident "Stdlib!.Array.iteri"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[131,2839+16]..lib/Glue.ml[137,2951+5])
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (lib/Glue.ml[131,2839+21]..lib/Glue.ml[131,2839+24])
                                            Tpat_var "key/1478"
                                          expression (lib/Glue.ml[131,2839+25]..lib/Glue.ml[136,2937+13]) ghost
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (lib/Glue.ml[131,2839+25]..lib/Glue.ml[131,2839+29])
                                                  Tpat_var "data/1479"
                                                expression (lib/Glue.ml[132,2872+6]..lib/Glue.ml[136,2937+13])
                                                  Texp_match
                                                  expression (lib/Glue.ml[132,2872+12]..lib/Glue.ml[132,2872+16])
                                                    Texp_ident "data/1479"
                                                  [
                                                    <case>
                                                      pattern (lib/Glue.ml[133,2894+8]..lib/Glue.ml[133,2894+12])
                                                        Tpat_value
                                                        pattern (lib/Glue.ml[133,2894+8]..lib/Glue.ml[133,2894+12])
                                                          Tpat_construct "None"
                                                          []
                                                          None
                                                      expression (lib/Glue.ml[134,2910+3]..lib/Glue.ml[134,2910+5])
                                                        Texp_construct "()"
                                                        []
                                                    <case>
                                                      pattern (lib/Glue.ml[135,2916+8]..lib/Glue.ml[135,2916+17])
                                                        Tpat_value
                                                        pattern (lib/Glue.ml[135,2916+8]..lib/Glue.ml[135,2916+17])
                                                          Tpat_construct "Some"
                                                          [
                                                            pattern (lib/Glue.ml[135,2916+13]..lib/Glue.ml[135,2916+17])
                                                              Tpat_var "data/1480"
                                                          ]
                                                          None
                                                      expression (lib/Glue.ml[136,2937+3]..lib/Glue.ml[136,2937+13])
                                                        Texp_apply
                                                        expression (lib/Glue.ml[136,2937+3]..lib/Glue.ml[136,2937+4])
                                                          Texp_ident "f/1476"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/Glue.ml[136,2937+5]..lib/Glue.ml[136,2937+8])
                                                              Texp_ident "key/1478"
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/Glue.ml[136,2937+9]..lib/Glue.ml[136,2937+13])
                                                              Texp_ident "data/1480"
                                                        ]
                                                  ]
                                            ]
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (lib/Glue.ml[137,2951+6]..lib/Glue.ml[137,2951+7])
                                      Texp_ident "m/1477"
                                ]
                          ]
                    ]
              ]
          ]
  structure_item (lib/Glue.ml[141,2965+0]..lib/Glue.ml[156,3222+3])
    Tstr_module
    Adapt/1658
      module_expr (lib/Glue.ml[141,2965+13]..lib/Glue.ml[156,3222+3])
        Tmod_functor "T/1506"
        module_type (lib/Glue.ml[141,2965+18]..lib/Glue.ml[141,2965+27])
          Tmty_ident "Stdlib!.Hashtbl.S"
        module_expr (lib/Glue.ml[141,2965+31]..lib/Glue.ml[156,3222+3])
          module_expr (lib/Glue.ml[141,2965+31]..lib/Glue.ml[156,3222+3])
            Tmod_structure
            [
              structure_item (lib/Glue.ml[143,3004+2]..lib/Glue.ml[143,3004+11])
                Tstr_include                module_expr (lib/Glue.ml[143,3004+10]..lib/Glue.ml[143,3004+11])
                  Tmod_ident "T/1506"
              structure_item (lib/Glue.ml[147,3087+2]..lib/Glue.ml[148,3105+17])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[147,3087+6]..lib/Glue.ml[147,3087+12])
                      Tpat_var "create/1531"
                    expression (lib/Glue.ml[147,3087+13]..lib/Glue.ml[148,3105+17]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[147,3087+13]..lib/Glue.ml[147,3087+15])
                            Tpat_construct "()"
                            []
                            None
                          expression (lib/Glue.ml[148,3105+4]..lib/Glue.ml[148,3105+17])
                            Texp_apply
                            expression (lib/Glue.ml[148,3105+4]..lib/Glue.ml[148,3105+12])
                              Texp_ident "T/1506.create"
                            [
                              <arg>
                                Nolabel
                                expression (lib/Glue.ml[148,3105+13]..lib/Glue.ml[148,3105+17])
                                  Texp_constant Const_int 1023
                            ]
                      ]
                ]
              structure_item (lib/Glue.ml[150,3124+2]..lib/Glue.ml[151,3151+24])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[150,3124+6]..lib/Glue.ml[150,3124+9])
                      Tpat_var "add/1533"
                    expression (lib/Glue.ml[150,3124+10]..lib/Glue.ml[151,3151+24]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[150,3124+10]..lib/Glue.ml[150,3124+13])
                            Tpat_var "key/1534"
                          expression (lib/Glue.ml[150,3124+14]..lib/Glue.ml[151,3151+24]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[150,3124+14]..lib/Glue.ml[150,3124+18])
                                  Tpat_var "data/1535"
                                expression (lib/Glue.ml[150,3124+19]..lib/Glue.ml[151,3151+24]) ghost
                                  Texp_function
                                  Nolabel
                                  [
                                    <case>
                                      pattern (lib/Glue.ml[150,3124+19]..lib/Glue.ml[150,3124+24])
                                        Tpat_var "table/1536"
                                      expression (lib/Glue.ml[151,3151+4]..lib/Glue.ml[151,3151+24])
                                        Texp_apply
                                        expression (lib/Glue.ml[151,3151+4]..lib/Glue.ml[151,3151+9])
                                          Texp_ident "T/1506.add"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[151,3151+10]..lib/Glue.ml[151,3151+15])
                                              Texp_ident "table/1536"
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[151,3151+16]..lib/Glue.ml[151,3151+19])
                                              Texp_ident "key/1534"
                                          <arg>
                                            Nolabel
                                            expression (lib/Glue.ml[151,3151+20]..lib/Glue.ml[151,3151+24])
                                              Texp_ident "data/1535"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (lib/Glue.ml[153,3177+2]..lib/Glue.ml[154,3200+20])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/Glue.ml[153,3177+6]..lib/Glue.ml[153,3177+10])
                      Tpat_var "find/1537"
                    expression (lib/Glue.ml[153,3177+11]..lib/Glue.ml[154,3200+20]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/Glue.ml[153,3177+11]..lib/Glue.ml[153,3177+16])
                            Tpat_var "table/1538"
                          expression (lib/Glue.ml[153,3177+17]..lib/Glue.ml[154,3200+20]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Glue.ml[153,3177+17]..lib/Glue.ml[153,3177+20])
                                  Tpat_var "key/1539"
                                expression (lib/Glue.ml[154,3200+4]..lib/Glue.ml[154,3200+20])
                                  Texp_apply
                                  expression (lib/Glue.ml[154,3200+4]..lib/Glue.ml[154,3200+10])
                                    Texp_ident "T/1506.find"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[154,3200+11]..lib/Glue.ml[154,3200+14])
                                        Texp_ident "key/1539"
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[154,3200+15]..lib/Glue.ml[154,3200+20])
                                        Texp_ident "table/1538"
                                  ]
                            ]
                      ]
                ]
            ]
  structure_item (lib/Glue.ml[158,3227+0]..lib/Glue.ml[159,3280+24])
    Tstr_module
    HashTablesAsImperativeMaps/1780
      module_expr (lib/Glue.ml[158,3227+34]..lib/Glue.ml[159,3280+24])
        Tmod_functor "H/1659"
        module_type (lib/Glue.ml[158,3227+39]..lib/Glue.ml[158,3227+49])
          Tmty_ident "Gbnf_parser!.Sigs.HashedType"
        module_expr (lib/Glue.ml[159,3280+2]..lib/Glue.ml[159,3280+24])
          Tmod_apply
          module_expr (lib/Glue.ml[159,3280+2]..lib/Glue.ml[159,3280+7])
            Tmod_ident "Adapt/1658"
          module_expr (lib/Glue.ml[159,3280+8]..lib/Glue.ml[159,3280+23])
            Tmod_apply
            module_expr (lib/Glue.ml[159,3280+8]..lib/Glue.ml[159,3280+20])
              module_expr (lib/Glue.ml[159,3280+8]..lib/Glue.ml[159,3280+20])
                Tmod_ident "Stdlib!.Hashtbl.Make"
            module_expr (lib/Glue.ml[159,3280+21]..lib/Glue.ml[159,3280+22])
              Tmod_ident "H/1659"
  structure_item (lib/Glue.ml[161,3306+0]..lib/Glue.ml[172,3476+3])
    Tstr_module
    MinimalSemiLattice/1790
      module_expr (lib/Glue.ml[161,3306+26]..lib/Glue.ml[172,3476+3])
        Tmod_functor "P/1784"
        module_type (lib/Glue.ml[161,3306+31]..lib/Glue.ml[161,3306+43])
          Tmty_ident "Gbnf_parser!.Sigs.SEMI_LATTICE"
        module_expr (lib/Glue.ml[161,3306+47]..lib/Glue.ml[172,3476+3])
          Tmod_structure
          [
            structure_item (lib/Glue.ml[163,3361+2]..lib/Glue.ml[164,3379+14])
              Tstr_type Rec
              [
                type_declaration property/1785 (lib/Glue.ml[163,3361+2]..lib/Glue.ml[164,3379+14])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Glue.ml[164,3379+4]..lib/Glue.ml[164,3379+14])
                        Ttyp_constr "P/1784.property"
                        []
              ]
            structure_item (lib/Glue.ml[166,3395+2]..lib/Glue.ml[170,3457+17])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Glue.ml[166,3395+6]..lib/Glue.ml[166,3395+14])
                    Tpat_var "leq_join/1786"
                  expression (lib/Glue.ml[166,3395+15]..lib/Glue.ml[170,3457+17]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Glue.ml[166,3395+15]..lib/Glue.ml[166,3395+17])
                          Tpat_var "p'/1788"
                        expression (lib/Glue.ml[166,3395+18]..lib/Glue.ml[170,3457+17]) ghost
                          Texp_function
                          Nolabel
                          [
                            <case>
                              pattern (lib/Glue.ml[166,3395+18]..lib/Glue.ml[166,3395+19])
                                Tpat_var "p/1789"
                              expression (lib/Glue.ml[167,3417+4]..lib/Glue.ml[170,3457+17])
                                Texp_ifthenelse
                                expression (lib/Glue.ml[167,3417+7]..lib/Glue.ml[167,3417+17])
                                  Texp_apply
                                  expression (lib/Glue.ml[167,3417+7]..lib/Glue.ml[167,3417+12])
                                    Texp_ident "P/1784.leq"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[167,3417+13]..lib/Glue.ml[167,3417+15])
                                        Texp_ident "p'/1788"
                                    <arg>
                                      Nolabel
                                      expression (lib/Glue.ml[167,3417+16]..lib/Glue.ml[167,3417+17])
                                        Texp_ident "p/1789"
                                  ]
                                expression (lib/Glue.ml[168,3440+6]..lib/Glue.ml[168,3440+7])
                                  Texp_ident "p/1789"
                                Some
                                  expression (lib/Glue.ml[170,3457+6]..lib/Glue.ml[170,3457+17])
                                    Texp_apply
                                    expression (lib/Glue.ml[170,3457+6]..lib/Glue.ml[170,3457+12])
                                      Texp_ident "P/1784.join"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/Glue.ml[170,3457+13]..lib/Glue.ml[170,3457+15])
                                          Texp_ident "p'/1788"
                                      <arg>
                                        Nolabel
                                        expression (lib/Glue.ml[170,3457+16]..lib/Glue.ml[170,3457+17])
                                          Texp_ident "p/1789"
                                    ]
                          ]
                    ]
              ]
          ]
  structure_item (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Texp_apply
          expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost,None)
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Texp_apply
          expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Texp_apply
          expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
          Texp_apply
          expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/Glue.ml[172,3476+3]..lib/Glue.ml[172,3476+3]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__Glue>
 "Adapt"[module] ->
     Abs<Gbnf_parser__Glue.105>
        (T/1506,
         {
          "add"[value] -> <Gbnf_parser__Glue.98>;
          "add_seq"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "add_seq"[value];
          "clear"[value] -> T/1506<Gbnf_parser__Glue.96> . "clear"[value];
          "copy"[value] -> T/1506<Gbnf_parser__Glue.96> . "copy"[value];
          "create"[value] -> <Gbnf_parser__Glue.97>;
          "filter_map_inplace"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "filter_map_inplace"[value];
          "find"[value] -> <Gbnf_parser__Glue.102>;
          "find_all"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "find_all"[value];
          "find_opt"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "find_opt"[value];
          "fold"[value] -> T/1506<Gbnf_parser__Glue.96> . "fold"[value];
          "iter"[value] -> T/1506<Gbnf_parser__Glue.96> . "iter"[value];
          "key"[type] -> T/1506<Gbnf_parser__Glue.96> . "key"[type];
          "length"[value] -> T/1506<Gbnf_parser__Glue.96> . "length"[value];
          "mem"[value] -> T/1506<Gbnf_parser__Glue.96> . "mem"[value];
          "of_seq"[value] -> T/1506<Gbnf_parser__Glue.96> . "of_seq"[value];
          "remove"[value] -> T/1506<Gbnf_parser__Glue.96> . "remove"[value];
          "replace"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "replace"[value];
          "replace_seq"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "replace_seq"[value];
          "reset"[value] -> T/1506<Gbnf_parser__Glue.96> . "reset"[value];
          "stats"[value] -> T/1506<Gbnf_parser__Glue.96> . "stats"[value];
          "t"[type] -> T/1506<Gbnf_parser__Glue.96> . "t"[type];
          "to_seq"[value] -> T/1506<Gbnf_parser__Glue.96> . "to_seq"[value];
          "to_seq_keys"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "to_seq_keys"[value];
          "to_seq_values"[value] ->
              T/1506<Gbnf_parser__Glue.96> . "to_seq_values"[value];
          });
 "ArraysAsImperativeMaps"[module] ->
     Abs<Gbnf_parser__Glue.95>
        (K/1408,
         {
          "add"[value] -> <Gbnf_parser__Glue.81>;
          "clear"[value] -> <Gbnf_parser__Glue.79>;
          "create"[value] -> <Gbnf_parser__Glue.78>;
          "find"[value] -> <Gbnf_parser__Glue.85>;
          "iter"[value] -> <Gbnf_parser__Glue.89>;
          "key"[type] -> <Gbnf_parser__Glue.76>;
          "t"[type] -> <Gbnf_parser__Glue.77>;
          });
 "CHAR"[module] ->
     {<Gbnf_parser__Glue.1>
      "t"[type] -> <Gbnf_parser__Glue.0>;
      };
 "HashTablesAsImperativeMaps"[module] ->
     Abs<Gbnf_parser__Glue.107>
        (H/1659,
         {
          "add"[value] -> <Gbnf_parser__Glue.98>;
          "add_seq"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "add_seq"[value];
          "clear"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "clear"[value];
          "copy"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "copy"[value];
          "create"[value] -> <Gbnf_parser__Glue.97>;
          "filter_map_inplace"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "filter_map_inplace"[value];
          "find"[value] -> <Gbnf_parser__Glue.102>;
          "find_all"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "find_all"[value];
          "find_opt"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "find_opt"[value];
          "fold"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "fold"[value];
          "iter"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "iter"[value];
          "key"[type] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "key"[type];
          "length"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "length"[value];
          "mem"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "mem"[value];
          "of_seq"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "of_seq"[value];
          "remove"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "remove"[value];
          "replace"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "replace"[value];
          "replace_seq"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "replace_seq"[value];
          "reset"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "reset"[value];
          "stats"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "stats"[value];
          "t"[type] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "t"[type];
          "to_seq"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "to_seq"[value];
          "to_seq_keys"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "to_seq_keys"[value];
          "to_seq_values"[value] ->
              CU Stdlib . "Hashtbl"[module] . "Make"[module](
              H/1659<Gbnf_parser__Glue.106>) . "to_seq_values"[value];
          });
 "INT"[module] -> {<Gbnf_parser__Glue.3>
                   "t"[type] -> <Gbnf_parser__Glue.2>;
                   };
 "InjectHashedType"[module] ->
     Abs<Gbnf_parser__Glue.30>
        (U/1295,
         Abs
            (I/1301,
             {
              "equal"[value] -> <Gbnf_parser__Glue.25>;
              "hash"[value] -> <Gbnf_parser__Glue.28>;
              "t"[type] -> <Gbnf_parser__Glue.24>;
              }));
 "InjectImperativeMaps"[module] ->
     Abs<Gbnf_parser__Glue.56>
        (M/1343,
         Abs
            (I/1349,
             Abs
                (J/1351,
                 {
                  "add"[value] -> <Gbnf_parser__Glue.37>;
                  "clear"[value] -> <Gbnf_parser__Glue.50>;
                  "create"[value] -> <Gbnf_parser__Glue.36>;
                  "find"[value] -> <Gbnf_parser__Glue.41>;
                  "iter"[value] -> <Gbnf_parser__Glue.51>;
                  "key"[type] -> <Gbnf_parser__Glue.34>;
                  "t"[type] -> <Gbnf_parser__Glue.35>;
                  })));
 "InjectMinimalImperativeMaps"[module] ->
     Abs<Gbnf_parser__Glue.44>
        (M/1316,
         Abs
            (I/1322,
             {
              "add"[value] -> <Gbnf_parser__Glue.37>;
              "create"[value] -> <Gbnf_parser__Glue.36>;
              "find"[value] -> <Gbnf_parser__Glue.41>;
              "key"[type] -> <Gbnf_parser__Glue.34>;
              "t"[type] -> <Gbnf_parser__Glue.35>;
              }));
 "InjectOrderedType"[module] ->
     Abs<Gbnf_parser__Glue.20>
        (U/1236,
         Abs
            (I/1245,
             {
              "compare"[value] -> <Gbnf_parser__Glue.17>;
              "t"[type] -> <Gbnf_parser__Glue.16>;
              }));
 "MinimalSemiLattice"[module] ->
     Abs<Gbnf_parser__Glue.113>
        (P/1784,
         {
          "leq_join"[value] -> <Gbnf_parser__Glue.110>;
          "property"[type] -> <Gbnf_parser__Glue.109>;
          });
 "PersistentMapsToImperativeMaps"[module] ->
     Abs<Gbnf_parser__Glue.73>
        (M/1384,
         {
          "add"[value] -> <Gbnf_parser__Glue.63>;
          "clear"[value] -> <Gbnf_parser__Glue.61>;
          "create"[value] -> <Gbnf_parser__Glue.60>;
          "find"[value] -> <Gbnf_parser__Glue.67>;
          "iter"[value] -> <Gbnf_parser__Glue.70>;
          "key"[type] -> <Gbnf_parser__Glue.58>;
          "t"[type] -> <Gbnf_parser__Glue.59>;
          });
 "STRING"[module] ->
     {<Gbnf_parser__Glue.5>
      "t"[type] -> <Gbnf_parser__Glue.4>;
      };
 "TrivialHashedType"[module] ->
     Abs<Gbnf_parser__Glue.12>
        (T/1181,
         {
          "equal"[value] -> <Gbnf_parser__Glue.10>;
          "hash"[value] -> <Gbnf_parser__Glue.11>;
          "t"[type] -> T/1181<Gbnf_parser__Glue.9> . "t"[type];
          });
 "TrivialOrderedType"[module] ->
     Abs<Gbnf_parser__Glue.8>
        (T/1177,
         {
          "compare"[value] -> <Gbnf_parser__Glue.7>;
          "t"[type] -> T/1177<Gbnf_parser__Glue.6> . "t"[type];
          });
 }

(setglobal Gbnf_parser__Glue!
  (let
    (*match*/3481 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Glue"))
     *match*/3479 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/3477 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/Glue.ml"))
     *match*/3475 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "Glue.ml"))
     CHAR/1150 =
       (module-defn(CHAR/1150) Gbnf_parser__Glue lib/Glue.ml(15):904-944
         (pseudo Gbnf_parser__Glue.CHAR lib/Glue.ml(15):918-944
           (makeblock 0)))
     INT/1152 =
       (module-defn(INT/1152) Gbnf_parser__Glue lib/Glue.ml(19):946-984
         (pseudo Gbnf_parser__Glue.INT lib/Glue.ml(19):959-984 (makeblock 0)))
     STRING/1154 =
       (module-defn(STRING/1154) Gbnf_parser__Glue lib/Glue.ml(23):986-1030
         (pseudo Gbnf_parser__Glue.STRING lib/Glue.ml(23):1002-1030
           (makeblock 0)))
     TrivialOrderedType/1180 =
       (module-defn(TrivialOrderedType/1180) Gbnf_parser__Glue lib/Glue.ml(27):1032-1117
         (function T/3443 is_a_functor
           (let
             (T/1177 =a T/3443
              include/3440 =a T/1177
              compare/1179 =
                (function prim/3442 prim/3441 stub
                  (caml_compare prim/3442 prim/3441)))
             (pseudo Gbnf_parser__Glue.TrivialOrderedType lib/Glue.ml(27):1071-1117
               (makeblock 0 compare/1179)))))
     TrivialHashedType/1224 =
       (module-defn(TrivialHashedType/1224) Gbnf_parser__Glue lib/Glue.ml(32):1119-1223
         (function T/3447 is_a_functor
           (let
             (T/1181 =a T/3447
              include/3444 =a T/1181
              equal/1183 =
                (function prim/3446 prim/3445 stub
                  (caml_equal prim/3446 prim/3445))
              hash/1184 = (field 27 (global Stdlib__Hashtbl!)))
             (pseudo Gbnf_parser__Glue.TrivialHashedType lib/Glue.ml(32):1157-1223
               (makeblock 0 equal/1183 hash/1184)))))
     InjectOrderedType/1250 =
       (module-defn(InjectOrderedType/1250) Gbnf_parser__Glue lib/Glue.ml(38):1225-1390
         (function U/3449 I/3448 is_a_functor
           (let
             (U/1236 =a U/3449
              I/1245 =a I/3448
              compare/1247 =
                (function x/1248 y/1249 : int
                  (funct-body Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43)<ghost>:1345-1386
                    (before Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1351-1386
                      (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1351-1386
                        (apply (field 0 U/1236)
                          (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1361-1373
                            (apply (field 0 I/1245) x/1248))
                          (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1374-1386
                            (apply (field 0 I/1245) y/1249))))))))
             (pseudo Gbnf_parser__Glue.InjectOrderedType lib/Glue.ml(41):1309-1390
               (makeblock 0 compare/1247)))))
     InjectHashedType/1310 =
       (module-defn(InjectHashedType/1310) Gbnf_parser__Glue lib/Glue.ml(46):1392-1586
         (function U/3451 I/3450 is_a_functor
           (let
             (U/1295 =a U/3451
              I/1301 =a I/3450
              equal/1303 =
                (function x/1305 y/1306 : int
                  (funct-body Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51)<ghost>:1508-1547
                    (before Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1514-1547
                      (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1514-1547
                        (apply (field 0 U/1295)
                          (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1522-1534
                            (apply (field 0 I/1301) x/1305))
                          (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1535-1547
                            (apply (field 0 I/1301) y/1306)))))))
              hash/1307 =
                (function x/1309 : int
                  (funct-body Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52)<ghost>:1559-1582
                    (before Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1563-1582
                      (after Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1563-1582
                        (apply (field 1 U/1295)
                          (after Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1570-1582
                            (apply (field 0 I/1301) x/1309))))))))
             (pseudo Gbnf_parser__Glue.InjectHashedType lib/Glue.ml(49):1474-1586
               (makeblock 0 equal/1303 hash/1307)))))
     InjectMinimalImperativeMaps/1335 =
       (module-defn(InjectMinimalImperativeMaps/1335) Gbnf_parser__Glue lib/Glue.ml(55):1588-1854
         (function M/3453 I/3452 is_a_functor
           (let
             (M/1316 =a M/3453
              I/1322 =a I/3452
              create/1325 = (field 0 M/1316)
              add/1326 =
                (function x/1328 y/1329 m/1330 : int
                  (funct-body Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62)<ghost>:1781-1811
                    (before Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1789-1811
                      (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1789-1811
                        (apply (field 1 M/1316)
                          (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1795-1807
                            (apply (field 0 I/1322) x/1328))
                          y/1329 m/1330)))))
              find/1331 =
                (function x/1333 m/1334
                  (funct-body Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63)<ghost>:1823-1850
                    (before Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1829-1850
                      (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1829-1850
                        (apply (field 2 M/1316)
                          (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1836-1848
                            (apply (field 0 I/1322) x/1333))
                          m/1334))))))
             (pseudo Gbnf_parser__Glue.InjectMinimalImperativeMaps lib/Glue.ml(58):1696-1854
               (makeblock 0 create/1325 add/1326 find/1331)))))
     InjectImperativeMaps/1377 =
       (module-defn(InjectImperativeMaps/1377) Gbnf_parser__Glue lib/Glue.ml(66):1856-2137
         (function M/3457 I/3456 J/3455 is_a_functor
           (let
             (M/1343 =a M/3457
              I/1349 =a I/3456
              J/1351 =a J/3455
              include/3454 =
                (apply
                  (apply InjectMinimalImperativeMaps/1335
                    (makeblock 0 (field 0 M/1343) (field 1 M/1343)
                      (field 2 M/1343)))
                  I/1349)
              create/1367 =a (field 0 include/3454)
              add/1368 =a (field 1 include/3454)
              find/1369 =a (field 2 include/3454)
              clear/1370 = (field 3 M/1343)
              iter/1371 =
                (function f/1373 m/1374 : int
                  (funct-body Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(73)<ghost>:2074-2133
                    (before Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(74):2084-2133
                      (after Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(74):2084-2133
                        (apply (field 4 M/1343)
                          (function x/1375 y/1376 : int
                            (funct-body Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(74):2091-2131
                              (before Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2109-2125
                                (after Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2109-2125
                                  (apply f/1373
                                    (after Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2111-2123
                                      (apply (field 0 J/1351) x/1375))
                                    y/1376)))))
                          m/1374))))))
             (pseudo Gbnf_parser__Glue.InjectImperativeMaps lib/Glue.ml(70):1990-2137
               (makeblock 0 create/1367 add/1368 find/1369 clear/1370
                 iter/1371)))))
     PersistentMapsToImperativeMaps/1406 =
       (module-defn(PersistentMapsToImperativeMaps/1406) Gbnf_parser__Glue lib/Glue.ml(79):2139-2450
         (function M/3458 is_a_functor
           (let
             (M/1384 =a M/3458
              create/1387 =
                (function param/1389[int]
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.create lib/Glue.ml(87)<ghost>:2282-2302
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.create lib/Glue.ml(88):2291-2302
                      (makemutable 0 (field 0 M/1384)))))
              clear/1390 =
                (function t/1392 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.clear lib/Glue.ml(90)<ghost>:2316-2336
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.clear lib/Glue.ml(91):2324-2336
                      (setfield_ptr 0 t/1392 (field 0 M/1384)))))
              add/1393 =
                (function k/1395 d/1396 t/1397 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(93)<ghost>:2348-2377
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(94):2360-2377
                      (setfield_ptr 0 t/1397
                        (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(94):2365-2377
                          (apply (field 1 M/1384) k/1395 d/1396
                            (field 0 t/1397)))))))
              find/1398 =
                (function k/1400 t/1401
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(96)<ghost>:2390-2411
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(97):2400-2411
                      (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(97):2400-2411
                        (apply (field 2 M/1384) k/1400 (field 0 t/1401))))))
              iter/1402 =
                (function f/1404 t/1405 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(99)<ghost>:2424-2445
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(100):2434-2445
                      (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(100):2434-2445
                        (apply (field 3 M/1384) f/1404 (field 0 t/1405)))))))
             (pseudo Gbnf_parser__Glue.PersistentMapsToImperativeMaps lib/Glue.ml(79):2201-2450
               (makeblock 0 create/1387 clear/1390 add/1393 find/1398
                 iter/1402)))))
     ArraysAsImperativeMaps/1481 =
       (module-defn(ArraysAsImperativeMaps/1481) Gbnf_parser__Glue lib/Glue.ml(104):2452-2963
         (function K/3460 is_a_functor
           (let
             (K/1408 =a K/3460
              create/1411 =
                (function param/1460[int]
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(114)<ghost>:2603-2629
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(115):2612-2629
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(115):2612-2629
                        (caml_make_vect (field 0 K/1408) 0)))))
              clear/1461 =
                (function m/1463 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(117)<ghost>:2643-2672
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(118):2651-2672
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(118):2651-2672
                        (apply (field 8 (global Stdlib__Array!)) m/1463 0
                          (field 0 K/1408) 0)))))
              add/1464 =
                (function key/1466[int] data/1467 m/1468 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(120)<ghost>:2684-2721
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(121):2701-2721
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(121):2701-2721
                        (array.set[addr] m/1468 key/1466
                          (makeblock 0 data/1467))))))
              find/1469 =
                (function key/1471[int] m/1472
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(123)<ghost>:2734-2820
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(124):2746-2820
                      (let
                        (*match*/3459 =
                           (after Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(124):2752-2759
                             (array.get[addr] m/1472 key/1471)))
                        (if *match*/3459
                          (let (data/1473 =a (field 0 *match*/3459))
                            (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(128):2816-2820
                              data/1473))
                          (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(126):2780-2795
                            (raise
                              (after Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(126):2780-2795
                                (field 7 (global Stdlib!))))))))))
              iter/1474 =
                (function f/1476 m/1477 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(130)<ghost>:2833-2958
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(131):2843-2958
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(131):2843-2958
                        (apply (field 13 (global Stdlib__Array!))
                          (function key/1478[int] data/1479 : int
                            (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(131):2855-2956
                              (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(132):2878-2950
                                (if data/1479
                                  (let (data/1480 =a (field 0 data/1479))
                                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(136):2940-2950
                                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(136):2940-2950
                                        (apply f/1476 key/1478 data/1480))))
                                  (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(134):2913-2915
                                    0)))))
                          m/1477))))))
             (pseudo Gbnf_parser__Glue.ArraysAsImperativeMaps lib/Glue.ml(104):2509-2963
               (makeblock 0 create/1411 clear/1461 add/1464 find/1469
                 iter/1474)))))
     Adapt/1658 =
       (module-defn(Adapt/1658) Gbnf_parser__Glue lib/Glue.ml(141):2965-3225
         (function T/3462 is_a_functor
           (let
             (T/1506 =a T/3462
              include/3461 =a T/1506
              create/1509 =a (field 0 include/3461)
              clear/1510 =a (field 1 include/3461)
              reset/1511 =a (field 2 include/3461)
              copy/1512 =a (field 3 include/3461)
              add/1513 =a (field 4 include/3461)
              remove/1514 =a (field 5 include/3461)
              find/1515 =a (field 6 include/3461)
              find_opt/1516 =a (field 7 include/3461)
              find_all/1517 =a (field 8 include/3461)
              replace/1518 =a (field 9 include/3461)
              mem/1519 =a (field 10 include/3461)
              iter/1520 =a (field 11 include/3461)
              filter_map_inplace/1521 =a (field 12 include/3461)
              fold/1522 =a (field 13 include/3461)
              length/1523 =a (field 14 include/3461)
              stats/1524 =a (field 15 include/3461)
              to_seq/1525 =a (field 16 include/3461)
              to_seq_keys/1526 =a (field 17 include/3461)
              to_seq_values/1527 =a (field 18 include/3461)
              add_seq/1528 =a (field 19 include/3461)
              replace_seq/1529 =a (field 20 include/3461)
              of_seq/1530 =a (field 21 include/3461)
              create/1531 =
                (function param/1532[int]
                  (funct-body Gbnf_parser__Glue.Adapt.create lib/Glue.ml(147)<ghost>:3100-3122
                    (before Gbnf_parser__Glue.Adapt.create lib/Glue.ml(148):3109-3122
                      (after Gbnf_parser__Glue.Adapt.create lib/Glue.ml(148):3109-3122
                        (apply (field 0 T/1506) 1023)))))
              add/1533 =
                (function key/1534 data/1535 table/1536 : int
                  (funct-body Gbnf_parser__Glue.Adapt.add lib/Glue.ml(150)<ghost>:3134-3175
                    (before Gbnf_parser__Glue.Adapt.add lib/Glue.ml(151):3155-3175
                      (after Gbnf_parser__Glue.Adapt.add lib/Glue.ml(151):3155-3175
                        (apply (field 4 T/1506) table/1536 key/1534
                          data/1535)))))
              find/1537 =
                (function table/1538 key/1539
                  (funct-body Gbnf_parser__Glue.Adapt.find lib/Glue.ml(153)<ghost>:3188-3220
                    (before Gbnf_parser__Glue.Adapt.find lib/Glue.ml(154):3204-3220
                      (after Gbnf_parser__Glue.Adapt.find lib/Glue.ml(154):3204-3220
                        (apply (field 6 T/1506) key/1539 table/1538))))))
             (pseudo Gbnf_parser__Glue.Adapt lib/Glue.ml(141):2996-3225
               (makeblock 0 clear/1510 reset/1511 copy/1512 remove/1514
                 find_opt/1516 find_all/1517 replace/1518 mem/1519 iter/1520
                 filter_map_inplace/1521 fold/1522 length/1523 stats/1524
                 to_seq/1525 to_seq_keys/1526 to_seq_values/1527 add_seq/1528
                 replace_seq/1529 of_seq/1530 create/1531 add/1533 find/1537)))))
     HashTablesAsImperativeMaps/1780 =
       (module-defn(HashTablesAsImperativeMaps/1780) Gbnf_parser__Glue lib/Glue.ml(158):3227-3304
         (function H/3464 is_a_functor
           (let (H/1659 =a H/3464)
             (apply Adapt/1658
               (apply
                 (let (let/3463 = (field 25 (global Stdlib__Hashtbl!)))
                   (field 25 (global Stdlib__Hashtbl!)))
                 H/1659)))))
     MinimalSemiLattice/1790 =
       (module-defn(MinimalSemiLattice/1790) Gbnf_parser__Glue lib/Glue.ml(161):3306-3479
         (function P/3465 is_a_functor
           (let
             (P/1784 =a P/3465
              leq_join/1786 =
                (function p'/1788 p/1789
                  (funct-body Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(166)<ghost>:3410-3474
                    (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(167):3421-3474
                      (if
                        (after Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(167):3424-3434
                          (apply (field 0 P/1784) p'/1788 p/1789))
                        (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(168):3446-3447
                          p/1789)
                        (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(170):3463-3474
                          (after Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(170):3463-3474
                            (apply (field 1 P/1784) p'/1788 p/1789))))))))
             (pseudo Gbnf_parser__Glue.MinimalSemiLattice lib/Glue.ml(161):3353-3479
               (makeblock 0 leq_join/1786)))))
     *match*/3473 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/3471 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/3469 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/3467 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Glue")))
    (pseudo <unknown location>
      (makeblock 0 CHAR/1150 INT/1152 STRING/1154 TrivialOrderedType/1180
        TrivialHashedType/1224 InjectOrderedType/1250 InjectHashedType/1310
        InjectMinimalImperativeMaps/1335 InjectImperativeMaps/1377
        PersistentMapsToImperativeMaps/1406 ArraysAsImperativeMaps/1481
        Adapt/1658 HashTablesAsImperativeMaps/1780 MinimalSemiLattice/1790))))
(setglobal Gbnf_parser__Glue!
  (let
    (*match*/3481 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Glue"))
     *match*/3479 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/3477 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/Glue.ml"))
     *match*/3475 =
       (after Gbnf_parser__Glue lib/Glue.ml(13)<ghost>:893-893
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "Glue.ml"))
     CHAR/1150 =
       (module-defn(CHAR/1150) Gbnf_parser__Glue lib/Glue.ml(15):904-944
         (pseudo Gbnf_parser__Glue.CHAR lib/Glue.ml(15):918-944
           (makeblock 0)))
     INT/1152 =
       (module-defn(INT/1152) Gbnf_parser__Glue lib/Glue.ml(19):946-984
         (pseudo Gbnf_parser__Glue.INT lib/Glue.ml(19):959-984 (makeblock 0)))
     STRING/1154 =
       (module-defn(STRING/1154) Gbnf_parser__Glue lib/Glue.ml(23):986-1030
         (pseudo Gbnf_parser__Glue.STRING lib/Glue.ml(23):1002-1030
           (makeblock 0)))
     TrivialOrderedType/1180 =
       (module-defn(TrivialOrderedType/1180) Gbnf_parser__Glue lib/Glue.ml(27):1032-1117
         (function T/3443 is_a_functor
           (let
             (compare/1179 =
                (function prim/3442 prim/3441 stub
                  (caml_compare prim/3442 prim/3441)))
             (pseudo Gbnf_parser__Glue.TrivialOrderedType lib/Glue.ml(27):1071-1117
               (makeblock 0 compare/1179)))))
     TrivialHashedType/1224 =
       (module-defn(TrivialHashedType/1224) Gbnf_parser__Glue lib/Glue.ml(32):1119-1223
         (function T/3447 is_a_functor
           (let
             (equal/1183 =
                (function prim/3446 prim/3445 stub
                  (caml_equal prim/3446 prim/3445))
              hash/1184 = (field 27 (global Stdlib__Hashtbl!)))
             (pseudo Gbnf_parser__Glue.TrivialHashedType lib/Glue.ml(32):1157-1223
               (makeblock 0 equal/1183 hash/1184)))))
     InjectOrderedType/1250 =
       (module-defn(InjectOrderedType/1250) Gbnf_parser__Glue lib/Glue.ml(38):1225-1390
         (function U/3449 I/3448 is_a_functor
           (let
             (U/1236 =a U/3449
              I/1245 =a I/3448
              compare/1247 =
                (function x/1248 y/1249 : int
                  (funct-body Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43)<ghost>:1345-1386
                    (before Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1351-1386
                      (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1351-1386
                        (apply (field 0 U/1236)
                          (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1361-1373
                            (apply (field 0 I/1245) x/1248))
                          (after Gbnf_parser__Glue.InjectOrderedType.compare lib/Glue.ml(43):1374-1386
                            (apply (field 0 I/1245) y/1249))))))))
             (pseudo Gbnf_parser__Glue.InjectOrderedType lib/Glue.ml(41):1309-1390
               (makeblock 0 compare/1247)))))
     InjectHashedType/1310 =
       (module-defn(InjectHashedType/1310) Gbnf_parser__Glue lib/Glue.ml(46):1392-1586
         (function U/3451 I/3450 is_a_functor
           (let
             (U/1295 =a U/3451
              I/1301 =a I/3450
              equal/1303 =
                (function x/1305 y/1306 : int
                  (funct-body Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51)<ghost>:1508-1547
                    (before Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1514-1547
                      (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1514-1547
                        (apply (field 0 U/1295)
                          (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1522-1534
                            (apply (field 0 I/1301) x/1305))
                          (after Gbnf_parser__Glue.InjectHashedType.equal lib/Glue.ml(51):1535-1547
                            (apply (field 0 I/1301) y/1306)))))))
              hash/1307 =
                (function x/1309 : int
                  (funct-body Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52)<ghost>:1559-1582
                    (before Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1563-1582
                      (after Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1563-1582
                        (apply (field 1 U/1295)
                          (after Gbnf_parser__Glue.InjectHashedType.hash lib/Glue.ml(52):1570-1582
                            (apply (field 0 I/1301) x/1309))))))))
             (pseudo Gbnf_parser__Glue.InjectHashedType lib/Glue.ml(49):1474-1586
               (makeblock 0 equal/1303 hash/1307)))))
     InjectMinimalImperativeMaps/1335 =
       (module-defn(InjectMinimalImperativeMaps/1335) Gbnf_parser__Glue lib/Glue.ml(55):1588-1854
         (function M/3453 I/3452 is_a_functor
           (let
             (M/1316 =a M/3453
              I/1322 =a I/3452
              create/1325 = (field 0 M/1316)
              add/1326 =
                (function x/1328 y/1329 m/1330 : int
                  (funct-body Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62)<ghost>:1781-1811
                    (before Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1789-1811
                      (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1789-1811
                        (apply (field 1 M/1316)
                          (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.add lib/Glue.ml(62):1795-1807
                            (apply (field 0 I/1322) x/1328))
                          y/1329 m/1330)))))
              find/1331 =
                (function x/1333 m/1334
                  (funct-body Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63)<ghost>:1823-1850
                    (before Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1829-1850
                      (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1829-1850
                        (apply (field 2 M/1316)
                          (after Gbnf_parser__Glue.InjectMinimalImperativeMaps.find lib/Glue.ml(63):1836-1848
                            (apply (field 0 I/1322) x/1333))
                          m/1334))))))
             (pseudo Gbnf_parser__Glue.InjectMinimalImperativeMaps lib/Glue.ml(58):1696-1854
               (makeblock 0 create/1325 add/1326 find/1331)))))
     InjectImperativeMaps/1377 =
       (module-defn(InjectImperativeMaps/1377) Gbnf_parser__Glue lib/Glue.ml(66):1856-2137
         (function M/3457 I/3456 J/3455 is_a_functor
           (let
             (M/1343 =a M/3457
              I/1349 =a I/3456
              J/1351 =a J/3455
              include/3454 =
                (apply
                  (apply InjectMinimalImperativeMaps/1335
                    (makeblock 0 (field 0 M/1343) (field 1 M/1343)
                      (field 2 M/1343)))
                  I/1349)
              create/1367 =a (field 0 include/3454)
              add/1368 =a (field 1 include/3454)
              find/1369 =a (field 2 include/3454)
              clear/1370 = (field 3 M/1343)
              iter/1371 =
                (function f/1373 m/1374 : int
                  (funct-body Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(73)<ghost>:2074-2133
                    (before Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(74):2084-2133
                      (after Gbnf_parser__Glue.InjectImperativeMaps.iter lib/Glue.ml(74):2084-2133
                        (apply (field 4 M/1343)
                          (function x/1375 y/1376 : int
                            (funct-body Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(74):2091-2131
                              (before Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2109-2125
                                (after Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2109-2125
                                  (apply f/1373
                                    (after Gbnf_parser__Glue.InjectImperativeMaps.iter.(fun) lib/Glue.ml(75):2111-2123
                                      (apply (field 0 J/1351) x/1375))
                                    y/1376)))))
                          m/1374))))))
             (pseudo Gbnf_parser__Glue.InjectImperativeMaps lib/Glue.ml(70):1990-2137
               (makeblock 0 create/1367 add/1368 find/1369 clear/1370
                 iter/1371)))))
     PersistentMapsToImperativeMaps/1406 =
       (module-defn(PersistentMapsToImperativeMaps/1406) Gbnf_parser__Glue lib/Glue.ml(79):2139-2450
         (function M/3458 is_a_functor
           (let
             (M/1384 =a M/3458
              create/1387 =
                (function param/1389[int]
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.create lib/Glue.ml(87)<ghost>:2282-2302
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.create lib/Glue.ml(88):2291-2302
                      (makemutable 0 (field 0 M/1384)))))
              clear/1390 =
                (function t/1392 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.clear lib/Glue.ml(90)<ghost>:2316-2336
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.clear lib/Glue.ml(91):2324-2336
                      (setfield_ptr 0 t/1392 (field 0 M/1384)))))
              add/1393 =
                (function k/1395 d/1396 t/1397 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(93)<ghost>:2348-2377
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(94):2360-2377
                      (setfield_ptr 0 t/1397
                        (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.add lib/Glue.ml(94):2365-2377
                          (apply (field 1 M/1384) k/1395 d/1396
                            (field 0 t/1397)))))))
              find/1398 =
                (function k/1400 t/1401
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(96)<ghost>:2390-2411
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(97):2400-2411
                      (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.find lib/Glue.ml(97):2400-2411
                        (apply (field 2 M/1384) k/1400 (field 0 t/1401))))))
              iter/1402 =
                (function f/1404 t/1405 : int
                  (funct-body Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(99)<ghost>:2424-2445
                    (before Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(100):2434-2445
                      (after Gbnf_parser__Glue.PersistentMapsToImperativeMaps.iter lib/Glue.ml(100):2434-2445
                        (apply (field 3 M/1384) f/1404 (field 0 t/1405)))))))
             (pseudo Gbnf_parser__Glue.PersistentMapsToImperativeMaps lib/Glue.ml(79):2201-2450
               (makeblock 0 create/1387 clear/1390 add/1393 find/1398
                 iter/1402)))))
     ArraysAsImperativeMaps/1481 =
       (module-defn(ArraysAsImperativeMaps/1481) Gbnf_parser__Glue lib/Glue.ml(104):2452-2963
         (function K/3460 is_a_functor
           (let
             (K/1408 =a K/3460
              create/1411 =
                (function param/1460[int]
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(114)<ghost>:2603-2629
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(115):2612-2629
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.create lib/Glue.ml(115):2612-2629
                        (caml_make_vect (field 0 K/1408) 0)))))
              clear/1461 =
                (function m/1463 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(117)<ghost>:2643-2672
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(118):2651-2672
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.clear lib/Glue.ml(118):2651-2672
                        (apply (field 8 (global Stdlib__Array!)) m/1463 0
                          (field 0 K/1408) 0)))))
              add/1464 =
                (function key/1466[int] data/1467 m/1468 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(120)<ghost>:2684-2721
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(121):2701-2721
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.add lib/Glue.ml(121):2701-2721
                        (array.set[addr] m/1468 key/1466
                          (makeblock 0 data/1467))))))
              find/1469 =
                (function key/1471[int] m/1472
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(123)<ghost>:2734-2820
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(124):2746-2820
                      (let
                        (*match*/3459 =
                           (after Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(124):2752-2759
                             (array.get[addr] m/1472 key/1471)))
                        (if *match*/3459
                          (let (data/1473 =a (field 0 *match*/3459))
                            (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(128):2816-2820
                              data/1473))
                          (before Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(126):2780-2795
                            (raise
                              (after Gbnf_parser__Glue.ArraysAsImperativeMaps.find lib/Glue.ml(126):2780-2795
                                (field 7 (global Stdlib!))))))))))
              iter/1474 =
                (function f/1476 m/1477 : int
                  (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(130)<ghost>:2833-2958
                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(131):2843-2958
                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.iter lib/Glue.ml(131):2843-2958
                        (apply (field 13 (global Stdlib__Array!))
                          (function key/1478[int] data/1479 : int
                            (funct-body Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(131):2855-2956
                              (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(132):2878-2950
                                (if data/1479
                                  (let (data/1480 =a (field 0 data/1479))
                                    (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(136):2940-2950
                                      (after Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(136):2940-2950
                                        (apply f/1476 key/1478 data/1480))))
                                  (before Gbnf_parser__Glue.ArraysAsImperativeMaps.iter.(fun) lib/Glue.ml(134):2913-2915
                                    0)))))
                          m/1477))))))
             (pseudo Gbnf_parser__Glue.ArraysAsImperativeMaps lib/Glue.ml(104):2509-2963
               (makeblock 0 create/1411 clear/1461 add/1464 find/1469
                 iter/1474)))))
     Adapt/1658 =
       (module-defn(Adapt/1658) Gbnf_parser__Glue lib/Glue.ml(141):2965-3225
         (function T/3462 is_a_functor
           (let
             (T/1506 =a T/3462
              include/3461 =a T/1506
              clear/1510 =a (field 1 include/3461)
              reset/1511 =a (field 2 include/3461)
              copy/1512 =a (field 3 include/3461)
              remove/1514 =a (field 5 include/3461)
              find_opt/1516 =a (field 7 include/3461)
              find_all/1517 =a (field 8 include/3461)
              replace/1518 =a (field 9 include/3461)
              mem/1519 =a (field 10 include/3461)
              iter/1520 =a (field 11 include/3461)
              filter_map_inplace/1521 =a (field 12 include/3461)
              fold/1522 =a (field 13 include/3461)
              length/1523 =a (field 14 include/3461)
              stats/1524 =a (field 15 include/3461)
              to_seq/1525 =a (field 16 include/3461)
              to_seq_keys/1526 =a (field 17 include/3461)
              to_seq_values/1527 =a (field 18 include/3461)
              add_seq/1528 =a (field 19 include/3461)
              replace_seq/1529 =a (field 20 include/3461)
              of_seq/1530 =a (field 21 include/3461)
              create/1531 =
                (function param/1532[int]
                  (funct-body Gbnf_parser__Glue.Adapt.create lib/Glue.ml(147)<ghost>:3100-3122
                    (before Gbnf_parser__Glue.Adapt.create lib/Glue.ml(148):3109-3122
                      (after Gbnf_parser__Glue.Adapt.create lib/Glue.ml(148):3109-3122
                        (apply (field 0 T/1506) 1023)))))
              add/1533 =
                (function key/1534 data/1535 table/1536 : int
                  (funct-body Gbnf_parser__Glue.Adapt.add lib/Glue.ml(150)<ghost>:3134-3175
                    (before Gbnf_parser__Glue.Adapt.add lib/Glue.ml(151):3155-3175
                      (after Gbnf_parser__Glue.Adapt.add lib/Glue.ml(151):3155-3175
                        (apply (field 4 T/1506) table/1536 key/1534
                          data/1535)))))
              find/1537 =
                (function table/1538 key/1539
                  (funct-body Gbnf_parser__Glue.Adapt.find lib/Glue.ml(153)<ghost>:3188-3220
                    (before Gbnf_parser__Glue.Adapt.find lib/Glue.ml(154):3204-3220
                      (after Gbnf_parser__Glue.Adapt.find lib/Glue.ml(154):3204-3220
                        (apply (field 6 T/1506) key/1539 table/1538))))))
             (pseudo Gbnf_parser__Glue.Adapt lib/Glue.ml(141):2996-3225
               (makeblock 0 clear/1510 reset/1511 copy/1512 remove/1514
                 find_opt/1516 find_all/1517 replace/1518 mem/1519 iter/1520
                 filter_map_inplace/1521 fold/1522 length/1523 stats/1524
                 to_seq/1525 to_seq_keys/1526 to_seq_values/1527 add_seq/1528
                 replace_seq/1529 of_seq/1530 create/1531 add/1533 find/1537)))))
     HashTablesAsImperativeMaps/1780 =
       (module-defn(HashTablesAsImperativeMaps/1780) Gbnf_parser__Glue lib/Glue.ml(158):3227-3304
         (function H/3464 is_a_functor
           (let (H/1659 =a H/3464)
             (apply Adapt/1658
               (apply
                 (let (let/3463 = (field 25 (global Stdlib__Hashtbl!)))
                   (field 25 (global Stdlib__Hashtbl!)))
                 H/1659)))))
     MinimalSemiLattice/1790 =
       (module-defn(MinimalSemiLattice/1790) Gbnf_parser__Glue lib/Glue.ml(161):3306-3479
         (function P/3465 is_a_functor
           (let
             (P/1784 =a P/3465
              leq_join/1786 =
                (function p'/1788 p/1789
                  (funct-body Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(166)<ghost>:3410-3474
                    (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(167):3421-3474
                      (if
                        (after Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(167):3424-3434
                          (apply (field 0 P/1784) p'/1788 p/1789))
                        (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(168):3446-3447
                          p/1789)
                        (before Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(170):3463-3474
                          (after Gbnf_parser__Glue.MinimalSemiLattice.leq_join lib/Glue.ml(170):3463-3474
                            (apply (field 1 P/1784) p'/1788 p/1789))))))))
             (pseudo Gbnf_parser__Glue.MinimalSemiLattice lib/Glue.ml(161):3353-3479
               (makeblock 0 leq_join/1786)))))
     *match*/3473 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/3471 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/3469 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/3467 =
       (after Gbnf_parser__Glue lib/Glue.ml(172)<ghost>:3479-3479
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__Glue")))
    (pseudo <unknown location>
      (makeblock 0 CHAR/1150 INT/1152 STRING/1154 TrivialOrderedType/1180
        TrivialHashedType/1224 InjectOrderedType/1250 InjectHashedType/1310
        InjectMinimalImperativeMaps/1335 InjectImperativeMaps/1377
        PersistentMapsToImperativeMaps/1406 ArraysAsImperativeMaps/1481
        Adapt/1658 HashTablesAsImperativeMaps/1780 MinimalSemiLattice/1790))))
