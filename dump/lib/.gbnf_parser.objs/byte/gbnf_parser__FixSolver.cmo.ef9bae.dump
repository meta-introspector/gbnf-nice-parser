[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("lib/FixSolver.ml",(lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          None
        expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost
                Pexp_constant PConst_string("FixSolver.ml",(lib/FixSolver.ml[14,976+0]..[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..[68,2046+3])
    Pstr_module
    "Make" (lib/FixSolver.ml[14,976+7]..[14,976+11])
      module_expr (lib/FixSolver.ml[15,988+0]..[68,2046+3])
        Pmod_functor "M" (lib/FixSolver.ml[15,988+1]..[15,988+2])
        module_type (lib/FixSolver.ml[15,988+5]..[15,988+24])
          Pmty_ident "Fix.IMPERATIVE_MAPS" (lib/FixSolver.ml[15,988+5]..[15,988+24])
        module_expr (lib/FixSolver.ml[16,1014+0]..[68,2046+3])
          Pmod_functor "P" (lib/FixSolver.ml[16,1014+1]..[16,1014+2])
          module_type (lib/FixSolver.ml[16,1014+5]..[16,1014+29])
            Pmty_ident "Fix.MINIMAL_SEMI_LATTICE" (lib/FixSolver.ml[16,1014+5]..[16,1014+29])
          module_expr (lib/FixSolver.ml[17,1045+2]..[68,2046+3])
            Pmod_structure
            [
              structure_item (lib/FixSolver.ml[19,1055+2]..[20,1073+9])
                Pstr_type Rec
                [
                  type_declaration "variable" (lib/FixSolver.ml[19,1055+7]..[19,1055+15]) (lib/FixSolver.ml[19,1055+2]..[20,1073+9])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/FixSolver.ml[20,1073+4]..[20,1073+9])
                          Ptyp_constr "M.key" (lib/FixSolver.ml[20,1073+4]..[20,1073+9])
                          []
                ]
              structure_item (lib/FixSolver.ml[22,1084+2]..[23,1102+14])
                Pstr_type Rec
                [
                  type_declaration "property" (lib/FixSolver.ml[22,1084+7]..[22,1084+15]) (lib/FixSolver.ml[22,1084+2]..[23,1102+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ptype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/FixSolver.ml[23,1102+4]..[23,1102+14])
                          Ptyp_constr "P.property" (lib/FixSolver.ml[23,1102+4]..[23,1102+14])
                          []
                ]
              structure_item (lib/FixSolver.ml[25,1118+2]..[26,1131+14])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[25,1118+6]..[25,1118+10])
                      Ppat_var "join" (lib/FixSolver.ml[25,1118+6]..[25,1118+10])
                    expression (lib/FixSolver.ml[26,1131+4]..[26,1131+14])
                      Pexp_ident "P.leq_join" (lib/FixSolver.ml[26,1131+4]..[26,1131+14])
                ]
              structure_item (lib/FixSolver.ml[30,1217+2]..[31,1251+14])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[30,1217+6]..[30,1217+31]) ghost
                      Ppat_constraint
                      pattern (lib/FixSolver.ml[30,1217+6]..[30,1217+11])
                        Ppat_var "upper" (lib/FixSolver.ml[30,1217+6]..[30,1217+11])
                      core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+31]) ghost
                        Ptyp_poly
                        core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+31])
                          Ptyp_constr "M.t" (lib/FixSolver.ml[30,1217+28]..[30,1217+31])
                          [
                            core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+27])
                              Ptyp_constr "list" (lib/FixSolver.ml[30,1217+23]..[30,1217+27])
                              [
                                core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+22])
                                  Ptyp_constr "variable" (lib/FixSolver.ml[30,1217+14]..[30,1217+22])
                                  []
                              ]
                          ]
                    expression (lib/FixSolver.ml[30,1217+6]..[31,1251+14])
                      Pexp_constraint
                      expression (lib/FixSolver.ml[31,1251+4]..[31,1251+14])
                        Pexp_apply
                        expression (lib/FixSolver.ml[31,1251+4]..[31,1251+12])
                          Pexp_ident "M.create" (lib/FixSolver.ml[31,1251+4]..[31,1251+12])
                        [
                          <arg>
                          Nolabel
                            expression (lib/FixSolver.ml[31,1251+12]..[31,1251+14])
                              Pexp_construct "()" (lib/FixSolver.ml[31,1251+12]..[31,1251+14])
                              None
                        ]
                      core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+31])
                        Ptyp_constr "M.t" (lib/FixSolver.ml[30,1217+28]..[30,1217+31])
                        [
                          core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+27])
                            Ptyp_constr "list" (lib/FixSolver.ml[30,1217+23]..[30,1217+27])
                            [
                              core_type (lib/FixSolver.ml[30,1217+14]..[30,1217+22])
                                Ptyp_constr "variable" (lib/FixSolver.ml[30,1217+14]..[30,1217+22])
                                []
                            ]
                        ]
                ]
              structure_item (lib/FixSolver.ml[33,1267+2]..[34,1288+43])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[33,1267+6]..[33,1267+16])
                      Ppat_var "successors" (lib/FixSolver.ml[33,1267+6]..[33,1267+16])
                    expression (lib/FixSolver.ml[33,1267+17]..[34,1288+43]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/FixSolver.ml[33,1267+17]..[33,1267+18])
                        Ppat_var "x" (lib/FixSolver.ml[33,1267+17]..[33,1267+18])
                      expression (lib/FixSolver.ml[34,1288+4]..[34,1288+43])
                        Pexp_try
                        expression (lib/FixSolver.ml[34,1288+8]..[34,1288+22])
                          Pexp_apply
                          expression (lib/FixSolver.ml[34,1288+8]..[34,1288+14])
                            Pexp_ident "M.find" (lib/FixSolver.ml[34,1288+8]..[34,1288+14])
                          [
                            <arg>
                            Nolabel
                              expression (lib/FixSolver.ml[34,1288+15]..[34,1288+16])
                                Pexp_ident "x" (lib/FixSolver.ml[34,1288+15]..[34,1288+16])
                            <arg>
                            Nolabel
                              expression (lib/FixSolver.ml[34,1288+17]..[34,1288+22])
                                Pexp_ident "upper" (lib/FixSolver.ml[34,1288+17]..[34,1288+22])
                          ]
                        [
                          <case>
                            pattern (lib/FixSolver.ml[34,1288+28]..[34,1288+37])
                              Ppat_construct "Not_found" (lib/FixSolver.ml[34,1288+28]..[34,1288+37])
                              None
                            expression (lib/FixSolver.ml[34,1288+41]..[34,1288+43])
                              Pexp_construct "[]" (lib/FixSolver.ml[34,1288+41]..[34,1288+43])
                              None
                        ]
                ]
              structure_item (lib/FixSolver.ml[36,1333+2]..[37,1359+37])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[36,1333+6]..[36,1333+19])
                      Ppat_var "record_VarVar" (lib/FixSolver.ml[36,1333+6]..[36,1333+19])
                    expression (lib/FixSolver.ml[36,1333+20]..[37,1359+37]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/FixSolver.ml[36,1333+20]..[36,1333+21])
                        Ppat_var "x" (lib/FixSolver.ml[36,1333+20]..[36,1333+21])
                      expression (lib/FixSolver.ml[36,1333+22]..[37,1359+37]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/FixSolver.ml[36,1333+22]..[36,1333+23])
                          Ppat_var "y" (lib/FixSolver.ml[36,1333+22]..[36,1333+23])
                        expression (lib/FixSolver.ml[37,1359+4]..[37,1359+37])
                          Pexp_apply
                          expression (lib/FixSolver.ml[37,1359+4]..[37,1359+9])
                            Pexp_ident "M.add" (lib/FixSolver.ml[37,1359+4]..[37,1359+9])
                          [
                            <arg>
                            Nolabel
                              expression (lib/FixSolver.ml[37,1359+10]..[37,1359+11])
                                Pexp_ident "x" (lib/FixSolver.ml[37,1359+10]..[37,1359+11])
                            <arg>
                            Nolabel
                              expression (lib/FixSolver.ml[37,1359+12]..[37,1359+31])
                                Pexp_construct "::" (lib/FixSolver.ml[37,1359+15]..[37,1359+17])
                                Some
                                  expression (lib/FixSolver.ml[37,1359+13]..[37,1359+30]) ghost
                                    Pexp_tuple
                                    [
                                      expression (lib/FixSolver.ml[37,1359+13]..[37,1359+14])
                                        Pexp_ident "y" (lib/FixSolver.ml[37,1359+13]..[37,1359+14])
                                      expression (lib/FixSolver.ml[37,1359+18]..[37,1359+30])
                                        Pexp_apply
                                        expression (lib/FixSolver.ml[37,1359+18]..[37,1359+28])
                                          Pexp_ident "successors" (lib/FixSolver.ml[37,1359+18]..[37,1359+28])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/FixSolver.ml[37,1359+29]..[37,1359+30])
                                              Pexp_ident "x" (lib/FixSolver.ml[37,1359+29]..[37,1359+30])
                                        ]
                                    ]
                            <arg>
                            Nolabel
                              expression (lib/FixSolver.ml[37,1359+32]..[37,1359+37])
                                Pexp_ident "upper" (lib/FixSolver.ml[37,1359+32]..[37,1359+37])
                          ]
                ]
              structure_item (lib/FixSolver.ml[41,1463+2]..[42,1492+14])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[41,1463+6]..[41,1463+26]) ghost
                      Ppat_constraint
                      pattern (lib/FixSolver.ml[41,1463+6]..[41,1463+11])
                        Ppat_var "lower" (lib/FixSolver.ml[41,1463+6]..[41,1463+11])
                      core_type (lib/FixSolver.ml[41,1463+14]..[41,1463+26]) ghost
                        Ptyp_poly
                        core_type (lib/FixSolver.ml[41,1463+14]..[41,1463+26])
                          Ptyp_constr "M.t" (lib/FixSolver.ml[41,1463+23]..[41,1463+26])
                          [
                            core_type (lib/FixSolver.ml[41,1463+14]..[41,1463+22])
                              Ptyp_constr "property" (lib/FixSolver.ml[41,1463+14]..[41,1463+22])
                              []
                          ]
                    expression (lib/FixSolver.ml[41,1463+6]..[42,1492+14])
                      Pexp_constraint
                      expression (lib/FixSolver.ml[42,1492+4]..[42,1492+14])
                        Pexp_apply
                        expression (lib/FixSolver.ml[42,1492+4]..[42,1492+12])
                          Pexp_ident "M.create" (lib/FixSolver.ml[42,1492+4]..[42,1492+12])
                        [
                          <arg>
                          Nolabel
                            expression (lib/FixSolver.ml[42,1492+12]..[42,1492+14])
                              Pexp_construct "()" (lib/FixSolver.ml[42,1492+12]..[42,1492+14])
                              None
                        ]
                      core_type (lib/FixSolver.ml[41,1463+14]..[41,1463+26])
                        Ptyp_constr "M.t" (lib/FixSolver.ml[41,1463+23]..[41,1463+26])
                        [
                          core_type (lib/FixSolver.ml[41,1463+14]..[41,1463+22])
                            Ptyp_constr "property" (lib/FixSolver.ml[41,1463+14]..[41,1463+22])
                            []
                        ]
                ]
              structure_item (lib/FixSolver.ml[44,1508+2]..[49,1628+32])
                Pstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[44,1508+6]..[44,1508+19])
                      Ppat_var "record_ConVar" (lib/FixSolver.ml[44,1508+6]..[44,1508+19])
                    expression (lib/FixSolver.ml[44,1508+20]..[49,1628+32]) ghost
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/FixSolver.ml[44,1508+20]..[44,1508+21])
                        Ppat_var "p" (lib/FixSolver.ml[44,1508+20]..[44,1508+21])
                      expression (lib/FixSolver.ml[44,1508+22]..[49,1628+32]) ghost
                        Pexp_fun
                        Nolabel
                        None
                        pattern (lib/FixSolver.ml[44,1508+22]..[44,1508+23])
                          Ppat_var "y" (lib/FixSolver.ml[44,1508+22]..[44,1508+23])
                        expression (lib/FixSolver.ml[45,1534+4]..[49,1628+32])
                          Pexp_match
                          expression (lib/FixSolver.ml[45,1534+10]..[45,1534+24])
                            Pexp_apply
                            expression (lib/FixSolver.ml[45,1534+10]..[45,1534+16])
                              Pexp_ident "M.find" (lib/FixSolver.ml[45,1534+10]..[45,1534+16])
                            [
                              <arg>
                              Nolabel
                                expression (lib/FixSolver.ml[45,1534+17]..[45,1534+18])
                                  Pexp_ident "y" (lib/FixSolver.ml[45,1534+17]..[45,1534+18])
                              <arg>
                              Nolabel
                                expression (lib/FixSolver.ml[45,1534+19]..[45,1534+24])
                                  Pexp_ident "lower" (lib/FixSolver.ml[45,1534+19]..[45,1534+24])
                            ]
                          [
                            <case>
                              pattern (lib/FixSolver.ml[46,1564+6]..[46,1564+25])
                                Ppat_exception
                                pattern (lib/FixSolver.ml[46,1564+16]..[46,1564+25])
                                  Ppat_construct "Not_found" (lib/FixSolver.ml[46,1564+16]..[46,1564+25])
                                  None
                              expression (lib/FixSolver.ml[47,1593+8]..[47,1593+23])
                                Pexp_apply
                                expression (lib/FixSolver.ml[47,1593+8]..[47,1593+13])
                                  Pexp_ident "M.add" (lib/FixSolver.ml[47,1593+8]..[47,1593+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[47,1593+14]..[47,1593+15])
                                      Pexp_ident "y" (lib/FixSolver.ml[47,1593+14]..[47,1593+15])
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[47,1593+16]..[47,1593+17])
                                      Pexp_ident "p" (lib/FixSolver.ml[47,1593+16]..[47,1593+17])
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[47,1593+18]..[47,1593+23])
                                      Pexp_ident "lower" (lib/FixSolver.ml[47,1593+18]..[47,1593+23])
                                ]
                            <case>
                              pattern (lib/FixSolver.ml[48,1617+6]..[48,1617+7])
                                Ppat_var "q" (lib/FixSolver.ml[48,1617+6]..[48,1617+7])
                              expression (lib/FixSolver.ml[49,1628+8]..[49,1628+32])
                                Pexp_apply
                                expression (lib/FixSolver.ml[49,1628+8]..[49,1628+13])
                                  Pexp_ident "M.add" (lib/FixSolver.ml[49,1628+8]..[49,1628+13])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[49,1628+14]..[49,1628+15])
                                      Pexp_ident "y" (lib/FixSolver.ml[49,1628+14]..[49,1628+15])
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[49,1628+16]..[49,1628+26])
                                      Pexp_apply
                                      expression (lib/FixSolver.ml[49,1628+17]..[49,1628+21])
                                        Pexp_ident "join" (lib/FixSolver.ml[49,1628+17]..[49,1628+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/FixSolver.ml[49,1628+22]..[49,1628+23])
                                            Pexp_ident "p" (lib/FixSolver.ml[49,1628+22]..[49,1628+23])
                                        <arg>
                                        Nolabel
                                          expression (lib/FixSolver.ml[49,1628+24]..[49,1628+25])
                                            Pexp_ident "q" (lib/FixSolver.ml[49,1628+24]..[49,1628+25])
                                      ]
                                  <arg>
                                  Nolabel
                                    expression (lib/FixSolver.ml[49,1628+27]..[49,1628+32])
                                      Pexp_ident "lower" (lib/FixSolver.ml[49,1628+27]..[49,1628+32])
                                ]
                          ]
                ]
              structure_item (lib/FixSolver.ml[53,1693+2]..[66,2039+5])
                Pstr_module
                "Solve" (lib/FixSolver.ml[53,1693+9]..[53,1693+14])
                  module_expr (lib/FixSolver.ml[53,1693+15]..[66,2039+5])
                    Pmod_functor ()
                    module_expr (lib/FixSolver.ml[53,1693+20]..[66,2039+5])
                      Pmod_structure
                      [
                        structure_item (lib/FixSolver.ml[55,1721+4]..[62,1991+7])
                          Pstr_module
                          "G" (lib/FixSolver.ml[55,1721+11]..[55,1721+12])
                            module_expr (lib/FixSolver.ml[55,1721+15]..[62,1991+7])
                              Pmod_structure
                              [
                                structure_item (lib/FixSolver.ml[56,1743+6]..[56,1743+37])
                                  Pstr_type Nonrec
                                  [
                                    type_declaration "variable" (lib/FixSolver.ml[56,1743+18]..[56,1743+26]) (lib/FixSolver.ml[56,1743+6]..[56,1743+37])
                                      ptype_params =
                                        []
                                      ptype_cstrs =
                                        []
                                      ptype_kind =
                                        Ptype_abstract
                                      ptype_private = Public
                                      ptype_manifest =
                                        Some
                                          core_type (lib/FixSolver.ml[56,1743+29]..[56,1743+37])
                                            Ptyp_constr "variable" (lib/FixSolver.ml[56,1743+29]..[56,1743+37])
                                            []
                                  ]
                                structure_item (lib/FixSolver.ml[57,1781+6]..[57,1781+37])
                                  Pstr_type Nonrec
                                  [
                                    type_declaration "property" (lib/FixSolver.ml[57,1781+18]..[57,1781+26]) (lib/FixSolver.ml[57,1781+6]..[57,1781+37])
                                      ptype_params =
                                        []
                                      ptype_cstrs =
                                        []
                                      ptype_kind =
                                        Ptype_abstract
                                      ptype_private = Public
                                      ptype_manifest =
                                        Some
                                          core_type (lib/FixSolver.ml[57,1781+29]..[57,1781+37])
                                            Ptyp_constr "property" (lib/FixSolver.ml[57,1781+29]..[57,1781+37])
                                            []
                                  ]
                                structure_item (lib/FixSolver.ml[58,1819+6]..[59,1855+31])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (lib/FixSolver.ml[58,1819+10]..[58,1819+22])
                                        Ppat_var "foreach_root" (lib/FixSolver.ml[58,1819+10]..[58,1819+22])
                                      expression (lib/FixSolver.ml[58,1819+23]..[59,1855+31]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (lib/FixSolver.ml[58,1819+23]..[58,1819+33])
                                          Ppat_var "contribute" (lib/FixSolver.ml[58,1819+23]..[58,1819+33])
                                        expression (lib/FixSolver.ml[59,1855+8]..[59,1855+31])
                                          Pexp_apply
                                          expression (lib/FixSolver.ml[59,1855+8]..[59,1855+14])
                                            Pexp_ident "M.iter" (lib/FixSolver.ml[59,1855+8]..[59,1855+14])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/FixSolver.ml[59,1855+15]..[59,1855+25])
                                                Pexp_ident "contribute" (lib/FixSolver.ml[59,1855+15]..[59,1855+25])
                                            <arg>
                                            Nolabel
                                              expression (lib/FixSolver.ml[59,1855+26]..[59,1855+31])
                                                Pexp_ident "lower" (lib/FixSolver.ml[59,1855+26]..[59,1855+31])
                                          ]
                                  ]
                                structure_item (lib/FixSolver.ml[60,1887+6]..[61,1932+58])
                                  Pstr_value Nonrec
                                  [
                                    <def>
                                      pattern (lib/FixSolver.ml[60,1887+10]..[60,1887+27])
                                        Ppat_var "foreach_successor" (lib/FixSolver.ml[60,1887+10]..[60,1887+27])
                                      expression (lib/FixSolver.ml[60,1887+28]..[61,1932+58]) ghost
                                        Pexp_fun
                                        Nolabel
                                        None
                                        pattern (lib/FixSolver.ml[60,1887+28]..[60,1887+29])
                                          Ppat_var "x" (lib/FixSolver.ml[60,1887+28]..[60,1887+29])
                                        expression (lib/FixSolver.ml[60,1887+30]..[61,1932+58]) ghost
                                          Pexp_fun
                                          Nolabel
                                          None
                                          pattern (lib/FixSolver.ml[60,1887+30]..[60,1887+31])
                                            Ppat_var "p" (lib/FixSolver.ml[60,1887+30]..[60,1887+31])
                                          expression (lib/FixSolver.ml[60,1887+32]..[61,1932+58]) ghost
                                            Pexp_fun
                                            Nolabel
                                            None
                                            pattern (lib/FixSolver.ml[60,1887+32]..[60,1887+42])
                                              Ppat_var "contribute" (lib/FixSolver.ml[60,1887+32]..[60,1887+42])
                                            expression (lib/FixSolver.ml[61,1932+8]..[61,1932+58])
                                              Pexp_apply
                                              expression (lib/FixSolver.ml[61,1932+8]..[61,1932+17])
                                                Pexp_ident "List.iter" (lib/FixSolver.ml[61,1932+8]..[61,1932+17])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/FixSolver.ml[61,1932+18]..[61,1932+43])
                                                    Pexp_fun
                                                    Nolabel
                                                    None
                                                    pattern (lib/FixSolver.ml[61,1932+23]..[61,1932+24])
                                                      Ppat_var "y" (lib/FixSolver.ml[61,1932+23]..[61,1932+24])
                                                    expression (lib/FixSolver.ml[61,1932+28]..[61,1932+42])
                                                      Pexp_apply
                                                      expression (lib/FixSolver.ml[61,1932+28]..[61,1932+38])
                                                        Pexp_ident "contribute" (lib/FixSolver.ml[61,1932+28]..[61,1932+38])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/FixSolver.ml[61,1932+39]..[61,1932+40])
                                                            Pexp_ident "y" (lib/FixSolver.ml[61,1932+39]..[61,1932+40])
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/FixSolver.ml[61,1932+41]..[61,1932+42])
                                                            Pexp_ident "p" (lib/FixSolver.ml[61,1932+41]..[61,1932+42])
                                                      ]
                                                <arg>
                                                Nolabel
                                                  expression (lib/FixSolver.ml[61,1932+44]..[61,1932+58])
                                                    Pexp_apply
                                                    expression (lib/FixSolver.ml[61,1932+45]..[61,1932+55])
                                                      Pexp_ident "successors" (lib/FixSolver.ml[61,1932+45]..[61,1932+55])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/FixSolver.ml[61,1932+56]..[61,1932+57])
                                                          Pexp_ident "x" (lib/FixSolver.ml[61,1932+56]..[61,1932+57])
                                                    ]
                                              ]
                                  ]
                              ]
                        structure_item (lib/FixSolver.ml[64,2000+4]..[64,2000+37])
                          Pstr_include                          module_expr (lib/FixSolver.ml[64,2000+12]..[64,2000+37])
                            Pmod_apply
                            module_expr (lib/FixSolver.ml[64,2000+12]..[64,2000+34])
                              Pmod_apply
                              module_expr (lib/FixSolver.ml[64,2000+12]..[64,2000+31])
                                Pmod_apply
                                module_expr (lib/FixSolver.ml[64,2000+12]..[64,2000+28])
                                  Pmod_ident "Fix.DataFlow.Run" (lib/FixSolver.ml[64,2000+12]..[64,2000+28])
                                module_expr (lib/FixSolver.ml[64,2000+29]..[64,2000+30])
                                  Pmod_ident "M" (lib/FixSolver.ml[64,2000+29]..[64,2000+30])
                              module_expr (lib/FixSolver.ml[64,2000+32]..[64,2000+33])
                                Pmod_ident "P" (lib/FixSolver.ml[64,2000+32]..[64,2000+33])
                            module_expr (lib/FixSolver.ml[64,2000+35]..[64,2000+36])
                              Pmod_ident "G" (lib/FixSolver.ml[64,2000+35]..[64,2000+36])
                      ]
            ]
  structure_item (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          None
        expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          None
        expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                Pexp_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                None
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          None
        expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                Pexp_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                None
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Ppat_construct "()" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          None
        expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          Pexp_apply
          expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/FixSolver.ml[68,2046+3]..[68,2046+3]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/FixSolver.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "FixSolver.ml"
module Make(M:Fix.IMPERATIVE_MAPS)(P:Fix.MINIMAL_SEMI_LATTICE) =
  struct
    type variable = M.key
    type property = P.property
    let join = P.leq_join
    let upper : variable list M.t = M.create ()
    let successors x = try M.find x upper with | Not_found -> []
    let record_VarVar x y = M.add x (y :: (successors x)) upper
    let lower : property M.t = M.create ()
    let record_ConVar p y =
      match M.find y lower with
      | exception Not_found -> M.add y p lower
      | q -> M.add y (join p q) lower
    module Solve() =
      struct
        module G =
          struct
            type nonrec variable = variable
            type nonrec property = property
            let foreach_root contribute = M.iter contribute lower
            let foreach_successor x p contribute =
              List.iter (fun y -> contribute y p) (successors x)
          end
        include (((Fix.DataFlow.Run)(M))(P))(G)
      end
  end
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
                Texp_constant Const_string("lib/FixSolver.ml",(lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost
                Texp_constant Const_string("FixSolver.ml",(lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[14,976+0]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[14,976+0]..lib/FixSolver.ml[68,2046+3])
    Tstr_module
    Make/1474
      module_expr (lib/FixSolver.ml[15,988+0]..lib/FixSolver.ml[68,2046+3])
        Tmod_functor "M/1252"
        module_type (lib/FixSolver.ml[15,988+5]..lib/FixSolver.ml[15,988+24])
          Tmty_ident "Gbnf_parser!.Fix.IMPERATIVE_MAPS"
        module_expr (lib/FixSolver.ml[16,1014+0]..lib/FixSolver.ml[68,2046+3])
          Tmod_functor "P/1255"
          module_type (lib/FixSolver.ml[16,1014+5]..lib/FixSolver.ml[16,1014+29])
            Tmty_ident "Gbnf_parser!.Fix.MINIMAL_SEMI_LATTICE"
          module_expr (lib/FixSolver.ml[17,1045+2]..lib/FixSolver.ml[68,2046+3])
            Tmod_structure
            [
              structure_item (lib/FixSolver.ml[19,1055+2]..lib/FixSolver.ml[20,1073+9])
                Tstr_type Rec
                [
                  type_declaration variable/1256 (lib/FixSolver.ml[19,1055+2]..lib/FixSolver.ml[20,1073+9])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/FixSolver.ml[20,1073+4]..lib/FixSolver.ml[20,1073+9])
                          Ttyp_constr "M/1252.key"
                          []
                ]
              structure_item (lib/FixSolver.ml[22,1084+2]..lib/FixSolver.ml[23,1102+14])
                Tstr_type Rec
                [
                  type_declaration property/1257 (lib/FixSolver.ml[22,1084+2]..lib/FixSolver.ml[23,1102+14])
                    ptype_params =
                      []
                    ptype_cstrs =
                      []
                    ptype_kind =
                      Ttype_abstract
                    ptype_private = Public
                    ptype_manifest =
                      Some
                        core_type (lib/FixSolver.ml[23,1102+4]..lib/FixSolver.ml[23,1102+14])
                          Ttyp_constr "P/1255.property"
                          []
                ]
              structure_item (lib/FixSolver.ml[25,1118+2]..lib/FixSolver.ml[26,1131+14])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[25,1118+6]..lib/FixSolver.ml[25,1118+10])
                      Tpat_var "join/1258"
                    expression (lib/FixSolver.ml[26,1131+4]..lib/FixSolver.ml[26,1131+14])
                      Texp_ident "P/1255.leq_join"
                ]
              structure_item (lib/FixSolver.ml[30,1217+2]..lib/FixSolver.ml[31,1251+14])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[30,1217+6]..lib/FixSolver.ml[30,1217+11])
                      extra
                        Tpat_extra_constraint
                        core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+31]) ghost
                          Ttyp_poly
                          core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+31])
                            Ttyp_constr "M/1252.t"
                            [
                              core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+27])
                                Ttyp_constr "list/9!"
                                [
                                  core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+22])
                                    Ttyp_constr "variable/1256"
                                    []
                                ]
                            ]
                      Tpat_var "upper/1259"
                    expression (lib/FixSolver.ml[31,1251+4]..lib/FixSolver.ml[31,1251+14])
                      extra
                        Texp_constraint
                        core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+31])
                          Ttyp_constr "M/1252.t"
                          [
                            core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+27])
                              Ttyp_constr "list/9!"
                              [
                                core_type (lib/FixSolver.ml[30,1217+14]..lib/FixSolver.ml[30,1217+22])
                                  Ttyp_constr "variable/1256"
                                  []
                              ]
                          ]
                      Texp_apply
                      expression (lib/FixSolver.ml[31,1251+4]..lib/FixSolver.ml[31,1251+12])
                        Texp_ident "M/1252.create"
                      [
                        <arg>
                          Nolabel
                          expression (lib/FixSolver.ml[31,1251+12]..lib/FixSolver.ml[31,1251+14])
                            Texp_construct "()"
                            []
                      ]
                ]
              structure_item (lib/FixSolver.ml[33,1267+2]..lib/FixSolver.ml[34,1288+43])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[33,1267+6]..lib/FixSolver.ml[33,1267+16])
                      Tpat_var "successors/1260"
                    expression (lib/FixSolver.ml[33,1267+17]..lib/FixSolver.ml[34,1288+43]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/FixSolver.ml[33,1267+17]..lib/FixSolver.ml[33,1267+18])
                            Tpat_var "x/1262"
                          expression (lib/FixSolver.ml[34,1288+4]..lib/FixSolver.ml[34,1288+43])
                            Texp_try
                            expression (lib/FixSolver.ml[34,1288+8]..lib/FixSolver.ml[34,1288+22])
                              Texp_apply
                              expression (lib/FixSolver.ml[34,1288+8]..lib/FixSolver.ml[34,1288+14])
                                Texp_ident "M/1252.find"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/FixSolver.ml[34,1288+15]..lib/FixSolver.ml[34,1288+16])
                                    Texp_ident "x/1262"
                                <arg>
                                  Nolabel
                                  expression (lib/FixSolver.ml[34,1288+17]..lib/FixSolver.ml[34,1288+22])
                                    Texp_ident "upper/1259"
                              ]
                            [
                              <case>
                                pattern (lib/FixSolver.ml[34,1288+28]..lib/FixSolver.ml[34,1288+37])
                                  Tpat_construct "Not_found"
                                  []
                                  None
                                expression (lib/FixSolver.ml[34,1288+41]..lib/FixSolver.ml[34,1288+43])
                                  Texp_construct "[]"
                                  []
                            ]
                      ]
                ]
              structure_item (lib/FixSolver.ml[36,1333+2]..lib/FixSolver.ml[37,1359+37])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[36,1333+6]..lib/FixSolver.ml[36,1333+19])
                      Tpat_var "record_VarVar/1263"
                    expression (lib/FixSolver.ml[36,1333+20]..lib/FixSolver.ml[37,1359+37]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/FixSolver.ml[36,1333+20]..lib/FixSolver.ml[36,1333+21])
                            Tpat_var "x/1265"
                          expression (lib/FixSolver.ml[36,1333+22]..lib/FixSolver.ml[37,1359+37]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/FixSolver.ml[36,1333+22]..lib/FixSolver.ml[36,1333+23])
                                  Tpat_var "y/1266"
                                expression (lib/FixSolver.ml[37,1359+4]..lib/FixSolver.ml[37,1359+37])
                                  Texp_apply
                                  expression (lib/FixSolver.ml[37,1359+4]..lib/FixSolver.ml[37,1359+9])
                                    Texp_ident "M/1252.add"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/FixSolver.ml[37,1359+10]..lib/FixSolver.ml[37,1359+11])
                                        Texp_ident "x/1265"
                                    <arg>
                                      Nolabel
                                      expression (lib/FixSolver.ml[37,1359+12]..lib/FixSolver.ml[37,1359+31])
                                        Texp_construct "::"
                                        [
                                          expression (lib/FixSolver.ml[37,1359+13]..lib/FixSolver.ml[37,1359+14])
                                            Texp_ident "y/1266"
                                          expression (lib/FixSolver.ml[37,1359+18]..lib/FixSolver.ml[37,1359+30])
                                            Texp_apply
                                            expression (lib/FixSolver.ml[37,1359+18]..lib/FixSolver.ml[37,1359+28])
                                              Texp_ident "successors/1260"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/FixSolver.ml[37,1359+29]..lib/FixSolver.ml[37,1359+30])
                                                  Texp_ident "x/1265"
                                            ]
                                        ]
                                    <arg>
                                      Nolabel
                                      expression (lib/FixSolver.ml[37,1359+32]..lib/FixSolver.ml[37,1359+37])
                                        Texp_ident "upper/1259"
                                  ]
                            ]
                      ]
                ]
              structure_item (lib/FixSolver.ml[41,1463+2]..lib/FixSolver.ml[42,1492+14])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[41,1463+6]..lib/FixSolver.ml[41,1463+11])
                      extra
                        Tpat_extra_constraint
                        core_type (lib/FixSolver.ml[41,1463+14]..lib/FixSolver.ml[41,1463+26]) ghost
                          Ttyp_poly
                          core_type (lib/FixSolver.ml[41,1463+14]..lib/FixSolver.ml[41,1463+26])
                            Ttyp_constr "M/1252.t"
                            [
                              core_type (lib/FixSolver.ml[41,1463+14]..lib/FixSolver.ml[41,1463+22])
                                Ttyp_constr "property/1257"
                                []
                            ]
                      Tpat_var "lower/1267"
                    expression (lib/FixSolver.ml[42,1492+4]..lib/FixSolver.ml[42,1492+14])
                      extra
                        Texp_constraint
                        core_type (lib/FixSolver.ml[41,1463+14]..lib/FixSolver.ml[41,1463+26])
                          Ttyp_constr "M/1252.t"
                          [
                            core_type (lib/FixSolver.ml[41,1463+14]..lib/FixSolver.ml[41,1463+22])
                              Ttyp_constr "property/1257"
                              []
                          ]
                      Texp_apply
                      expression (lib/FixSolver.ml[42,1492+4]..lib/FixSolver.ml[42,1492+12])
                        Texp_ident "M/1252.create"
                      [
                        <arg>
                          Nolabel
                          expression (lib/FixSolver.ml[42,1492+12]..lib/FixSolver.ml[42,1492+14])
                            Texp_construct "()"
                            []
                      ]
                ]
              structure_item (lib/FixSolver.ml[44,1508+2]..lib/FixSolver.ml[49,1628+32])
                Tstr_value Nonrec
                [
                  <def>
                    pattern (lib/FixSolver.ml[44,1508+6]..lib/FixSolver.ml[44,1508+19])
                      Tpat_var "record_ConVar/1268"
                    expression (lib/FixSolver.ml[44,1508+20]..lib/FixSolver.ml[49,1628+32]) ghost
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/FixSolver.ml[44,1508+20]..lib/FixSolver.ml[44,1508+21])
                            Tpat_var "p/1270"
                          expression (lib/FixSolver.ml[44,1508+22]..lib/FixSolver.ml[49,1628+32]) ghost
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/FixSolver.ml[44,1508+22]..lib/FixSolver.ml[44,1508+23])
                                  Tpat_var "y/1271"
                                expression (lib/FixSolver.ml[45,1534+4]..lib/FixSolver.ml[49,1628+32])
                                  Texp_match
                                  expression (lib/FixSolver.ml[45,1534+10]..lib/FixSolver.ml[45,1534+24])
                                    Texp_apply
                                    expression (lib/FixSolver.ml[45,1534+10]..lib/FixSolver.ml[45,1534+16])
                                      Texp_ident "M/1252.find"
                                    [
                                      <arg>
                                        Nolabel
                                        expression (lib/FixSolver.ml[45,1534+17]..lib/FixSolver.ml[45,1534+18])
                                          Texp_ident "y/1271"
                                      <arg>
                                        Nolabel
                                        expression (lib/FixSolver.ml[45,1534+19]..lib/FixSolver.ml[45,1534+24])
                                          Texp_ident "lower/1267"
                                    ]
                                  [
                                    <case>
                                      pattern (lib/FixSolver.ml[46,1564+6]..lib/FixSolver.ml[46,1564+25])
                                        Tpat_exception
                                        pattern (lib/FixSolver.ml[46,1564+16]..lib/FixSolver.ml[46,1564+25])
                                          Tpat_construct "Not_found"
                                          []
                                          None
                                      expression (lib/FixSolver.ml[47,1593+8]..lib/FixSolver.ml[47,1593+23])
                                        Texp_apply
                                        expression (lib/FixSolver.ml[47,1593+8]..lib/FixSolver.ml[47,1593+13])
                                          Texp_ident "M/1252.add"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[47,1593+14]..lib/FixSolver.ml[47,1593+15])
                                              Texp_ident "y/1271"
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[47,1593+16]..lib/FixSolver.ml[47,1593+17])
                                              Texp_ident "p/1270"
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[47,1593+18]..lib/FixSolver.ml[47,1593+23])
                                              Texp_ident "lower/1267"
                                        ]
                                    <case>
                                      pattern (lib/FixSolver.ml[48,1617+6]..lib/FixSolver.ml[48,1617+7])
                                        Tpat_value
                                        pattern (lib/FixSolver.ml[48,1617+6]..lib/FixSolver.ml[48,1617+7])
                                          Tpat_var "q/1272"
                                      expression (lib/FixSolver.ml[49,1628+8]..lib/FixSolver.ml[49,1628+32])
                                        Texp_apply
                                        expression (lib/FixSolver.ml[49,1628+8]..lib/FixSolver.ml[49,1628+13])
                                          Texp_ident "M/1252.add"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[49,1628+14]..lib/FixSolver.ml[49,1628+15])
                                              Texp_ident "y/1271"
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[49,1628+16]..lib/FixSolver.ml[49,1628+26])
                                              Texp_apply
                                              expression (lib/FixSolver.ml[49,1628+17]..lib/FixSolver.ml[49,1628+21])
                                                Texp_ident "join/1258"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/FixSolver.ml[49,1628+22]..lib/FixSolver.ml[49,1628+23])
                                                    Texp_ident "p/1270"
                                                <arg>
                                                  Nolabel
                                                  expression (lib/FixSolver.ml[49,1628+24]..lib/FixSolver.ml[49,1628+25])
                                                    Texp_ident "q/1272"
                                              ]
                                          <arg>
                                            Nolabel
                                            expression (lib/FixSolver.ml[49,1628+27]..lib/FixSolver.ml[49,1628+32])
                                              Texp_ident "lower/1267"
                                        ]
                                  ]
                            ]
                      ]
                ]
              structure_item (lib/FixSolver.ml[53,1693+2]..lib/FixSolver.ml[66,2039+5])
                Tstr_module
                Solve/1473
                  module_expr (lib/FixSolver.ml[53,1693+15]..lib/FixSolver.ml[66,2039+5])
                    Tmod_functor ()
                    module_expr (lib/FixSolver.ml[53,1693+20]..lib/FixSolver.ml[66,2039+5])
                      Tmod_structure
                      [
                        structure_item (lib/FixSolver.ml[55,1721+4]..lib/FixSolver.ml[62,1991+7])
                          Tstr_module
                          G/1347
                            module_expr (lib/FixSolver.ml[55,1721+15]..lib/FixSolver.ml[62,1991+7])
                              Tmod_structure
                              [
                                structure_item (lib/FixSolver.ml[56,1743+6]..lib/FixSolver.ml[56,1743+37])
                                  Tstr_type Nonrec
                                  [
                                    type_declaration variable/1273 (lib/FixSolver.ml[56,1743+6]..lib/FixSolver.ml[56,1743+37])
                                      ptype_params =
                                        []
                                      ptype_cstrs =
                                        []
                                      ptype_kind =
                                        Ttype_abstract
                                      ptype_private = Public
                                      ptype_manifest =
                                        Some
                                          core_type (lib/FixSolver.ml[56,1743+29]..lib/FixSolver.ml[56,1743+37])
                                            Ttyp_constr "variable/1256"
                                            []
                                  ]
                                structure_item (lib/FixSolver.ml[57,1781+6]..lib/FixSolver.ml[57,1781+37])
                                  Tstr_type Nonrec
                                  [
                                    type_declaration property/1274 (lib/FixSolver.ml[57,1781+6]..lib/FixSolver.ml[57,1781+37])
                                      ptype_params =
                                        []
                                      ptype_cstrs =
                                        []
                                      ptype_kind =
                                        Ttype_abstract
                                      ptype_private = Public
                                      ptype_manifest =
                                        Some
                                          core_type (lib/FixSolver.ml[57,1781+29]..lib/FixSolver.ml[57,1781+37])
                                            Ttyp_constr "property/1257"
                                            []
                                  ]
                                structure_item (lib/FixSolver.ml[58,1819+6]..lib/FixSolver.ml[59,1855+31])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (lib/FixSolver.ml[58,1819+10]..lib/FixSolver.ml[58,1819+22])
                                        Tpat_var "foreach_root/1275"
                                      expression (lib/FixSolver.ml[58,1819+23]..lib/FixSolver.ml[59,1855+31]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (lib/FixSolver.ml[58,1819+23]..lib/FixSolver.ml[58,1819+33])
                                              Tpat_var "contribute/1277"
                                            expression (lib/FixSolver.ml[59,1855+8]..lib/FixSolver.ml[59,1855+31])
                                              Texp_apply
                                              expression (lib/FixSolver.ml[59,1855+8]..lib/FixSolver.ml[59,1855+14])
                                                Texp_ident "M/1252.iter"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/FixSolver.ml[59,1855+15]..lib/FixSolver.ml[59,1855+25])
                                                    Texp_ident "contribute/1277"
                                                <arg>
                                                  Nolabel
                                                  expression (lib/FixSolver.ml[59,1855+26]..lib/FixSolver.ml[59,1855+31])
                                                    Texp_ident "lower/1267"
                                              ]
                                        ]
                                  ]
                                structure_item (lib/FixSolver.ml[60,1887+6]..lib/FixSolver.ml[61,1932+58])
                                  Tstr_value Nonrec
                                  [
                                    <def>
                                      pattern (lib/FixSolver.ml[60,1887+10]..lib/FixSolver.ml[60,1887+27])
                                        Tpat_var "foreach_successor/1278"
                                      expression (lib/FixSolver.ml[60,1887+28]..lib/FixSolver.ml[61,1932+58]) ghost
                                        Texp_function
                                        Nolabel
                                        [
                                          <case>
                                            pattern (lib/FixSolver.ml[60,1887+28]..lib/FixSolver.ml[60,1887+29])
                                              Tpat_var "x/1280"
                                            expression (lib/FixSolver.ml[60,1887+30]..lib/FixSolver.ml[61,1932+58]) ghost
                                              Texp_function
                                              Nolabel
                                              [
                                                <case>
                                                  pattern (lib/FixSolver.ml[60,1887+30]..lib/FixSolver.ml[60,1887+31])
                                                    Tpat_var "p/1281"
                                                  expression (lib/FixSolver.ml[60,1887+32]..lib/FixSolver.ml[61,1932+58]) ghost
                                                    Texp_function
                                                    Nolabel
                                                    [
                                                      <case>
                                                        pattern (lib/FixSolver.ml[60,1887+32]..lib/FixSolver.ml[60,1887+42])
                                                          Tpat_var "contribute/1282"
                                                        expression (lib/FixSolver.ml[61,1932+8]..lib/FixSolver.ml[61,1932+58])
                                                          Texp_apply
                                                          expression (lib/FixSolver.ml[61,1932+8]..lib/FixSolver.ml[61,1932+17])
                                                            Texp_ident "Stdlib!.List.iter"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/FixSolver.ml[61,1932+18]..lib/FixSolver.ml[61,1932+43])
                                                                Texp_function
                                                                Nolabel
                                                                [
                                                                  <case>
                                                                    pattern (lib/FixSolver.ml[61,1932+23]..lib/FixSolver.ml[61,1932+24])
                                                                      Tpat_var "y/1346"
                                                                    expression (lib/FixSolver.ml[61,1932+28]..lib/FixSolver.ml[61,1932+42])
                                                                      Texp_apply
                                                                      expression (lib/FixSolver.ml[61,1932+28]..lib/FixSolver.ml[61,1932+38])
                                                                        Texp_ident "contribute/1282"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (lib/FixSolver.ml[61,1932+39]..lib/FixSolver.ml[61,1932+40])
                                                                            Texp_ident "y/1346"
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (lib/FixSolver.ml[61,1932+41]..lib/FixSolver.ml[61,1932+42])
                                                                            Texp_ident "p/1281"
                                                                      ]
                                                                ]
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/FixSolver.ml[61,1932+44]..lib/FixSolver.ml[61,1932+58])
                                                                Texp_apply
                                                                expression (lib/FixSolver.ml[61,1932+45]..lib/FixSolver.ml[61,1932+55])
                                                                  Texp_ident "successors/1260"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/FixSolver.ml[61,1932+56]..lib/FixSolver.ml[61,1932+57])
                                                                      Texp_ident "x/1280"
                                                                ]
                                                          ]
                                                    ]
                                              ]
                                        ]
                                  ]
                              ]
                        structure_item (lib/FixSolver.ml[64,2000+4]..lib/FixSolver.ml[64,2000+37])
                          Tstr_include                          module_expr (lib/FixSolver.ml[64,2000+12]..lib/FixSolver.ml[64,2000+37])
                            Tmod_apply
                            module_expr (lib/FixSolver.ml[64,2000+12]..lib/FixSolver.ml[64,2000+34])
                              Tmod_apply
                              module_expr (lib/FixSolver.ml[64,2000+12]..lib/FixSolver.ml[64,2000+31])
                                Tmod_apply
                                module_expr (lib/FixSolver.ml[64,2000+12]..lib/FixSolver.ml[64,2000+28])
                                  module_expr (lib/FixSolver.ml[64,2000+12]..lib/FixSolver.ml[64,2000+28])
                                    Tmod_ident "Gbnf_parser!.Fix.DataFlow.Run"
                                module_expr (lib/FixSolver.ml[64,2000+29]..lib/FixSolver.ml[64,2000+30])
                                  Tmod_ident "M/1252"
                              module_expr (lib/FixSolver.ml[64,2000+32]..lib/FixSolver.ml[64,2000+33])
                                Tmod_ident "P/1255"
                            module_expr (lib/FixSolver.ml[64,2000+35]..lib/FixSolver.ml[64,2000+36])
                              Tmod_ident "G/1347"
                      ]
            ]
  structure_item (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost,None)
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
          Texp_apply
          expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/FixSolver.ml[68,2046+3]..lib/FixSolver.ml[68,2046+3]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__FixSolver>
 "Make"[module] ->
     Abs<Gbnf_parser__FixSolver.27>
        (M/1252,
         Abs
            (P/1255,
             {
              "Solve"[module] ->
                  Abs<Gbnf_parser__FixSolver.26>
                     (()/1,
                      {
                       "G"[module] ->
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            };
                       "dirty"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "dirty"[value];
                       "examine"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "examine"[value];
                       "is_dirty"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "is_dirty"[value];
                       "pending"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "pending"[value];
                       "properties"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "properties"[value];
                       "property"[type] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "property"[type];
                       "schedule"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "schedule"[value];
                       "solution"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "solution"[value];
                       "update"[value] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "update"[value];
                       "variable"[type] ->
                           CU Gbnf_parser . "Fix"[module] .
                           "DataFlow"[module] . "Run"[module](
                           M/1252<Gbnf_parser__FixSolver.0>)(
                           P/1255<Gbnf_parser__FixSolver.1>)(
                           {<Gbnf_parser__FixSolver.25>
                            "foreach_root"[value] ->
                                <Gbnf_parser__FixSolver.18>;
                            "foreach_successor"[value] ->
                                <Gbnf_parser__FixSolver.20>;
                            "property"[type] -> <Gbnf_parser__FixSolver.17>;
                            "variable"[type] -> <Gbnf_parser__FixSolver.16>;
                            })
                           . "variable"[type];
                       });
              "join"[value] -> <Gbnf_parser__FixSolver.4>;
              "lower"[value] -> <Gbnf_parser__FixSolver.11>;
              "property"[type] -> <Gbnf_parser__FixSolver.3>;
              "record_ConVar"[value] -> <Gbnf_parser__FixSolver.12>;
              "record_VarVar"[value] -> <Gbnf_parser__FixSolver.8>;
              "successors"[value] -> <Gbnf_parser__FixSolver.6>;
              "upper"[value] -> <Gbnf_parser__FixSolver.5>;
              "variable"[type] -> <Gbnf_parser__FixSolver.2>;
              }));
 }

(setglobal Gbnf_parser__FixSolver!
  (let
    (*match*/2027 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__FixSolver"))
     *match*/2025 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/2023 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/FixSolver.ml"))
     *match*/2021 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "FixSolver.ml"))
     Make/1474 =
       (module-defn(Make/1474) Gbnf_parser__FixSolver lib/FixSolver.ml(14):976-2049
         (function M/2011 P/2010 is_a_functor
           (let
             (M/1252 =a M/2011
              P/1255 =a P/2010
              join/1258 = (field 0 P/1255)
              upper/1259 =
                (after Gbnf_parser__FixSolver.Make.upper lib/FixSolver.ml(31):1255-1265
                  (apply (field 0 M/1252) 0))
              successors/1260 =
                (function x/1262
                  (funct-body Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(33)<ghost>:1284-1331
                    (before Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1292-1331
                      (try
                        (after Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1296-1310
                          (apply (field 2 M/1252) x/1262 upper/1259))
                       with exn/2004
                        (catch
                          (if (== exn/2004 (field 7 (global Stdlib!)))
                            (before Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1329-1331
                              0)
                            (exit 1))
                         with (1) (reraise exn/2004))))))
              record_VarVar/1263 =
                (function x/1265 y/1266 : int
                  (funct-body Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(36)<ghost>:1353-1396
                    (before Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1363-1396
                      (after Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1363-1396
                        (apply (field 1 M/1252) x/1265
                          (makeblock 0 y/1266
                            (after Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1377-1389
                              (apply successors/1260 x/1265)))
                          upper/1259)))))
              lower/1267 =
                (after Gbnf_parser__FixSolver.Make.lower lib/FixSolver.ml(42):1496-1506
                  (apply (field 0 M/1252) 0))
              record_ConVar/1268 =
                (function p/1270 y/1271 : int
                  (funct-body Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(44)<ghost>:1528-1660
                    (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(45):1538-1660
                      (catch
                        (try
                          (exit 2
                            (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(45):1544-1558
                              (apply (field 2 M/1252) y/1271 lower/1267)))
                         with exn/2005
                          (catch
                            (if (== exn/2005 (field 7 (global Stdlib!)))
                              (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(47):1601-1616
                                (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(47):1601-1616
                                  (apply (field 1 M/1252) y/1271 p/1270
                                    lower/1267)))
                              (exit 3))
                           with (3) (reraise exn/2005)))
                       with (2 q/1272)
                        (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1636-1660
                          (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1636-1660
                            (apply (field 1 M/1252) y/1271
                              (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1644-1654
                                (apply join/1258 p/1270 q/1272))
                              lower/1267)))))))
              Solve/1473 =
                (module-defn(Solve/1473) Gbnf_parser__FixSolver.Make lib/FixSolver.ml(53):1695-2044
                  (function */2009 is_a_functor
                    (let
                      (*/2006 =a */2009
                       G/1347 =
                         (module-defn(G/1347) Gbnf_parser__FixSolver.Make.Solve lib/FixSolver.ml(55):1725-1998
                           (let
                             (foreach_root/1275 =
                                (function contribute/1277 : int
                                  (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(58)<ghost>:1842-1886
                                    (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(59):1863-1886
                                      (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(59):1863-1886
                                        (apply (field 4 M/1252)
                                          contribute/1277 lower/1267)))))
                              foreach_successor/1278 =
                                (function x/1280 p/1281 contribute/1282 : int
                                  (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(60)<ghost>:1915-1990
                                    (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1940-1990
                                      (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1940-1990
                                        (apply
                                          (field 16 (global Stdlib__List!))
                                          (function y/1346 : int
                                            (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1950-1975
                                              (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1960-1974
                                                (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1960-1974
                                                  (apply contribute/1282
                                                    y/1346 p/1281)))))
                                          (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1976-1990
                                            (apply successors/1260 x/1280))))))))
                             (pseudo Gbnf_parser__FixSolver.Make.Solve.G lib/FixSolver.ml(55):1736-1998
                               (makeblock 0 foreach_root/1275
                                 foreach_successor/1278))))
                       include/2007 =
                         (apply
                           (apply
                             (apply
                               (let
                                 (let/2008 =
                                    (field 0 (global Gbnf_parser__DataFlow!)))
                                 (field 0 (global Gbnf_parser__DataFlow!)))
                               (makeblock 0 (field 0 M/1252) (field 1 M/1252)
                                 (field 2 M/1252)))
                             P/1255)
                           G/1347)
                       properties/1464 =a (field 0 include/2007)
                       pending/1465 =a (field 1 include/2007)
                       dirty/1466 =a (field 2 include/2007)
                       is_dirty/1467 =a (field 3 include/2007)
                       schedule/1468 =a (field 4 include/2007)
                       update/1469 =a (field 5 include/2007)
                       examine/1470 =a (field 6 include/2007)
                       solution/1472 =a (field 7 include/2007))
                      (pseudo Gbnf_parser__FixSolver.Make.Solve lib/FixSolver.ml(53):1713-2044
                        (makeblock 0 G/1347 properties/1464 pending/1465
                          dirty/1466 is_dirty/1467 schedule/1468 update/1469
                          examine/1470 solution/1472))))))
             (pseudo Gbnf_parser__FixSolver.Make lib/FixSolver.ml(17):1047-2049
               (makeblock 0 join/1258 upper/1259 successors/1260
                 record_VarVar/1263 lower/1267 record_ConVar/1268 Solve/1473)))))
     *match*/2019 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/2017 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/2015 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/2013 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__FixSolver")))
    (pseudo <unknown location> (makeblock 0 Make/1474))))
(setglobal Gbnf_parser__FixSolver!
  (let
    (*match*/2027 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 3 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__FixSolver"))
     *match*/2025 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply
           (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           "gbnf_parser"))
     *match*/2023 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 0 (field 5 (global Expect_test_collector!)))
           "lib/FixSolver.ml"))
     *match*/2021 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(14)<ghost>:976-976
         (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
           "FixSolver.ml"))
     Make/1474 =
       (module-defn(Make/1474) Gbnf_parser__FixSolver lib/FixSolver.ml(14):976-2049
         (function M/2011 P/2010 is_a_functor
           (let
             (M/1252 =a M/2011
              P/1255 =a P/2010
              join/1258 = (field 0 P/1255)
              upper/1259 =
                (after Gbnf_parser__FixSolver.Make.upper lib/FixSolver.ml(31):1255-1265
                  (apply (field 0 M/1252) 0))
              successors/1260 =
                (function x/1262
                  (funct-body Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(33)<ghost>:1284-1331
                    (before Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1292-1331
                      (try
                        (after Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1296-1310
                          (apply (field 2 M/1252) x/1262 upper/1259))
                       with exn/2004
                        (if (== exn/2004 (field 7 (global Stdlib!)))
                          (before Gbnf_parser__FixSolver.Make.successors lib/FixSolver.ml(34):1329-1331
                            0)
                          (reraise exn/2004))))))
              record_VarVar/1263 =
                (function x/1265 y/1266 : int
                  (funct-body Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(36)<ghost>:1353-1396
                    (before Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1363-1396
                      (after Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1363-1396
                        (apply (field 1 M/1252) x/1265
                          (makeblock 0 y/1266
                            (after Gbnf_parser__FixSolver.Make.record_VarVar lib/FixSolver.ml(37):1377-1389
                              (apply successors/1260 x/1265)))
                          upper/1259)))))
              lower/1267 =
                (after Gbnf_parser__FixSolver.Make.lower lib/FixSolver.ml(42):1496-1506
                  (apply (field 0 M/1252) 0))
              record_ConVar/1268 =
                (function p/1270 y/1271 : int
                  (funct-body Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(44)<ghost>:1528-1660
                    (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(45):1538-1660
                      (catch
                        (try
                          (exit 2
                            (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(45):1544-1558
                              (apply (field 2 M/1252) y/1271 lower/1267)))
                         with exn/2005
                          (if (== exn/2005 (field 7 (global Stdlib!)))
                            (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(47):1601-1616
                              (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(47):1601-1616
                                (apply (field 1 M/1252) y/1271 p/1270
                                  lower/1267)))
                            (reraise exn/2005)))
                       with (2 q/1272)
                        (before Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1636-1660
                          (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1636-1660
                            (apply (field 1 M/1252) y/1271
                              (after Gbnf_parser__FixSolver.Make.record_ConVar lib/FixSolver.ml(49):1644-1654
                                (apply join/1258 p/1270 q/1272))
                              lower/1267)))))))
              Solve/1473 =
                (module-defn(Solve/1473) Gbnf_parser__FixSolver.Make lib/FixSolver.ml(53):1695-2044
                  (function */2009 is_a_functor
                    (let
                      (G/1347 =
                         (module-defn(G/1347) Gbnf_parser__FixSolver.Make.Solve lib/FixSolver.ml(55):1725-1998
                           (let
                             (foreach_root/1275 =
                                (function contribute/1277 : int
                                  (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(58)<ghost>:1842-1886
                                    (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(59):1863-1886
                                      (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_root lib/FixSolver.ml(59):1863-1886
                                        (apply (field 4 M/1252)
                                          contribute/1277 lower/1267)))))
                              foreach_successor/1278 =
                                (function x/1280 p/1281 contribute/1282 : int
                                  (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(60)<ghost>:1915-1990
                                    (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1940-1990
                                      (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1940-1990
                                        (apply
                                          (field 16 (global Stdlib__List!))
                                          (function y/1346 : int
                                            (funct-body Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1950-1975
                                              (before Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1960-1974
                                                (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor.(fun) lib/FixSolver.ml(61):1960-1974
                                                  (apply contribute/1282
                                                    y/1346 p/1281)))))
                                          (after Gbnf_parser__FixSolver.Make.Solve.G.foreach_successor lib/FixSolver.ml(61):1976-1990
                                            (apply successors/1260 x/1280))))))))
                             (pseudo Gbnf_parser__FixSolver.Make.Solve.G lib/FixSolver.ml(55):1736-1998
                               (makeblock 0 foreach_root/1275
                                 foreach_successor/1278))))
                       include/2007 =
                         (apply
                           (apply
                             (apply
                               (let
                                 (let/2008 =
                                    (field 0 (global Gbnf_parser__DataFlow!)))
                                 (field 0 (global Gbnf_parser__DataFlow!)))
                               (makeblock 0 (field 0 M/1252) (field 1 M/1252)
                                 (field 2 M/1252)))
                             P/1255)
                           G/1347)
                       properties/1464 =a (field 0 include/2007)
                       pending/1465 =a (field 1 include/2007)
                       dirty/1466 =a (field 2 include/2007)
                       is_dirty/1467 =a (field 3 include/2007)
                       schedule/1468 =a (field 4 include/2007)
                       update/1469 =a (field 5 include/2007)
                       examine/1470 =a (field 6 include/2007)
                       solution/1472 =a (field 7 include/2007))
                      (pseudo Gbnf_parser__FixSolver.Make.Solve lib/FixSolver.ml(53):1713-2044
                        (makeblock 0 G/1347 properties/1464 pending/1465
                          dirty/1466 is_dirty/1467 schedule/1468 update/1469
                          examine/1470 solution/1472))))))
             (pseudo Gbnf_parser__FixSolver.Make lib/FixSolver.ml(17):1047-2049
               (makeblock 0 join/1258 upper/1259 successors/1260
                 record_VarVar/1263 lower/1267 record_ConVar/1268 Solve/1473)))))
     *match*/2019 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 5 (global Ppx_inline_test_lib!)) "gbnf_parser"))
     *match*/2017 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 1 (field 5 (global Expect_test_collector!))) 0))
     *match*/2015 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply
           (field 1 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
           0))
     *match*/2013 =
       (after Gbnf_parser__FixSolver lib/FixSolver.ml(68)<ghost>:2049-2049
         (apply (field 4 (global Ppx_module_timer_runtime!))
           #"Gbnf_parser__FixSolver")))
    (pseudo <unknown location> (makeblock 0 Make/1474))))
