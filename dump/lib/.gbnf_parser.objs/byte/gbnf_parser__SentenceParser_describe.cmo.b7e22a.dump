[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          None
        expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          None
        expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          None
        expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
                Pexp_constant PConst_string("lib/sentenceParser_describe.ml",(lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          None
        expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost
                Pexp_constant PConst_string("sentenceParser_describe.ml",(lib/sentenceParser_describe.ml[18,438+0]..[18,438+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[18,438+0]..[19,447+75])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[18,438+4]..[18,438+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[18,438+4]..[18,438+6])
          None
        expression (lib/sentenceParser_describe.ml[19,447+2]..[19,447+75])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[19,447+2]..[19,447+39])
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/sentenceParser_describe.ml[19,447+2]..[19,447+39])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[19,447+40]..[19,447+75])
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser_describe.ml[19,447+40]..[19,447+75])
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[20,523+0]..[21,532+71])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[20,523+4]..[20,523+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[20,523+4]..[20,523+6])
          None
        expression (lib/sentenceParser_describe.ml[21,532+2]..[21,532+71])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[21,532+2]..[21,532+57])
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/sentenceParser_describe.ml[21,532+2]..[21,532+57])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[21,532+58]..[21,532+71])
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[21,532+59]..[21,532+70]),None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[22,604+0]..[24,654+46])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[22,604+4]..[22,604+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[22,604+4]..[22,604+6])
          None
        expression (lib/sentenceParser_describe.ml[23,613+2]..[24,654+46])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[23,613+2]..[23,613+40])
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/sentenceParser_describe.ml[23,613+2]..[23,613+40])
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/sentenceParser_describe.ml[24,654+23]..[24,654+46])
                Pexp_constant PConst_string("lib/sentenceParser.ml",(lib/sentenceParser_describe.ml[24,654+24]..[24,654+45]),None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[25,701+0]..[26,710+77])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[25,701+4]..[25,701+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[25,701+4]..[25,701+6])
          None
        expression (lib/sentenceParser_describe.ml[26,710+2]..[26,710+77])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[26,710+2]..[26,710+43])
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/sentenceParser_describe.ml[26,710+2]..[26,710+43])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[26,710+44]..[26,710+57])
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[26,710+45]..[26,710+56]),None)
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[26,710+58]..[26,710+77])
                Pexp_constant PConst_string("sentenceParser.ml",(lib/sentenceParser_describe.ml[26,710+59]..[26,710+76]),None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[27,788+0]..[27,788+51])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[27,788+4]..[27,788+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[27,788+4]..[27,788+6])
          None
        expression (lib/sentenceParser_describe.ml[27,788+9]..[27,788+51])
          Pexp_ident "MenhirLib.StaticVersion.require_unreleased" (lib/sentenceParser_describe.ml[27,788+9]..[27,788+51])
    ]
  structure_item (lib/sentenceParser_describe.ml[28,840+0]..[48,1258+5])
    Pstr_module
    "MenhirBasics" (lib/sentenceParser_describe.ml[28,840+7]..[28,840+19])
      module_expr (lib/sentenceParser_describe.ml[29,862+2]..[48,1258+5])
        Pmod_structure
        [
          structure_item (lib/sentenceParser_describe.ml[30,871+4]..[30,871+19])
            Pstr_exception
            type_exception
              ptyext_constructor =
                extension_constructor (lib/sentenceParser_describe.ml[30,871+4]..[30,871+19])
                  pext_name = "Error"
                  pext_kind =
                    Pext_decl
                      []
                      None
          structure_item (lib/sentenceParser_describe.ml[31,892+4]..[31,892+26])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser_describe.ml[31,892+8]..[31,892+12])
                  Ppat_var "_eRR" (lib/sentenceParser_describe.ml[31,892+8]..[31,892+12])
                core_type (lib/sentenceParser_describe.ml[31,892+15]..[31,892+18])
                  Ptyp_constr "exn" (lib/sentenceParser_describe.ml[31,892+15]..[31,892+18])
                  []
                expression (lib/sentenceParser_describe.ml[31,892+21]..[31,892+26])
                  Pexp_construct "Error" (lib/sentenceParser_describe.ml[31,892+21]..[31,892+26])
                  None
            ]
          structure_item (lib/sentenceParser_describe.ml[32,919+4]..[47,1245+11])
            Pstr_type Rec
            [
              type_declaration "token" (lib/sentenceParser_describe.ml[32,919+9]..[32,919+14]) (lib/sentenceParser_describe.ml[32,919+4]..[47,1245+11])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (lib/sentenceParser_describe.ml[33,936+6]..[33,936+20])
                        "Tchar" (lib/sentenceParser_describe.ml[33,936+8]..[33,936+13])
                        [
                          core_type (lib/sentenceParser_describe.ml[33,936+17]..[33,936+20])
                            Ptyp_constr "int" (lib/sentenceParser_describe.ml[33,936+17]..[33,936+20])
                            []
                        ]
                        None
                      (lib/sentenceParser_describe.ml[34,958+6]..[34,958+12])
                        "STAR" (lib/sentenceParser_describe.ml[34,958+8]..[34,958+12])
                        []
                        None
                      (lib/sentenceParser_describe.ml[35,972+6]..[35,972+14])
                        "RPAREN" (lib/sentenceParser_describe.ml[35,972+8]..[35,972+14])
                        []
                        None
                      (lib/sentenceParser_describe.ml[36,988+6]..[36,988+41])
                        "REGEX" (lib/sentenceParser_describe.ml[36,988+8]..[36,988+13])
                        [
                          core_type (lib/sentenceParser_describe.ml[36,988+17]..[36,988+41])
                            Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[36,988+24]..[36,988+41])
                            [
                              core_type (lib/sentenceParser_describe.ml[36,988+17]..[36,988+23])
                                Ptyp_constr "string" (lib/sentenceParser_describe.ml[36,988+17]..[36,988+23])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser_describe.ml[37,1031+6]..[37,1031+16])
                        "QUESTION" (lib/sentenceParser_describe.ml[37,1031+8]..[37,1031+16])
                        []
                        None
                      (lib/sentenceParser_describe.ml[38,1049+6]..[38,1049+39])
                        "QID" (lib/sentenceParser_describe.ml[38,1049+8]..[38,1049+11])
                        [
                          core_type (lib/sentenceParser_describe.ml[38,1049+15]..[38,1049+39])
                            Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[38,1049+22]..[38,1049+39])
                            [
                              core_type (lib/sentenceParser_describe.ml[38,1049+15]..[38,1049+21])
                                Ptyp_constr "string" (lib/sentenceParser_describe.ml[38,1049+15]..[38,1049+21])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser_describe.ml[39,1090+6]..[39,1090+12])
                        "PLUS" (lib/sentenceParser_describe.ml[39,1090+8]..[39,1090+12])
                        []
                        None
                      (lib/sentenceParser_describe.ml[40,1104+6]..[40,1104+15])
                        "NEWLINE" (lib/sentenceParser_describe.ml[40,1104+8]..[40,1104+15])
                        []
                        None
                      (lib/sentenceParser_describe.ml[41,1121+6]..[41,1121+14])
                        "LPAREN" (lib/sentenceParser_describe.ml[41,1121+8]..[41,1121+14])
                        []
                        None
                      (lib/sentenceParser_describe.ml[42,1137+6]..[42,1137+39])
                        "LID" (lib/sentenceParser_describe.ml[42,1137+8]..[42,1137+11])
                        [
                          core_type (lib/sentenceParser_describe.ml[42,1137+15]..[42,1137+39])
                            Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[42,1137+22]..[42,1137+39])
                            [
                              core_type (lib/sentenceParser_describe.ml[42,1137+15]..[42,1137+21])
                                Ptyp_constr "string" (lib/sentenceParser_describe.ml[42,1137+15]..[42,1137+21])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser_describe.ml[43,1178+6]..[43,1178+11])
                        "EOF" (lib/sentenceParser_describe.ml[43,1178+8]..[43,1178+11])
                        []
                        None
                      (lib/sentenceParser_describe.ml[44,1191+6]..[44,1191+12])
                        "DASH" (lib/sentenceParser_describe.ml[44,1191+8]..[44,1191+12])
                        []
                        None
                      (lib/sentenceParser_describe.ml[45,1205+6]..[45,1205+23])
                        "COLONCOLONEQUAL" (lib/sentenceParser_describe.ml[45,1205+8]..[45,1205+23])
                        []
                        None
                      (lib/sentenceParser_describe.ml[46,1230+6]..[46,1230+13])
                        "CARET" (lib/sentenceParser_describe.ml[46,1230+8]..[46,1230+13])
                        []
                        None
                      (lib/sentenceParser_describe.ml[47,1245+6]..[47,1245+11])
                        "BAR" (lib/sentenceParser_describe.ml[47,1245+8]..[47,1245+11])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (lib/sentenceParser_describe.ml[49,1264+0]..[49,1264+20])
    Pstr_include    module_expr (lib/sentenceParser_describe.ml[49,1264+8]..[49,1264+20])
      Pmod_ident "MenhirBasics" (lib/sentenceParser_describe.ml[49,1264+8]..[49,1264+20])
  structure_item (lib/sentenceParser_describe.ml[50,1285+0]..[50,1285+11])
    Pstr_open Fresh
    module_expr (lib/sentenceParser_describe.ml[50,1285+5]..[50,1285+11])
      Pmod_ident "Syntax" (lib/sentenceParser_describe.ml[50,1285+5]..[50,1285+11])
  structure_item (lib/sentenceParser_describe.ml[51,1297+0]..[1431,94444+5])
    Pstr_module
    "Tables" (lib/sentenceParser_describe.ml[51,1297+7]..[51,1297+13])
      module_expr (lib/sentenceParser_describe.ml[52,1313+2]..[1431,94444+5])
        Pmod_structure
        [
          structure_item (lib/sentenceParser_describe.ml[53,1322+4]..[53,1322+24])
            Pstr_include            module_expr (lib/sentenceParser_describe.ml[53,1322+12]..[53,1322+24])
              Pmod_ident "MenhirBasics" (lib/sentenceParser_describe.ml[53,1322+12]..[53,1322+24])
          structure_item (lib/sentenceParser_describe.ml[54,1347+4]..[1430,92961+1482])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser_describe.ml[54,1347+8]..[54,1347+22])
                  Ppat_var "token2terminal" (lib/sentenceParser_describe.ml[54,1347+8]..[54,1347+22])
                core_type (lib/sentenceParser_describe.ml[54,1347+25]..[54,1347+37])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/sentenceParser_describe.ml[54,1347+25]..[54,1347+30])
                    Ptyp_constr "token" (lib/sentenceParser_describe.ml[54,1347+25]..[54,1347+30])
                    []
                  core_type (lib/sentenceParser_describe.ml[54,1347+34]..[54,1347+37])
                    Ptyp_constr "int" (lib/sentenceParser_describe.ml[54,1347+34]..[54,1347+37])
                    []
                expression (lib/sentenceParser_describe.ml[55,1387+6]..[71,1741+22])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser_describe.ml[55,1387+10]..[55,1387+14])
                    Ppat_var "_tok" (lib/sentenceParser_describe.ml[55,1387+10]..[55,1387+14])
                  expression (lib/sentenceParser_describe.ml[56,1405+8]..[71,1741+22])
                    Pexp_match
                    expression (lib/sentenceParser_describe.ml[56,1405+14]..[56,1405+18])
                      Pexp_ident "_tok" (lib/sentenceParser_describe.ml[56,1405+14]..[56,1405+18])
                    [
                      <case>
                        pattern (lib/sentenceParser_describe.ml[57,1429+10]..[57,1429+13])
                          Ppat_construct "BAR" (lib/sentenceParser_describe.ml[57,1429+10]..[57,1429+13])
                          None
                        expression (lib/sentenceParser_describe.ml[57,1429+17]..[57,1429+19])
                          Pexp_constant PConst_int (15,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[58,1449+10]..[58,1449+15])
                          Ppat_construct "CARET" (lib/sentenceParser_describe.ml[58,1449+10]..[58,1449+15])
                          None
                        expression (lib/sentenceParser_describe.ml[58,1449+19]..[58,1449+21])
                          Pexp_constant PConst_int (14,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[59,1471+10]..[59,1471+25])
                          Ppat_construct "COLONCOLONEQUAL" (lib/sentenceParser_describe.ml[59,1471+10]..[59,1471+25])
                          None
                        expression (lib/sentenceParser_describe.ml[59,1471+29]..[59,1471+31])
                          Pexp_constant PConst_int (13,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[60,1503+10]..[60,1503+14])
                          Ppat_construct "DASH" (lib/sentenceParser_describe.ml[60,1503+10]..[60,1503+14])
                          None
                        expression (lib/sentenceParser_describe.ml[60,1503+18]..[60,1503+20])
                          Pexp_constant PConst_int (12,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[61,1524+10]..[61,1524+13])
                          Ppat_construct "EOF" (lib/sentenceParser_describe.ml[61,1524+10]..[61,1524+13])
                          None
                        expression (lib/sentenceParser_describe.ml[61,1524+17]..[61,1524+19])
                          Pexp_constant PConst_int (11,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[62,1544+10]..[62,1544+15])
                          Ppat_construct "LID" (lib/sentenceParser_describe.ml[62,1544+10]..[62,1544+13])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[62,1544+14]..[62,1544+15])
                              Ppat_any
                        expression (lib/sentenceParser_describe.ml[62,1544+19]..[62,1544+21])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[63,1566+10]..[63,1566+16])
                          Ppat_construct "LPAREN" (lib/sentenceParser_describe.ml[63,1566+10]..[63,1566+16])
                          None
                        expression (lib/sentenceParser_describe.ml[63,1566+20]..[63,1566+21])
                          Pexp_constant PConst_int (9,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[64,1588+10]..[64,1588+17])
                          Ppat_construct "NEWLINE" (lib/sentenceParser_describe.ml[64,1588+10]..[64,1588+17])
                          None
                        expression (lib/sentenceParser_describe.ml[64,1588+21]..[64,1588+22])
                          Pexp_constant PConst_int (8,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[65,1611+10]..[65,1611+14])
                          Ppat_construct "PLUS" (lib/sentenceParser_describe.ml[65,1611+10]..[65,1611+14])
                          None
                        expression (lib/sentenceParser_describe.ml[65,1611+18]..[65,1611+19])
                          Pexp_constant PConst_int (7,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[66,1631+10]..[66,1631+15])
                          Ppat_construct "QID" (lib/sentenceParser_describe.ml[66,1631+10]..[66,1631+13])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[66,1631+14]..[66,1631+15])
                              Ppat_any
                        expression (lib/sentenceParser_describe.ml[66,1631+19]..[66,1631+20])
                          Pexp_constant PConst_int (6,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[67,1652+10]..[67,1652+18])
                          Ppat_construct "QUESTION" (lib/sentenceParser_describe.ml[67,1652+10]..[67,1652+18])
                          None
                        expression (lib/sentenceParser_describe.ml[67,1652+22]..[67,1652+23])
                          Pexp_constant PConst_int (5,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[68,1676+10]..[68,1676+17])
                          Ppat_construct "REGEX" (lib/sentenceParser_describe.ml[68,1676+10]..[68,1676+15])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[68,1676+16]..[68,1676+17])
                              Ppat_any
                        expression (lib/sentenceParser_describe.ml[68,1676+21]..[68,1676+22])
                          Pexp_constant PConst_int (4,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[69,1699+10]..[69,1699+16])
                          Ppat_construct "RPAREN" (lib/sentenceParser_describe.ml[69,1699+10]..[69,1699+16])
                          None
                        expression (lib/sentenceParser_describe.ml[69,1699+20]..[69,1699+21])
                          Pexp_constant PConst_int (3,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[70,1721+10]..[70,1721+14])
                          Ppat_construct "STAR" (lib/sentenceParser_describe.ml[70,1721+10]..[70,1721+14])
                          None
                        expression (lib/sentenceParser_describe.ml[70,1721+18]..[70,1721+19])
                          Pexp_constant PConst_int (2,None)
                      <case>
                        pattern (lib/sentenceParser_describe.ml[71,1741+10]..[71,1741+17])
                          Ppat_construct "Tchar" (lib/sentenceParser_describe.ml[71,1741+10]..[71,1741+15])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[71,1741+16]..[71,1741+17])
                              Ppat_any
                        expression (lib/sentenceParser_describe.ml[71,1741+21]..[71,1741+22])
                          Pexp_constant PConst_int (1,None)
                    ]
              <def>
                pattern (lib/sentenceParser_describe.ml[72,1764+8]..[72,1764+22])
                  Ppat_var "error_terminal" (lib/sentenceParser_describe.ml[72,1764+8]..[72,1764+22])
                expression (lib/sentenceParser_describe.ml[72,1764+25]..[72,1764+26])
                  Pexp_constant PConst_int (0,None)
              <def>
                pattern (lib/sentenceParser_describe.ml[73,1791+8]..[73,1791+19])
                  Ppat_var "token2value" (lib/sentenceParser_describe.ml[73,1791+8]..[73,1791+19])
                core_type (lib/sentenceParser_describe.ml[73,1791+22]..[73,1791+36])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/sentenceParser_describe.ml[73,1791+22]..[73,1791+27])
                    Ptyp_constr "token" (lib/sentenceParser_describe.ml[73,1791+22]..[73,1791+27])
                    []
                  core_type (lib/sentenceParser_describe.ml[73,1791+31]..[73,1791+36])
                    Ptyp_constr "Obj.t" (lib/sentenceParser_describe.ml[73,1791+31]..[73,1791+36])
                    []
                expression (lib/sentenceParser_describe.ml[74,1830+6]..[90,2321+33])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser_describe.ml[74,1830+10]..[74,1830+14])
                    Ppat_var "_tok" (lib/sentenceParser_describe.ml[74,1830+10]..[74,1830+14])
                  expression (lib/sentenceParser_describe.ml[75,1848+8]..[90,2321+33])
                    Pexp_match
                    expression (lib/sentenceParser_describe.ml[75,1848+14]..[75,1848+18])
                      Pexp_ident "_tok" (lib/sentenceParser_describe.ml[75,1848+14]..[75,1848+18])
                    [
                      <case>
                        pattern (lib/sentenceParser_describe.ml[76,1872+10]..[76,1872+13])
                          Ppat_construct "BAR" (lib/sentenceParser_describe.ml[76,1872+10]..[76,1872+13])
                          None
                        expression (lib/sentenceParser_describe.ml[76,1872+17]..[76,1872+28])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[76,1872+17]..[76,1872+25])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[76,1872+17]..[76,1872+25])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[76,1872+26]..[76,1872+28])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[76,1872+26]..[76,1872+28])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[77,1901+10]..[77,1901+15])
                          Ppat_construct "CARET" (lib/sentenceParser_describe.ml[77,1901+10]..[77,1901+15])
                          None
                        expression (lib/sentenceParser_describe.ml[77,1901+19]..[77,1901+30])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[77,1901+19]..[77,1901+27])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[77,1901+19]..[77,1901+27])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[77,1901+28]..[77,1901+30])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[77,1901+28]..[77,1901+30])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[78,1932+10]..[78,1932+25])
                          Ppat_construct "COLONCOLONEQUAL" (lib/sentenceParser_describe.ml[78,1932+10]..[78,1932+25])
                          None
                        expression (lib/sentenceParser_describe.ml[78,1932+29]..[78,1932+40])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[78,1932+29]..[78,1932+37])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[78,1932+29]..[78,1932+37])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[78,1932+38]..[78,1932+40])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[78,1932+38]..[78,1932+40])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[79,1973+10]..[79,1973+14])
                          Ppat_construct "DASH" (lib/sentenceParser_describe.ml[79,1973+10]..[79,1973+14])
                          None
                        expression (lib/sentenceParser_describe.ml[79,1973+18]..[79,1973+29])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[79,1973+18]..[79,1973+26])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[79,1973+18]..[79,1973+26])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[79,1973+27]..[79,1973+29])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[79,1973+27]..[79,1973+29])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[80,2003+10]..[80,2003+13])
                          Ppat_construct "EOF" (lib/sentenceParser_describe.ml[80,2003+10]..[80,2003+13])
                          None
                        expression (lib/sentenceParser_describe.ml[80,2003+17]..[80,2003+28])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[80,2003+17]..[80,2003+25])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[80,2003+17]..[80,2003+25])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[80,2003+26]..[80,2003+28])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[80,2003+26]..[80,2003+28])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[81,2032+10]..[81,2032+16])
                          Ppat_construct "LID" (lib/sentenceParser_describe.ml[81,2032+10]..[81,2032+13])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[81,2032+14]..[81,2032+16])
                              Ppat_var "_v" (lib/sentenceParser_describe.ml[81,2032+14]..[81,2032+16])
                        expression (lib/sentenceParser_describe.ml[81,2032+20]..[81,2032+31])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[81,2032+20]..[81,2032+28])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[81,2032+20]..[81,2032+28])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[81,2032+29]..[81,2032+31])
                                Pexp_ident "_v" (lib/sentenceParser_describe.ml[81,2032+29]..[81,2032+31])
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[82,2064+10]..[82,2064+16])
                          Ppat_construct "LPAREN" (lib/sentenceParser_describe.ml[82,2064+10]..[82,2064+16])
                          None
                        expression (lib/sentenceParser_describe.ml[82,2064+20]..[82,2064+31])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[82,2064+20]..[82,2064+28])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[82,2064+20]..[82,2064+28])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[82,2064+29]..[82,2064+31])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[82,2064+29]..[82,2064+31])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[83,2096+10]..[83,2096+17])
                          Ppat_construct "NEWLINE" (lib/sentenceParser_describe.ml[83,2096+10]..[83,2096+17])
                          None
                        expression (lib/sentenceParser_describe.ml[83,2096+21]..[83,2096+32])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[83,2096+21]..[83,2096+29])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[83,2096+21]..[83,2096+29])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[83,2096+30]..[83,2096+32])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[83,2096+30]..[83,2096+32])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[84,2129+10]..[84,2129+14])
                          Ppat_construct "PLUS" (lib/sentenceParser_describe.ml[84,2129+10]..[84,2129+14])
                          None
                        expression (lib/sentenceParser_describe.ml[84,2129+18]..[84,2129+29])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[84,2129+18]..[84,2129+26])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[84,2129+18]..[84,2129+26])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[84,2129+27]..[84,2129+29])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[84,2129+27]..[84,2129+29])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[85,2159+10]..[85,2159+16])
                          Ppat_construct "QID" (lib/sentenceParser_describe.ml[85,2159+10]..[85,2159+13])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[85,2159+14]..[85,2159+16])
                              Ppat_var "_v" (lib/sentenceParser_describe.ml[85,2159+14]..[85,2159+16])
                        expression (lib/sentenceParser_describe.ml[85,2159+20]..[85,2159+31])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[85,2159+20]..[85,2159+28])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[85,2159+20]..[85,2159+28])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[85,2159+29]..[85,2159+31])
                                Pexp_ident "_v" (lib/sentenceParser_describe.ml[85,2159+29]..[85,2159+31])
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[86,2191+10]..[86,2191+18])
                          Ppat_construct "QUESTION" (lib/sentenceParser_describe.ml[86,2191+10]..[86,2191+18])
                          None
                        expression (lib/sentenceParser_describe.ml[86,2191+22]..[86,2191+33])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[86,2191+22]..[86,2191+30])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[86,2191+22]..[86,2191+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[86,2191+31]..[86,2191+33])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[86,2191+31]..[86,2191+33])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[87,2225+10]..[87,2225+18])
                          Ppat_construct "REGEX" (lib/sentenceParser_describe.ml[87,2225+10]..[87,2225+15])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[87,2225+16]..[87,2225+18])
                              Ppat_var "_v" (lib/sentenceParser_describe.ml[87,2225+16]..[87,2225+18])
                        expression (lib/sentenceParser_describe.ml[87,2225+22]..[87,2225+33])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[87,2225+22]..[87,2225+30])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[87,2225+22]..[87,2225+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[87,2225+31]..[87,2225+33])
                                Pexp_ident "_v" (lib/sentenceParser_describe.ml[87,2225+31]..[87,2225+33])
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[88,2259+10]..[88,2259+16])
                          Ppat_construct "RPAREN" (lib/sentenceParser_describe.ml[88,2259+10]..[88,2259+16])
                          None
                        expression (lib/sentenceParser_describe.ml[88,2259+20]..[88,2259+31])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[88,2259+20]..[88,2259+28])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[88,2259+20]..[88,2259+28])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[88,2259+29]..[88,2259+31])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[88,2259+29]..[88,2259+31])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[89,2291+10]..[89,2291+14])
                          Ppat_construct "STAR" (lib/sentenceParser_describe.ml[89,2291+10]..[89,2291+14])
                          None
                        expression (lib/sentenceParser_describe.ml[89,2291+18]..[89,2291+29])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[89,2291+18]..[89,2291+26])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[89,2291+18]..[89,2291+26])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[89,2291+27]..[89,2291+29])
                                Pexp_construct "()" (lib/sentenceParser_describe.ml[89,2291+27]..[89,2291+29])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser_describe.ml[90,2321+10]..[90,2321+18])
                          Ppat_construct "Tchar" (lib/sentenceParser_describe.ml[90,2321+10]..[90,2321+15])
                          Some
                            []
                            pattern (lib/sentenceParser_describe.ml[90,2321+16]..[90,2321+18])
                              Ppat_var "_v" (lib/sentenceParser_describe.ml[90,2321+16]..[90,2321+18])
                        expression (lib/sentenceParser_describe.ml[90,2321+22]..[90,2321+33])
                          Pexp_apply
                          expression (lib/sentenceParser_describe.ml[90,2321+22]..[90,2321+30])
                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[90,2321+22]..[90,2321+30])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser_describe.ml[90,2321+31]..[90,2321+33])
                                Pexp_ident "_v" (lib/sentenceParser_describe.ml[90,2321+31]..[90,2321+33])
                          ]
                    ]
              <def>
                pattern (lib/sentenceParser_describe.ml[91,2355+8]..[91,2355+25])
                  Ppat_var "default_reduction" (lib/sentenceParser_describe.ml[91,2355+8]..[91,2355+25])
                expression (lib/sentenceParser_describe.ml[92,2383+6]..[93,2393+185])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser_describe.ml[92,2383+7]..[92,2383+8])
                      Pexp_constant PConst_int (8,None)
                    expression (lib/sentenceParser_describe.ml[93,2393+8]..[93,2393+184])
                      Pexp_constant PConst_string("\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001",(lib/sentenceParser_describe.ml[93,2393+9]..[93,2393+183]),None)
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[94,2579+8]..[94,2579+13])
                  Ppat_var "error" (lib/sentenceParser_describe.ml[94,2579+8]..[94,2579+13])
                expression (lib/sentenceParser_describe.ml[95,2595+6]..[96,2606+326])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser_describe.ml[95,2595+7]..[95,2595+9])
                      Pexp_constant PConst_int (16,None)
                    expression (lib/sentenceParser_describe.ml[96,2606+8]..[96,2606+325])
                      Pexp_constant PConst_string("\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000",(lib/sentenceParser_describe.ml[96,2606+9]..[96,2606+324]),None)
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[97,2933+8]..[97,2933+13])
                  Ppat_var "start" (lib/sentenceParser_describe.ml[97,2933+8]..[97,2933+13])
                expression (lib/sentenceParser_describe.ml[97,2933+16]..[97,2933+17])
                  Pexp_constant PConst_int (1,None)
              <def>
                pattern (lib/sentenceParser_describe.ml[98,2951+8]..[98,2951+14])
                  Ppat_var "action" (lib/sentenceParser_describe.ml[98,2951+8]..[98,2951+14])
                expression (lib/sentenceParser_describe.ml[99,2968+6]..[102,3146+291])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser_describe.ml[99,2968+7]..[100,2979+153])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser_describe.ml[99,2968+8]..[99,2968+9])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser_describe.ml[100,2979+9]..[100,2979+152])
                          Pexp_constant PConst_string("p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000",(lib/sentenceParser_describe.ml[100,2979+10]..[100,2979+151]),None)
                      ]
                    expression (lib/sentenceParser_describe.ml[101,3134+8]..[102,3146+290])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser_describe.ml[101,3134+9]..[101,3134+10])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser_describe.ml[102,3146+10]..[102,3146+289])
                          Pexp_constant PConst_string("\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z",(lib/sentenceParser_describe.ml[102,3146+11]..[102,3146+288]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[103,3438+8]..[103,3438+11])
                  Ppat_var "lhs" (lib/sentenceParser_describe.ml[103,3438+8]..[103,3438+11])
                expression (lib/sentenceParser_describe.ml[103,3438+14]..[103,3438+65])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser_describe.ml[103,3438+15]..[103,3438+16])
                      Pexp_constant PConst_int (4,None)
                    expression (lib/sentenceParser_describe.ml[103,3438+18]..[103,3438+64])
                      Pexp_constant PConst_string("\r\220\203\187\170\153\153\135veC\"!\017\017",(lib/sentenceParser_describe.ml[103,3438+19]..[103,3438+63]),None)
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[104,3504+8]..[104,3504+12])
                  Ppat_var "goto" (lib/sentenceParser_describe.ml[104,3504+8]..[104,3504+12])
                expression (lib/sentenceParser_describe.ml[105,3519+6]..[108,3720+145])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser_describe.ml[105,3519+7]..[106,3530+176])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser_describe.ml[105,3519+8]..[105,3519+9])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser_describe.ml[106,3530+9]..[106,3530+175])
                          Pexp_constant PConst_string("\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000",(lib/sentenceParser_describe.ml[106,3530+10]..[106,3530+174]),None)
                      ]
                    expression (lib/sentenceParser_describe.ml[107,3708+8]..[108,3720+144])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser_describe.ml[107,3708+9]..[107,3708+10])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser_describe.ml[108,3720+10]..[108,3720+143])
                          Pexp_constant PConst_string("\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029",(lib/sentenceParser_describe.ml[108,3720+11]..[108,3720+142]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[109,3866+8]..[109,3866+23])
                  Ppat_var "semantic_action" (lib/sentenceParser_describe.ml[109,3866+8]..[109,3866+23])
                expression (lib/sentenceParser_describe.ml[110,3892+6]..[1426,92734+47])
                  Pexp_array
                  [
                    expression (lib/sentenceParser_describe.ml[110,3892+8]..[150,6045+15])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[110,3892+14]..[110,3892+25])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[110,3892+14]..[110,3892+25])
                      expression (lib/sentenceParser_describe.ml[111,3921+12]..[150,6045+13])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[111,3921+16]..[111,3921+29])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[111,3921+16]..[111,3921+29])
                            expression (lib/sentenceParser_describe.ml[111,3921+32]..[111,3921+71])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[111,3921+32]..[111,3921+43])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[111,3921+32]..[111,3921+43])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[111,3921+44]..[111,3921+71])
                        ]
                        expression (lib/sentenceParser_describe.ml[112,3996+12]..[150,6045+13])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[112,3996+16]..[134,5284+19])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[112,3996+18]..[112,3996+45])
                                    pattern (lib/sentenceParser_describe.ml[112,3996+48]..[112,3996+49])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[113,4047+18]..[113,4047+44])
                                    pattern (lib/sentenceParser_describe.ml[113,4047+47]..[113,4047+49])
                                      Ppat_var "_4" (lib/sentenceParser_describe.ml[113,4047+47]..[113,4047+49])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[114,4098+18]..[114,4098+46])
                                    pattern (lib/sentenceParser_describe.ml[114,4098+49]..[114,4098+62])
                                      Ppat_var "_startpos__4_" (lib/sentenceParser_describe.ml[114,4098+49]..[114,4098+62])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[115,4162+18]..[115,4162+44])
                                    pattern (lib/sentenceParser_describe.ml[115,4162+47]..[115,4162+58])
                                      Ppat_var "_endpos__4_" (lib/sentenceParser_describe.ml[115,4162+47]..[115,4162+58])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[116,4222+18]..[116,4222+44])
                                    pattern (lib/sentenceParser_describe.ml[117,4269+20]..[133,5260+23])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[117,4269+22]..[117,4269+49])
                                          pattern (lib/sentenceParser_describe.ml[117,4269+52]..[117,4269+53])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[118,4324+22]..[118,4324+48])
                                          pattern (lib/sentenceParser_describe.ml[118,4324+51]..[118,4324+53])
                                            Ppat_var "_3" (lib/sentenceParser_describe.ml[118,4324+51]..[118,4324+53])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[119,4379+22]..[119,4379+50])
                                          pattern (lib/sentenceParser_describe.ml[119,4379+53]..[119,4379+66])
                                            Ppat_var "_startpos__3_" (lib/sentenceParser_describe.ml[119,4379+53]..[119,4379+66])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[120,4447+22]..[120,4447+48])
                                          pattern (lib/sentenceParser_describe.ml[120,4447+51]..[120,4447+62])
                                            Ppat_var "_endpos__3_" (lib/sentenceParser_describe.ml[120,4447+51]..[120,4447+62])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[121,4511+22]..[121,4511+48])
                                          pattern (lib/sentenceParser_describe.ml[122,4562+24]..[132,5232+27])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[122,4562+26]..[122,4562+53])
                                                pattern (lib/sentenceParser_describe.ml[122,4562+56]..[122,4562+57])
                                                  Ppat_any
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[123,4621+26]..[123,4621+52])
                                                pattern (lib/sentenceParser_describe.ml[123,4621+55]..[123,4621+57])
                                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[123,4621+55]..[123,4621+57])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[124,4680+26]..[124,4680+54])
                                                pattern (lib/sentenceParser_describe.ml[124,4680+57]..[124,4680+70])
                                                  Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[124,4680+57]..[124,4680+70])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[125,4752+26]..[125,4752+52])
                                                pattern (lib/sentenceParser_describe.ml[125,4752+55]..[125,4752+66])
                                                  Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[125,4752+55]..[125,4752+66])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[126,4820+26]..[126,4820+52])
                                                pattern (lib/sentenceParser_describe.ml[127,4875+28]..[131,5157+74])
                                                  Ppat_record Closed
                                                  [
                                                    "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[127,4875+30]..[127,4875+57])
                                                      pattern (lib/sentenceParser_describe.ml[127,4875+60]..[127,4875+69])
                                                        Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[127,4875+60]..[127,4875+69])
                                                    "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[128,4946+30]..[128,4946+56])
                                                      pattern (lib/sentenceParser_describe.ml[128,4946+59]..[128,4946+61])
                                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[128,4946+59]..[128,4946+61])
                                                    "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[129,5009+30]..[129,5009+58])
                                                      pattern (lib/sentenceParser_describe.ml[129,5009+61]..[129,5009+74])
                                                        Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[129,5009+61]..[129,5009+74])
                                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[130,5085+30]..[130,5085+56])
                                                      pattern (lib/sentenceParser_describe.ml[130,5085+59]..[130,5085+70])
                                                        Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[130,5085+59]..[130,5085+70])
                                                    "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[131,5157+30]..[131,5157+56])
                                                      pattern (lib/sentenceParser_describe.ml[131,5157+59]..[131,5157+72])
                                                        Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[131,5157+59]..[131,5157+72])
                                                  ]
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[135,5304+16]..[135,5304+29])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[135,5304+16]..[135,5304+29])
                          ]
                          expression (lib/sentenceParser_describe.ml[136,5337+12]..[150,6045+13])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[136,5337+16]..[136,5337+18])
                                  Ppat_var "_4" (lib/sentenceParser_describe.ml[136,5337+16]..[136,5337+18])
                                core_type (lib/sentenceParser_describe.ml[136,5337+21]..[136,5337+36])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[136,5337+21]..[136,5337+36])
                                  []
                                expression (lib/sentenceParser_describe.ml[136,5337+39]..[136,5337+51])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[136,5337+39]..[136,5337+48])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[136,5337+39]..[136,5337+48])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[136,5337+49]..[136,5337+51])
                                        Pexp_ident "_4" (lib/sentenceParser_describe.ml[136,5337+49]..[136,5337+51])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[137,5392+12]..[150,6045+13])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[137,5392+16]..[137,5392+18])
                                    Ppat_var "_3" (lib/sentenceParser_describe.ml[137,5392+16]..[137,5392+18])
                                  core_type (lib/sentenceParser_describe.ml[137,5392+21]..[137,5392+30])
                                    Ptyp_constr "list" (lib/sentenceParser_describe.ml[137,5392+26]..[137,5392+30])
                                    [
                                      core_type (lib/sentenceParser_describe.ml[137,5392+21]..[137,5392+25])
                                        Ptyp_constr "unit" (lib/sentenceParser_describe.ml[137,5392+21]..[137,5392+25])
                                        []
                                    ]
                                  expression (lib/sentenceParser_describe.ml[137,5392+33]..[137,5392+45])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[137,5392+33]..[137,5392+42])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[137,5392+33]..[137,5392+42])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[137,5392+43]..[137,5392+45])
                                          Pexp_ident "_3" (lib/sentenceParser_describe.ml[137,5392+43]..[137,5392+45])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[138,5441+12]..[150,6045+13])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[138,5441+16]..[138,5441+18])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[138,5441+16]..[138,5441+18])
                                    core_type (lib/sentenceParser_describe.ml[138,5441+21]..[138,5441+25])
                                      Ptyp_constr "unit" (lib/sentenceParser_describe.ml[138,5441+21]..[138,5441+25])
                                      []
                                    expression (lib/sentenceParser_describe.ml[138,5441+28]..[138,5441+40])
                                      Pexp_apply
                                      expression (lib/sentenceParser_describe.ml[138,5441+28]..[138,5441+37])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[138,5441+28]..[138,5441+37])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser_describe.ml[138,5441+38]..[138,5441+40])
                                            Pexp_ident "_2" (lib/sentenceParser_describe.ml[138,5441+38]..[138,5441+40])
                                      ]
                                ]
                                expression (lib/sentenceParser_describe.ml[139,5485+12]..[150,6045+13])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[139,5485+16]..[139,5485+18])
                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[139,5485+16]..[139,5485+18])
                                      core_type (lib/sentenceParser_describe.ml[139,5485+21]..[139,5485+36])
                                        Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[139,5485+21]..[139,5485+36])
                                        []
                                      expression (lib/sentenceParser_describe.ml[139,5485+39]..[139,5485+51])
                                        Pexp_apply
                                        expression (lib/sentenceParser_describe.ml[139,5485+39]..[139,5485+48])
                                          Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[139,5485+39]..[139,5485+48])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/sentenceParser_describe.ml[139,5485+49]..[139,5485+51])
                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[139,5485+49]..[139,5485+51])
                                        ]
                                  ]
                                  expression (lib/sentenceParser_describe.ml[140,5540+12]..[150,6045+13])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[140,5540+16]..[140,5540+27])
                                          Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[140,5540+16]..[140,5540+27])
                                        expression (lib/sentenceParser_describe.ml[140,5540+30]..[140,5540+70])
                                          Pexp_field
                                          expression (lib/sentenceParser_describe.ml[140,5540+30]..[140,5540+43])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[140,5540+30]..[140,5540+43])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[140,5540+44]..[140,5540+70])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[141,5614+12]..[150,6045+13])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[141,5614+16]..[141,5614+25])
                                            Ppat_var "_startpos" (lib/sentenceParser_describe.ml[141,5614+16]..[141,5614+25])
                                          expression (lib/sentenceParser_describe.ml[141,5614+28]..[141,5614+41])
                                            Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[141,5614+28]..[141,5614+41])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[142,5659+12]..[150,6045+13])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser_describe.ml[142,5659+16]..[142,5659+23])
                                              Ppat_var "_endpos" (lib/sentenceParser_describe.ml[142,5659+16]..[142,5659+23])
                                            expression (lib/sentenceParser_describe.ml[142,5659+26]..[142,5659+37])
                                              Pexp_ident "_endpos__4_" (lib/sentenceParser_describe.ml[142,5659+26]..[142,5659+37])
                                        ]
                                        expression (lib/sentenceParser_describe.ml[143,5700+12]..[150,6045+13])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[143,5700+16]..[143,5700+18])
                                                Ppat_var "_v" (lib/sentenceParser_describe.ml[143,5700+16]..[143,5700+18])
                                              core_type (lib/sentenceParser_describe.ml[143,5700+21]..[143,5700+36])
                                                Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[143,5700+21]..[143,5700+36])
                                                []
                                              expression (lib/sentenceParser_describe.ml[143,5700+39]..[143,5700+49])
                                                Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[143,5700+39]..[143,5700+46])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[143,5700+47]..[143,5700+49])
                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[143,5700+47]..[143,5700+49])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[144,5753+12]..[150,6045+13])
                                            Pexp_record
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[145,5767+14]..[145,5767+41])
                                                expression (lib/sentenceParser_describe.ml[145,5767+44]..[145,5767+53])
                                                  Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[145,5767+44]..[145,5767+53])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[146,5822+14]..[146,5822+40])
                                                expression (lib/sentenceParser_describe.ml[146,5822+43]..[146,5822+56])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[146,5822+44]..[146,5822+52])
                                                    Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[146,5822+44]..[146,5822+52])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[146,5822+53]..[146,5822+55])
                                                        Pexp_ident "_v" (lib/sentenceParser_describe.ml[146,5822+53]..[146,5822+55])
                                                  ]
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[147,5880+14]..[147,5880+42])
                                                expression (lib/sentenceParser_describe.ml[147,5880+45]..[147,5880+54])
                                                  Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[147,5880+45]..[147,5880+54])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[148,5936+14]..[148,5936+40])
                                                expression (lib/sentenceParser_describe.ml[148,5936+43]..[148,5936+50])
                                                  Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[148,5936+43]..[148,5936+50])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[149,5988+14]..[149,5988+40])
                                                expression (lib/sentenceParser_describe.ml[149,5988+43]..[149,5988+56])
                                                  Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[149,5988+43]..[149,5988+56])
                                            ]
                                            None
                    expression (lib/sentenceParser_describe.ml[150,6045+16]..[173,7329+23])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[150,6045+22]..[150,6045+33])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[150,6045+22]..[150,6045+33])
                      expression (lib/sentenceParser_describe.ml[151,6082+20]..[173,7329+21])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[151,6082+24]..[151,6082+37])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[151,6082+24]..[151,6082+37])
                            expression (lib/sentenceParser_describe.ml[152,6122+22]..[152,6122+61])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[152,6122+22]..[152,6122+33])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[152,6122+22]..[152,6122+33])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[152,6122+34]..[152,6122+61])
                        ]
                        expression (lib/sentenceParser_describe.ml[153,6187+20]..[173,7329+21])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[153,6187+24]..[157,6453+70])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[153,6187+26]..[153,6187+53])
                                    pattern (lib/sentenceParser_describe.ml[153,6187+56]..[153,6187+65])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[153,6187+56]..[153,6187+65])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[154,6254+26]..[154,6254+52])
                                    pattern (lib/sentenceParser_describe.ml[154,6254+55]..[154,6254+57])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[154,6254+55]..[154,6254+57])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[155,6313+26]..[155,6313+54])
                                    pattern (lib/sentenceParser_describe.ml[155,6313+57]..[155,6313+70])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[155,6313+57]..[155,6313+70])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[156,6385+26]..[156,6385+52])
                                    pattern (lib/sentenceParser_describe.ml[156,6385+55]..[156,6385+66])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[156,6385+55]..[156,6385+66])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[157,6453+26]..[157,6453+52])
                                    pattern (lib/sentenceParser_describe.ml[157,6453+55]..[157,6453+68])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[157,6453+55]..[157,6453+68])
                                ]
                              expression (lib/sentenceParser_describe.ml[158,6524+24]..[158,6524+37])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[158,6524+24]..[158,6524+37])
                          ]
                          expression (lib/sentenceParser_describe.ml[159,6565+20]..[173,7329+21])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[159,6565+24]..[159,6565+26])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[159,6565+24]..[159,6565+26])
                                core_type (lib/sentenceParser_describe.ml[159,6565+29]..[159,6565+44])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[159,6565+29]..[159,6565+44])
                                  []
                                expression (lib/sentenceParser_describe.ml[159,6565+47]..[159,6565+59])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[159,6565+47]..[159,6565+56])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[159,6565+47]..[159,6565+56])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[159,6565+57]..[159,6565+59])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[159,6565+57]..[159,6565+59])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[160,6628+20]..[173,7329+21])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[160,6628+24]..[160,6628+35])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[160,6628+24]..[160,6628+35])
                                  expression (lib/sentenceParser_describe.ml[161,6666+22]..[161,6666+62])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[161,6666+22]..[161,6666+35])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[161,6666+22]..[161,6666+35])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[161,6666+36]..[161,6666+62])
                              ]
                              expression (lib/sentenceParser_describe.ml[162,6732+20]..[173,7329+21])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[162,6732+24]..[162,6732+33])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[162,6732+24]..[162,6732+33])
                                    expression (lib/sentenceParser_describe.ml[162,6732+36]..[162,6732+49])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[162,6732+36]..[162,6732+49])
                                ]
                                expression (lib/sentenceParser_describe.ml[163,6785+20]..[173,7329+21])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[163,6785+24]..[163,6785+31])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[163,6785+24]..[163,6785+31])
                                      expression (lib/sentenceParser_describe.ml[163,6785+34]..[163,6785+45])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[163,6785+34]..[163,6785+45])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[164,6834+20]..[173,7329+21])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[164,6834+24]..[164,6834+26])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[164,6834+24]..[164,6834+26])
                                        core_type (lib/sentenceParser_describe.ml[164,6834+29]..[164,6834+44])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[164,6834+29]..[164,6834+44])
                                          []
                                        expression (lib/sentenceParser_describe.ml[165,6881+22]..[166,6953+32])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[165,6881+22]..[165,6881+70])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[165,6881+22]..[165,6881+35])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[165,6881+22]..[165,6881+35])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[165,6881+36]..[165,6881+70])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[165,6881+37]..[165,6881+51])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[165,6881+37]..[165,6881+51])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[165,6881+52]..[165,6881+69])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[165,6881+53]..[165,6881+64])
                                                            Pexp_constant PConst_string("DEBUG:alt",(lib/sentenceParser_describe.ml[165,6881+54]..[165,6881+63]),None)
                                                          expression (lib/sentenceParser_describe.ml[165,6881+66]..[165,6881+68])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[165,6881+66]..[165,6881+68])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[166,6953+22]..[166,6953+32])
                                            Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[166,6953+22]..[166,6953+29])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[166,6953+30]..[166,6953+32])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[166,6953+30]..[166,6953+32])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[167,6989+20]..[173,7329+21])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[168,7011+22]..[168,7011+49])
                                          expression (lib/sentenceParser_describe.ml[168,7011+52]..[168,7011+61])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[168,7011+52]..[168,7011+61])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[169,7074+22]..[169,7074+48])
                                          expression (lib/sentenceParser_describe.ml[169,7074+51]..[169,7074+64])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[169,7074+52]..[169,7074+60])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[169,7074+52]..[169,7074+60])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[169,7074+61]..[169,7074+63])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[169,7074+61]..[169,7074+63])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[170,7140+22]..[170,7140+50])
                                          expression (lib/sentenceParser_describe.ml[170,7140+53]..[170,7140+62])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[170,7140+53]..[170,7140+62])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[171,7204+22]..[171,7204+48])
                                          expression (lib/sentenceParser_describe.ml[171,7204+51]..[171,7204+58])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[171,7204+51]..[171,7204+58])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[172,7264+22]..[172,7264+48])
                                          expression (lib/sentenceParser_describe.ml[172,7264+51]..[172,7264+64])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[172,7264+51]..[172,7264+64])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[173,7329+24]..[210,9531+31])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[173,7329+30]..[173,7329+41])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[173,7329+30]..[173,7329+41])
                      expression (lib/sentenceParser_describe.ml[174,7374+28]..[210,9531+29])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[174,7374+32]..[174,7374+45])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[174,7374+32]..[174,7374+45])
                            expression (lib/sentenceParser_describe.ml[175,7422+30]..[175,7422+69])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[175,7422+30]..[175,7422+41])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[175,7422+30]..[175,7422+41])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[175,7422+42]..[175,7422+69])
                        ]
                        expression (lib/sentenceParser_describe.ml[176,7495+28]..[210,9531+29])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[176,7495+32]..[192,8477+35])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[176,7495+34]..[176,7495+61])
                                    pattern (lib/sentenceParser_describe.ml[176,7495+64]..[176,7495+65])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[177,7562+34]..[177,7562+60])
                                    pattern (lib/sentenceParser_describe.ml[177,7562+63]..[177,7562+65])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[177,7562+63]..[177,7562+65])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[178,7629+34]..[178,7629+62])
                                    pattern (lib/sentenceParser_describe.ml[179,7694+36]..[179,7694+49])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[179,7694+36]..[179,7694+49])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[180,7745+34]..[180,7745+60])
                                    pattern (lib/sentenceParser_describe.ml[180,7745+63]..[180,7745+74])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[180,7745+63]..[180,7745+74])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[181,7821+34]..[181,7821+60])
                                    pattern (lib/sentenceParser_describe.ml[182,7884+36]..[191,8437+39])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[183,7922+38]..[183,7922+65])
                                          pattern (lib/sentenceParser_describe.ml[183,7922+68]..[183,7922+77])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[183,7922+68]..[183,7922+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[184,8001+38]..[184,8001+64])
                                          pattern (lib/sentenceParser_describe.ml[184,8001+67]..[184,8001+69])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[184,8001+67]..[184,8001+69])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[185,8072+38]..[185,8072+66])
                                          pattern (lib/sentenceParser_describe.ml[186,8141+40]..[186,8141+53])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[186,8141+40]..[186,8141+53])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[187,8196+38]..[187,8196+64])
                                          pattern (lib/sentenceParser_describe.ml[188,8263+40]..[188,8263+51])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[188,8263+40]..[188,8263+51])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[189,8316+38]..[189,8316+64])
                                          pattern (lib/sentenceParser_describe.ml[190,8383+40]..[190,8383+53])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[190,8383+40]..[190,8383+53])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[193,8513+32]..[193,8513+45])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[193,8513+32]..[193,8513+45])
                          ]
                          expression (lib/sentenceParser_describe.ml[194,8562+28]..[210,9531+29])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[194,8562+32]..[194,8562+34])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[194,8562+32]..[194,8562+34])
                                core_type (lib/sentenceParser_describe.ml[194,8562+37]..[194,8562+52])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[194,8562+37]..[194,8562+52])
                                  []
                                expression (lib/sentenceParser_describe.ml[194,8562+55]..[194,8562+67])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[194,8562+55]..[194,8562+64])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[194,8562+55]..[194,8562+64])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[194,8562+65]..[194,8562+67])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[194,8562+65]..[194,8562+67])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[195,8633+28]..[210,9531+29])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[195,8633+32]..[195,8633+34])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[195,8633+32]..[195,8633+34])
                                  core_type (lib/sentenceParser_describe.ml[195,8633+37]..[195,8633+41])
                                    Ptyp_constr "unit" (lib/sentenceParser_describe.ml[195,8633+37]..[195,8633+41])
                                    []
                                  expression (lib/sentenceParser_describe.ml[195,8633+44]..[195,8633+56])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[195,8633+44]..[195,8633+53])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[195,8633+44]..[195,8633+53])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[195,8633+54]..[195,8633+56])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[195,8633+54]..[195,8633+56])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[196,8693+28]..[210,9531+29])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[196,8693+32]..[196,8693+43])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[196,8693+32]..[196,8693+43])
                                    expression (lib/sentenceParser_describe.ml[197,8739+30]..[197,8739+70])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[197,8739+30]..[197,8739+43])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[197,8739+30]..[197,8739+43])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[197,8739+44]..[197,8739+70])
                                ]
                                expression (lib/sentenceParser_describe.ml[198,8813+28]..[210,9531+29])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[198,8813+32]..[198,8813+41])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[198,8813+32]..[198,8813+41])
                                      expression (lib/sentenceParser_describe.ml[198,8813+44]..[198,8813+57])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[198,8813+44]..[198,8813+57])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[199,8874+28]..[210,9531+29])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[199,8874+32]..[199,8874+39])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[199,8874+32]..[199,8874+39])
                                        expression (lib/sentenceParser_describe.ml[199,8874+42]..[199,8874+53])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[199,8874+42]..[199,8874+53])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[200,8931+28]..[210,9531+29])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[200,8931+32]..[200,8931+34])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[200,8931+32]..[200,8931+34])
                                          core_type (lib/sentenceParser_describe.ml[200,8931+37]..[200,8931+52])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[200,8931+37]..[200,8931+52])
                                            []
                                          expression (lib/sentenceParser_describe.ml[201,8986+30]..[203,9099+40])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[201,8986+30]..[202,9030+67])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[201,8986+30]..[201,8986+43])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[201,8986+30]..[201,8986+43])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[202,9030+32]..[202,9030+67])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[202,9030+33]..[202,9030+47])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[202,9030+33]..[202,9030+47])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[202,9030+48]..[202,9030+66])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[202,9030+49]..[202,9030+61])
                                                              Pexp_constant PConst_string("DEBUG:ccrs",(lib/sentenceParser_describe.ml[202,9030+50]..[202,9030+60]),None)
                                                            expression (lib/sentenceParser_describe.ml[202,9030+63]..[202,9030+65])
                                                              Pexp_ident "_2" (lib/sentenceParser_describe.ml[202,9030+63]..[202,9030+65])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[203,9099+30]..[203,9099+40])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[203,9099+30]..[203,9099+37])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[203,9099+38]..[203,9099+40])
                                                  Pexp_ident "_2" (lib/sentenceParser_describe.ml[203,9099+38]..[203,9099+40])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[204,9143+28]..[210,9531+29])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[205,9173+30]..[205,9173+57])
                                            expression (lib/sentenceParser_describe.ml[205,9173+60]..[205,9173+69])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[205,9173+60]..[205,9173+69])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[206,9244+30]..[206,9244+56])
                                            expression (lib/sentenceParser_describe.ml[206,9244+59]..[206,9244+72])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[206,9244+60]..[206,9244+68])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[206,9244+60]..[206,9244+68])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[206,9244+69]..[206,9244+71])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[206,9244+69]..[206,9244+71])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[207,9318+30]..[207,9318+58])
                                            expression (lib/sentenceParser_describe.ml[207,9318+61]..[207,9318+70])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[207,9318+61]..[207,9318+70])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[208,9390+30]..[208,9390+56])
                                            expression (lib/sentenceParser_describe.ml[208,9390+59]..[208,9390+66])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[208,9390+59]..[208,9390+66])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[209,9458+30]..[209,9458+56])
                                            expression (lib/sentenceParser_describe.ml[209,9458+59]..[209,9458+72])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[209,9458+59]..[209,9458+72])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[210,9531+32]..[243,11604+39])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[210,9531+38]..[210,9531+49])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[210,9531+38]..[210,9531+49])
                      expression (lib/sentenceParser_describe.ml[211,9584+36]..[243,11604+37])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[211,9584+40]..[211,9584+53])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[211,9584+40]..[211,9584+53])
                            expression (lib/sentenceParser_describe.ml[212,9640+38]..[212,9640+77])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[212,9640+38]..[212,9640+49])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[212,9640+38]..[212,9640+49])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[212,9640+50]..[212,9640+77])
                        ]
                        expression (lib/sentenceParser_describe.ml[213,9721+36]..[243,11604+37])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[213,9721+40]..[223,10354+43])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[214,9763+42]..[214,9763+69])
                                    pattern (lib/sentenceParser_describe.ml[215,9835+44]..[215,9835+53])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[215,9835+44]..[215,9835+53])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[216,9890+42]..[216,9890+68])
                                    pattern (lib/sentenceParser_describe.ml[216,9890+71]..[216,9890+73])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[216,9890+71]..[216,9890+73])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[217,9965+42]..[217,9965+70])
                                    pattern (lib/sentenceParser_describe.ml[218,10038+44]..[218,10038+57])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[218,10038+44]..[218,10038+57])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[219,10097+42]..[219,10097+68])
                                    pattern (lib/sentenceParser_describe.ml[220,10168+44]..[220,10168+55])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[220,10168+44]..[220,10168+55])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[221,10225+42]..[221,10225+68])
                                    pattern (lib/sentenceParser_describe.ml[222,10296+44]..[222,10296+57])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[222,10296+44]..[222,10296+57])
                                ]
                              expression (lib/sentenceParser_describe.ml[224,10398+40]..[224,10398+53])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[224,10398+40]..[224,10398+53])
                          ]
                          expression (lib/sentenceParser_describe.ml[225,10455+36]..[243,11604+37])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[225,10455+40]..[225,10455+42])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[225,10455+40]..[225,10455+42])
                                core_type (lib/sentenceParser_describe.ml[225,10455+45]..[225,10455+60])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[225,10455+45]..[225,10455+60])
                                  []
                                expression (lib/sentenceParser_describe.ml[225,10455+63]..[225,10455+75])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[225,10455+63]..[225,10455+72])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[225,10455+63]..[225,10455+72])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[225,10455+73]..[225,10455+75])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[225,10455+73]..[225,10455+75])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[226,10534+36]..[243,11604+37])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[226,10534+40]..[226,10534+51])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[226,10534+40]..[226,10534+51])
                                  expression (lib/sentenceParser_describe.ml[227,10588+38]..[227,10588+78])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[227,10588+38]..[227,10588+51])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[227,10588+38]..[227,10588+51])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[227,10588+52]..[227,10588+78])
                              ]
                              expression (lib/sentenceParser_describe.ml[228,10670+36]..[243,11604+37])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[228,10670+40]..[228,10670+49])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[228,10670+40]..[228,10670+49])
                                    expression (lib/sentenceParser_describe.ml[228,10670+52]..[228,10670+65])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[228,10670+52]..[228,10670+65])
                                ]
                                expression (lib/sentenceParser_describe.ml[229,10739+36]..[243,11604+37])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[229,10739+40]..[229,10739+47])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[229,10739+40]..[229,10739+47])
                                      expression (lib/sentenceParser_describe.ml[229,10739+50]..[229,10739+61])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[229,10739+50]..[229,10739+61])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[230,10804+36]..[243,11604+37])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[230,10804+40]..[230,10804+42])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[230,10804+40]..[230,10804+42])
                                        core_type (lib/sentenceParser_describe.ml[230,10804+45]..[230,10804+60])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[230,10804+45]..[230,10804+60])
                                          []
                                        expression (lib/sentenceParser_describe.ml[231,10867+38]..[233,10997+47])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[231,10867+38]..[232,10919+76])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[231,10867+38]..[231,10867+51])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[231,10867+38]..[231,10867+51])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[232,10919+40]..[232,10919+76])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[232,10919+41]..[232,10919+55])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[232,10919+41]..[232,10919+55])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[232,10919+56]..[232,10919+75])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[232,10919+57]..[232,10919+70])
                                                            Pexp_constant PConst_string("DEBUG:cc2rs",(lib/sentenceParser_describe.ml[232,10919+58]..[232,10919+69]),None)
                                                          expression (lib/sentenceParser_describe.ml[232,10919+72]..[232,10919+74])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[232,10919+72]..[232,10919+74])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[233,10997+38]..[233,10997+47])
                                            Pexp_construct "CharClass" (lib/sentenceParser_describe.ml[233,10997+38]..[233,10997+47])
                                            None
                                    ]
                                    expression (lib/sentenceParser_describe.ml[234,11048+36]..[243,11604+37])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[235,11086+38]..[235,11086+65])
                                          expression (lib/sentenceParser_describe.ml[235,11086+68]..[235,11086+77])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[235,11086+68]..[235,11086+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[236,11165+38]..[236,11165+64])
                                          expression (lib/sentenceParser_describe.ml[237,11232+40]..[237,11232+53])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[237,11232+41]..[237,11232+49])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[237,11232+41]..[237,11232+49])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[237,11232+50]..[237,11232+52])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[237,11232+50]..[237,11232+52])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[238,11287+38]..[238,11287+66])
                                          expression (lib/sentenceParser_describe.ml[239,11356+40]..[239,11356+49])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[239,11356+40]..[239,11356+49])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[240,11407+38]..[240,11407+64])
                                          expression (lib/sentenceParser_describe.ml[240,11407+67]..[240,11407+74])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[240,11407+67]..[240,11407+74])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[241,11483+38]..[241,11483+64])
                                          expression (lib/sentenceParser_describe.ml[242,11550+40]..[242,11550+53])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[242,11550+40]..[242,11550+53])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[243,11604+40]..[306,16018+47])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[243,11604+46]..[243,11604+57])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[243,11604+46]..[243,11604+57])
                      expression (lib/sentenceParser_describe.ml[244,11665+44]..[306,16018+45])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[244,11665+48]..[244,11665+61])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[244,11665+48]..[244,11665+61])
                            expression (lib/sentenceParser_describe.ml[245,11729+46]..[245,11729+85])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[245,11729+46]..[245,11729+57])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[245,11729+46]..[245,11729+57])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[245,11729+58]..[245,11729+85])
                        ]
                        expression (lib/sentenceParser_describe.ml[246,11818+44]..[306,16018+45])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[246,11818+48]..[281,14317+51])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[247,11868+50]..[247,11868+77])
                                    pattern (lib/sentenceParser_describe.ml[248,11946+54]..[248,11946+55])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[249,12003+50]..[249,12003+76])
                                    pattern (lib/sentenceParser_describe.ml[250,12080+54]..[250,12080+56])
                                      Ppat_var "_3" (lib/sentenceParser_describe.ml[250,12080+54]..[250,12080+56])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[251,12138+50]..[251,12138+78])
                                    pattern (lib/sentenceParser_describe.ml[252,12217+54]..[252,12217+67])
                                      Ppat_var "_startpos__3_" (lib/sentenceParser_describe.ml[252,12217+54]..[252,12217+67])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[253,12286+50]..[253,12286+76])
                                    pattern (lib/sentenceParser_describe.ml[254,12363+54]..[254,12363+65])
                                      Ppat_var "_endpos__3_" (lib/sentenceParser_describe.ml[254,12363+54]..[254,12363+65])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[255,12430+50]..[255,12430+76])
                                    pattern (lib/sentenceParser_describe.ml[257,12561+52]..[280,14261+55])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[258,12615+54]..[258,12615+81])
                                          pattern (lib/sentenceParser_describe.ml[259,12697+58]..[259,12697+59])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[260,12758+54]..[260,12758+80])
                                          pattern (lib/sentenceParser_describe.ml[261,12839+58]..[261,12839+60])
                                            Ppat_var "_2" (lib/sentenceParser_describe.ml[261,12839+58]..[261,12839+60])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[262,12901+54]..[262,12901+82])
                                          pattern (lib/sentenceParser_describe.ml[263,12984+58]..[263,12984+71])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[263,12984+58]..[263,12984+71])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[264,13057+54]..[264,13057+80])
                                          pattern (lib/sentenceParser_describe.ml[265,13138+58]..[265,13138+69])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[265,13138+58]..[265,13138+69])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[266,13209+54]..[266,13209+80])
                                          pattern (lib/sentenceParser_describe.ml[268,13348+56]..[279,14201+59])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[269,13406+58]..[269,13406+85])
                                                pattern (lib/sentenceParser_describe.ml[270,13492+62]..[270,13492+71])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[270,13492+62]..[270,13492+71])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[271,13565+58]..[271,13565+84])
                                                pattern (lib/sentenceParser_describe.ml[272,13650+62]..[272,13650+64])
                                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[272,13650+62]..[272,13650+64])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[273,13716+58]..[273,13716+86])
                                                pattern (lib/sentenceParser_describe.ml[274,13803+62]..[274,13803+75])
                                                  Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[274,13803+62]..[274,13803+75])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[275,13880+58]..[275,13880+84])
                                                pattern (lib/sentenceParser_describe.ml[276,13965+62]..[276,13965+73])
                                                  Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[276,13965+62]..[276,13965+73])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[277,14040+58]..[277,14040+84])
                                                pattern (lib/sentenceParser_describe.ml[278,14125+62]..[278,14125+75])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[278,14125+62]..[278,14125+75])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[282,14369+48]..[282,14369+61])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[282,14369+48]..[282,14369+61])
                          ]
                          expression (lib/sentenceParser_describe.ml[283,14434+44]..[306,16018+45])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[283,14434+48]..[283,14434+50])
                                  Ppat_var "_3" (lib/sentenceParser_describe.ml[283,14434+48]..[283,14434+50])
                                core_type (lib/sentenceParser_describe.ml[283,14434+53]..[283,14434+56])
                                  Ptyp_constr "int" (lib/sentenceParser_describe.ml[283,14434+53]..[283,14434+56])
                                  []
                                expression (lib/sentenceParser_describe.ml[283,14434+59]..[283,14434+71])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[283,14434+59]..[283,14434+68])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[283,14434+59]..[283,14434+68])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[283,14434+69]..[283,14434+71])
                                        Pexp_ident "_3" (lib/sentenceParser_describe.ml[283,14434+69]..[283,14434+71])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[284,14509+44]..[306,16018+45])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[284,14509+48]..[284,14509+50])
                                    Ppat_var "_2" (lib/sentenceParser_describe.ml[284,14509+48]..[284,14509+50])
                                  core_type (lib/sentenceParser_describe.ml[284,14509+53]..[284,14509+57])
                                    Ptyp_constr "unit" (lib/sentenceParser_describe.ml[284,14509+53]..[284,14509+57])
                                    []
                                  expression (lib/sentenceParser_describe.ml[284,14509+60]..[284,14509+72])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[284,14509+60]..[284,14509+69])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[284,14509+60]..[284,14509+69])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[284,14509+70]..[284,14509+72])
                                          Pexp_ident "_2" (lib/sentenceParser_describe.ml[284,14509+70]..[284,14509+72])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[285,14585+44]..[306,16018+45])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[285,14585+48]..[285,14585+50])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[285,14585+48]..[285,14585+50])
                                    core_type (lib/sentenceParser_describe.ml[285,14585+53]..[285,14585+56])
                                      Ptyp_constr "int" (lib/sentenceParser_describe.ml[285,14585+53]..[285,14585+56])
                                      []
                                    expression (lib/sentenceParser_describe.ml[285,14585+59]..[285,14585+71])
                                      Pexp_apply
                                      expression (lib/sentenceParser_describe.ml[285,14585+59]..[285,14585+68])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[285,14585+59]..[285,14585+68])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser_describe.ml[285,14585+69]..[285,14585+71])
                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[285,14585+69]..[285,14585+71])
                                      ]
                                ]
                                expression (lib/sentenceParser_describe.ml[286,14660+44]..[306,16018+45])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[286,14660+48]..[286,14660+59])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[286,14660+48]..[286,14660+59])
                                      expression (lib/sentenceParser_describe.ml[287,14722+46]..[287,14722+86])
                                        Pexp_field
                                        expression (lib/sentenceParser_describe.ml[287,14722+46]..[287,14722+59])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[287,14722+46]..[287,14722+59])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[287,14722+60]..[287,14722+86])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[288,14812+44]..[306,16018+45])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[288,14812+48]..[288,14812+57])
                                          Ppat_var "_startpos" (lib/sentenceParser_describe.ml[288,14812+48]..[288,14812+57])
                                        expression (lib/sentenceParser_describe.ml[288,14812+60]..[288,14812+73])
                                          Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[288,14812+60]..[288,14812+73])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[289,14889+44]..[306,16018+45])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[289,14889+48]..[289,14889+55])
                                            Ppat_var "_endpos" (lib/sentenceParser_describe.ml[289,14889+48]..[289,14889+55])
                                          expression (lib/sentenceParser_describe.ml[289,14889+58]..[289,14889+69])
                                            Pexp_ident "_endpos__3_" (lib/sentenceParser_describe.ml[289,14889+58]..[289,14889+69])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[290,14962+44]..[306,16018+45])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser_describe.ml[290,14962+48]..[290,14962+50])
                                              Ppat_var "_v" (lib/sentenceParser_describe.ml[290,14962+48]..[290,14962+50])
                                            core_type (lib/sentenceParser_describe.ml[290,14962+53]..[290,14962+68])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[290,14962+53]..[290,14962+68])
                                              []
                                            expression (lib/sentenceParser_describe.ml[291,15033+46]..[294,15234+56])
                                              Pexp_sequence
                                              expression (lib/sentenceParser_describe.ml[291,15033+46]..[293,15157+75])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[291,15033+46]..[291,15033+59])
                                                  Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[291,15033+46]..[291,15033+59])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[292,15093+48]..[293,15157+75])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[292,15093+49]..[292,15093+63])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[292,15093+49]..[292,15093+63])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[293,15157+51]..[293,15157+74])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser_describe.ml[293,15157+52]..[293,15157+65])
                                                                Pexp_constant PConst_string("DEBUG:cc3rs",(lib/sentenceParser_describe.ml[293,15157+53]..[293,15157+64]),None)
                                                              expression (lib/sentenceParser_describe.ml[293,15157+67]..[293,15157+69])
                                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[293,15157+67]..[293,15157+69])
                                                              expression (lib/sentenceParser_describe.ml[293,15157+71]..[293,15157+73])
                                                                Pexp_ident "_2" (lib/sentenceParser_describe.ml[293,15157+71]..[293,15157+73])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser_describe.ml[294,15234+46]..[294,15234+56])
                                                Pexp_construct "CharInt" (lib/sentenceParser_describe.ml[294,15234+46]..[294,15234+53])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[294,15234+54]..[294,15234+56])
                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[294,15234+54]..[294,15234+56])
                                        ]
                                        expression (lib/sentenceParser_describe.ml[295,15294+44]..[306,16018+45])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[296,15340+46]..[296,15340+73])
                                              expression (lib/sentenceParser_describe.ml[297,15416+48]..[297,15416+57])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[297,15416+48]..[297,15416+57])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[298,15475+46]..[298,15475+72])
                                              expression (lib/sentenceParser_describe.ml[299,15550+48]..[299,15550+61])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[299,15550+49]..[299,15550+57])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[299,15550+49]..[299,15550+57])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[299,15550+58]..[299,15550+60])
                                                      Pexp_ident "_v" (lib/sentenceParser_describe.ml[299,15550+58]..[299,15550+60])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[300,15613+46]..[300,15613+74])
                                              expression (lib/sentenceParser_describe.ml[301,15690+48]..[301,15690+57])
                                                Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[301,15690+48]..[301,15690+57])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[302,15749+46]..[302,15749+72])
                                              expression (lib/sentenceParser_describe.ml[303,15824+48]..[303,15824+55])
                                                Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[303,15824+48]..[303,15824+55])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[304,15881+46]..[304,15881+72])
                                              expression (lib/sentenceParser_describe.ml[305,15956+48]..[305,15956+61])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[305,15956+48]..[305,15956+61])
                                          ]
                                          None
                    expression (lib/sentenceParser_describe.ml[306,16018+48]..[363,20278+55])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[306,16018+54]..[306,16018+65])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[306,16018+54]..[306,16018+65])
                      expression (lib/sentenceParser_describe.ml[307,16087+52]..[363,20278+53])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[307,16087+56]..[307,16087+69])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[307,16087+56]..[307,16087+69])
                            expression (lib/sentenceParser_describe.ml[308,16159+54]..[308,16159+93])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[308,16159+54]..[308,16159+65])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[308,16159+54]..[308,16159+65])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[308,16159+66]..[308,16159+93])
                        ]
                        expression (lib/sentenceParser_describe.ml[309,16256+52]..[363,20278+53])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[309,16256+56]..[334,18176+59])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[310,16314+58]..[310,16314+85])
                                    pattern (lib/sentenceParser_describe.ml[311,16400+62]..[311,16400+63])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[312,16465+58]..[312,16465+84])
                                    pattern (lib/sentenceParser_describe.ml[313,16550+62]..[313,16550+64])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[313,16550+62]..[313,16550+64])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[314,16616+58]..[314,16616+86])
                                    pattern (lib/sentenceParser_describe.ml[315,16703+62]..[315,16703+75])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[315,16703+62]..[315,16703+75])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[316,16780+58]..[316,16780+84])
                                    pattern (lib/sentenceParser_describe.ml[317,16865+62]..[317,16865+73])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[317,16865+62]..[317,16865+73])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[318,16940+58]..[318,16940+84])
                                    pattern (lib/sentenceParser_describe.ml[320,17087+60]..[333,18112+63])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[321,17149+62]..[321,17149+89])
                                          pattern (lib/sentenceParser_describe.ml[322,17239+66]..[322,17239+75])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[322,17239+66]..[322,17239+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[323,17316+62]..[323,17316+88])
                                          pattern (lib/sentenceParser_describe.ml[324,17405+66]..[324,17405+68])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[324,17405+66]..[324,17405+68])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[325,17475+62]..[325,17475+90])
                                          pattern (lib/sentenceParser_describe.ml[327,17632+64]..[327,17632+77])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[327,17632+64]..[327,17632+77])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[328,17711+62]..[328,17711+88])
                                          pattern (lib/sentenceParser_describe.ml[329,17800+66]..[329,17800+77])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[329,17800+66]..[329,17800+77])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[330,17879+62]..[330,17879+88])
                                          pattern (lib/sentenceParser_describe.ml[332,18034+64]..[332,18034+77])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[332,18034+64]..[332,18034+77])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[335,18236+56]..[335,18236+69])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[335,18236+56]..[335,18236+69])
                          ]
                          expression (lib/sentenceParser_describe.ml[336,18309+52]..[363,20278+53])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[336,18309+56]..[336,18309+58])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[336,18309+56]..[336,18309+58])
                                core_type (lib/sentenceParser_describe.ml[336,18309+61]..[336,18309+64])
                                  Ptyp_constr "int" (lib/sentenceParser_describe.ml[336,18309+61]..[336,18309+64])
                                  []
                                expression (lib/sentenceParser_describe.ml[337,18376+54]..[337,18376+66])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[337,18376+54]..[337,18376+63])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[337,18376+54]..[337,18376+63])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[337,18376+64]..[337,18376+66])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[337,18376+64]..[337,18376+66])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[338,18446+52]..[363,20278+53])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[338,18446+56]..[338,18446+58])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[338,18446+56]..[338,18446+58])
                                  core_type (lib/sentenceParser_describe.ml[338,18446+61]..[338,18446+76])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[338,18446+61]..[338,18446+76])
                                    []
                                  expression (lib/sentenceParser_describe.ml[339,18523+56]..[339,18523+68])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[339,18523+56]..[339,18523+65])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[339,18523+56]..[339,18523+65])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[339,18523+66]..[339,18523+68])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[339,18523+66]..[339,18523+68])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[340,18595+52]..[363,20278+53])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[340,18595+56]..[340,18595+67])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[340,18595+56]..[340,18595+67])
                                    expression (lib/sentenceParser_describe.ml[341,18665+54]..[341,18665+94])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[341,18665+54]..[341,18665+67])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[341,18665+54]..[341,18665+67])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[341,18665+68]..[341,18665+94])
                                ]
                                expression (lib/sentenceParser_describe.ml[342,18763+52]..[363,20278+53])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[342,18763+56]..[342,18763+65])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[342,18763+56]..[342,18763+65])
                                      expression (lib/sentenceParser_describe.ml[343,18831+54]..[343,18831+67])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[343,18831+54]..[343,18831+67])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[344,18902+52]..[363,20278+53])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[344,18902+56]..[344,18902+63])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[344,18902+56]..[344,18902+63])
                                        expression (lib/sentenceParser_describe.ml[344,18902+66]..[344,18902+77])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[344,18902+66]..[344,18902+77])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[345,18983+52]..[363,20278+53])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[345,18983+56]..[345,18983+58])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[345,18983+56]..[345,18983+58])
                                          core_type (lib/sentenceParser_describe.ml[345,18983+61]..[345,18983+76])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[345,18983+61]..[345,18983+76])
                                            []
                                          expression (lib/sentenceParser_describe.ml[347,19116+54]..[351,19398+64])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[347,19116+54]..[350,19331+65])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[347,19116+54]..[347,19116+67])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[347,19116+54]..[347,19116+67])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[348,19184+56]..[350,19331+65])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[348,19184+57]..[348,19184+71])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[348,19184+57]..[348,19184+71])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[349,19256+59]..[350,19331+64])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[349,19256+60]..[349,19256+73])
                                                              Pexp_constant PConst_string("DEBUG:cc4rs",(lib/sentenceParser_describe.ml[349,19256+61]..[349,19256+72]),None)
                                                            expression (lib/sentenceParser_describe.ml[350,19331+61]..[350,19331+63])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[350,19331+61]..[350,19331+63])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[351,19398+54]..[351,19398+64])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[351,19398+54]..[351,19398+61])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[351,19398+62]..[351,19398+64])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[351,19398+62]..[351,19398+64])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[352,19466+52]..[363,20278+53])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[353,19520+54]..[353,19520+81])
                                            expression (lib/sentenceParser_describe.ml[354,19602+58]..[354,19602+67])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[354,19602+58]..[354,19602+67])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[355,19671+54]..[355,19671+80])
                                            expression (lib/sentenceParser_describe.ml[356,19752+58]..[356,19752+71])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[356,19752+59]..[356,19752+67])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[356,19752+59]..[356,19752+67])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[356,19752+68]..[356,19752+70])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[356,19752+68]..[356,19752+70])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[357,19825+54]..[357,19825+82])
                                            expression (lib/sentenceParser_describe.ml[358,19908+58]..[358,19908+67])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[358,19908+58]..[358,19908+67])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[359,19977+54]..[359,19977+80])
                                            expression (lib/sentenceParser_describe.ml[360,20058+58]..[360,20058+65])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[360,20058+58]..[360,20058+65])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[361,20125+54]..[361,20125+80])
                                            expression (lib/sentenceParser_describe.ml[362,20206+58]..[362,20206+71])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[362,20206+58]..[362,20206+71])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[363,20278+56]..[414,24298+63])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[363,20278+62]..[363,20278+73])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[363,20278+62]..[363,20278+73])
                      expression (lib/sentenceParser_describe.ml[364,20355+60]..[414,24298+61])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[364,20355+64]..[364,20355+77])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[364,20355+64]..[364,20355+77])
                            expression (lib/sentenceParser_describe.ml[366,20497+62]..[366,20497+101])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[366,20497+62]..[366,20497+73])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[366,20497+62]..[366,20497+73])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[366,20497+74]..[366,20497+101])
                        ]
                        expression (lib/sentenceParser_describe.ml[367,20602+60]..[414,24298+61])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[367,20602+64]..[382,21815+67])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[368,20668+66]..[368,20668+93])
                                    pattern (lib/sentenceParser_describe.ml[370,20832+68]..[370,20832+77])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[370,20832+68]..[370,20832+77])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[371,20911+66]..[371,20911+92])
                                    pattern (lib/sentenceParser_describe.ml[372,21004+70]..[372,21004+72])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[372,21004+70]..[372,21004+72])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[373,21078+66]..[373,21078+94])
                                    pattern (lib/sentenceParser_describe.ml[375,21243+68]..[375,21243+81])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[375,21243+68]..[375,21243+81])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[376,21326+66]..[376,21326+92])
                                    pattern (lib/sentenceParser_describe.ml[378,21489+68]..[378,21489+79])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[378,21489+68]..[378,21489+79])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[379,21570+66]..[379,21570+92])
                                    pattern (lib/sentenceParser_describe.ml[381,21733+68]..[381,21733+81])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[381,21733+68]..[381,21733+81])
                                ]
                              expression (lib/sentenceParser_describe.ml[383,21883+64]..[383,21883+77])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[383,21883+64]..[383,21883+77])
                          ]
                          expression (lib/sentenceParser_describe.ml[384,21964+60]..[414,24298+61])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[384,21964+64]..[384,21964+66])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[384,21964+64]..[384,21964+66])
                                core_type (lib/sentenceParser_describe.ml[385,22034+62]..[385,22034+65])
                                  Ptyp_constr "int" (lib/sentenceParser_describe.ml[385,22034+62]..[385,22034+65])
                                  []
                                expression (lib/sentenceParser_describe.ml[386,22102+62]..[386,22102+74])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[386,22102+62]..[386,22102+71])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[386,22102+62]..[386,22102+71])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[386,22102+72]..[386,22102+74])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[386,22102+72]..[386,22102+74])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[387,22180+60]..[414,24298+61])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[387,22180+64]..[387,22180+75])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[387,22180+64]..[387,22180+75])
                                  expression (lib/sentenceParser_describe.ml[388,22258+62]..[388,22258+102])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[388,22258+62]..[388,22258+75])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[388,22258+62]..[388,22258+75])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[388,22258+76]..[388,22258+102])
                              ]
                              expression (lib/sentenceParser_describe.ml[389,22364+60]..[414,24298+61])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[389,22364+64]..[389,22364+73])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[389,22364+64]..[389,22364+73])
                                    expression (lib/sentenceParser_describe.ml[390,22440+62]..[390,22440+75])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[390,22440+62]..[390,22440+75])
                                ]
                                expression (lib/sentenceParser_describe.ml[391,22519+60]..[414,24298+61])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[391,22519+64]..[391,22519+71])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[391,22519+64]..[391,22519+71])
                                      expression (lib/sentenceParser_describe.ml[392,22593+62]..[392,22593+73])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[392,22593+62]..[392,22593+73])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[393,22670+60]..[414,24298+61])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[393,22670+64]..[393,22670+66])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[393,22670+64]..[393,22670+66])
                                        core_type (lib/sentenceParser_describe.ml[394,22739+62]..[394,22739+77])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[394,22739+62]..[394,22739+77])
                                          []
                                        expression (lib/sentenceParser_describe.ml[396,22881+62]..[400,23194+72])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[396,22881+62]..[399,23120+72])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[396,22881+62]..[396,22881+75])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[396,22881+62]..[396,22881+75])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[397,22957+64]..[399,23120+72])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[397,22957+65]..[397,22957+79])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[397,22957+65]..[397,22957+79])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[398,23037+67]..[399,23120+71])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[398,23037+68]..[398,23037+81])
                                                            Pexp_constant PConst_string("DEBUG:cc5rs",(lib/sentenceParser_describe.ml[398,23037+69]..[398,23037+80]),None)
                                                          expression (lib/sentenceParser_describe.ml[399,23120+68]..[399,23120+70])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[399,23120+68]..[399,23120+70])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[400,23194+62]..[400,23194+72])
                                            Pexp_construct "CharInt" (lib/sentenceParser_describe.ml[400,23194+62]..[400,23194+69])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[400,23194+70]..[400,23194+72])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[400,23194+70]..[400,23194+72])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[401,23270+60]..[414,24298+61])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[402,23332+62]..[402,23332+89])
                                          expression (lib/sentenceParser_describe.ml[403,23422+66]..[403,23422+75])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[403,23422+66]..[403,23422+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[404,23499+62]..[404,23499+88])
                                          expression (lib/sentenceParser_describe.ml[406,23654+64]..[406,23654+77])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[406,23654+65]..[406,23654+73])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[406,23654+65]..[406,23654+73])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[406,23654+74]..[406,23654+76])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[406,23654+74]..[406,23654+76])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[407,23733+62]..[407,23733+90])
                                          expression (lib/sentenceParser_describe.ml[408,23824+66]..[408,23824+75])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[408,23824+66]..[408,23824+75])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[409,23901+62]..[409,23901+88])
                                          expression (lib/sentenceParser_describe.ml[410,23990+66]..[410,23990+73])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[410,23990+66]..[410,23990+73])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[411,24065+62]..[411,24065+88])
                                          expression (lib/sentenceParser_describe.ml[413,24220+64]..[413,24220+77])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[413,24220+64]..[413,24220+77])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[414,24298+64]..[495,30821+71])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[415,24368+68]..[415,24368+79])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[415,24368+68]..[415,24368+79])
                      expression (lib/sentenceParser_describe.ml[417,24519+68]..[495,30821+69])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[417,24519+72]..[417,24519+85])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[417,24519+72]..[417,24519+85])
                            expression (lib/sentenceParser_describe.ml[419,24675+68]..[419,24675+107])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[419,24675+68]..[419,24675+79])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[419,24675+68]..[419,24675+79])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[419,24675+80]..[419,24675+107])
                        ]
                        expression (lib/sentenceParser_describe.ml[420,24786+68]..[495,30821+69])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[421,24859+68]..[449,27155+71])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[422,24929+68]..[422,24929+95])
                                    pattern (lib/sentenceParser_describe.ml[423,25025+70]..[423,25025+71])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[424,25098+68]..[424,25098+94])
                                    pattern (lib/sentenceParser_describe.ml[425,25193+70]..[425,25193+72])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[425,25193+70]..[425,25193+72])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[426,25267+68]..[426,25267+96])
                                    pattern (lib/sentenceParser_describe.ml[428,25434+68]..[428,25434+81])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[428,25434+68]..[428,25434+81])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[429,25517+68]..[429,25517+94])
                                    pattern (lib/sentenceParser_describe.ml[431,25682+68]..[431,25682+79])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[431,25682+68]..[431,25682+79])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[432,25763+68]..[432,25763+94])
                                    pattern (lib/sentenceParser_describe.ml[434,25928+68]..[449,27155+69])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[435,25998+68]..[435,25998+95])
                                          pattern (lib/sentenceParser_describe.ml[437,26164+68]..[437,26164+77])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[437,26164+68]..[437,26164+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[438,26243+68]..[438,26243+94])
                                          pattern (lib/sentenceParser_describe.ml[439,26338+70]..[439,26338+72])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[439,26338+70]..[439,26338+72])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[440,26412+68]..[440,26412+96])
                                          pattern (lib/sentenceParser_describe.ml[442,26579+68]..[442,26579+81])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[442,26579+68]..[442,26579+81])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[443,26662+68]..[443,26662+94])
                                          pattern (lib/sentenceParser_describe.ml[445,26827+68]..[445,26827+79])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[445,26827+68]..[445,26827+79])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[446,26908+68]..[446,26908+94])
                                          pattern (lib/sentenceParser_describe.ml[448,27073+68]..[448,27073+81])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[448,27073+68]..[448,27073+81])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[450,27229+68]..[450,27229+81])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[450,27229+68]..[450,27229+81])
                          ]
                          expression (lib/sentenceParser_describe.ml[451,27314+68]..[495,30821+69])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[451,27314+72]..[451,27314+74])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[451,27314+72]..[451,27314+74])
                                core_type (lib/sentenceParser_describe.ml[452,27391+68]..[452,27391+83])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[452,27391+68]..[452,27391+83])
                                  []
                                expression (lib/sentenceParser_describe.ml[454,27545+68]..[455,27623+70])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[454,27545+68]..[454,27545+77])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[454,27545+68]..[454,27545+77])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[455,27623+68]..[455,27623+70])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[455,27623+68]..[455,27623+70])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[456,27697+68]..[495,30821+69])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[456,27697+72]..[456,27697+74])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[456,27697+72]..[456,27697+74])
                                  core_type (lib/sentenceParser_describe.ml[457,27774+68]..[457,27774+83])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[457,27774+68]..[457,27774+83])
                                    []
                                  expression (lib/sentenceParser_describe.ml[459,27928+68]..[460,28006+70])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[459,27928+68]..[459,27928+77])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[459,27928+68]..[459,27928+77])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[460,28006+68]..[460,28006+70])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[460,28006+68]..[460,28006+70])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[461,28080+68]..[495,30821+69])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[461,28080+72]..[461,28080+83])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[461,28080+72]..[461,28080+83])
                                    expression (lib/sentenceParser_describe.ml[463,28234+68]..[463,28234+108])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[463,28234+68]..[463,28234+81])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[463,28234+68]..[463,28234+81])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[463,28234+82]..[463,28234+108])
                                ]
                                expression (lib/sentenceParser_describe.ml[464,28346+68]..[495,30821+69])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[464,28346+72]..[464,28346+81])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[464,28346+72]..[464,28346+81])
                                      expression (lib/sentenceParser_describe.ml[466,28498+68]..[466,28498+81])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[466,28498+68]..[466,28498+81])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[467,28583+68]..[495,30821+69])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[467,28583+72]..[467,28583+79])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[467,28583+72]..[467,28583+79])
                                        expression (lib/sentenceParser_describe.ml[469,28733+68]..[469,28733+79])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[469,28733+68]..[469,28733+79])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[470,28816+68]..[495,30821+69])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[470,28816+72]..[470,28816+74])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[470,28816+72]..[470,28816+74])
                                          core_type (lib/sentenceParser_describe.ml[471,28893+68]..[471,28893+83])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[471,28893+68]..[471,28893+83])
                                            []
                                          expression (lib/sentenceParser_describe.ml[473,29047+68]..[478,29449+70])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[473,29047+68]..[476,29299+72])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[473,29047+68]..[473,29047+81])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[473,29047+68]..[473,29047+81])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[474,29129+68]..[476,29299+72])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[474,29129+69]..[474,29129+83])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[474,29129+69]..[474,29129+83])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[475,29213+68]..[476,29299+71])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[475,29213+69]..[475,29213+84])
                                                              Pexp_constant PConst_string("DEBUG:concat1",(lib/sentenceParser_describe.ml[475,29213+70]..[475,29213+83]),None)
                                                            expression (lib/sentenceParser_describe.ml[476,29299+68]..[476,29299+70])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[476,29299+68]..[476,29299+70])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[477,29373+68]..[478,29449+70])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[477,29373+68]..[477,29373+75])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[478,29449+68]..[478,29449+70])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[478,29449+68]..[478,29449+70])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[479,29523+68]..[495,30821+69])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[480,29593+68]..[480,29593+95])
                                            expression (lib/sentenceParser_describe.ml[482,29759+68]..[482,29759+77])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[482,29759+68]..[482,29759+77])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[483,29838+68]..[483,29838+94])
                                            expression (lib/sentenceParser_describe.ml[485,30003+68]..[486,30081+71])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[485,30003+69]..[485,30003+77])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[485,30003+69]..[485,30003+77])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[486,30081+68]..[486,30081+70])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[486,30081+68]..[486,30081+70])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[487,30154+68]..[487,30154+96])
                                            expression (lib/sentenceParser_describe.ml[489,30321+68]..[489,30321+77])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[489,30321+68]..[489,30321+77])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[490,30400+68]..[490,30400+94])
                                            expression (lib/sentenceParser_describe.ml[491,30495+70]..[491,30495+77])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[491,30495+70]..[491,30495+77])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[492,30574+68]..[492,30574+94])
                                            expression (lib/sentenceParser_describe.ml[494,30739+68]..[494,30739+81])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[494,30739+68]..[494,30739+81])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[495,30821+72]..[516,31918+13])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[496,30896+12]..[496,30896+23])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[496,30896+12]..[496,30896+23])
                      expression (lib/sentenceParser_describe.ml[497,30923+10]..[516,31918+11])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[497,30923+14]..[497,30923+27])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[497,30923+14]..[497,30923+27])
                            expression (lib/sentenceParser_describe.ml[497,30923+30]..[497,30923+69])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[497,30923+30]..[497,30923+41])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[497,30923+30]..[497,30923+41])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[497,30923+42]..[497,30923+69])
                        ]
                        expression (lib/sentenceParser_describe.ml[498,30996+10]..[516,31918+11])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[498,30996+14]..[502,31222+60])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[498,30996+16]..[498,30996+43])
                                    pattern (lib/sentenceParser_describe.ml[498,30996+46]..[498,30996+55])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[498,30996+46]..[498,30996+55])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[499,31053+16]..[499,31053+42])
                                    pattern (lib/sentenceParser_describe.ml[499,31053+45]..[499,31053+47])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[499,31053+45]..[499,31053+47])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[500,31102+16]..[500,31102+44])
                                    pattern (lib/sentenceParser_describe.ml[500,31102+47]..[500,31102+60])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[500,31102+47]..[500,31102+60])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[501,31164+16]..[501,31164+42])
                                    pattern (lib/sentenceParser_describe.ml[501,31164+45]..[501,31164+56])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[501,31164+45]..[501,31164+56])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[502,31222+16]..[502,31222+42])
                                    pattern (lib/sentenceParser_describe.ml[502,31222+45]..[502,31222+58])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[502,31222+45]..[502,31222+58])
                                ]
                              expression (lib/sentenceParser_describe.ml[503,31283+14]..[503,31283+27])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[503,31283+14]..[503,31283+27])
                          ]
                          expression (lib/sentenceParser_describe.ml[504,31314+10]..[516,31918+11])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[504,31314+14]..[504,31314+16])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[504,31314+14]..[504,31314+16])
                                core_type (lib/sentenceParser_describe.ml[504,31314+19]..[504,31314+34])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[504,31314+19]..[504,31314+34])
                                  []
                                expression (lib/sentenceParser_describe.ml[504,31314+37]..[504,31314+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[504,31314+37]..[504,31314+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[504,31314+37]..[504,31314+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[504,31314+47]..[504,31314+49])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[504,31314+47]..[504,31314+49])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[505,31367+10]..[516,31918+11])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[505,31367+14]..[505,31367+25])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[505,31367+14]..[505,31367+25])
                                  expression (lib/sentenceParser_describe.ml[505,31367+28]..[505,31367+68])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[505,31367+28]..[505,31367+41])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[505,31367+28]..[505,31367+41])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[505,31367+42]..[505,31367+68])
                              ]
                              expression (lib/sentenceParser_describe.ml[506,31439+10]..[516,31918+11])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[506,31439+14]..[506,31439+23])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[506,31439+14]..[506,31439+23])
                                    expression (lib/sentenceParser_describe.ml[506,31439+26]..[506,31439+39])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[506,31439+26]..[506,31439+39])
                                ]
                                expression (lib/sentenceParser_describe.ml[507,31482+10]..[516,31918+11])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[507,31482+14]..[507,31482+21])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[507,31482+14]..[507,31482+21])
                                      expression (lib/sentenceParser_describe.ml[507,31482+24]..[507,31482+35])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[507,31482+24]..[507,31482+35])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[508,31521+10]..[516,31918+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[508,31521+14]..[508,31521+16])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[508,31521+14]..[508,31521+16])
                                        core_type (lib/sentenceParser_describe.ml[508,31521+19]..[508,31521+34])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[508,31521+19]..[508,31521+34])
                                          []
                                        expression (lib/sentenceParser_describe.ml[509,31558+12]..[509,31558+76])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[509,31558+12]..[509,31558+64])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[509,31558+12]..[509,31558+25])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[509,31558+12]..[509,31558+25])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[509,31558+26]..[509,31558+64])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[509,31558+27]..[509,31558+41])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[509,31558+27]..[509,31558+41])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[509,31558+42]..[509,31558+63])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[509,31558+43]..[509,31558+58])
                                                            Pexp_constant PConst_string("DEBUG:concat2",(lib/sentenceParser_describe.ml[509,31558+44]..[509,31558+57]),None)
                                                          expression (lib/sentenceParser_describe.ml[509,31558+60]..[509,31558+62])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[509,31558+60]..[509,31558+62])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[509,31558+66]..[509,31558+76])
                                            Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[509,31558+66]..[509,31558+73])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[509,31558+74]..[509,31558+76])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[509,31558+74]..[509,31558+76])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[510,31638+10]..[516,31918+11])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[511,31650+12]..[511,31650+39])
                                          expression (lib/sentenceParser_describe.ml[511,31650+42]..[511,31650+51])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[511,31650+42]..[511,31650+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[512,31703+12]..[512,31703+38])
                                          expression (lib/sentenceParser_describe.ml[512,31703+41]..[512,31703+54])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[512,31703+42]..[512,31703+50])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[512,31703+42]..[512,31703+50])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[512,31703+51]..[512,31703+53])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[512,31703+51]..[512,31703+53])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[513,31759+12]..[513,31759+40])
                                          expression (lib/sentenceParser_describe.ml[513,31759+43]..[513,31759+52])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[513,31759+43]..[513,31759+52])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[514,31813+12]..[514,31813+38])
                                          expression (lib/sentenceParser_describe.ml[514,31813+41]..[514,31813+48])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[514,31813+41]..[514,31813+48])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[515,31863+12]..[515,31863+38])
                                          expression (lib/sentenceParser_describe.ml[515,31863+41]..[515,31863+54])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[515,31863+41]..[515,31863+54])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[516,31918+14]..[553,33964+21])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[516,31918+20]..[516,31918+31])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[516,31918+20]..[516,31918+31])
                      expression (lib/sentenceParser_describe.ml[517,31953+18]..[553,33964+19])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[517,31953+22]..[517,31953+35])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[517,31953+22]..[517,31953+35])
                            expression (lib/sentenceParser_describe.ml[517,31953+38]..[517,31953+77])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[517,31953+38]..[517,31953+49])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[517,31953+38]..[517,31953+49])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[517,31953+50]..[517,31953+77])
                        ]
                        expression (lib/sentenceParser_describe.ml[518,32034+18]..[553,33964+19])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[518,32034+22]..[528,32711+25])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[518,32034+24]..[518,32034+51])
                                    pattern (lib/sentenceParser_describe.ml[518,32034+54]..[518,32034+55])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[519,32091+24]..[519,32091+50])
                                    pattern (lib/sentenceParser_describe.ml[519,32091+53]..[519,32091+64])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[519,32091+53]..[519,32091+64])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[520,32157+24]..[520,32157+52])
                                    pattern (lib/sentenceParser_describe.ml[520,32157+55]..[520,32157+77])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser_describe.ml[520,32157+55]..[520,32157+77])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[521,32236+24]..[521,32236+50])
                                    pattern (lib/sentenceParser_describe.ml[521,32236+53]..[521,32236+73])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[521,32236+53]..[521,32236+73])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[522,32311+24]..[522,32311+50])
                                    pattern (lib/sentenceParser_describe.ml[523,32364+26]..[527,32638+72])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[523,32364+28]..[523,32364+55])
                                          pattern (lib/sentenceParser_describe.ml[523,32364+58]..[523,32364+67])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[523,32364+58]..[523,32364+67])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[524,32433+28]..[524,32433+54])
                                          pattern (lib/sentenceParser_describe.ml[524,32433+57]..[524,32433+59])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[524,32433+57]..[524,32433+59])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[525,32494+28]..[525,32494+56])
                                          pattern (lib/sentenceParser_describe.ml[525,32494+59]..[525,32494+72])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[525,32494+59]..[525,32494+72])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[526,32568+28]..[526,32568+54])
                                          pattern (lib/sentenceParser_describe.ml[526,32568+57]..[526,32568+68])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[526,32568+57]..[526,32568+68])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[527,32638+28]..[527,32638+54])
                                          pattern (lib/sentenceParser_describe.ml[527,32638+57]..[527,32638+70])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[527,32638+57]..[527,32638+70])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[529,32737+22]..[529,32737+35])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[529,32737+22]..[529,32737+35])
                          ]
                          expression (lib/sentenceParser_describe.ml[530,32776+18]..[553,33964+19])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[530,32776+22]..[530,32776+33])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[530,32776+22]..[530,32776+33])
                                core_type (lib/sentenceParser_describe.ml[530,32776+36]..[530,32776+40])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[530,32776+36]..[530,32776+40])
                                  []
                                expression (lib/sentenceParser_describe.ml[530,32776+43]..[530,32776+64])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[530,32776+43]..[530,32776+52])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[530,32776+43]..[530,32776+52])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[530,32776+53]..[530,32776+64])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser_describe.ml[530,32776+53]..[530,32776+64])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[531,32844+18]..[553,33964+19])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[531,32844+22]..[531,32844+24])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[531,32844+22]..[531,32844+24])
                                  core_type (lib/sentenceParser_describe.ml[531,32844+27]..[531,32844+42])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[531,32844+27]..[531,32844+42])
                                    []
                                  expression (lib/sentenceParser_describe.ml[531,32844+45]..[531,32844+57])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[531,32844+45]..[531,32844+54])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[531,32844+45]..[531,32844+54])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[531,32844+55]..[531,32844+57])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[531,32844+55]..[531,32844+57])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[532,32905+18]..[553,33964+19])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[532,32905+22]..[532,32905+33])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[532,32905+22]..[532,32905+33])
                                    expression (lib/sentenceParser_describe.ml[532,32905+36]..[532,32905+76])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[532,32905+36]..[532,32905+49])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[532,32905+36]..[532,32905+49])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[532,32905+50]..[532,32905+76])
                                ]
                                expression (lib/sentenceParser_describe.ml[533,32985+18]..[553,33964+19])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[533,32985+22]..[533,32985+31])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[533,32985+22]..[533,32985+31])
                                      expression (lib/sentenceParser_describe.ml[533,32985+34]..[533,32985+47])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[533,32985+34]..[533,32985+47])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[534,33036+18]..[553,33964+19])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[534,33036+22]..[534,33036+29])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[534,33036+22]..[534,33036+29])
                                        expression (lib/sentenceParser_describe.ml[534,33036+32]..[534,33036+52])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[534,33036+32]..[534,33036+52])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[535,33092+18]..[553,33964+19])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[535,33092+22]..[535,33092+24])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[535,33092+22]..[535,33092+24])
                                          core_type (lib/sentenceParser_describe.ml[535,33092+27]..[535,33092+42])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[535,33092+27]..[535,33092+42])
                                            []
                                          expression (lib/sentenceParser_describe.ml[536,33137+20]..[546,33602+30])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser_describe.ml[536,33137+24]..[536,33137+26])
                                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[536,33137+24]..[536,33137+26])
                                                expression (lib/sentenceParser_describe.ml[537,33166+22]..[542,33422+32])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser_describe.ml[537,33166+26]..[537,33166+28])
                                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[537,33166+26]..[537,33166+28])
                                                      expression (lib/sentenceParser_describe.ml[537,33166+31]..[537,33166+42])
                                                        Pexp_ident "_1_inlined1" (lib/sentenceParser_describe.ml[537,33166+31]..[537,33166+42])
                                                  ]
                                                  expression (lib/sentenceParser_describe.ml[538,33212+22]..[542,33422+32])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser_describe.ml[538,33212+26]..[538,33212+28])
                                                          Ppat_var "_1" (lib/sentenceParser_describe.ml[538,33212+26]..[538,33212+28])
                                                        expression (lib/sentenceParser_describe.ml[539,33243+24]..[540,33318+28])
                                                          Pexp_sequence
                                                          expression (lib/sentenceParser_describe.ml[539,33243+24]..[539,33243+73])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[539,33243+24]..[539,33243+37])
                                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[539,33243+24]..[539,33243+37])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[539,33243+38]..[539,33243+73])
                                                                  Pexp_apply
                                                                  expression (lib/sentenceParser_describe.ml[539,33243+39]..[539,33243+53])
                                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[539,33243+39]..[539,33243+53])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lib/sentenceParser_describe.ml[539,33243+54]..[539,33243+72])
Pexp_tuple
[
  expression (lib/sentenceParser_describe.ml[539,33243+55]..[539,33243+67])
    Pexp_constant PConst_string("DEBUG:plus",(lib/sentenceParser_describe.ml[539,33243+56]..[539,33243+66]),None)
  expression (lib/sentenceParser_describe.ml[539,33243+69]..[539,33243+71])
    Pexp_ident "_1" (lib/sentenceParser_describe.ml[539,33243+69]..[539,33243+71])
]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser_describe.ml[540,33318+24]..[540,33318+28])
                                                            Pexp_construct "Plus" (lib/sentenceParser_describe.ml[540,33318+24]..[540,33318+28])
                                                            None
                                                    ]
                                                    expression (lib/sentenceParser_describe.ml[541,33350+22]..[542,33422+32])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[541,33350+22]..[541,33350+70])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[541,33350+22]..[541,33350+35])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[541,33350+22]..[541,33350+35])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[541,33350+36]..[541,33350+70])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[541,33350+37]..[541,33350+51])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[541,33350+37]..[541,33350+51])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[541,33350+52]..[541,33350+69])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[541,33350+53]..[541,33350+64])
Pexp_constant PConst_string("DEBUG:mod",(lib/sentenceParser_describe.ml[541,33350+54]..[541,33350+63]),None)
                                                                      expression (lib/sentenceParser_describe.ml[541,33350+66]..[541,33350+68])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[541,33350+66]..[541,33350+68])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[542,33422+22]..[542,33422+32])
                                                        Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[542,33422+22]..[542,33422+29])
                                                        Some
                                                          expression (lib/sentenceParser_describe.ml[542,33422+30]..[542,33422+32])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[542,33422+30]..[542,33422+32])
                                            ]
                                            expression (lib/sentenceParser_describe.ml[543,33458+20]..[546,33602+30])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser_describe.ml[543,33458+24]..[543,33458+26])
                                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[543,33458+24]..[543,33458+26])
                                                  expression (lib/sentenceParser_describe.ml[544,33487+22]..[545,33566+32])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser_describe.ml[544,33487+22]..[544,33487+77])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[544,33487+22]..[544,33487+35])
                                                        Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[544,33487+22]..[544,33487+35])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[544,33487+36]..[544,33487+77])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[544,33487+37]..[544,33487+51])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[544,33487+37]..[544,33487+51])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[544,33487+52]..[544,33487+76])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser_describe.ml[544,33487+53]..[544,33487+71])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser_describe.ml[544,33487+54]..[544,33487+70]),None)
                                                                    expression (lib/sentenceParser_describe.ml[544,33487+73]..[544,33487+75])
                                                                      Pexp_ident "_1" (lib/sentenceParser_describe.ml[544,33487+73]..[544,33487+75])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser_describe.ml[545,33566+22]..[545,33566+32])
                                                      Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[545,33566+22]..[545,33566+29])
                                                      Some
                                                        expression (lib/sentenceParser_describe.ml[545,33566+30]..[545,33566+32])
                                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[545,33566+30]..[545,33566+32])
                                              ]
                                              expression (lib/sentenceParser_describe.ml[546,33602+20]..[546,33602+30])
                                                Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[546,33602+20]..[546,33602+27])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[546,33602+28]..[546,33602+30])
                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[546,33602+28]..[546,33602+30])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[547,33636+18]..[553,33964+19])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[548,33656+20]..[548,33656+47])
                                            expression (lib/sentenceParser_describe.ml[548,33656+50]..[548,33656+59])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[548,33656+50]..[548,33656+59])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[549,33717+20]..[549,33717+46])
                                            expression (lib/sentenceParser_describe.ml[549,33717+49]..[549,33717+62])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[549,33717+50]..[549,33717+58])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[549,33717+50]..[549,33717+58])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[549,33717+59]..[549,33717+61])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[549,33717+59]..[549,33717+61])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[550,33781+20]..[550,33781+48])
                                            expression (lib/sentenceParser_describe.ml[550,33781+51]..[550,33781+60])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[550,33781+51]..[550,33781+60])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[551,33843+20]..[551,33843+46])
                                            expression (lib/sentenceParser_describe.ml[551,33843+49]..[551,33843+56])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[551,33843+49]..[551,33843+56])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[552,33901+20]..[552,33901+46])
                                            expression (lib/sentenceParser_describe.ml[552,33901+49]..[552,33901+62])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[552,33901+49]..[552,33901+62])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[553,33964+22]..[600,36647+29])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[553,33964+28]..[553,33964+39])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[553,33964+28]..[553,33964+39])
                      expression (lib/sentenceParser_describe.ml[554,34007+26]..[600,36647+27])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[554,34007+30]..[554,34007+43])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[554,34007+30]..[554,34007+43])
                            expression (lib/sentenceParser_describe.ml[555,34053+28]..[555,34053+67])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[555,34053+28]..[555,34053+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[555,34053+28]..[555,34053+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[555,34053+40]..[555,34053+67])
                        ]
                        expression (lib/sentenceParser_describe.ml[556,34124+26]..[600,36647+27])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[556,34124+30]..[571,35061+33])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[556,34124+32]..[556,34124+59])
                                    pattern (lib/sentenceParser_describe.ml[556,34124+62]..[556,34124+63])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[557,34189+32]..[557,34189+58])
                                    pattern (lib/sentenceParser_describe.ml[557,34189+61]..[557,34189+72])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[557,34189+61]..[557,34189+72])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[558,34263+32]..[558,34263+60])
                                    pattern (lib/sentenceParser_describe.ml[559,34326+34]..[559,34326+56])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser_describe.ml[559,34326+34]..[559,34326+56])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[560,34384+32]..[560,34384+58])
                                    pattern (lib/sentenceParser_describe.ml[561,34445+34]..[561,34445+54])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[561,34445+34]..[561,34445+54])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[562,34501+32]..[562,34501+58])
                                    pattern (lib/sentenceParser_describe.ml[563,34562+34]..[570,35023+37])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[563,34562+36]..[563,34562+63])
                                          pattern (lib/sentenceParser_describe.ml[563,34562+66]..[563,34562+75])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[563,34562+66]..[563,34562+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[564,34639+36]..[564,34639+62])
                                          pattern (lib/sentenceParser_describe.ml[564,34639+65]..[564,34639+67])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[564,34639+65]..[564,34639+67])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[565,34708+36]..[565,34708+64])
                                          pattern (lib/sentenceParser_describe.ml[566,34775+38]..[566,34775+51])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[566,34775+38]..[566,34775+51])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[567,34828+36]..[567,34828+62])
                                          pattern (lib/sentenceParser_describe.ml[567,34828+65]..[567,34828+76])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[567,34828+65]..[567,34828+76])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[568,34906+36]..[568,34906+62])
                                          pattern (lib/sentenceParser_describe.ml[569,34971+38]..[569,34971+51])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[569,34971+38]..[569,34971+51])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[572,35095+30]..[572,35095+43])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[572,35095+30]..[572,35095+43])
                          ]
                          expression (lib/sentenceParser_describe.ml[573,35142+26]..[600,36647+27])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[573,35142+30]..[573,35142+41])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[573,35142+30]..[573,35142+41])
                                core_type (lib/sentenceParser_describe.ml[573,35142+44]..[573,35142+48])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[573,35142+44]..[573,35142+48])
                                  []
                                expression (lib/sentenceParser_describe.ml[573,35142+51]..[573,35142+72])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[573,35142+51]..[573,35142+60])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[573,35142+51]..[573,35142+60])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[573,35142+61]..[573,35142+72])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser_describe.ml[573,35142+61]..[573,35142+72])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[574,35218+26]..[600,36647+27])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[574,35218+30]..[574,35218+32])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[574,35218+30]..[574,35218+32])
                                  core_type (lib/sentenceParser_describe.ml[574,35218+35]..[574,35218+50])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[574,35218+35]..[574,35218+50])
                                    []
                                  expression (lib/sentenceParser_describe.ml[574,35218+53]..[574,35218+65])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[574,35218+53]..[574,35218+62])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[574,35218+53]..[574,35218+62])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[574,35218+63]..[574,35218+65])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[574,35218+63]..[574,35218+65])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[575,35287+26]..[600,36647+27])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[575,35287+30]..[575,35287+41])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[575,35287+30]..[575,35287+41])
                                    expression (lib/sentenceParser_describe.ml[576,35331+28]..[576,35331+68])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[576,35331+28]..[576,35331+41])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[576,35331+28]..[576,35331+41])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[576,35331+42]..[576,35331+68])
                                ]
                                expression (lib/sentenceParser_describe.ml[577,35403+26]..[600,36647+27])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[577,35403+30]..[577,35403+39])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[577,35403+30]..[577,35403+39])
                                      expression (lib/sentenceParser_describe.ml[577,35403+42]..[577,35403+55])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[577,35403+42]..[577,35403+55])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[578,35462+26]..[600,36647+27])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[578,35462+30]..[578,35462+37])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[578,35462+30]..[578,35462+37])
                                        expression (lib/sentenceParser_describe.ml[578,35462+40]..[578,35462+60])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[578,35462+40]..[578,35462+60])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[579,35526+26]..[600,36647+27])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[579,35526+30]..[579,35526+32])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[579,35526+30]..[579,35526+32])
                                          core_type (lib/sentenceParser_describe.ml[579,35526+35]..[579,35526+50])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[579,35526+35]..[579,35526+50])
                                            []
                                          expression (lib/sentenceParser_describe.ml[580,35579+28]..[593,36229+38])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser_describe.ml[580,35579+32]..[580,35579+34])
                                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[580,35579+32]..[580,35579+34])
                                                expression (lib/sentenceParser_describe.ml[581,35616+30]..[588,35985+40])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser_describe.ml[581,35616+34]..[581,35616+36])
                                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[581,35616+34]..[581,35616+36])
                                                      expression (lib/sentenceParser_describe.ml[581,35616+39]..[581,35616+50])
                                                        Pexp_ident "_1_inlined1" (lib/sentenceParser_describe.ml[581,35616+39]..[581,35616+50])
                                                  ]
                                                  expression (lib/sentenceParser_describe.ml[582,35670+30]..[588,35985+40])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser_describe.ml[582,35670+34]..[582,35670+36])
                                                          Ppat_var "_1" (lib/sentenceParser_describe.ml[582,35670+34]..[582,35670+36])
                                                        expression (lib/sentenceParser_describe.ml[583,35709+32]..[585,35827+40])
                                                          Pexp_sequence
                                                          expression (lib/sentenceParser_describe.ml[583,35709+32]..[584,35755+70])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[583,35709+32]..[583,35709+45])
                                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[583,35709+32]..[583,35709+45])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[584,35755+34]..[584,35755+70])
                                                                  Pexp_apply
                                                                  expression (lib/sentenceParser_describe.ml[584,35755+35]..[584,35755+49])
                                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[584,35755+35]..[584,35755+49])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lib/sentenceParser_describe.ml[584,35755+50]..[584,35755+69])
Pexp_tuple
[
  expression (lib/sentenceParser_describe.ml[584,35755+51]..[584,35755+64])
    Pexp_constant PConst_string("DEBUG:quest",(lib/sentenceParser_describe.ml[584,35755+52]..[584,35755+63]),None)
  expression (lib/sentenceParser_describe.ml[584,35755+66]..[584,35755+68])
    Pexp_ident "_1" (lib/sentenceParser_describe.ml[584,35755+66]..[584,35755+68])
]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser_describe.ml[585,35827+32]..[585,35827+40])
                                                            Pexp_construct "Question" (lib/sentenceParser_describe.ml[585,35827+32]..[585,35827+40])
                                                            None
                                                    ]
                                                    expression (lib/sentenceParser_describe.ml[586,35871+30]..[588,35985+40])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[586,35871+30]..[587,35915+68])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[586,35871+30]..[586,35871+43])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[586,35871+30]..[586,35871+43])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[587,35915+32]..[587,35915+68])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[587,35915+33]..[587,35915+47])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[587,35915+33]..[587,35915+47])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[587,35915+48]..[587,35915+67])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[587,35915+49]..[587,35915+62])
Pexp_constant PConst_string("DEBUG:quest",(lib/sentenceParser_describe.ml[587,35915+50]..[587,35915+61]),None)
                                                                      expression (lib/sentenceParser_describe.ml[587,35915+64]..[587,35915+66])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[587,35915+64]..[587,35915+66])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[588,35985+30]..[588,35985+40])
                                                        Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[588,35985+30]..[588,35985+37])
                                                        Some
                                                          expression (lib/sentenceParser_describe.ml[588,35985+38]..[588,35985+40])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[588,35985+38]..[588,35985+40])
                                            ]
                                            expression (lib/sentenceParser_describe.ml[589,36029+28]..[593,36229+38])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser_describe.ml[589,36029+32]..[589,36029+34])
                                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[589,36029+32]..[589,36029+34])
                                                  expression (lib/sentenceParser_describe.ml[590,36066+30]..[592,36185+40])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser_describe.ml[590,36066+30]..[591,36110+73])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[590,36066+30]..[590,36066+43])
                                                        Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[590,36066+30]..[590,36066+43])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[591,36110+32]..[591,36110+73])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[591,36110+33]..[591,36110+47])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[591,36110+33]..[591,36110+47])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[591,36110+48]..[591,36110+72])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser_describe.ml[591,36110+49]..[591,36110+67])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser_describe.ml[591,36110+50]..[591,36110+66]),None)
                                                                    expression (lib/sentenceParser_describe.ml[591,36110+69]..[591,36110+71])
                                                                      Pexp_ident "_1" (lib/sentenceParser_describe.ml[591,36110+69]..[591,36110+71])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser_describe.ml[592,36185+30]..[592,36185+40])
                                                      Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[592,36185+30]..[592,36185+37])
                                                      Some
                                                        expression (lib/sentenceParser_describe.ml[592,36185+38]..[592,36185+40])
                                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[592,36185+38]..[592,36185+40])
                                              ]
                                              expression (lib/sentenceParser_describe.ml[593,36229+28]..[593,36229+38])
                                                Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[593,36229+28]..[593,36229+35])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[593,36229+36]..[593,36229+38])
                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[593,36229+36]..[593,36229+38])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[594,36271+26]..[600,36647+27])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[595,36299+28]..[595,36299+55])
                                            expression (lib/sentenceParser_describe.ml[595,36299+58]..[595,36299+67])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[595,36299+58]..[595,36299+67])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[596,36368+28]..[596,36368+54])
                                            expression (lib/sentenceParser_describe.ml[596,36368+57]..[596,36368+70])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[596,36368+58]..[596,36368+66])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[596,36368+58]..[596,36368+66])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[596,36368+67]..[596,36368+69])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[596,36368+67]..[596,36368+69])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[597,36440+28]..[597,36440+56])
                                            expression (lib/sentenceParser_describe.ml[597,36440+59]..[597,36440+68])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[597,36440+59]..[597,36440+68])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[598,36510+28]..[598,36510+54])
                                            expression (lib/sentenceParser_describe.ml[598,36510+57]..[598,36510+64])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[598,36510+57]..[598,36510+64])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[599,36576+28]..[599,36576+54])
                                            expression (lib/sentenceParser_describe.ml[599,36576+57]..[599,36576+70])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[599,36576+57]..[599,36576+70])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[600,36647+30]..[651,39798+37])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[600,36647+36]..[600,36647+47])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[600,36647+36]..[600,36647+47])
                      expression (lib/sentenceParser_describe.ml[601,36698+34]..[651,39798+35])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[601,36698+38]..[601,36698+51])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[601,36698+38]..[601,36698+51])
                            expression (lib/sentenceParser_describe.ml[602,36752+36]..[602,36752+75])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[602,36752+36]..[602,36752+47])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[602,36752+36]..[602,36752+47])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[602,36752+48]..[602,36752+75])
                        ]
                        expression (lib/sentenceParser_describe.ml[603,36831+34]..[651,39798+35])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[603,36831+38]..[622,38066+41])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[603,36831+40]..[603,36831+67])
                                    pattern (lib/sentenceParser_describe.ml[603,36831+70]..[603,36831+71])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[604,36904+40]..[604,36904+66])
                                    pattern (lib/sentenceParser_describe.ml[605,36973+42]..[605,36973+53])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[605,36973+42]..[605,36973+53])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[606,37028+40]..[606,37028+68])
                                    pattern (lib/sentenceParser_describe.ml[607,37099+42]..[607,37099+64])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser_describe.ml[607,37099+42]..[607,37099+64])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[608,37165+40]..[608,37165+66])
                                    pattern (lib/sentenceParser_describe.ml[609,37234+42]..[609,37234+62])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[609,37234+42]..[609,37234+62])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[610,37298+40]..[610,37298+66])
                                    pattern (lib/sentenceParser_describe.ml[611,37367+42]..[621,38020+45])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[612,37411+44]..[612,37411+71])
                                          pattern (lib/sentenceParser_describe.ml[613,37485+46]..[613,37485+55])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[613,37485+46]..[613,37485+55])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[614,37542+44]..[614,37542+70])
                                          pattern (lib/sentenceParser_describe.ml[614,37542+73]..[614,37542+75])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[614,37542+73]..[614,37542+75])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[615,37619+44]..[615,37619+72])
                                          pattern (lib/sentenceParser_describe.ml[616,37694+46]..[616,37694+59])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[616,37694+46]..[616,37694+59])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[617,37755+44]..[617,37755+70])
                                          pattern (lib/sentenceParser_describe.ml[618,37828+46]..[618,37828+57])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[618,37828+46]..[618,37828+57])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[619,37887+44]..[619,37887+70])
                                          pattern (lib/sentenceParser_describe.ml[620,37960+46]..[620,37960+59])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[620,37960+46]..[620,37960+59])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[623,38108+38]..[623,38108+51])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[623,38108+38]..[623,38108+51])
                          ]
                          expression (lib/sentenceParser_describe.ml[624,38163+34]..[651,39798+35])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[624,38163+38]..[624,38163+49])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser_describe.ml[624,38163+38]..[624,38163+49])
                                core_type (lib/sentenceParser_describe.ml[624,38163+52]..[624,38163+56])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[624,38163+52]..[624,38163+56])
                                  []
                                expression (lib/sentenceParser_describe.ml[625,38222+36]..[625,38222+57])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[625,38222+36]..[625,38222+45])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[625,38222+36]..[625,38222+45])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[625,38222+46]..[625,38222+57])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser_describe.ml[625,38222+46]..[625,38222+57])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[626,38283+34]..[651,39798+35])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[626,38283+38]..[626,38283+40])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[626,38283+38]..[626,38283+40])
                                  core_type (lib/sentenceParser_describe.ml[626,38283+43]..[626,38283+58])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[626,38283+43]..[626,38283+58])
                                    []
                                  expression (lib/sentenceParser_describe.ml[626,38283+61]..[626,38283+73])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[626,38283+61]..[626,38283+70])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[626,38283+61]..[626,38283+70])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[626,38283+71]..[626,38283+73])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[626,38283+71]..[626,38283+73])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[627,38360+34]..[651,39798+35])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[627,38360+38]..[627,38360+49])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[627,38360+38]..[627,38360+49])
                                    expression (lib/sentenceParser_describe.ml[628,38412+36]..[628,38412+76])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[628,38412+36]..[628,38412+49])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[628,38412+36]..[628,38412+49])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[628,38412+50]..[628,38412+76])
                                ]
                                expression (lib/sentenceParser_describe.ml[629,38492+34]..[651,39798+35])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[629,38492+38]..[629,38492+47])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[629,38492+38]..[629,38492+47])
                                      expression (lib/sentenceParser_describe.ml[629,38492+50]..[629,38492+63])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[629,38492+50]..[629,38492+63])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[630,38559+34]..[651,39798+35])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[630,38559+38]..[630,38559+45])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[630,38559+38]..[630,38559+45])
                                        expression (lib/sentenceParser_describe.ml[630,38559+48]..[630,38559+68])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser_describe.ml[630,38559+48]..[630,38559+68])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[631,38631+34]..[651,39798+35])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[631,38631+38]..[631,38631+40])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[631,38631+38]..[631,38631+40])
                                          core_type (lib/sentenceParser_describe.ml[631,38631+43]..[631,38631+58])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[631,38631+43]..[631,38631+58])
                                            []
                                          expression (lib/sentenceParser_describe.ml[632,38692+36]..[642,39248+46])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser_describe.ml[632,38692+40]..[632,38692+42])
                                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[632,38692+40]..[632,38692+42])
                                                expression (lib/sentenceParser_describe.ml[633,38737+38]..[636,38921+48])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser_describe.ml[633,38737+42]..[633,38737+44])
                                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[633,38737+42]..[633,38737+44])
                                                      expression (lib/sentenceParser_describe.ml[633,38737+47]..[633,38737+51])
                                                        Pexp_construct "Star" (lib/sentenceParser_describe.ml[633,38737+47]..[633,38737+51])
                                                        None
                                                  ]
                                                  expression (lib/sentenceParser_describe.ml[634,38792+38]..[636,38921+48])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser_describe.ml[634,38792+38]..[635,38844+75])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[634,38792+38]..[634,38792+51])
                                                        Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[634,38792+38]..[634,38792+51])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[635,38844+40]..[635,38844+75])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[635,38844+41]..[635,38844+55])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[635,38844+41]..[635,38844+55])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[635,38844+56]..[635,38844+74])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser_describe.ml[635,38844+57]..[635,38844+69])
                                                                      Pexp_constant PConst_string("DEBUG:star",(lib/sentenceParser_describe.ml[635,38844+58]..[635,38844+68]),None)
                                                                    expression (lib/sentenceParser_describe.ml[635,38844+71]..[635,38844+73])
                                                                      Pexp_ident "_1" (lib/sentenceParser_describe.ml[635,38844+71]..[635,38844+73])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser_describe.ml[636,38921+38]..[636,38921+48])
                                                      Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[636,38921+38]..[636,38921+45])
                                                      Some
                                                        expression (lib/sentenceParser_describe.ml[636,38921+46]..[636,38921+48])
                                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[636,38921+46]..[636,38921+48])
                                            ]
                                            expression (lib/sentenceParser_describe.ml[637,38973+36]..[642,39248+46])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser_describe.ml[637,38973+40]..[637,38973+42])
                                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[637,38973+40]..[637,38973+42])
                                                  expression (lib/sentenceParser_describe.ml[638,39018+38]..[641,39196+48])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser_describe.ml[638,39018+38]..[640,39126+68])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[638,39018+38]..[638,39018+51])
                                                        Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[638,39018+38]..[638,39018+51])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[639,39070+40]..[640,39126+68])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser_describe.ml[639,39070+41]..[639,39070+55])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[639,39070+41]..[639,39070+55])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser_describe.ml[640,39126+43]..[640,39126+67])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser_describe.ml[640,39126+44]..[640,39126+62])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser_describe.ml[640,39126+45]..[640,39126+61]),None)
                                                                    expression (lib/sentenceParser_describe.ml[640,39126+64]..[640,39126+66])
                                                                      Pexp_ident "_1" (lib/sentenceParser_describe.ml[640,39126+64]..[640,39126+66])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser_describe.ml[641,39196+38]..[641,39196+48])
                                                      Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[641,39196+38]..[641,39196+45])
                                                      Some
                                                        expression (lib/sentenceParser_describe.ml[641,39196+46]..[641,39196+48])
                                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[641,39196+46]..[641,39196+48])
                                              ]
                                              expression (lib/sentenceParser_describe.ml[642,39248+36]..[642,39248+46])
                                                Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[642,39248+36]..[642,39248+43])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[642,39248+44]..[642,39248+46])
                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[642,39248+44]..[642,39248+46])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[643,39298+34]..[651,39798+35])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[644,39334+36]..[644,39334+63])
                                            expression (lib/sentenceParser_describe.ml[644,39334+66]..[644,39334+75])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[644,39334+66]..[644,39334+75])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[645,39411+36]..[645,39411+62])
                                            expression (lib/sentenceParser_describe.ml[646,39476+38]..[646,39476+51])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[646,39476+39]..[646,39476+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[646,39476+39]..[646,39476+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[646,39476+48]..[646,39476+50])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[646,39476+48]..[646,39476+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[647,39529+36]..[647,39529+64])
                                            expression (lib/sentenceParser_describe.ml[647,39529+67]..[647,39529+76])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[647,39529+67]..[647,39529+76])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[648,39607+36]..[648,39607+62])
                                            expression (lib/sentenceParser_describe.ml[648,39607+65]..[648,39607+72])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[648,39607+65]..[648,39607+72])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[649,39681+36]..[649,39681+62])
                                            expression (lib/sentenceParser_describe.ml[650,39746+38]..[650,39746+51])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[650,39746+38]..[650,39746+51])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[651,39798+38]..[691,42429+45])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[651,39798+44]..[651,39798+55])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[651,39798+44]..[651,39798+55])
                      expression (lib/sentenceParser_describe.ml[652,39857+42]..[691,42429+43])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[652,39857+46]..[652,39857+59])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[652,39857+46]..[652,39857+59])
                            expression (lib/sentenceParser_describe.ml[653,39919+44]..[653,39919+83])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[653,39919+44]..[653,39919+55])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[653,39919+44]..[653,39919+55])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[653,39919+56]..[653,39919+83])
                        ]
                        expression (lib/sentenceParser_describe.ml[654,40006+42]..[691,42429+43])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[654,40006+46]..[665,40749+49])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[655,40054+48]..[655,40054+75])
                                    pattern (lib/sentenceParser_describe.ml[656,40132+50]..[656,40132+59])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[656,40132+50]..[656,40132+59])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[657,40193+48]..[657,40193+74])
                                    pattern (lib/sentenceParser_describe.ml[658,40270+50]..[658,40270+52])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[658,40270+50]..[658,40270+52])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[659,40324+48]..[659,40324+76])
                                    pattern (lib/sentenceParser_describe.ml[660,40401+52]..[660,40401+65])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[660,40401+52]..[660,40401+65])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[661,40468+48]..[661,40468+74])
                                    pattern (lib/sentenceParser_describe.ml[662,40545+50]..[662,40545+61])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[662,40545+50]..[662,40545+61])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[663,40608+48]..[663,40608+74])
                                    pattern (lib/sentenceParser_describe.ml[664,40685+50]..[664,40685+63])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[664,40685+50]..[664,40685+63])
                                ]
                              expression (lib/sentenceParser_describe.ml[666,40799+46]..[666,40799+59])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[666,40799+46]..[666,40799+59])
                          ]
                          expression (lib/sentenceParser_describe.ml[667,40862+42]..[691,42429+43])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[667,40862+46]..[667,40862+48])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[667,40862+46]..[667,40862+48])
                                core_type (lib/sentenceParser_describe.ml[667,40862+51]..[667,40862+66])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[667,40862+51]..[667,40862+66])
                                  []
                                expression (lib/sentenceParser_describe.ml[668,40931+44]..[668,40931+56])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[668,40931+44]..[668,40931+53])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[668,40931+44]..[668,40931+53])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[668,40931+54]..[668,40931+56])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[668,40931+54]..[668,40931+56])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[669,40991+42]..[691,42429+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[669,40991+46]..[669,40991+57])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[669,40991+46]..[669,40991+57])
                                  expression (lib/sentenceParser_describe.ml[670,41051+44]..[670,41051+84])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[670,41051+44]..[670,41051+57])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[670,41051+44]..[670,41051+57])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[670,41051+58]..[670,41051+84])
                              ]
                              expression (lib/sentenceParser_describe.ml[671,41139+42]..[691,42429+43])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[671,41139+46]..[671,41139+55])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[671,41139+46]..[671,41139+55])
                                    expression (lib/sentenceParser_describe.ml[671,41139+58]..[671,41139+71])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[671,41139+58]..[671,41139+71])
                                ]
                                expression (lib/sentenceParser_describe.ml[672,41214+42]..[691,42429+43])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[672,41214+46]..[672,41214+53])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[672,41214+46]..[672,41214+53])
                                      expression (lib/sentenceParser_describe.ml[672,41214+56]..[672,41214+67])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[672,41214+56]..[672,41214+67])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[673,41285+42]..[691,42429+43])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[673,41285+46]..[673,41285+48])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[673,41285+46]..[673,41285+48])
                                        core_type (lib/sentenceParser_describe.ml[673,41285+51]..[673,41285+66])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[673,41285+51]..[673,41285+66])
                                          []
                                        expression (lib/sentenceParser_describe.ml[674,41354+44]..[679,41669+54])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[674,41354+48]..[674,41354+50])
                                                Ppat_var "_1" (lib/sentenceParser_describe.ml[674,41354+48]..[674,41354+50])
                                              expression (lib/sentenceParser_describe.ml[675,41407+46]..[678,41609+56])
                                                Pexp_sequence
                                                expression (lib/sentenceParser_describe.ml[675,41407+46]..[677,41531+76])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[675,41407+46]..[675,41407+59])
                                                    Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[675,41407+46]..[675,41407+59])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[676,41467+48]..[677,41531+76])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[676,41467+49]..[676,41467+63])
                                                          Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[676,41467+49]..[676,41467+63])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[677,41531+51]..[677,41531+75])
                                                              Pexp_tuple
                                                              [
                                                                expression (lib/sentenceParser_describe.ml[677,41531+52]..[677,41531+70])
                                                                  Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser_describe.ml[677,41531+53]..[677,41531+69]),None)
                                                                expression (lib/sentenceParser_describe.ml[677,41531+72]..[677,41531+74])
                                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[677,41531+72]..[677,41531+74])
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser_describe.ml[678,41609+46]..[678,41609+56])
                                                  Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[678,41609+46]..[678,41609+53])
                                                  Some
                                                    expression (lib/sentenceParser_describe.ml[678,41609+54]..[678,41609+56])
                                                      Pexp_ident "_1" (lib/sentenceParser_describe.ml[678,41609+54]..[678,41609+56])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[679,41669+44]..[679,41669+54])
                                            Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[679,41669+44]..[679,41669+51])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[679,41669+52]..[679,41669+54])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[679,41669+52]..[679,41669+54])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[680,41727+42]..[691,42429+43])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[681,41771+44]..[681,41771+71])
                                          expression (lib/sentenceParser_describe.ml[682,41845+46]..[682,41845+55])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[682,41845+46]..[682,41845+55])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[683,41902+44]..[683,41902+70])
                                          expression (lib/sentenceParser_describe.ml[684,41975+46]..[684,41975+59])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[684,41975+47]..[684,41975+55])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[684,41975+47]..[684,41975+55])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[684,41975+56]..[684,41975+58])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[684,41975+56]..[684,41975+58])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[685,42036+44]..[685,42036+72])
                                          expression (lib/sentenceParser_describe.ml[686,42111+46]..[686,42111+55])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[686,42111+46]..[686,42111+55])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[687,42168+44]..[687,42168+70])
                                          expression (lib/sentenceParser_describe.ml[688,42241+46]..[688,42241+53])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[688,42241+46]..[688,42241+53])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[689,42296+44]..[689,42296+70])
                                          expression (lib/sentenceParser_describe.ml[690,42369+46]..[690,42369+59])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[690,42369+46]..[690,42369+59])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[691,42429+46]..[749,46650+53])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[691,42429+52]..[691,42429+63])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[691,42429+52]..[691,42429+63])
                      expression (lib/sentenceParser_describe.ml[692,42496+50]..[749,46650+51])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[692,42496+54]..[692,42496+67])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[692,42496+54]..[692,42496+67])
                            expression (lib/sentenceParser_describe.ml[693,42566+52]..[693,42566+91])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[693,42566+52]..[693,42566+63])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[693,42566+52]..[693,42566+63])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[693,42566+64]..[693,42566+91])
                        ]
                        expression (lib/sentenceParser_describe.ml[694,42661+50]..[749,46650+51])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[694,42661+54]..[717,44407+57])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[695,42717+56]..[695,42717+83])
                                    pattern (lib/sentenceParser_describe.ml[696,42801+60]..[696,42801+61])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[697,42864+56]..[697,42864+82])
                                    pattern (lib/sentenceParser_describe.ml[698,42947+60]..[698,42947+62])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[698,42947+60]..[698,42947+62])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[699,43011+56]..[699,43011+84])
                                    pattern (lib/sentenceParser_describe.ml[700,43096+60]..[700,43096+73])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[700,43096+60]..[700,43096+73])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[701,43171+56]..[701,43171+82])
                                    pattern (lib/sentenceParser_describe.ml[702,43254+60]..[702,43254+71])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[702,43254+60]..[702,43254+71])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[703,43327+56]..[703,43327+82])
                                    pattern (lib/sentenceParser_describe.ml[705,43470+58]..[716,44345+61])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[706,43530+60]..[706,43530+87])
                                          pattern (lib/sentenceParser_describe.ml[707,43618+64]..[707,43618+73])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[707,43618+64]..[707,43618+73])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[708,43693+60]..[708,43693+86])
                                          pattern (lib/sentenceParser_describe.ml[709,43780+64]..[709,43780+66])
                                            Ppat_var "rs" (lib/sentenceParser_describe.ml[709,43780+64]..[709,43780+66])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[710,43848+60]..[710,43848+88])
                                          pattern (lib/sentenceParser_describe.ml[711,43937+64]..[711,43937+77])
                                            Ppat_var "_startpos_rs_" (lib/sentenceParser_describe.ml[711,43937+64]..[711,43937+77])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[712,44016+60]..[712,44016+86])
                                          pattern (lib/sentenceParser_describe.ml[713,44103+64]..[713,44103+75])
                                            Ppat_var "_endpos_rs_" (lib/sentenceParser_describe.ml[713,44103+64]..[713,44103+75])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[714,44180+60]..[714,44180+86])
                                          pattern (lib/sentenceParser_describe.ml[715,44267+64]..[715,44267+77])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[715,44267+64]..[715,44267+77])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[718,44465+54]..[718,44465+67])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[718,44465+54]..[718,44465+67])
                          ]
                          expression (lib/sentenceParser_describe.ml[719,44536+50]..[749,46650+51])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[719,44536+54]..[719,44536+56])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[719,44536+54]..[719,44536+56])
                                core_type (lib/sentenceParser_describe.ml[719,44536+59]..[719,44536+63])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[719,44536+59]..[719,44536+63])
                                  []
                                expression (lib/sentenceParser_describe.ml[720,44602+52]..[720,44602+64])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[720,44602+52]..[720,44602+61])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[720,44602+52]..[720,44602+61])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[720,44602+62]..[720,44602+64])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[720,44602+62]..[720,44602+64])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[721,44670+50]..[749,46650+51])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[721,44670+54]..[721,44670+56])
                                    Ppat_var "rs" (lib/sentenceParser_describe.ml[721,44670+54]..[721,44670+56])
                                  core_type (lib/sentenceParser_describe.ml[721,44670+59]..[721,44670+74])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[721,44670+59]..[721,44670+74])
                                    []
                                  expression (lib/sentenceParser_describe.ml[722,44747+52]..[722,44747+64])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[722,44747+52]..[722,44747+61])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[722,44747+52]..[722,44747+61])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[722,44747+62]..[722,44747+64])
                                          Pexp_ident "rs" (lib/sentenceParser_describe.ml[722,44747+62]..[722,44747+64])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[723,44815+50]..[749,46650+51])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[723,44815+54]..[723,44815+65])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[723,44815+54]..[723,44815+65])
                                    expression (lib/sentenceParser_describe.ml[724,44883+52]..[724,44883+92])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[724,44883+52]..[724,44883+65])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[724,44883+52]..[724,44883+65])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[724,44883+66]..[724,44883+92])
                                ]
                                expression (lib/sentenceParser_describe.ml[725,44979+50]..[749,46650+51])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[725,44979+54]..[725,44979+63])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[725,44979+54]..[725,44979+63])
                                      expression (lib/sentenceParser_describe.ml[726,45045+52]..[726,45045+65])
                                        Pexp_ident "_startpos_rs_" (lib/sentenceParser_describe.ml[726,45045+52]..[726,45045+65])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[727,45114+50]..[749,46650+51])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[727,45114+54]..[727,45114+61])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[727,45114+54]..[727,45114+61])
                                        expression (lib/sentenceParser_describe.ml[727,45114+64]..[727,45114+75])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[727,45114+64]..[727,45114+75])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[728,45193+50]..[749,46650+51])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[728,45193+54]..[728,45193+56])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[728,45193+54]..[728,45193+56])
                                          core_type (lib/sentenceParser_describe.ml[729,45252+52]..[729,45252+74])
                                            Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser_describe.ml[729,45252+52]..[729,45252+74])
                                            []
                                          expression (lib/sentenceParser_describe.ml[730,45329+52]..[737,45803+53])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[730,45329+52]..[733,45540+67])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[730,45329+52]..[730,45329+65])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[730,45329+52]..[730,45329+65])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[731,45395+54]..[733,45540+67])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[731,45395+55]..[731,45395+69])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[731,45395+55]..[731,45395+69])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[732,45465+57]..[733,45540+66])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[732,45465+58]..[732,45465+73])
                                                              Pexp_constant PConst_string("DEBUG:grammar",(lib/sentenceParser_describe.ml[732,45465+59]..[732,45465+72]),None)
                                                            expression (lib/sentenceParser_describe.ml[733,45540+59]..[733,45540+61])
                                                              Pexp_ident "rs" (lib/sentenceParser_describe.ml[733,45540+59]..[733,45540+61])
                                                            expression (lib/sentenceParser_describe.ml[733,45540+63]..[733,45540+65])
                                                              Pexp_ident "_2" (lib/sentenceParser_describe.ml[733,45540+63]..[733,45540+65])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[734,45609+52]..[737,45803+53])
                                              Pexp_record
                                              [
                                                "pg_filename" (lib/sentenceParser_describe.ml[735,45663+54]..[735,45663+65])
                                                  expression (lib/sentenceParser_describe.ml[735,45663+68]..[735,45663+70])
                                                    Pexp_constant PConst_string("",(lib/sentenceParser_describe.ml[735,45663+69]..[735,45663+69]),None)
                                                "pg_rules" (lib/sentenceParser_describe.ml[736,45735+54]..[736,45735+62])
                                                  expression (lib/sentenceParser_describe.ml[736,45735+65]..[736,45735+67])
                                                    Pexp_construct "[]" (lib/sentenceParser_describe.ml[736,45735+65]..[736,45735+67])
                                                    None
                                              ]
                                              None
                                      ]
                                      expression (lib/sentenceParser_describe.ml[738,45860+50]..[749,46650+51])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[739,45912+52]..[739,45912+79])
                                            expression (lib/sentenceParser_describe.ml[740,45992+56]..[740,45992+65])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[740,45992+56]..[740,45992+65])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[741,46059+52]..[741,46059+78])
                                            expression (lib/sentenceParser_describe.ml[742,46138+56]..[742,46138+69])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[742,46138+57]..[742,46138+65])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[742,46138+57]..[742,46138+65])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[742,46138+66]..[742,46138+68])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[742,46138+66]..[742,46138+68])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[743,46209+52]..[743,46209+80])
                                            expression (lib/sentenceParser_describe.ml[744,46290+56]..[744,46290+65])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[744,46290+56]..[744,46290+65])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[745,46357+52]..[745,46357+78])
                                            expression (lib/sentenceParser_describe.ml[746,46436+56]..[746,46436+63])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[746,46436+56]..[746,46436+63])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[747,46501+52]..[747,46501+78])
                                            expression (lib/sentenceParser_describe.ml[748,46580+56]..[748,46580+69])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[748,46580+56]..[748,46580+69])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[749,46650+54]..[773,48611+61])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[749,46650+60]..[749,46650+71])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[749,46650+60]..[749,46650+71])
                      expression (lib/sentenceParser_describe.ml[750,46725+58]..[773,48611+59])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[750,46725+62]..[750,46725+75])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[750,46725+62]..[750,46725+75])
                            expression (lib/sentenceParser_describe.ml[751,46803+60]..[751,46803+99])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[751,46803+60]..[751,46803+71])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[751,46803+60]..[751,46803+71])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[751,46803+72]..[751,46803+99])
                        ]
                        expression (lib/sentenceParser_describe.ml[752,46906+58]..[773,48611+59])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[752,46906+62]..[752,46906+71])
                                Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[752,46906+62]..[752,46906+71])
                              expression (lib/sentenceParser_describe.ml[753,46980+60]..[753,46980+101])
                                Pexp_field
                                expression (lib/sentenceParser_describe.ml[753,46980+60]..[753,46980+71])
                                  Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[753,46980+60]..[753,46980+71])
                                "MenhirLib.EngineTypes.current" (lib/sentenceParser_describe.ml[753,46980+72]..[753,46980+101])
                          ]
                          expression (lib/sentenceParser_describe.ml[754,47085+58]..[773,48611+59])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[754,47085+62]..[754,47085+73])
                                  Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[754,47085+62]..[754,47085+73])
                                expression (lib/sentenceParser_describe.ml[755,47161+60]..[755,47161+100])
                                  Pexp_field
                                  expression (lib/sentenceParser_describe.ml[755,47161+60]..[755,47161+73])
                                    Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[755,47161+60]..[755,47161+73])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[755,47161+74]..[755,47161+100])
                            ]
                            expression (lib/sentenceParser_describe.ml[756,47265+58]..[773,48611+59])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[756,47265+62]..[756,47265+71])
                                    Ppat_var "_startpos" (lib/sentenceParser_describe.ml[756,47265+62]..[756,47265+71])
                                  expression (lib/sentenceParser_describe.ml[757,47339+60]..[757,47339+100])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[757,47339+60]..[757,47339+73])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[757,47339+60]..[757,47339+73])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[757,47339+74]..[757,47339+100])
                              ]
                              expression (lib/sentenceParser_describe.ml[758,47443+58]..[773,48611+59])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[758,47443+62]..[758,47443+69])
                                      Ppat_var "_endpos" (lib/sentenceParser_describe.ml[758,47443+62]..[758,47443+69])
                                    expression (lib/sentenceParser_describe.ml[759,47515+60]..[759,47515+69])
                                      Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[759,47515+60]..[759,47515+69])
                                ]
                                expression (lib/sentenceParser_describe.ml[760,47588+58]..[773,48611+59])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[760,47588+62]..[760,47588+64])
                                        Ppat_var "_v" (lib/sentenceParser_describe.ml[760,47588+62]..[760,47588+64])
                                      core_type (lib/sentenceParser_describe.ml[760,47588+67]..[760,47588+76])
                                        Ptyp_constr "list" (lib/sentenceParser_describe.ml[760,47588+72]..[760,47588+76])
                                        [
                                          core_type (lib/sentenceParser_describe.ml[760,47588+67]..[760,47588+71])
                                            Ptyp_constr "unit" (lib/sentenceParser_describe.ml[760,47588+67]..[760,47588+71])
                                            []
                                        ]
                                      expression (lib/sentenceParser_describe.ml[761,47665+62]..[761,47665+64])
                                        Pexp_construct "[]" (lib/sentenceParser_describe.ml[761,47665+62]..[761,47665+64])
                                        None
                                  ]
                                  expression (lib/sentenceParser_describe.ml[762,47733+58]..[773,48611+59])
                                    Pexp_record
                                    [
                                      "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[763,47793+60]..[763,47793+87])
                                        expression (lib/sentenceParser_describe.ml[764,47881+64]..[764,47881+73])
                                          Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[764,47881+64]..[764,47881+73])
                                      "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[765,47956+60]..[765,47956+86])
                                        expression (lib/sentenceParser_describe.ml[766,48043+64]..[766,48043+77])
                                          Pexp_apply
                                          expression (lib/sentenceParser_describe.ml[766,48043+65]..[766,48043+73])
                                            Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[766,48043+65]..[766,48043+73])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/sentenceParser_describe.ml[766,48043+74]..[766,48043+76])
                                                Pexp_ident "_v" (lib/sentenceParser_describe.ml[766,48043+74]..[766,48043+76])
                                          ]
                                      "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[767,48122+60]..[767,48122+88])
                                        expression (lib/sentenceParser_describe.ml[768,48211+64]..[768,48211+73])
                                          Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[768,48211+64]..[768,48211+73])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[769,48286+60]..[769,48286+86])
                                        expression (lib/sentenceParser_describe.ml[770,48373+64]..[770,48373+71])
                                          Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[770,48373+64]..[770,48373+71])
                                      "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[771,48446+60]..[771,48446+86])
                                        expression (lib/sentenceParser_describe.ml[772,48533+64]..[772,48533+77])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[772,48533+64]..[772,48533+77])
                                    ]
                                    None
                    expression (lib/sentenceParser_describe.ml[773,48611+62]..[847,54548+69])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[774,48679+66]..[774,48679+77])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[774,48679+66]..[774,48679+77])
                      expression (lib/sentenceParser_describe.ml[776,48826+66]..[847,54548+67])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[776,48826+70]..[776,48826+83])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[776,48826+70]..[776,48826+83])
                            expression (lib/sentenceParser_describe.ml[778,48980+68]..[778,48980+107])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[778,48980+68]..[778,48980+79])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[778,48980+68]..[778,48980+79])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[778,48980+80]..[778,48980+107])
                        ]
                        expression (lib/sentenceParser_describe.ml[779,49091+66]..[847,54548+67])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[780,49162+68]..[808,51455+71])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[781,49232+68]..[781,49232+95])
                                    pattern (lib/sentenceParser_describe.ml[782,49328+70]..[782,49328+71])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[783,49401+68]..[783,49401+94])
                                    pattern (lib/sentenceParser_describe.ml[784,49496+70]..[784,49496+72])
                                      Ppat_var "xs" (lib/sentenceParser_describe.ml[784,49496+70]..[784,49496+72])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[785,49570+68]..[785,49570+96])
                                    pattern (lib/sentenceParser_describe.ml[787,49737+68]..[787,49737+81])
                                      Ppat_var "_startpos_xs_" (lib/sentenceParser_describe.ml[787,49737+68]..[787,49737+81])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[788,49820+68]..[788,49820+94])
                                    pattern (lib/sentenceParser_describe.ml[790,49985+68]..[790,49985+79])
                                      Ppat_var "_endpos_xs_" (lib/sentenceParser_describe.ml[790,49985+68]..[790,49985+79])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[791,50066+68]..[791,50066+94])
                                    pattern (lib/sentenceParser_describe.ml[793,50231+68]..[808,51455+69])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[794,50301+68]..[794,50301+95])
                                          pattern (lib/sentenceParser_describe.ml[796,50467+68]..[796,50467+77])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[796,50467+68]..[796,50467+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[797,50546+68]..[797,50546+94])
                                          pattern (lib/sentenceParser_describe.ml[798,50641+70]..[798,50641+71])
                                            Ppat_var "x" (lib/sentenceParser_describe.ml[798,50641+70]..[798,50641+71])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[799,50714+68]..[799,50714+96])
                                          pattern (lib/sentenceParser_describe.ml[801,50881+68]..[801,50881+80])
                                            Ppat_var "_startpos_x_" (lib/sentenceParser_describe.ml[801,50881+68]..[801,50881+80])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[802,50963+68]..[802,50963+94])
                                          pattern (lib/sentenceParser_describe.ml[804,51128+68]..[804,51128+78])
                                            Ppat_var "_endpos_x_" (lib/sentenceParser_describe.ml[804,51128+68]..[804,51128+78])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[805,51208+68]..[805,51208+94])
                                          pattern (lib/sentenceParser_describe.ml[807,51373+68]..[807,51373+81])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[807,51373+68]..[807,51373+81])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[809,51529+68]..[809,51529+81])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[809,51529+68]..[809,51529+81])
                          ]
                          expression (lib/sentenceParser_describe.ml[810,51614+66]..[847,54548+67])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[810,51614+70]..[810,51614+72])
                                  Ppat_var "xs" (lib/sentenceParser_describe.ml[810,51614+70]..[810,51614+72])
                                core_type (lib/sentenceParser_describe.ml[811,51689+68]..[811,51689+77])
                                  Ptyp_constr "list" (lib/sentenceParser_describe.ml[811,51689+73]..[811,51689+77])
                                  [
                                    core_type (lib/sentenceParser_describe.ml[811,51689+68]..[811,51689+72])
                                      Ptyp_constr "unit" (lib/sentenceParser_describe.ml[811,51689+68]..[811,51689+72])
                                      []
                                  ]
                                expression (lib/sentenceParser_describe.ml[813,51837+68]..[814,51915+70])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[813,51837+68]..[813,51837+77])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[813,51837+68]..[813,51837+77])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[814,51915+68]..[814,51915+70])
                                        Pexp_ident "xs" (lib/sentenceParser_describe.ml[814,51915+68]..[814,51915+70])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[815,51989+66]..[847,54548+67])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[815,51989+70]..[815,51989+71])
                                    Ppat_var "x" (lib/sentenceParser_describe.ml[815,51989+70]..[815,51989+71])
                                  core_type (lib/sentenceParser_describe.ml[816,52063+68]..[816,52063+72])
                                    Ptyp_constr "unit" (lib/sentenceParser_describe.ml[816,52063+68]..[816,52063+72])
                                    []
                                  expression (lib/sentenceParser_describe.ml[817,52138+68]..[818,52216+69])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[817,52138+68]..[817,52138+77])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[817,52138+68]..[817,52138+77])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[818,52216+68]..[818,52216+69])
                                          Pexp_ident "x" (lib/sentenceParser_describe.ml[818,52216+68]..[818,52216+69])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[819,52289+66]..[847,54548+67])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[819,52289+70]..[819,52289+81])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[819,52289+70]..[819,52289+81])
                                    expression (lib/sentenceParser_describe.ml[821,52441+68]..[821,52441+108])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[821,52441+68]..[821,52441+81])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[821,52441+68]..[821,52441+81])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[821,52441+82]..[821,52441+108])
                                ]
                                expression (lib/sentenceParser_describe.ml[822,52553+66]..[847,54548+67])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[822,52553+70]..[822,52553+79])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[822,52553+70]..[822,52553+79])
                                      expression (lib/sentenceParser_describe.ml[824,52703+68]..[824,52703+80])
                                        Pexp_ident "_startpos_x_" (lib/sentenceParser_describe.ml[824,52703+68]..[824,52703+80])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[825,52787+66]..[847,54548+67])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[825,52787+70]..[825,52787+77])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[825,52787+70]..[825,52787+77])
                                        expression (lib/sentenceParser_describe.ml[827,52935+68]..[827,52935+79])
                                          Pexp_ident "_endpos_xs_" (lib/sentenceParser_describe.ml[827,52935+68]..[827,52935+79])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[828,53018+66]..[847,54548+67])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[828,53018+70]..[828,53018+72])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[828,53018+70]..[828,53018+72])
                                          core_type (lib/sentenceParser_describe.ml[829,53093+68]..[829,53093+77])
                                            Ptyp_constr "list" (lib/sentenceParser_describe.ml[829,53093+73]..[829,53093+77])
                                            [
                                              core_type (lib/sentenceParser_describe.ml[829,53093+68]..[829,53093+72])
                                                Ptyp_constr "unit" (lib/sentenceParser_describe.ml[829,53093+68]..[829,53093+72])
                                                []
                                            ]
                                          expression (lib/sentenceParser_describe.ml[830,53171+70]..[830,53171+77])
                                            Pexp_construct "::" (lib/sentenceParser_describe.ml[830,53171+72]..[830,53171+74])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[830,53171+70]..[830,53171+77]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (lib/sentenceParser_describe.ml[830,53171+70]..[830,53171+71])
                                                    Pexp_ident "x" (lib/sentenceParser_describe.ml[830,53171+70]..[830,53171+71])
                                                  expression (lib/sentenceParser_describe.ml[830,53171+75]..[830,53171+77])
                                                    Pexp_ident "xs" (lib/sentenceParser_describe.ml[830,53171+75]..[830,53171+77])
                                                ]
                                      ]
                                      expression (lib/sentenceParser_describe.ml[831,53252+66]..[847,54548+67])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[832,53320+68]..[832,53320+95])
                                            expression (lib/sentenceParser_describe.ml[834,53486+68]..[834,53486+77])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[834,53486+68]..[834,53486+77])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[835,53565+68]..[835,53565+94])
                                            expression (lib/sentenceParser_describe.ml[837,53730+68]..[838,53808+71])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[837,53730+69]..[837,53730+77])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[837,53730+69]..[837,53730+77])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[838,53808+68]..[838,53808+70])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[838,53808+68]..[838,53808+70])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[839,53881+68]..[839,53881+96])
                                            expression (lib/sentenceParser_describe.ml[841,54048+68]..[841,54048+77])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[841,54048+68]..[841,54048+77])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[842,54127+68]..[842,54127+94])
                                            expression (lib/sentenceParser_describe.ml[843,54222+70]..[843,54222+77])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[843,54222+70]..[843,54222+77])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[844,54301+68]..[844,54301+94])
                                            expression (lib/sentenceParser_describe.ml[846,54466+68]..[846,54466+81])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[846,54466+68]..[846,54466+81])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[847,54548+70]..[867,55546+13])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[848,54621+12]..[848,54621+23])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[848,54621+12]..[848,54621+23])
                      expression (lib/sentenceParser_describe.ml[849,54648+10]..[867,55546+11])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[849,54648+14]..[849,54648+27])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[849,54648+14]..[849,54648+27])
                            expression (lib/sentenceParser_describe.ml[849,54648+30]..[849,54648+69])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[849,54648+30]..[849,54648+41])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[849,54648+30]..[849,54648+41])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[849,54648+42]..[849,54648+69])
                        ]
                        expression (lib/sentenceParser_describe.ml[850,54721+10]..[867,55546+11])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[850,54721+14]..[854,54944+60])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[850,54721+16]..[850,54721+43])
                                    pattern (lib/sentenceParser_describe.ml[850,54721+46]..[850,54721+55])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[850,54721+46]..[850,54721+55])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[851,54778+16]..[851,54778+42])
                                    pattern (lib/sentenceParser_describe.ml[851,54778+45]..[851,54778+46])
                                      Ppat_var "x" (lib/sentenceParser_describe.ml[851,54778+45]..[851,54778+46])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[852,54826+16]..[852,54826+44])
                                    pattern (lib/sentenceParser_describe.ml[852,54826+47]..[852,54826+59])
                                      Ppat_var "_startpos_x_" (lib/sentenceParser_describe.ml[852,54826+47]..[852,54826+59])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[853,54887+16]..[853,54887+42])
                                    pattern (lib/sentenceParser_describe.ml[853,54887+45]..[853,54887+55])
                                      Ppat_var "_endpos_x_" (lib/sentenceParser_describe.ml[853,54887+45]..[853,54887+55])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[854,54944+16]..[854,54944+42])
                                    pattern (lib/sentenceParser_describe.ml[854,54944+45]..[854,54944+58])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[854,54944+45]..[854,54944+58])
                                ]
                              expression (lib/sentenceParser_describe.ml[855,55005+14]..[855,55005+27])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[855,55005+14]..[855,55005+27])
                          ]
                          expression (lib/sentenceParser_describe.ml[856,55036+10]..[867,55546+11])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[856,55036+14]..[856,55036+15])
                                  Ppat_var "x" (lib/sentenceParser_describe.ml[856,55036+14]..[856,55036+15])
                                core_type (lib/sentenceParser_describe.ml[856,55036+18]..[856,55036+22])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[856,55036+18]..[856,55036+22])
                                  []
                                expression (lib/sentenceParser_describe.ml[856,55036+25]..[856,55036+36])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[856,55036+25]..[856,55036+34])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[856,55036+25]..[856,55036+34])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[856,55036+35]..[856,55036+36])
                                        Pexp_ident "x" (lib/sentenceParser_describe.ml[856,55036+35]..[856,55036+36])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[857,55076+10]..[867,55546+11])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[857,55076+14]..[857,55076+25])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[857,55076+14]..[857,55076+25])
                                  expression (lib/sentenceParser_describe.ml[857,55076+28]..[857,55076+68])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[857,55076+28]..[857,55076+41])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[857,55076+28]..[857,55076+41])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[857,55076+42]..[857,55076+68])
                              ]
                              expression (lib/sentenceParser_describe.ml[858,55148+10]..[867,55546+11])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[858,55148+14]..[858,55148+23])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[858,55148+14]..[858,55148+23])
                                    expression (lib/sentenceParser_describe.ml[858,55148+26]..[858,55148+38])
                                      Pexp_ident "_startpos_x_" (lib/sentenceParser_describe.ml[858,55148+26]..[858,55148+38])
                                ]
                                expression (lib/sentenceParser_describe.ml[859,55190+10]..[867,55546+11])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[859,55190+14]..[859,55190+21])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[859,55190+14]..[859,55190+21])
                                      expression (lib/sentenceParser_describe.ml[859,55190+24]..[859,55190+34])
                                        Pexp_ident "_endpos_x_" (lib/sentenceParser_describe.ml[859,55190+24]..[859,55190+34])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[860,55228+10]..[867,55546+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[860,55228+14]..[860,55228+16])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[860,55228+14]..[860,55228+16])
                                        core_type (lib/sentenceParser_describe.ml[860,55228+19]..[860,55228+28])
                                          Ptyp_constr "list" (lib/sentenceParser_describe.ml[860,55228+24]..[860,55228+28])
                                          [
                                            core_type (lib/sentenceParser_describe.ml[860,55228+19]..[860,55228+23])
                                              Ptyp_constr "unit" (lib/sentenceParser_describe.ml[860,55228+19]..[860,55228+23])
                                              []
                                          ]
                                        expression (lib/sentenceParser_describe.ml[860,55228+31]..[860,55228+34])
                                          Pexp_construct "::" (lib/sentenceParser_describe.ml[860,55228+32]..[860,55228+34]) ghost
                                          Some
                                            expression (lib/sentenceParser_describe.ml[860,55228+32]..[860,55228+34]) ghost
                                              Pexp_tuple
                                              [
                                                expression (lib/sentenceParser_describe.ml[860,55228+32]..[860,55228+33])
                                                  Pexp_ident "x" (lib/sentenceParser_describe.ml[860,55228+32]..[860,55228+33])
                                                expression (lib/sentenceParser_describe.ml[860,55228+33]..[860,55228+34]) ghost
                                                  Pexp_construct "[]" (lib/sentenceParser_describe.ml[860,55228+33]..[860,55228+34]) ghost
                                                  None
                                              ]
                                    ]
                                    expression (lib/sentenceParser_describe.ml[861,55266+10]..[867,55546+11])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[862,55278+12]..[862,55278+39])
                                          expression (lib/sentenceParser_describe.ml[862,55278+42]..[862,55278+51])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[862,55278+42]..[862,55278+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[863,55331+12]..[863,55331+38])
                                          expression (lib/sentenceParser_describe.ml[863,55331+41]..[863,55331+54])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[863,55331+42]..[863,55331+50])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[863,55331+42]..[863,55331+50])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[863,55331+51]..[863,55331+53])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[863,55331+51]..[863,55331+53])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[864,55387+12]..[864,55387+40])
                                          expression (lib/sentenceParser_describe.ml[864,55387+43]..[864,55387+52])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[864,55387+43]..[864,55387+52])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[865,55441+12]..[865,55441+38])
                                          expression (lib/sentenceParser_describe.ml[865,55441+41]..[865,55441+48])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[865,55441+41]..[865,55441+48])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[866,55491+12]..[866,55491+38])
                                          expression (lib/sentenceParser_describe.ml[866,55491+41]..[866,55491+54])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[866,55491+41]..[866,55491+54])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[867,55546+14]..[893,57032+21])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[867,55546+20]..[867,55546+31])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[867,55546+20]..[867,55546+31])
                      expression (lib/sentenceParser_describe.ml[868,55581+18]..[893,57032+19])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[868,55581+22]..[868,55581+35])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[868,55581+22]..[868,55581+35])
                            expression (lib/sentenceParser_describe.ml[868,55581+38]..[868,55581+77])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[868,55581+38]..[868,55581+49])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[868,55581+38]..[868,55581+49])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[868,55581+50]..[868,55581+77])
                        ]
                        expression (lib/sentenceParser_describe.ml[869,55662+18]..[893,57032+19])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[869,55662+22]..[879,56309+25])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[869,55662+24]..[869,55662+51])
                                    pattern (lib/sentenceParser_describe.ml[869,55662+54]..[869,55662+55])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[870,55719+24]..[870,55719+50])
                                    pattern (lib/sentenceParser_describe.ml[870,55719+53]..[870,55719+55])
                                      Ppat_var "xs" (lib/sentenceParser_describe.ml[870,55719+53]..[870,55719+55])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[871,55776+24]..[871,55776+52])
                                    pattern (lib/sentenceParser_describe.ml[871,55776+55]..[871,55776+68])
                                      Ppat_var "_startpos_xs_" (lib/sentenceParser_describe.ml[871,55776+55]..[871,55776+68])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[872,55846+24]..[872,55846+50])
                                    pattern (lib/sentenceParser_describe.ml[872,55846+53]..[872,55846+64])
                                      Ppat_var "_endpos_xs_" (lib/sentenceParser_describe.ml[872,55846+53]..[872,55846+64])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[873,55912+24]..[873,55912+50])
                                    pattern (lib/sentenceParser_describe.ml[874,55965+26]..[878,56236+72])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[874,55965+28]..[874,55965+55])
                                          pattern (lib/sentenceParser_describe.ml[874,55965+58]..[874,55965+67])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[874,55965+58]..[874,55965+67])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[875,56034+28]..[875,56034+54])
                                          pattern (lib/sentenceParser_describe.ml[875,56034+57]..[875,56034+58])
                                            Ppat_var "x" (lib/sentenceParser_describe.ml[875,56034+57]..[875,56034+58])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[876,56094+28]..[876,56094+56])
                                          pattern (lib/sentenceParser_describe.ml[876,56094+59]..[876,56094+71])
                                            Ppat_var "_startpos_x_" (lib/sentenceParser_describe.ml[876,56094+59]..[876,56094+71])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[877,56167+28]..[877,56167+54])
                                          pattern (lib/sentenceParser_describe.ml[877,56167+57]..[877,56167+67])
                                            Ppat_var "_endpos_x_" (lib/sentenceParser_describe.ml[877,56167+57]..[877,56167+67])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[878,56236+28]..[878,56236+54])
                                          pattern (lib/sentenceParser_describe.ml[878,56236+57]..[878,56236+70])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[878,56236+57]..[878,56236+70])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[880,56335+22]..[880,56335+35])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[880,56335+22]..[880,56335+35])
                          ]
                          expression (lib/sentenceParser_describe.ml[881,56374+18]..[893,57032+19])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[881,56374+22]..[881,56374+24])
                                  Ppat_var "xs" (lib/sentenceParser_describe.ml[881,56374+22]..[881,56374+24])
                                core_type (lib/sentenceParser_describe.ml[881,56374+27]..[881,56374+36])
                                  Ptyp_constr "list" (lib/sentenceParser_describe.ml[881,56374+32]..[881,56374+36])
                                  [
                                    core_type (lib/sentenceParser_describe.ml[881,56374+27]..[881,56374+31])
                                      Ptyp_constr "unit" (lib/sentenceParser_describe.ml[881,56374+27]..[881,56374+31])
                                      []
                                  ]
                                expression (lib/sentenceParser_describe.ml[881,56374+39]..[881,56374+51])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[881,56374+39]..[881,56374+48])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[881,56374+39]..[881,56374+48])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[881,56374+49]..[881,56374+51])
                                        Pexp_ident "xs" (lib/sentenceParser_describe.ml[881,56374+49]..[881,56374+51])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[882,56429+18]..[893,57032+19])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[882,56429+22]..[882,56429+23])
                                    Ppat_var "x" (lib/sentenceParser_describe.ml[882,56429+22]..[882,56429+23])
                                  core_type (lib/sentenceParser_describe.ml[882,56429+26]..[882,56429+30])
                                    Ptyp_constr "unit" (lib/sentenceParser_describe.ml[882,56429+26]..[882,56429+30])
                                    []
                                  expression (lib/sentenceParser_describe.ml[882,56429+33]..[882,56429+44])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[882,56429+33]..[882,56429+42])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[882,56429+33]..[882,56429+42])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[882,56429+43]..[882,56429+44])
                                          Pexp_ident "x" (lib/sentenceParser_describe.ml[882,56429+43]..[882,56429+44])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[883,56477+18]..[893,57032+19])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[883,56477+22]..[883,56477+33])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[883,56477+22]..[883,56477+33])
                                    expression (lib/sentenceParser_describe.ml[883,56477+36]..[883,56477+76])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[883,56477+36]..[883,56477+49])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[883,56477+36]..[883,56477+49])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[883,56477+50]..[883,56477+76])
                                ]
                                expression (lib/sentenceParser_describe.ml[884,56557+18]..[893,57032+19])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[884,56557+22]..[884,56557+31])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[884,56557+22]..[884,56557+31])
                                      expression (lib/sentenceParser_describe.ml[884,56557+34]..[884,56557+46])
                                        Pexp_ident "_startpos_x_" (lib/sentenceParser_describe.ml[884,56557+34]..[884,56557+46])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[885,56607+18]..[893,57032+19])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[885,56607+22]..[885,56607+29])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[885,56607+22]..[885,56607+29])
                                        expression (lib/sentenceParser_describe.ml[885,56607+32]..[885,56607+43])
                                          Pexp_ident "_endpos_xs_" (lib/sentenceParser_describe.ml[885,56607+32]..[885,56607+43])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[886,56654+18]..[893,57032+19])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[886,56654+22]..[886,56654+24])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[886,56654+22]..[886,56654+24])
                                          core_type (lib/sentenceParser_describe.ml[886,56654+27]..[886,56654+36])
                                            Ptyp_constr "list" (lib/sentenceParser_describe.ml[886,56654+32]..[886,56654+36])
                                            [
                                              core_type (lib/sentenceParser_describe.ml[886,56654+27]..[886,56654+31])
                                                Ptyp_constr "unit" (lib/sentenceParser_describe.ml[886,56654+27]..[886,56654+31])
                                                []
                                            ]
                                          expression (lib/sentenceParser_describe.ml[886,56654+39]..[886,56654+46])
                                            Pexp_construct "::" (lib/sentenceParser_describe.ml[886,56654+41]..[886,56654+43])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[886,56654+39]..[886,56654+46]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (lib/sentenceParser_describe.ml[886,56654+39]..[886,56654+40])
                                                    Pexp_ident "x" (lib/sentenceParser_describe.ml[886,56654+39]..[886,56654+40])
                                                  expression (lib/sentenceParser_describe.ml[886,56654+44]..[886,56654+46])
                                                    Pexp_ident "xs" (lib/sentenceParser_describe.ml[886,56654+44]..[886,56654+46])
                                                ]
                                      ]
                                      expression (lib/sentenceParser_describe.ml[887,56704+18]..[893,57032+19])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[888,56724+20]..[888,56724+47])
                                            expression (lib/sentenceParser_describe.ml[888,56724+50]..[888,56724+59])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[888,56724+50]..[888,56724+59])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[889,56785+20]..[889,56785+46])
                                            expression (lib/sentenceParser_describe.ml[889,56785+49]..[889,56785+62])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[889,56785+50]..[889,56785+58])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[889,56785+50]..[889,56785+58])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[889,56785+59]..[889,56785+61])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[889,56785+59]..[889,56785+61])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[890,56849+20]..[890,56849+48])
                                            expression (lib/sentenceParser_describe.ml[890,56849+51]..[890,56849+60])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[890,56849+51]..[890,56849+60])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[891,56911+20]..[891,56911+46])
                                            expression (lib/sentenceParser_describe.ml[891,56911+49]..[891,56911+56])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[891,56911+49]..[891,56911+56])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[892,56969+20]..[892,56969+46])
                                            expression (lib/sentenceParser_describe.ml[892,56969+49]..[892,56969+62])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[892,56969+49]..[892,56969+62])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[893,57032+22]..[925,58959+29])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[893,57032+28]..[893,57032+39])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[893,57032+28]..[893,57032+39])
                      expression (lib/sentenceParser_describe.ml[894,57075+26]..[925,58959+27])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[894,57075+30]..[894,57075+43])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[894,57075+30]..[894,57075+43])
                            expression (lib/sentenceParser_describe.ml[895,57121+28]..[895,57121+67])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[895,57121+28]..[895,57121+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[895,57121+28]..[895,57121+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[895,57121+40]..[895,57121+67])
                        ]
                        expression (lib/sentenceParser_describe.ml[896,57192+26]..[925,58959+27])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[896,57192+30]..[909,58034+33])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[896,57192+32]..[896,57192+59])
                                    pattern (lib/sentenceParser_describe.ml[896,57192+62]..[896,57192+63])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[897,57257+32]..[897,57257+58])
                                    pattern (lib/sentenceParser_describe.ml[897,57257+61]..[897,57257+63])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[897,57257+61]..[897,57257+63])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[898,57322+32]..[898,57322+60])
                                    pattern (lib/sentenceParser_describe.ml[898,57322+63]..[898,57322+76])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[898,57322+63]..[898,57322+76])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[899,57400+32]..[899,57400+58])
                                    pattern (lib/sentenceParser_describe.ml[899,57400+61]..[899,57400+72])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[899,57400+61]..[899,57400+72])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[900,57474+32]..[900,57474+58])
                                    pattern (lib/sentenceParser_describe.ml[901,57535+34]..[908,57996+37])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[901,57535+36]..[901,57535+63])
                                          pattern (lib/sentenceParser_describe.ml[901,57535+66]..[901,57535+75])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[901,57535+66]..[901,57535+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[902,57612+36]..[902,57612+62])
                                          pattern (lib/sentenceParser_describe.ml[902,57612+65]..[902,57612+67])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[902,57612+65]..[902,57612+67])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[903,57681+36]..[903,57681+64])
                                          pattern (lib/sentenceParser_describe.ml[904,57748+38]..[904,57748+51])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[904,57748+38]..[904,57748+51])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[905,57801+36]..[905,57801+62])
                                          pattern (lib/sentenceParser_describe.ml[905,57801+65]..[905,57801+76])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[905,57801+65]..[905,57801+76])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[906,57879+36]..[906,57879+62])
                                          pattern (lib/sentenceParser_describe.ml[907,57944+38]..[907,57944+51])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[907,57944+38]..[907,57944+51])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[910,58068+30]..[910,58068+43])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[910,58068+30]..[910,58068+43])
                          ]
                          expression (lib/sentenceParser_describe.ml[911,58115+26]..[925,58959+27])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[911,58115+30]..[911,58115+32])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[911,58115+30]..[911,58115+32])
                                core_type (lib/sentenceParser_describe.ml[911,58115+35]..[911,58115+39])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[911,58115+35]..[911,58115+39])
                                  []
                                expression (lib/sentenceParser_describe.ml[911,58115+42]..[911,58115+54])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[911,58115+42]..[911,58115+51])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[911,58115+42]..[911,58115+51])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[911,58115+52]..[911,58115+54])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[911,58115+52]..[911,58115+54])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[912,58173+26]..[925,58959+27])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[912,58173+30]..[912,58173+32])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[912,58173+30]..[912,58173+32])
                                  core_type (lib/sentenceParser_describe.ml[912,58173+35]..[912,58173+44])
                                    Ptyp_constr "list" (lib/sentenceParser_describe.ml[912,58173+40]..[912,58173+44])
                                    [
                                      core_type (lib/sentenceParser_describe.ml[912,58173+35]..[912,58173+39])
                                        Ptyp_constr "unit" (lib/sentenceParser_describe.ml[912,58173+35]..[912,58173+39])
                                        []
                                    ]
                                  expression (lib/sentenceParser_describe.ml[912,58173+47]..[912,58173+59])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[912,58173+47]..[912,58173+56])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[912,58173+47]..[912,58173+56])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[912,58173+57]..[912,58173+59])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[912,58173+57]..[912,58173+59])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[913,58236+26]..[925,58959+27])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[913,58236+30]..[913,58236+41])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[913,58236+30]..[913,58236+41])
                                    expression (lib/sentenceParser_describe.ml[914,58280+28]..[914,58280+68])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[914,58280+28]..[914,58280+41])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[914,58280+28]..[914,58280+41])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[914,58280+42]..[914,58280+68])
                                ]
                                expression (lib/sentenceParser_describe.ml[915,58352+26]..[925,58959+27])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[915,58352+30]..[915,58352+39])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[915,58352+30]..[915,58352+39])
                                      expression (lib/sentenceParser_describe.ml[915,58352+42]..[915,58352+55])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[915,58352+42]..[915,58352+55])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[916,58411+26]..[925,58959+27])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[916,58411+30]..[916,58411+37])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[916,58411+30]..[916,58411+37])
                                        expression (lib/sentenceParser_describe.ml[916,58411+40]..[916,58411+51])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[916,58411+40]..[916,58411+51])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[917,58466+26]..[925,58959+27])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[917,58466+30]..[917,58466+32])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[917,58466+30]..[917,58466+32])
                                          core_type (lib/sentenceParser_describe.ml[917,58466+35]..[917,58466+39])
                                            Ptyp_constr "unit" (lib/sentenceParser_describe.ml[917,58466+35]..[917,58466+39])
                                            []
                                          expression (lib/sentenceParser_describe.ml[918,58508+28]..[918,58508+71])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[918,58508+28]..[918,58508+41])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[918,58508+28]..[918,58508+41])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[918,58508+42]..[918,58508+71])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[918,58508+43]..[918,58508+57])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[918,58508+43]..[918,58508+57])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[918,58508+58]..[918,58508+70])
                                                        Pexp_constant PConst_string("DEBUG:DONE",(lib/sentenceParser_describe.ml[918,58508+59]..[918,58508+69]),None)
                                                  ]
                                            ]
                                      ]
                                      expression (lib/sentenceParser_describe.ml[919,58583+26]..[925,58959+27])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[920,58611+28]..[920,58611+55])
                                            expression (lib/sentenceParser_describe.ml[920,58611+58]..[920,58611+67])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[920,58611+58]..[920,58611+67])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[921,58680+28]..[921,58680+54])
                                            expression (lib/sentenceParser_describe.ml[921,58680+57]..[921,58680+70])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[921,58680+58]..[921,58680+66])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[921,58680+58]..[921,58680+66])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[921,58680+67]..[921,58680+69])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[921,58680+67]..[921,58680+69])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[922,58752+28]..[922,58752+56])
                                            expression (lib/sentenceParser_describe.ml[922,58752+59]..[922,58752+68])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[922,58752+59]..[922,58752+68])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[923,58822+28]..[923,58822+54])
                                            expression (lib/sentenceParser_describe.ml[923,58822+57]..[923,58822+64])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[923,58822+57]..[923,58822+64])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[924,58888+28]..[924,58888+54])
                                            expression (lib/sentenceParser_describe.ml[924,58888+57]..[924,58888+70])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[924,58888+57]..[924,58888+70])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[925,58959+30]..[957,60927+37])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[925,58959+36]..[925,58959+47])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[925,58959+36]..[925,58959+47])
                      expression (lib/sentenceParser_describe.ml[926,59010+34]..[957,60927+35])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[926,59010+38]..[926,59010+51])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[926,59010+38]..[926,59010+51])
                            expression (lib/sentenceParser_describe.ml[927,59064+36]..[927,59064+75])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[927,59064+36]..[927,59064+47])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[927,59064+36]..[927,59064+47])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[927,59064+48]..[927,59064+75])
                        ]
                        expression (lib/sentenceParser_describe.ml[928,59143+34]..[957,60927+35])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[928,59143+38]..[938,59756+41])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[929,59183+40]..[929,59183+67])
                                    pattern (lib/sentenceParser_describe.ml[930,59253+42]..[930,59253+51])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[930,59253+42]..[930,59253+51])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[931,59306+40]..[931,59306+66])
                                    pattern (lib/sentenceParser_describe.ml[931,59306+69]..[931,59306+71])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[931,59306+69]..[931,59306+71])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[932,59379+40]..[932,59379+68])
                                    pattern (lib/sentenceParser_describe.ml[933,59450+42]..[933,59450+55])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[933,59450+42]..[933,59450+55])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[934,59507+40]..[934,59507+66])
                                    pattern (lib/sentenceParser_describe.ml[935,59576+42]..[935,59576+53])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[935,59576+42]..[935,59576+53])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[936,59631+40]..[936,59631+66])
                                    pattern (lib/sentenceParser_describe.ml[937,59700+42]..[937,59700+55])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[937,59700+42]..[937,59700+55])
                                ]
                              expression (lib/sentenceParser_describe.ml[939,59798+38]..[939,59798+51])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[939,59798+38]..[939,59798+51])
                          ]
                          expression (lib/sentenceParser_describe.ml[940,59853+34]..[957,60927+35])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[940,59853+38]..[940,59853+40])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[940,59853+38]..[940,59853+40])
                                core_type (lib/sentenceParser_describe.ml[940,59853+43]..[940,59853+58])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[940,59853+43]..[940,59853+58])
                                  []
                                expression (lib/sentenceParser_describe.ml[940,59853+61]..[940,59853+73])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[940,59853+61]..[940,59853+70])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[940,59853+61]..[940,59853+70])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[940,59853+71]..[940,59853+73])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[940,59853+71]..[940,59853+73])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[941,59930+34]..[957,60927+35])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[941,59930+38]..[941,59930+49])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[941,59930+38]..[941,59930+49])
                                  expression (lib/sentenceParser_describe.ml[942,59982+36]..[942,59982+76])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[942,59982+36]..[942,59982+49])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[942,59982+36]..[942,59982+49])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[942,59982+50]..[942,59982+76])
                              ]
                              expression (lib/sentenceParser_describe.ml[943,60062+34]..[957,60927+35])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[943,60062+38]..[943,60062+47])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[943,60062+38]..[943,60062+47])
                                    expression (lib/sentenceParser_describe.ml[943,60062+50]..[943,60062+63])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[943,60062+50]..[943,60062+63])
                                ]
                                expression (lib/sentenceParser_describe.ml[944,60129+34]..[957,60927+35])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[944,60129+38]..[944,60129+45])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[944,60129+38]..[944,60129+45])
                                      expression (lib/sentenceParser_describe.ml[944,60129+48]..[944,60129+59])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[944,60129+48]..[944,60129+59])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[945,60192+34]..[957,60927+35])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[945,60192+38]..[945,60192+40])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[945,60192+38]..[945,60192+40])
                                        core_type (lib/sentenceParser_describe.ml[945,60192+43]..[945,60192+58])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[945,60192+43]..[945,60192+58])
                                          []
                                        expression (lib/sentenceParser_describe.ml[946,60253+36]..[948,60377+46])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[946,60253+36]..[947,60303+72])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[946,60253+36]..[946,60253+49])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[946,60253+36]..[946,60253+49])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[947,60303+38]..[947,60303+72])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[947,60303+39]..[947,60303+53])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[947,60303+39]..[947,60303+53])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[947,60303+54]..[947,60303+71])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[947,60303+55]..[947,60303+66])
                                                            Pexp_constant PConst_string("DEBUG:rhs",(lib/sentenceParser_describe.ml[947,60303+56]..[947,60303+65]),None)
                                                          expression (lib/sentenceParser_describe.ml[947,60303+68]..[947,60303+70])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[947,60303+68]..[947,60303+70])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[948,60377+36]..[948,60377+46])
                                            Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[948,60377+36]..[948,60377+43])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[948,60377+44]..[948,60377+46])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[948,60377+44]..[948,60377+46])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[949,60427+34]..[957,60927+35])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[950,60463+36]..[950,60463+63])
                                          expression (lib/sentenceParser_describe.ml[950,60463+66]..[950,60463+75])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[950,60463+66]..[950,60463+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[951,60540+36]..[951,60540+62])
                                          expression (lib/sentenceParser_describe.ml[952,60605+38]..[952,60605+51])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[952,60605+39]..[952,60605+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[952,60605+39]..[952,60605+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[952,60605+48]..[952,60605+50])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[952,60605+48]..[952,60605+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[953,60658+36]..[953,60658+64])
                                          expression (lib/sentenceParser_describe.ml[953,60658+67]..[953,60658+76])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[953,60658+67]..[953,60658+76])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[954,60736+36]..[954,60736+62])
                                          expression (lib/sentenceParser_describe.ml[954,60736+65]..[954,60736+72])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[954,60736+65]..[954,60736+72])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[955,60810+36]..[955,60810+62])
                                          expression (lib/sentenceParser_describe.ml[956,60875+38]..[956,60875+51])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[956,60875+38]..[956,60875+51])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[957,60927+38]..[1030,65870+45])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[957,60927+44]..[957,60927+55])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[957,60927+44]..[957,60927+55])
                      expression (lib/sentenceParser_describe.ml[958,60986+42]..[1030,65870+43])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[958,60986+46]..[958,60986+59])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[958,60986+46]..[958,60986+59])
                            expression (lib/sentenceParser_describe.ml[959,61048+44]..[959,61048+83])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[959,61048+44]..[959,61048+55])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[959,61048+44]..[959,61048+55])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[959,61048+56]..[959,61048+83])
                        ]
                        expression (lib/sentenceParser_describe.ml[960,61135+42]..[1030,65870+43])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[960,61135+46]..[994,63544+49])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[961,61183+48]..[961,61183+75])
                                    pattern (lib/sentenceParser_describe.ml[962,61261+50]..[962,61261+51])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[963,61314+48]..[963,61314+74])
                                    pattern (lib/sentenceParser_describe.ml[964,61391+50]..[964,61391+58])
                                      Ppat_var "branches" (lib/sentenceParser_describe.ml[964,61391+50]..[964,61391+58])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[965,61451+48]..[965,61451+76])
                                    pattern (lib/sentenceParser_describe.ml[966,61528+52]..[966,61528+71])
                                      Ppat_var "_startpos_branches_" (lib/sentenceParser_describe.ml[966,61528+52]..[966,61528+71])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[967,61601+48]..[967,61601+74])
                                    pattern (lib/sentenceParser_describe.ml[968,61678+50]..[968,61678+67])
                                      Ppat_var "_endpos_branches_" (lib/sentenceParser_describe.ml[968,61678+50]..[968,61678+67])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[969,61747+48]..[969,61747+74])
                                    pattern (lib/sentenceParser_describe.ml[970,61824+50]..[993,63490+53])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[971,61876+52]..[971,61876+79])
                                          pattern (lib/sentenceParser_describe.ml[972,61956+56]..[972,61956+57])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[973,62015+52]..[973,62015+78])
                                          pattern (lib/sentenceParser_describe.ml[974,62094+56]..[974,62094+58])
                                            Ppat_var "_2" (lib/sentenceParser_describe.ml[974,62094+56]..[974,62094+58])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[975,62154+52]..[975,62154+80])
                                          pattern (lib/sentenceParser_describe.ml[976,62235+56]..[976,62235+69])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[976,62235+56]..[976,62235+69])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[977,62306+52]..[977,62306+78])
                                          pattern (lib/sentenceParser_describe.ml[978,62385+56]..[978,62385+67])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[978,62385+56]..[978,62385+67])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[979,62454+52]..[979,62454+78])
                                          pattern (lib/sentenceParser_describe.ml[981,62589+54]..[992,63432+57])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[982,62645+56]..[982,62645+83])
                                                pattern (lib/sentenceParser_describe.ml[983,62729+60]..[983,62729+69])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[983,62729+60]..[983,62729+69])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[984,62800+56]..[984,62800+82])
                                                pattern (lib/sentenceParser_describe.ml[985,62883+60]..[985,62883+66])
                                                  Ppat_var "symbol" (lib/sentenceParser_describe.ml[985,62883+60]..[985,62883+66])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[986,62951+56]..[986,62951+84])
                                                pattern (lib/sentenceParser_describe.ml[987,63036+60]..[987,63036+77])
                                                  Ppat_var "_startpos_symbol_" (lib/sentenceParser_describe.ml[987,63036+60]..[987,63036+77])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[988,63115+56]..[988,63115+82])
                                                pattern (lib/sentenceParser_describe.ml[989,63198+60]..[989,63198+75])
                                                  Ppat_var "_endpos_symbol_" (lib/sentenceParser_describe.ml[989,63198+60]..[989,63198+75])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[990,63275+56]..[990,63275+82])
                                                pattern (lib/sentenceParser_describe.ml[991,63358+60]..[991,63358+73])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[991,63358+60]..[991,63358+73])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[995,63594+46]..[995,63594+59])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[995,63594+46]..[995,63594+59])
                          ]
                          expression (lib/sentenceParser_describe.ml[996,63657+42]..[1030,65870+43])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[996,63657+46]..[996,63657+54])
                                  Ppat_var "branches" (lib/sentenceParser_describe.ml[996,63657+46]..[996,63657+54])
                                core_type (lib/sentenceParser_describe.ml[996,63657+57]..[996,63657+72])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[996,63657+57]..[996,63657+72])
                                  []
                                expression (lib/sentenceParser_describe.ml[997,63732+44]..[997,63732+62])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[997,63732+44]..[997,63732+53])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[997,63732+44]..[997,63732+53])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[997,63732+54]..[997,63732+62])
                                        Pexp_ident "branches" (lib/sentenceParser_describe.ml[997,63732+54]..[997,63732+62])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[998,63798+42]..[1030,65870+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[998,63798+46]..[998,63798+48])
                                    Ppat_var "_2" (lib/sentenceParser_describe.ml[998,63798+46]..[998,63798+48])
                                  core_type (lib/sentenceParser_describe.ml[998,63798+51]..[998,63798+55])
                                    Ptyp_constr "unit" (lib/sentenceParser_describe.ml[998,63798+51]..[998,63798+55])
                                    []
                                  expression (lib/sentenceParser_describe.ml[998,63798+58]..[998,63798+70])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[998,63798+58]..[998,63798+67])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[998,63798+58]..[998,63798+67])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[998,63798+68]..[998,63798+70])
                                          Pexp_ident "_2" (lib/sentenceParser_describe.ml[998,63798+68]..[998,63798+70])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[999,63872+42]..[1030,65870+43])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[999,63872+46]..[999,63872+52])
                                      Ppat_var "symbol" (lib/sentenceParser_describe.ml[999,63872+46]..[999,63872+52])
                                    core_type (lib/sentenceParser_describe.ml[1000,63927+44]..[1000,63927+68])
                                      Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[1000,63927+51]..[1000,63927+68])
                                      [
                                        core_type (lib/sentenceParser_describe.ml[1000,63927+44]..[1000,63927+50])
                                          Ptyp_constr "string" (lib/sentenceParser_describe.ml[1000,63927+44]..[1000,63927+50])
                                          []
                                      ]
                                    expression (lib/sentenceParser_describe.ml[1001,63998+44]..[1001,63998+60])
                                      Pexp_apply
                                      expression (lib/sentenceParser_describe.ml[1001,63998+44]..[1001,63998+53])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1001,63998+44]..[1001,63998+53])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser_describe.ml[1001,63998+54]..[1001,63998+60])
                                            Pexp_ident "symbol" (lib/sentenceParser_describe.ml[1001,63998+54]..[1001,63998+60])
                                      ]
                                ]
                                expression (lib/sentenceParser_describe.ml[1002,64062+42]..[1030,65870+43])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1002,64062+46]..[1002,64062+57])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1002,64062+46]..[1002,64062+57])
                                      expression (lib/sentenceParser_describe.ml[1003,64122+44]..[1003,64122+84])
                                        Pexp_field
                                        expression (lib/sentenceParser_describe.ml[1003,64122+44]..[1003,64122+57])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1003,64122+44]..[1003,64122+57])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1003,64122+58]..[1003,64122+84])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1004,64210+42]..[1030,65870+43])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1004,64210+46]..[1004,64210+55])
                                          Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1004,64210+46]..[1004,64210+55])
                                        expression (lib/sentenceParser_describe.ml[1004,64210+58]..[1004,64210+75])
                                          Pexp_ident "_startpos_symbol_" (lib/sentenceParser_describe.ml[1004,64210+58]..[1004,64210+75])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1005,64289+42]..[1030,65870+43])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[1005,64289+46]..[1005,64289+53])
                                            Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1005,64289+46]..[1005,64289+53])
                                          expression (lib/sentenceParser_describe.ml[1005,64289+56]..[1005,64289+73])
                                            Pexp_ident "_endpos_branches_" (lib/sentenceParser_describe.ml[1005,64289+56]..[1005,64289+73])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[1006,64366+42]..[1030,65870+43])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser_describe.ml[1006,64366+46]..[1006,64366+48])
                                              Ppat_var "_v" (lib/sentenceParser_describe.ml[1006,64366+46]..[1006,64366+48])
                                            core_type (lib/sentenceParser_describe.ml[1006,64366+51]..[1006,64366+76])
                                              Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser_describe.ml[1006,64366+51]..[1006,64366+76])
                                              []
                                            expression (lib/sentenceParser_describe.ml[1008,64489+44]..[1018,65119+45])
                                              Pexp_sequence
                                              expression (lib/sentenceParser_describe.ml[1008,64489+44]..[1011,64681+61])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[1008,64489+44]..[1008,64489+57])
                                                  Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1008,64489+44]..[1008,64489+57])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[1009,64547+46]..[1011,64681+61])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[1009,64547+47]..[1009,64547+61])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1009,64547+47]..[1009,64547+61])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[1010,64609+49]..[1011,64681+60])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser_describe.ml[1010,64609+50]..[1010,64609+62])
                                                                Pexp_constant PConst_string("DEBUG:rule",(lib/sentenceParser_describe.ml[1010,64609+51]..[1010,64609+61]),None)
                                                              expression (lib/sentenceParser_describe.ml[1010,64609+64]..[1010,64609+70])
                                                                Pexp_ident "symbol" (lib/sentenceParser_describe.ml[1010,64609+64]..[1010,64609+70])
                                                              expression (lib/sentenceParser_describe.ml[1011,64681+51]..[1011,64681+59])
                                                                Pexp_ident "branches" (lib/sentenceParser_describe.ml[1011,64681+51]..[1011,64681+59])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser_describe.ml[1012,64744+44]..[1018,65119+45])
                                                Pexp_record
                                                [
                                                  "pr_nt" (lib/sentenceParser_describe.ml[1013,64790+46]..[1013,64790+51])
                                                    expression (lib/sentenceParser_describe.ml[1014,64844+48]..[1014,64844+72])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[1014,64844+49]..[1014,64844+64])
                                                        Pexp_ident "Positions.value" (lib/sentenceParser_describe.ml[1014,64844+49]..[1014,64844+64])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[1014,64844+65]..[1014,64844+71])
                                                            Pexp_ident "symbol" (lib/sentenceParser_describe.ml[1014,64844+65]..[1014,64844+71])
                                                      ]
                                                  "pr_positions" (lib/sentenceParser_describe.ml[1015,64918+46]..[1015,64918+58])
                                                    expression (lib/sentenceParser_describe.ml[1016,64979+48]..[1016,64979+75])
                                                      Pexp_construct "::" (lib/sentenceParser_describe.ml[1016,64979+49]..[1016,64979+75]) ghost
                                                      Some
                                                        expression (lib/sentenceParser_describe.ml[1016,64979+49]..[1016,64979+75]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1016,64979+49]..[1016,64979+74])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1016,64979+49]..[1016,64979+67])
                                                                Pexp_ident "Positions.position" (lib/sentenceParser_describe.ml[1016,64979+49]..[1016,64979+67])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1016,64979+68]..[1016,64979+74])
                                                                    Pexp_ident "symbol" (lib/sentenceParser_describe.ml[1016,64979+68]..[1016,64979+74])
                                                              ]
                                                            expression (lib/sentenceParser_describe.ml[1016,64979+74]..[1016,64979+75]) ghost
                                                              Pexp_construct "[]" (lib/sentenceParser_describe.ml[1016,64979+74]..[1016,64979+75]) ghost
                                                              None
                                                          ]
                                                  "pr_branches" (lib/sentenceParser_describe.ml[1017,65056+46]..[1017,65056+57])
                                                    expression (lib/sentenceParser_describe.ml[1017,65056+60]..[1017,65056+62])
                                                      Pexp_construct "[]" (lib/sentenceParser_describe.ml[1017,65056+60]..[1017,65056+62])
                                                      None
                                                ]
                                                None
                                        ]
                                        expression (lib/sentenceParser_describe.ml[1019,65168+42]..[1030,65870+43])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1020,65212+44]..[1020,65212+71])
                                              expression (lib/sentenceParser_describe.ml[1021,65286+46]..[1021,65286+55])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1021,65286+46]..[1021,65286+55])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1022,65343+44]..[1022,65343+70])
                                              expression (lib/sentenceParser_describe.ml[1023,65416+46]..[1023,65416+59])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[1023,65416+47]..[1023,65416+55])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1023,65416+47]..[1023,65416+55])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[1023,65416+56]..[1023,65416+58])
                                                      Pexp_ident "_v" (lib/sentenceParser_describe.ml[1023,65416+56]..[1023,65416+58])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1024,65477+44]..[1024,65477+72])
                                              expression (lib/sentenceParser_describe.ml[1025,65552+46]..[1025,65552+55])
                                                Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1025,65552+46]..[1025,65552+55])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1026,65609+44]..[1026,65609+70])
                                              expression (lib/sentenceParser_describe.ml[1027,65682+46]..[1027,65682+53])
                                                Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1027,65682+46]..[1027,65682+53])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1028,65737+44]..[1028,65737+70])
                                              expression (lib/sentenceParser_describe.ml[1029,65810+46]..[1029,65810+59])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1029,65810+46]..[1029,65810+59])
                                          ]
                                          None
                    expression (lib/sentenceParser_describe.ml[1030,65870+46]..[1102,71214+53])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1030,65870+52]..[1030,65870+63])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1030,65870+52]..[1030,65870+63])
                      expression (lib/sentenceParser_describe.ml[1031,65937+50]..[1102,71214+51])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1031,65937+54]..[1031,65937+67])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1031,65937+54]..[1031,65937+67])
                            expression (lib/sentenceParser_describe.ml[1032,66007+52]..[1032,66007+91])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1032,66007+52]..[1032,66007+63])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1032,66007+52]..[1032,66007+63])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1032,66007+64]..[1032,66007+91])
                        ]
                        expression (lib/sentenceParser_describe.ml[1033,66102+50]..[1102,71214+51])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1033,66102+54]..[1071,69009+57])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1034,66158+56]..[1034,66158+83])
                                    pattern (lib/sentenceParser_describe.ml[1035,66242+60]..[1035,66242+61])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1036,66305+56]..[1036,66305+82])
                                    pattern (lib/sentenceParser_describe.ml[1037,66388+60]..[1037,66388+62])
                                      Ppat_var "_3" (lib/sentenceParser_describe.ml[1037,66388+60]..[1037,66388+62])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1038,66452+56]..[1038,66452+84])
                                    pattern (lib/sentenceParser_describe.ml[1039,66537+60]..[1039,66537+73])
                                      Ppat_var "_startpos__3_" (lib/sentenceParser_describe.ml[1039,66537+60]..[1039,66537+73])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1040,66612+56]..[1040,66612+82])
                                    pattern (lib/sentenceParser_describe.ml[1041,66695+60]..[1041,66695+71])
                                      Ppat_var "_endpos__3_" (lib/sentenceParser_describe.ml[1041,66695+60]..[1041,66695+71])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1042,66768+56]..[1042,66768+82])
                                    pattern (lib/sentenceParser_describe.ml[1044,66911+58]..[1070,68947+61])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1045,66971+60]..[1045,66971+87])
                                          pattern (lib/sentenceParser_describe.ml[1046,67059+64]..[1046,67059+65])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1047,67126+60]..[1047,67126+86])
                                          pattern (lib/sentenceParser_describe.ml[1048,67213+64]..[1048,67213+66])
                                            Ppat_var "_2" (lib/sentenceParser_describe.ml[1048,67213+64]..[1048,67213+66])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1049,67281+60]..[1049,67281+88])
                                          pattern (lib/sentenceParser_describe.ml[1050,67370+64]..[1050,67370+77])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[1050,67370+64]..[1050,67370+77])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1051,67449+60]..[1051,67449+86])
                                          pattern (lib/sentenceParser_describe.ml[1052,67536+64]..[1052,67536+75])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[1052,67536+64]..[1052,67536+75])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1053,67613+60]..[1053,67613+86])
                                          pattern (lib/sentenceParser_describe.ml[1055,67764+62]..[1069,68881+65])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1056,67828+64]..[1056,67828+91])
                                                pattern (lib/sentenceParser_describe.ml[1057,67920+68]..[1057,67920+77])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1057,67920+68]..[1057,67920+77])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1058,67999+64]..[1058,67999+90])
                                                pattern (lib/sentenceParser_describe.ml[1059,68090+68]..[1059,68090+70])
                                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1059,68090+68]..[1059,68090+70])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1060,68162+64]..[1060,68162+92])
                                                pattern (lib/sentenceParser_describe.ml[1062,68323+66]..[1062,68323+79])
                                                  Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1062,68323+66]..[1062,68323+79])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1063,68404+64]..[1063,68404+90])
                                                pattern (lib/sentenceParser_describe.ml[1065,68563+66]..[1065,68563+77])
                                                  Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1065,68563+66]..[1065,68563+77])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1066,68642+64]..[1066,68642+90])
                                                pattern (lib/sentenceParser_describe.ml[1068,68801+66]..[1068,68801+79])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1068,68801+66]..[1068,68801+79])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[1072,69067+54]..[1072,69067+67])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1072,69067+54]..[1072,69067+67])
                          ]
                          expression (lib/sentenceParser_describe.ml[1073,69138+50]..[1102,71214+51])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1073,69138+54]..[1073,69138+56])
                                  Ppat_var "_3" (lib/sentenceParser_describe.ml[1073,69138+54]..[1073,69138+56])
                                core_type (lib/sentenceParser_describe.ml[1074,69197+52]..[1074,69197+77])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser_describe.ml[1074,69197+52]..[1074,69197+77])
                                  []
                                expression (lib/sentenceParser_describe.ml[1075,69275+54]..[1075,69275+66])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1075,69275+54]..[1075,69275+63])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1075,69275+54]..[1075,69275+63])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1075,69275+64]..[1075,69275+66])
                                        Pexp_ident "_3" (lib/sentenceParser_describe.ml[1075,69275+64]..[1075,69275+66])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1076,69345+50]..[1102,71214+51])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1076,69345+54]..[1076,69345+56])
                                    Ppat_var "_2" (lib/sentenceParser_describe.ml[1076,69345+54]..[1076,69345+56])
                                  core_type (lib/sentenceParser_describe.ml[1076,69345+59]..[1076,69345+68])
                                    Ptyp_constr "list" (lib/sentenceParser_describe.ml[1076,69345+64]..[1076,69345+68])
                                    [
                                      core_type (lib/sentenceParser_describe.ml[1076,69345+59]..[1076,69345+63])
                                        Ptyp_constr "unit" (lib/sentenceParser_describe.ml[1076,69345+59]..[1076,69345+63])
                                        []
                                    ]
                                  expression (lib/sentenceParser_describe.ml[1077,69416+52]..[1077,69416+64])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[1077,69416+52]..[1077,69416+61])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1077,69416+52]..[1077,69416+61])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[1077,69416+62]..[1077,69416+64])
                                          Pexp_ident "_2" (lib/sentenceParser_describe.ml[1077,69416+62]..[1077,69416+64])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[1078,69484+50]..[1102,71214+51])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1078,69484+54]..[1078,69484+56])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1078,69484+54]..[1078,69484+56])
                                    core_type (lib/sentenceParser_describe.ml[1078,69484+59]..[1078,69484+74])
                                      Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1078,69484+59]..[1078,69484+74])
                                      []
                                    expression (lib/sentenceParser_describe.ml[1079,69561+52]..[1079,69561+64])
                                      Pexp_apply
                                      expression (lib/sentenceParser_describe.ml[1079,69561+52]..[1079,69561+61])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1079,69561+52]..[1079,69561+61])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser_describe.ml[1079,69561+62]..[1079,69561+64])
                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[1079,69561+62]..[1079,69561+64])
                                      ]
                                ]
                                expression (lib/sentenceParser_describe.ml[1080,69629+50]..[1102,71214+51])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1080,69629+54]..[1080,69629+65])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1080,69629+54]..[1080,69629+65])
                                      expression (lib/sentenceParser_describe.ml[1081,69697+52]..[1081,69697+92])
                                        Pexp_field
                                        expression (lib/sentenceParser_describe.ml[1081,69697+52]..[1081,69697+65])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1081,69697+52]..[1081,69697+65])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1081,69697+66]..[1081,69697+92])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1082,69793+50]..[1102,71214+51])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1082,69793+54]..[1082,69793+63])
                                          Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1082,69793+54]..[1082,69793+63])
                                        expression (lib/sentenceParser_describe.ml[1083,69859+52]..[1083,69859+65])
                                          Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1083,69859+52]..[1083,69859+65])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1084,69928+50]..[1102,71214+51])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[1084,69928+54]..[1084,69928+61])
                                            Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1084,69928+54]..[1084,69928+61])
                                          expression (lib/sentenceParser_describe.ml[1084,69928+64]..[1084,69928+75])
                                            Pexp_ident "_endpos__3_" (lib/sentenceParser_describe.ml[1084,69928+64]..[1084,69928+75])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[1085,70007+50]..[1102,71214+51])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser_describe.ml[1085,70007+54]..[1085,70007+56])
                                              Ppat_var "_v" (lib/sentenceParser_describe.ml[1085,70007+54]..[1085,70007+56])
                                            core_type (lib/sentenceParser_describe.ml[1085,70007+59]..[1085,70007+74])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1085,70007+59]..[1085,70007+74])
                                              []
                                            expression (lib/sentenceParser_describe.ml[1086,70084+52]..[1090,70361+59])
                                              Pexp_sequence
                                              expression (lib/sentenceParser_describe.ml[1086,70084+52]..[1089,70296+63])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[1086,70084+52]..[1086,70084+65])
                                                  Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1086,70084+52]..[1086,70084+65])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[1087,70150+54]..[1089,70296+63])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser_describe.ml[1087,70150+55]..[1087,70150+69])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1087,70150+55]..[1087,70150+69])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser_describe.ml[1088,70220+57]..[1089,70296+62])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser_describe.ml[1088,70220+58]..[1088,70220+74])
                                                                Pexp_constant PConst_string("DEBUG:OLDRULE1",(lib/sentenceParser_describe.ml[1088,70220+59]..[1088,70220+73]),None)
                                                              expression (lib/sentenceParser_describe.ml[1089,70296+59]..[1089,70296+61])
                                                                Pexp_ident "_3" (lib/sentenceParser_describe.ml[1089,70296+59]..[1089,70296+61])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser_describe.ml[1090,70361+52]..[1090,70361+59])
                                                Pexp_construct "Rule" (lib/sentenceParser_describe.ml[1090,70361+52]..[1090,70361+56])
                                                Some
                                                  expression (lib/sentenceParser_describe.ml[1090,70361+57]..[1090,70361+59])
                                                    Pexp_ident "_3" (lib/sentenceParser_describe.ml[1090,70361+57]..[1090,70361+59])
                                        ]
                                        expression (lib/sentenceParser_describe.ml[1091,70424+50]..[1102,71214+51])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1092,70476+52]..[1092,70476+79])
                                              expression (lib/sentenceParser_describe.ml[1093,70556+56]..[1093,70556+65])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1093,70556+56]..[1093,70556+65])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1094,70623+52]..[1094,70623+78])
                                              expression (lib/sentenceParser_describe.ml[1095,70702+56]..[1095,70702+69])
                                                Pexp_apply
                                                expression (lib/sentenceParser_describe.ml[1095,70702+57]..[1095,70702+65])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1095,70702+57]..[1095,70702+65])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser_describe.ml[1095,70702+66]..[1095,70702+68])
                                                      Pexp_ident "_v" (lib/sentenceParser_describe.ml[1095,70702+66]..[1095,70702+68])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1096,70773+52]..[1096,70773+80])
                                              expression (lib/sentenceParser_describe.ml[1097,70854+56]..[1097,70854+65])
                                                Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1097,70854+56]..[1097,70854+65])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1098,70921+52]..[1098,70921+78])
                                              expression (lib/sentenceParser_describe.ml[1099,71000+56]..[1099,71000+63])
                                                Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1099,71000+56]..[1099,71000+63])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1100,71065+52]..[1100,71065+78])
                                              expression (lib/sentenceParser_describe.ml[1101,71144+56]..[1101,71144+69])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1101,71144+56]..[1101,71144+69])
                                          ]
                                          None
                    expression (lib/sentenceParser_describe.ml[1102,71214+54]..[1165,76205+61])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1102,71214+60]..[1102,71214+71])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1102,71214+60]..[1102,71214+71])
                      expression (lib/sentenceParser_describe.ml[1103,71289+58]..[1165,76205+59])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1103,71289+62]..[1103,71289+75])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1103,71289+62]..[1103,71289+75])
                            expression (lib/sentenceParser_describe.ml[1104,71367+60]..[1104,71367+99])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1104,71367+60]..[1104,71367+71])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1104,71367+60]..[1104,71367+71])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1104,71367+72]..[1104,71367+99])
                        ]
                        expression (lib/sentenceParser_describe.ml[1105,71470+58]..[1165,76205+59])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1105,71470+62]..[1134,73794+65])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1106,71534+64]..[1106,71534+91])
                                    pattern (lib/sentenceParser_describe.ml[1107,71626+68]..[1107,71626+69])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1108,71697+64]..[1108,71697+90])
                                    pattern (lib/sentenceParser_describe.ml[1109,71788+68]..[1109,71788+70])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[1109,71788+68]..[1109,71788+70])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1110,71860+64]..[1110,71860+92])
                                    pattern (lib/sentenceParser_describe.ml[1112,72021+66]..[1112,72021+79])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[1112,72021+66]..[1112,72021+79])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1113,72102+64]..[1113,72102+90])
                                    pattern (lib/sentenceParser_describe.ml[1115,72261+66]..[1115,72261+77])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[1115,72261+66]..[1115,72261+77])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1116,72340+64]..[1116,72340+90])
                                    pattern (lib/sentenceParser_describe.ml[1118,72499+66]..[1133,73724+69])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1119,72567+68]..[1119,72567+95])
                                          pattern (lib/sentenceParser_describe.ml[1121,72733+68]..[1121,72733+77])
                                            Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1121,72733+68]..[1121,72733+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1122,72812+68]..[1122,72812+94])
                                          pattern (lib/sentenceParser_describe.ml[1123,72907+70]..[1123,72907+72])
                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[1123,72907+70]..[1123,72907+72])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1124,72981+68]..[1124,72981+96])
                                          pattern (lib/sentenceParser_describe.ml[1126,73148+68]..[1126,73148+81])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1126,73148+68]..[1126,73148+81])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1127,73231+68]..[1127,73231+94])
                                          pattern (lib/sentenceParser_describe.ml[1129,73396+68]..[1129,73396+79])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1129,73396+68]..[1129,73396+79])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1130,73477+68]..[1130,73477+94])
                                          pattern (lib/sentenceParser_describe.ml[1132,73642+68]..[1132,73642+81])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1132,73642+68]..[1132,73642+81])
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[1135,73860+62]..[1135,73860+75])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1135,73860+62]..[1135,73860+75])
                          ]
                          expression (lib/sentenceParser_describe.ml[1136,73939+58]..[1165,76205+59])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1136,73939+62]..[1136,73939+64])
                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[1136,73939+62]..[1136,73939+64])
                                core_type (lib/sentenceParser_describe.ml[1137,74006+60]..[1137,74006+85])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser_describe.ml[1137,74006+60]..[1137,74006+85])
                                  []
                                expression (lib/sentenceParser_describe.ml[1138,74092+62]..[1138,74092+74])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1138,74092+62]..[1138,74092+71])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1138,74092+62]..[1138,74092+71])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1138,74092+72]..[1138,74092+74])
                                        Pexp_ident "_2" (lib/sentenceParser_describe.ml[1138,74092+72]..[1138,74092+74])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1139,74170+58]..[1165,76205+59])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1139,74170+62]..[1139,74170+64])
                                    Ppat_var "_1" (lib/sentenceParser_describe.ml[1139,74170+62]..[1139,74170+64])
                                  core_type (lib/sentenceParser_describe.ml[1139,74170+67]..[1139,74170+76])
                                    Ptyp_constr "list" (lib/sentenceParser_describe.ml[1139,74170+72]..[1139,74170+76])
                                    [
                                      core_type (lib/sentenceParser_describe.ml[1139,74170+67]..[1139,74170+71])
                                        Ptyp_constr "unit" (lib/sentenceParser_describe.ml[1139,74170+67]..[1139,74170+71])
                                        []
                                    ]
                                  expression (lib/sentenceParser_describe.ml[1140,74247+62]..[1140,74247+74])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[1140,74247+62]..[1140,74247+71])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1140,74247+62]..[1140,74247+71])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[1140,74247+72]..[1140,74247+74])
                                          Pexp_ident "_1" (lib/sentenceParser_describe.ml[1140,74247+72]..[1140,74247+74])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[1141,74325+58]..[1165,76205+59])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1141,74325+62]..[1141,74325+73])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1141,74325+62]..[1141,74325+73])
                                    expression (lib/sentenceParser_describe.ml[1142,74401+60]..[1142,74401+100])
                                      Pexp_field
                                      expression (lib/sentenceParser_describe.ml[1142,74401+60]..[1142,74401+73])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1142,74401+60]..[1142,74401+73])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1142,74401+74]..[1142,74401+100])
                                ]
                                expression (lib/sentenceParser_describe.ml[1143,74505+58]..[1165,76205+59])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1143,74505+62]..[1143,74505+71])
                                        Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1143,74505+62]..[1143,74505+71])
                                      expression (lib/sentenceParser_describe.ml[1144,74579+60]..[1144,74579+73])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1144,74579+60]..[1144,74579+73])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1145,74656+58]..[1165,76205+59])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1145,74656+62]..[1145,74656+69])
                                          Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1145,74656+62]..[1145,74656+69])
                                        expression (lib/sentenceParser_describe.ml[1146,74728+60]..[1146,74728+71])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser_describe.ml[1146,74728+60]..[1146,74728+71])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1147,74803+58]..[1165,76205+59])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[1147,74803+62]..[1147,74803+64])
                                            Ppat_var "_v" (lib/sentenceParser_describe.ml[1147,74803+62]..[1147,74803+64])
                                          core_type (lib/sentenceParser_describe.ml[1148,74870+60]..[1148,74870+75])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1148,74870+60]..[1148,74870+75])
                                            []
                                          expression (lib/sentenceParser_describe.ml[1149,74948+60]..[1153,75256+67])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[1149,74948+60]..[1152,75183+71])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1149,74948+60]..[1149,74948+73])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1149,74948+60]..[1149,74948+73])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1150,75022+62]..[1152,75183+71])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1150,75022+63]..[1150,75022+77])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1150,75022+63]..[1150,75022+77])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1151,75100+65]..[1152,75183+70])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1151,75100+66]..[1151,75100+81])
                                                              Pexp_constant PConst_string("DEBUG:OLDRULE",(lib/sentenceParser_describe.ml[1151,75100+67]..[1151,75100+80]),None)
                                                            expression (lib/sentenceParser_describe.ml[1152,75183+67]..[1152,75183+69])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1152,75183+67]..[1152,75183+69])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[1153,75256+60]..[1153,75256+67])
                                              Pexp_construct "Rule" (lib/sentenceParser_describe.ml[1153,75256+60]..[1153,75256+64])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[1153,75256+65]..[1153,75256+67])
                                                  Pexp_ident "_2" (lib/sentenceParser_describe.ml[1153,75256+65]..[1153,75256+67])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[1154,75327+58]..[1165,76205+59])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1155,75387+60]..[1155,75387+87])
                                            expression (lib/sentenceParser_describe.ml[1156,75475+64]..[1156,75475+73])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1156,75475+64]..[1156,75475+73])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1157,75550+60]..[1157,75550+86])
                                            expression (lib/sentenceParser_describe.ml[1158,75637+64]..[1158,75637+77])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1158,75637+65]..[1158,75637+73])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1158,75637+65]..[1158,75637+73])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1158,75637+74]..[1158,75637+76])
                                                    Pexp_ident "_v" (lib/sentenceParser_describe.ml[1158,75637+74]..[1158,75637+76])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1159,75716+60]..[1159,75716+88])
                                            expression (lib/sentenceParser_describe.ml[1160,75805+64]..[1160,75805+73])
                                              Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1160,75805+64]..[1160,75805+73])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1161,75880+60]..[1161,75880+86])
                                            expression (lib/sentenceParser_describe.ml[1162,75967+64]..[1162,75967+71])
                                              Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1162,75967+64]..[1162,75967+71])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1163,76040+60]..[1163,76040+86])
                                            expression (lib/sentenceParser_describe.ml[1164,76127+64]..[1164,76127+77])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1164,76127+64]..[1164,76127+77])
                                        ]
                                        None
                    expression (lib/sentenceParser_describe.ml[1165,76205+62]..[1227,81191+69])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1166,76273+66]..[1166,76273+77])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1166,76273+66]..[1166,76273+77])
                      expression (lib/sentenceParser_describe.ml[1168,76420+66]..[1227,81191+67])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1168,76420+70]..[1168,76420+83])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1168,76420+70]..[1168,76420+83])
                            expression (lib/sentenceParser_describe.ml[1170,76574+68]..[1170,76574+107])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1170,76574+68]..[1170,76574+79])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1170,76574+68]..[1170,76574+79])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1170,76574+80]..[1170,76574+107])
                        ]
                        expression (lib/sentenceParser_describe.ml[1171,76685+66]..[1227,81191+67])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1172,76756+68]..[1187,77983+69])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1173,76826+68]..[1173,76826+95])
                                    pattern (lib/sentenceParser_describe.ml[1175,76992+68]..[1175,76992+77])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1175,76992+68]..[1175,76992+77])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1176,77071+68]..[1176,77071+94])
                                    pattern (lib/sentenceParser_describe.ml[1177,77166+70]..[1177,77166+72])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1177,77166+70]..[1177,77166+72])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1178,77240+68]..[1178,77240+96])
                                    pattern (lib/sentenceParser_describe.ml[1180,77407+68]..[1180,77407+81])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1180,77407+68]..[1180,77407+81])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1181,77490+68]..[1181,77490+94])
                                    pattern (lib/sentenceParser_describe.ml[1183,77655+68]..[1183,77655+79])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1183,77655+68]..[1183,77655+79])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1184,77736+68]..[1184,77736+94])
                                    pattern (lib/sentenceParser_describe.ml[1186,77901+68]..[1186,77901+81])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1186,77901+68]..[1186,77901+81])
                                ]
                              expression (lib/sentenceParser_describe.ml[1188,78055+68]..[1188,78055+81])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1188,78055+68]..[1188,78055+81])
                          ]
                          expression (lib/sentenceParser_describe.ml[1189,78140+66]..[1227,81191+67])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1189,78140+70]..[1189,78140+72])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1189,78140+70]..[1189,78140+72])
                                core_type (lib/sentenceParser_describe.ml[1190,78215+68]..[1190,78215+93])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser_describe.ml[1190,78215+68]..[1190,78215+93])
                                  []
                                expression (lib/sentenceParser_describe.ml[1192,78379+68]..[1193,78457+70])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1192,78379+68]..[1192,78379+77])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1192,78379+68]..[1192,78379+77])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1193,78457+68]..[1193,78457+70])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1193,78457+68]..[1193,78457+70])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1194,78531+66]..[1227,81191+67])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1194,78531+70]..[1194,78531+81])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1194,78531+70]..[1194,78531+81])
                                  expression (lib/sentenceParser_describe.ml[1196,78683+68]..[1196,78683+108])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[1196,78683+68]..[1196,78683+81])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1196,78683+68]..[1196,78683+81])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1196,78683+82]..[1196,78683+108])
                              ]
                              expression (lib/sentenceParser_describe.ml[1197,78795+66]..[1227,81191+67])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1197,78795+70]..[1197,78795+79])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1197,78795+70]..[1197,78795+79])
                                    expression (lib/sentenceParser_describe.ml[1199,78945+68]..[1199,78945+81])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1199,78945+68]..[1199,78945+81])
                                ]
                                expression (lib/sentenceParser_describe.ml[1200,79030+66]..[1227,81191+67])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1200,79030+70]..[1200,79030+77])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1200,79030+70]..[1200,79030+77])
                                      expression (lib/sentenceParser_describe.ml[1202,79178+68]..[1202,79178+79])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[1202,79178+68]..[1202,79178+79])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1203,79261+66]..[1227,81191+67])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1203,79261+70]..[1203,79261+72])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[1203,79261+70]..[1203,79261+72])
                                        core_type (lib/sentenceParser_describe.ml[1204,79336+68]..[1204,79336+83])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1204,79336+68]..[1204,79336+83])
                                          []
                                        expression (lib/sentenceParser_describe.ml[1206,79490+68]..[1210,79816+75])
                                          Pexp_sequence
                                          expression (lib/sentenceParser_describe.ml[1206,79490+68]..[1209,79742+72])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1206,79490+68]..[1206,79490+81])
                                              Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1206,79490+68]..[1206,79490+81])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1207,79572+68]..[1209,79742+72])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[1207,79572+69]..[1207,79572+83])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1207,79572+69]..[1207,79572+83])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[1208,79656+68]..[1209,79742+71])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser_describe.ml[1208,79656+69]..[1208,79656+84])
                                                            Pexp_constant PConst_string("DEBUG:OLDRULE",(lib/sentenceParser_describe.ml[1208,79656+70]..[1208,79656+83]),None)
                                                          expression (lib/sentenceParser_describe.ml[1209,79742+68]..[1209,79742+70])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[1209,79742+68]..[1209,79742+70])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser_describe.ml[1210,79816+68]..[1210,79816+75])
                                            Pexp_construct "Rule" (lib/sentenceParser_describe.ml[1210,79816+68]..[1210,79816+72])
                                            Some
                                              expression (lib/sentenceParser_describe.ml[1210,79816+73]..[1210,79816+75])
                                                Pexp_ident "_1" (lib/sentenceParser_describe.ml[1210,79816+73]..[1210,79816+75])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1211,79895+66]..[1227,81191+67])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1212,79963+68]..[1212,79963+95])
                                          expression (lib/sentenceParser_describe.ml[1214,80129+68]..[1214,80129+77])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1214,80129+68]..[1214,80129+77])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1215,80208+68]..[1215,80208+94])
                                          expression (lib/sentenceParser_describe.ml[1217,80373+68]..[1218,80451+71])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1217,80373+69]..[1217,80373+77])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1217,80373+69]..[1217,80373+77])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1218,80451+68]..[1218,80451+70])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[1218,80451+68]..[1218,80451+70])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1219,80524+68]..[1219,80524+96])
                                          expression (lib/sentenceParser_describe.ml[1221,80691+68]..[1221,80691+77])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1221,80691+68]..[1221,80691+77])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1222,80770+68]..[1222,80770+94])
                                          expression (lib/sentenceParser_describe.ml[1223,80865+70]..[1223,80865+77])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1223,80865+70]..[1223,80865+77])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1224,80944+68]..[1224,80944+94])
                                          expression (lib/sentenceParser_describe.ml[1226,81109+68]..[1226,81109+81])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1226,81109+68]..[1226,81109+81])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[1227,81191+70]..[1275,83632+13])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1228,81264+12]..[1228,81264+23])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1228,81264+12]..[1228,81264+23])
                      expression (lib/sentenceParser_describe.ml[1229,81291+10]..[1275,83632+11])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1229,81291+14]..[1229,81291+27])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1229,81291+14]..[1229,81291+27])
                            expression (lib/sentenceParser_describe.ml[1229,81291+30]..[1229,81291+69])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1229,81291+30]..[1229,81291+41])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1229,81291+30]..[1229,81291+41])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1229,81291+42]..[1229,81291+69])
                        ]
                        expression (lib/sentenceParser_describe.ml[1230,81364+10]..[1275,83632+11])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1230,81364+14]..[1252,82608+17])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1230,81364+16]..[1230,81364+43])
                                    pattern (lib/sentenceParser_describe.ml[1230,81364+46]..[1230,81364+47])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1231,81413+16]..[1231,81413+42])
                                    pattern (lib/sentenceParser_describe.ml[1231,81413+45]..[1231,81413+47])
                                      Ppat_var "_4" (lib/sentenceParser_describe.ml[1231,81413+45]..[1231,81413+47])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1232,81462+16]..[1232,81462+44])
                                    pattern (lib/sentenceParser_describe.ml[1232,81462+47]..[1232,81462+60])
                                      Ppat_var "_startpos__4_" (lib/sentenceParser_describe.ml[1232,81462+47]..[1232,81462+60])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1233,81524+16]..[1233,81524+42])
                                    pattern (lib/sentenceParser_describe.ml[1233,81524+45]..[1233,81524+56])
                                      Ppat_var "_endpos__4_" (lib/sentenceParser_describe.ml[1233,81524+45]..[1233,81524+56])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1234,81582+16]..[1234,81582+42])
                                    pattern (lib/sentenceParser_describe.ml[1235,81627+18]..[1251,82586+21])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1235,81627+20]..[1235,81627+47])
                                          pattern (lib/sentenceParser_describe.ml[1235,81627+50]..[1235,81627+51])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1236,81680+20]..[1236,81680+46])
                                          pattern (lib/sentenceParser_describe.ml[1236,81680+49]..[1236,81680+51])
                                            Ppat_var "_3" (lib/sentenceParser_describe.ml[1236,81680+49]..[1236,81680+51])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1237,81733+20]..[1237,81733+48])
                                          pattern (lib/sentenceParser_describe.ml[1237,81733+51]..[1237,81733+64])
                                            Ppat_var "_startpos__3_" (lib/sentenceParser_describe.ml[1237,81733+51]..[1237,81733+64])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1238,81799+20]..[1238,81799+46])
                                          pattern (lib/sentenceParser_describe.ml[1238,81799+49]..[1238,81799+60])
                                            Ppat_var "_endpos__3_" (lib/sentenceParser_describe.ml[1238,81799+49]..[1238,81799+60])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1239,81861+20]..[1239,81861+46])
                                          pattern (lib/sentenceParser_describe.ml[1240,81910+22]..[1250,82560+25])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1240,81910+24]..[1240,81910+51])
                                                pattern (lib/sentenceParser_describe.ml[1240,81910+54]..[1240,81910+55])
                                                  Ppat_any
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1241,81967+24]..[1241,81967+50])
                                                pattern (lib/sentenceParser_describe.ml[1241,81967+53]..[1241,81967+55])
                                                  Ppat_var "_2" (lib/sentenceParser_describe.ml[1241,81967+53]..[1241,81967+55])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1242,82024+24]..[1242,82024+52])
                                                pattern (lib/sentenceParser_describe.ml[1242,82024+55]..[1242,82024+68])
                                                  Ppat_var "_startpos__2_" (lib/sentenceParser_describe.ml[1242,82024+55]..[1242,82024+68])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1243,82094+24]..[1243,82094+50])
                                                pattern (lib/sentenceParser_describe.ml[1243,82094+53]..[1243,82094+64])
                                                  Ppat_var "_endpos__2_" (lib/sentenceParser_describe.ml[1243,82094+53]..[1243,82094+64])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1244,82160+24]..[1244,82160+50])
                                                pattern (lib/sentenceParser_describe.ml[1245,82213+26]..[1249,82487+72])
                                                  Ppat_record Closed
                                                  [
                                                    "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1245,82213+28]..[1245,82213+55])
                                                      pattern (lib/sentenceParser_describe.ml[1245,82213+58]..[1245,82213+67])
                                                        Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1245,82213+58]..[1245,82213+67])
                                                    "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1246,82282+28]..[1246,82282+54])
                                                      pattern (lib/sentenceParser_describe.ml[1246,82282+57]..[1246,82282+59])
                                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[1246,82282+57]..[1246,82282+59])
                                                    "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1247,82343+28]..[1247,82343+56])
                                                      pattern (lib/sentenceParser_describe.ml[1247,82343+59]..[1247,82343+72])
                                                        Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1247,82343+59]..[1247,82343+72])
                                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1248,82417+28]..[1248,82417+54])
                                                      pattern (lib/sentenceParser_describe.ml[1248,82417+57]..[1248,82417+68])
                                                        Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1248,82417+57]..[1248,82417+68])
                                                    "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1249,82487+28]..[1249,82487+54])
                                                      pattern (lib/sentenceParser_describe.ml[1249,82487+57]..[1249,82487+70])
                                                        Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1249,82487+57]..[1249,82487+70])
                                                  ]
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser_describe.ml[1253,82626+14]..[1253,82626+27])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1253,82626+14]..[1253,82626+27])
                          ]
                          expression (lib/sentenceParser_describe.ml[1254,82657+10]..[1275,83632+11])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1254,82657+14]..[1254,82657+16])
                                  Ppat_var "_4" (lib/sentenceParser_describe.ml[1254,82657+14]..[1254,82657+16])
                                core_type (lib/sentenceParser_describe.ml[1254,82657+19]..[1254,82657+23])
                                  Ptyp_constr "unit" (lib/sentenceParser_describe.ml[1254,82657+19]..[1254,82657+23])
                                  []
                                expression (lib/sentenceParser_describe.ml[1254,82657+26]..[1254,82657+38])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1254,82657+26]..[1254,82657+35])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1254,82657+26]..[1254,82657+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1254,82657+36]..[1254,82657+38])
                                        Pexp_ident "_4" (lib/sentenceParser_describe.ml[1254,82657+36]..[1254,82657+38])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1255,82699+10]..[1275,83632+11])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1255,82699+14]..[1255,82699+16])
                                    Ppat_var "_3" (lib/sentenceParser_describe.ml[1255,82699+14]..[1255,82699+16])
                                  core_type (lib/sentenceParser_describe.ml[1255,82699+19]..[1255,82699+34])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1255,82699+19]..[1255,82699+34])
                                    []
                                  expression (lib/sentenceParser_describe.ml[1255,82699+37]..[1255,82699+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser_describe.ml[1255,82699+37]..[1255,82699+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1255,82699+37]..[1255,82699+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser_describe.ml[1255,82699+47]..[1255,82699+49])
                                          Pexp_ident "_3" (lib/sentenceParser_describe.ml[1255,82699+47]..[1255,82699+49])
                                    ]
                              ]
                              expression (lib/sentenceParser_describe.ml[1256,82752+10]..[1275,83632+11])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1256,82752+14]..[1256,82752+16])
                                      Ppat_var "_2" (lib/sentenceParser_describe.ml[1256,82752+14]..[1256,82752+16])
                                    core_type (lib/sentenceParser_describe.ml[1256,82752+19]..[1256,82752+28])
                                      Ptyp_constr "list" (lib/sentenceParser_describe.ml[1256,82752+24]..[1256,82752+28])
                                      [
                                        core_type (lib/sentenceParser_describe.ml[1256,82752+19]..[1256,82752+23])
                                          Ptyp_constr "unit" (lib/sentenceParser_describe.ml[1256,82752+19]..[1256,82752+23])
                                          []
                                      ]
                                    expression (lib/sentenceParser_describe.ml[1256,82752+31]..[1256,82752+43])
                                      Pexp_apply
                                      expression (lib/sentenceParser_describe.ml[1256,82752+31]..[1256,82752+40])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1256,82752+31]..[1256,82752+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser_describe.ml[1256,82752+41]..[1256,82752+43])
                                            Pexp_ident "_2" (lib/sentenceParser_describe.ml[1256,82752+41]..[1256,82752+43])
                                      ]
                                ]
                                expression (lib/sentenceParser_describe.ml[1257,82799+10]..[1275,83632+11])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1257,82799+14]..[1257,82799+16])
                                        Ppat_var "_1" (lib/sentenceParser_describe.ml[1257,82799+14]..[1257,82799+16])
                                      core_type (lib/sentenceParser_describe.ml[1257,82799+19]..[1257,82799+23])
                                        Ptyp_constr "unit" (lib/sentenceParser_describe.ml[1257,82799+19]..[1257,82799+23])
                                        []
                                      expression (lib/sentenceParser_describe.ml[1257,82799+26]..[1257,82799+38])
                                        Pexp_apply
                                        expression (lib/sentenceParser_describe.ml[1257,82799+26]..[1257,82799+35])
                                          Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1257,82799+26]..[1257,82799+35])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/sentenceParser_describe.ml[1257,82799+36]..[1257,82799+38])
                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1257,82799+36]..[1257,82799+38])
                                        ]
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1258,82841+10]..[1275,83632+11])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1258,82841+14]..[1258,82841+25])
                                          Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1258,82841+14]..[1258,82841+25])
                                        expression (lib/sentenceParser_describe.ml[1258,82841+28]..[1258,82841+68])
                                          Pexp_field
                                          expression (lib/sentenceParser_describe.ml[1258,82841+28]..[1258,82841+41])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1258,82841+28]..[1258,82841+41])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1258,82841+42]..[1258,82841+68])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1259,82913+10]..[1275,83632+11])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser_describe.ml[1259,82913+14]..[1259,82913+23])
                                            Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1259,82913+14]..[1259,82913+23])
                                          expression (lib/sentenceParser_describe.ml[1259,82913+26]..[1259,82913+39])
                                            Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1259,82913+26]..[1259,82913+39])
                                      ]
                                      expression (lib/sentenceParser_describe.ml[1260,82956+10]..[1275,83632+11])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser_describe.ml[1260,82956+14]..[1260,82956+21])
                                              Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1260,82956+14]..[1260,82956+21])
                                            expression (lib/sentenceParser_describe.ml[1260,82956+24]..[1260,82956+35])
                                              Pexp_ident "_endpos__4_" (lib/sentenceParser_describe.ml[1260,82956+24]..[1260,82956+35])
                                        ]
                                        expression (lib/sentenceParser_describe.ml[1261,82995+10]..[1275,83632+11])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[1261,82995+14]..[1261,82995+16])
                                                Ppat_var "_v" (lib/sentenceParser_describe.ml[1261,82995+14]..[1261,82995+16])
                                              core_type (lib/sentenceParser_describe.ml[1261,82995+19]..[1261,82995+34])
                                                Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1261,82995+19]..[1261,82995+34])
                                                []
                                              expression (lib/sentenceParser_describe.ml[1262,83032+12]..[1268,83326+22])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser_describe.ml[1262,83032+16]..[1262,83032+18])
                                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1262,83032+16]..[1262,83032+18])
                                                    expression (lib/sentenceParser_describe.ml[1263,83053+14]..[1266,83228+24])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lib/sentenceParser_describe.ml[1263,83053+18]..[1263,83053+20])
                                                            Ppat_var "_1" (lib/sentenceParser_describe.ml[1263,83053+18]..[1263,83053+20])
                                                          expression (lib/sentenceParser_describe.ml[1264,83076+16]..[1264,83076+76])
                                                            Pexp_sequence
                                                            expression (lib/sentenceParser_describe.ml[1264,83076+16]..[1264,83076+64])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1264,83076+16]..[1264,83076+29])
                                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1264,83076+16]..[1264,83076+29])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1264,83076+30]..[1264,83076+64])
                                                                    Pexp_apply
                                                                    expression (lib/sentenceParser_describe.ml[1264,83076+31]..[1264,83076+45])
                                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1264,83076+31]..[1264,83076+45])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (lib/sentenceParser_describe.ml[1264,83076+46]..[1264,83076+63])
  Pexp_tuple
  [
    expression (lib/sentenceParser_describe.ml[1264,83076+47]..[1264,83076+58])
      Pexp_constant PConst_string("DEBUG:rhs",(lib/sentenceParser_describe.ml[1264,83076+48]..[1264,83076+57]),None)
    expression (lib/sentenceParser_describe.ml[1264,83076+60]..[1264,83076+62])
      Pexp_ident "_3" (lib/sentenceParser_describe.ml[1264,83076+60]..[1264,83076+62])
  ]
                                                                    ]
                                                              ]
                                                            expression (lib/sentenceParser_describe.ml[1264,83076+66]..[1264,83076+76])
                                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1264,83076+66]..[1264,83076+73])
                                                              Some
                                                                expression (lib/sentenceParser_describe.ml[1264,83076+74]..[1264,83076+76])
                                                                  Pexp_ident "_3" (lib/sentenceParser_describe.ml[1264,83076+74]..[1264,83076+76])
                                                      ]
                                                      expression (lib/sentenceParser_describe.ml[1265,83156+14]..[1266,83228+24])
                                                        Pexp_sequence
                                                        expression (lib/sentenceParser_describe.ml[1265,83156+14]..[1265,83156+70])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1265,83156+14]..[1265,83156+27])
                                                            Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1265,83156+14]..[1265,83156+27])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1265,83156+28]..[1265,83156+70])
                                                                Pexp_apply
                                                                expression (lib/sentenceParser_describe.ml[1265,83156+29]..[1265,83156+43])
                                                                  Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1265,83156+29]..[1265,83156+43])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (lib/sentenceParser_describe.ml[1265,83156+44]..[1265,83156+69])
                                                                      Pexp_tuple
                                                                      [
expression (lib/sentenceParser_describe.ml[1265,83156+45]..[1265,83156+64])
  Pexp_constant PConst_string("DEBUG:cterm/group",(lib/sentenceParser_describe.ml[1265,83156+46]..[1265,83156+63]),None)
expression (lib/sentenceParser_describe.ml[1265,83156+66]..[1265,83156+68])
  Pexp_ident "_1" (lib/sentenceParser_describe.ml[1265,83156+66]..[1265,83156+68])
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser_describe.ml[1266,83228+14]..[1266,83228+24])
                                                          Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1266,83228+14]..[1266,83228+21])
                                                          Some
                                                            expression (lib/sentenceParser_describe.ml[1266,83228+22]..[1266,83228+24])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1266,83228+22]..[1266,83228+24])
                                                ]
                                                expression (lib/sentenceParser_describe.ml[1267,83256+12]..[1268,83326+22])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser_describe.ml[1267,83256+12]..[1267,83256+68])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1267,83256+12]..[1267,83256+25])
                                                      Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1267,83256+12]..[1267,83256+25])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1267,83256+26]..[1267,83256+68])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1267,83256+27]..[1267,83256+41])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1267,83256+27]..[1267,83256+41])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1267,83256+42]..[1267,83256+67])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser_describe.ml[1267,83256+43]..[1267,83256+62])
                                                                    Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser_describe.ml[1267,83256+44]..[1267,83256+61]),None)
                                                                  expression (lib/sentenceParser_describe.ml[1267,83256+64]..[1267,83256+66])
                                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[1267,83256+64]..[1267,83256+66])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser_describe.ml[1268,83326+12]..[1268,83326+22])
                                                    Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1268,83326+12]..[1268,83326+19])
                                                    Some
                                                      expression (lib/sentenceParser_describe.ml[1268,83326+20]..[1268,83326+22])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1268,83326+20]..[1268,83326+22])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[1269,83352+10]..[1275,83632+11])
                                            Pexp_record
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1270,83364+12]..[1270,83364+39])
                                                expression (lib/sentenceParser_describe.ml[1270,83364+42]..[1270,83364+51])
                                                  Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1270,83364+42]..[1270,83364+51])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1271,83417+12]..[1271,83417+38])
                                                expression (lib/sentenceParser_describe.ml[1271,83417+41]..[1271,83417+54])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser_describe.ml[1271,83417+42]..[1271,83417+50])
                                                    Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1271,83417+42]..[1271,83417+50])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser_describe.ml[1271,83417+51]..[1271,83417+53])
                                                        Pexp_ident "_v" (lib/sentenceParser_describe.ml[1271,83417+51]..[1271,83417+53])
                                                  ]
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1272,83473+12]..[1272,83473+40])
                                                expression (lib/sentenceParser_describe.ml[1272,83473+43]..[1272,83473+52])
                                                  Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1272,83473+43]..[1272,83473+52])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1273,83527+12]..[1273,83527+38])
                                                expression (lib/sentenceParser_describe.ml[1273,83527+41]..[1273,83527+48])
                                                  Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1273,83527+41]..[1273,83527+48])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1274,83577+12]..[1274,83577+38])
                                                expression (lib/sentenceParser_describe.ml[1274,83577+41]..[1274,83577+54])
                                                  Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1274,83577+41]..[1274,83577+54])
                                            ]
                                            None
                    expression (lib/sentenceParser_describe.ml[1275,83632+14]..[1303,85154+21])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1275,83632+20]..[1275,83632+31])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1275,83632+20]..[1275,83632+31])
                      expression (lib/sentenceParser_describe.ml[1276,83667+18]..[1303,85154+19])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1276,83667+22]..[1276,83667+35])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1276,83667+22]..[1276,83667+35])
                            expression (lib/sentenceParser_describe.ml[1276,83667+38]..[1276,83667+77])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1276,83667+38]..[1276,83667+49])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1276,83667+38]..[1276,83667+49])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1276,83667+50]..[1276,83667+77])
                        ]
                        expression (lib/sentenceParser_describe.ml[1277,83748+18]..[1303,85154+19])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1277,83748+22]..[1281,84006+68])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1277,83748+24]..[1277,83748+51])
                                    pattern (lib/sentenceParser_describe.ml[1277,83748+54]..[1277,83748+63])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1277,83748+54]..[1277,83748+63])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1278,83813+24]..[1278,83813+50])
                                    pattern (lib/sentenceParser_describe.ml[1278,83813+53]..[1278,83813+55])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1278,83813+53]..[1278,83813+55])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1279,83870+24]..[1279,83870+52])
                                    pattern (lib/sentenceParser_describe.ml[1279,83870+55]..[1279,83870+68])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1279,83870+55]..[1279,83870+68])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1280,83940+24]..[1280,83940+50])
                                    pattern (lib/sentenceParser_describe.ml[1280,83940+53]..[1280,83940+64])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1280,83940+53]..[1280,83940+64])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1281,84006+24]..[1281,84006+50])
                                    pattern (lib/sentenceParser_describe.ml[1281,84006+53]..[1281,84006+66])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1281,84006+53]..[1281,84006+66])
                                ]
                              expression (lib/sentenceParser_describe.ml[1282,84075+22]..[1282,84075+35])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1282,84075+22]..[1282,84075+35])
                          ]
                          expression (lib/sentenceParser_describe.ml[1283,84114+18]..[1303,85154+19])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1283,84114+22]..[1283,84114+24])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1283,84114+22]..[1283,84114+24])
                                core_type (lib/sentenceParser_describe.ml[1283,84114+27]..[1283,84114+42])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1283,84114+27]..[1283,84114+42])
                                  []
                                expression (lib/sentenceParser_describe.ml[1283,84114+45]..[1283,84114+57])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1283,84114+45]..[1283,84114+54])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1283,84114+45]..[1283,84114+54])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1283,84114+55]..[1283,84114+57])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1283,84114+55]..[1283,84114+57])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1284,84175+18]..[1303,85154+19])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1284,84175+22]..[1284,84175+33])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1284,84175+22]..[1284,84175+33])
                                  expression (lib/sentenceParser_describe.ml[1284,84175+36]..[1284,84175+76])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[1284,84175+36]..[1284,84175+49])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1284,84175+36]..[1284,84175+49])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1284,84175+50]..[1284,84175+76])
                              ]
                              expression (lib/sentenceParser_describe.ml[1285,84255+18]..[1303,85154+19])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1285,84255+22]..[1285,84255+31])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1285,84255+22]..[1285,84255+31])
                                    expression (lib/sentenceParser_describe.ml[1285,84255+34]..[1285,84255+47])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1285,84255+34]..[1285,84255+47])
                                ]
                                expression (lib/sentenceParser_describe.ml[1286,84306+18]..[1303,85154+19])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1286,84306+22]..[1286,84306+29])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1286,84306+22]..[1286,84306+29])
                                      expression (lib/sentenceParser_describe.ml[1286,84306+32]..[1286,84306+43])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[1286,84306+32]..[1286,84306+43])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1287,84353+18]..[1303,85154+19])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1287,84353+22]..[1287,84353+24])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[1287,84353+22]..[1287,84353+24])
                                        core_type (lib/sentenceParser_describe.ml[1287,84353+27]..[1287,84353+42])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1287,84353+27]..[1287,84353+42])
                                          []
                                        expression (lib/sentenceParser_describe.ml[1288,84398+20]..[1296,84792+30])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[1288,84398+24]..[1288,84398+26])
                                                Ppat_var "_1" (lib/sentenceParser_describe.ml[1288,84398+24]..[1288,84398+26])
                                              expression (lib/sentenceParser_describe.ml[1289,84427+22]..[1294,84678+32])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser_describe.ml[1289,84427+26]..[1289,84427+28])
                                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1289,84427+26]..[1289,84427+28])
                                                    expression (lib/sentenceParser_describe.ml[1290,84458+24]..[1291,84536+34])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[1290,84458+24]..[1290,84458+76])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[1290,84458+24]..[1290,84458+37])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1290,84458+24]..[1290,84458+37])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[1290,84458+38]..[1290,84458+76])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1290,84458+39]..[1290,84458+53])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1290,84458+39]..[1290,84458+53])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1290,84458+54]..[1290,84458+75])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[1290,84458+55]..[1290,84458+70])
Pexp_constant PConst_string("DEBUG:class1a",(lib/sentenceParser_describe.ml[1290,84458+56]..[1290,84458+69]),None)
                                                                      expression (lib/sentenceParser_describe.ml[1290,84458+72]..[1290,84458+74])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[1290,84458+72]..[1290,84458+74])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[1291,84536+24]..[1291,84536+34])
                                                        Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1291,84536+24]..[1291,84536+31])
                                                        Some
                                                          expression (lib/sentenceParser_describe.ml[1291,84536+32]..[1291,84536+34])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[1291,84536+32]..[1291,84536+34])
                                                ]
                                                expression (lib/sentenceParser_describe.ml[1292,84574+22]..[1294,84678+32])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser_describe.ml[1292,84574+22]..[1293,84610+66])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1292,84574+22]..[1292,84574+35])
                                                      Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1292,84574+22]..[1292,84574+35])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1293,84610+24]..[1293,84610+66])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1293,84610+25]..[1293,84610+39])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1293,84610+25]..[1293,84610+39])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1293,84610+40]..[1293,84610+65])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser_describe.ml[1293,84610+41]..[1293,84610+60])
                                                                    Pexp_constant PConst_string("DEBUG:cterm/class",(lib/sentenceParser_describe.ml[1293,84610+42]..[1293,84610+59]),None)
                                                                  expression (lib/sentenceParser_describe.ml[1293,84610+62]..[1293,84610+64])
                                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[1293,84610+62]..[1293,84610+64])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser_describe.ml[1294,84678+22]..[1294,84678+32])
                                                    Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1294,84678+22]..[1294,84678+29])
                                                    Some
                                                      expression (lib/sentenceParser_describe.ml[1294,84678+30]..[1294,84678+32])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1294,84678+30]..[1294,84678+32])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[1295,84714+20]..[1296,84792+30])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[1295,84714+20]..[1295,84714+76])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1295,84714+20]..[1295,84714+33])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1295,84714+20]..[1295,84714+33])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1295,84714+34]..[1295,84714+76])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1295,84714+35]..[1295,84714+49])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1295,84714+35]..[1295,84714+49])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1295,84714+50]..[1295,84714+75])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1295,84714+51]..[1295,84714+70])
                                                              Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser_describe.ml[1295,84714+52]..[1295,84714+69]),None)
                                                            expression (lib/sentenceParser_describe.ml[1295,84714+72]..[1295,84714+74])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1295,84714+72]..[1295,84714+74])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[1296,84792+20]..[1296,84792+30])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1296,84792+20]..[1296,84792+27])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[1296,84792+28]..[1296,84792+30])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[1296,84792+28]..[1296,84792+30])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1297,84826+18]..[1303,85154+19])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1298,84846+20]..[1298,84846+47])
                                          expression (lib/sentenceParser_describe.ml[1298,84846+50]..[1298,84846+59])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1298,84846+50]..[1298,84846+59])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1299,84907+20]..[1299,84907+46])
                                          expression (lib/sentenceParser_describe.ml[1299,84907+49]..[1299,84907+62])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1299,84907+50]..[1299,84907+58])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1299,84907+50]..[1299,84907+58])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1299,84907+59]..[1299,84907+61])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[1299,84907+59]..[1299,84907+61])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1300,84971+20]..[1300,84971+48])
                                          expression (lib/sentenceParser_describe.ml[1300,84971+51]..[1300,84971+60])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1300,84971+51]..[1300,84971+60])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1301,85033+20]..[1301,85033+46])
                                          expression (lib/sentenceParser_describe.ml[1301,85033+49]..[1301,85033+56])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1301,85033+49]..[1301,85033+56])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1302,85091+20]..[1302,85091+46])
                                          expression (lib/sentenceParser_describe.ml[1302,85091+49]..[1302,85091+62])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1302,85091+49]..[1302,85091+62])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[1303,85154+22]..[1335,87027+29])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1303,85154+28]..[1303,85154+39])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1303,85154+28]..[1303,85154+39])
                      expression (lib/sentenceParser_describe.ml[1304,85197+26]..[1335,87027+27])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1304,85197+30]..[1304,85197+43])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1304,85197+30]..[1304,85197+43])
                            expression (lib/sentenceParser_describe.ml[1305,85243+28]..[1305,85243+67])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1305,85243+28]..[1305,85243+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1305,85243+28]..[1305,85243+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1305,85243+40]..[1305,85243+67])
                        ]
                        expression (lib/sentenceParser_describe.ml[1306,85314+26]..[1335,87027+27])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1306,85314+30]..[1310,85604+76])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1306,85314+32]..[1306,85314+59])
                                    pattern (lib/sentenceParser_describe.ml[1306,85314+62]..[1306,85314+71])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1306,85314+62]..[1306,85314+71])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1307,85387+32]..[1307,85387+58])
                                    pattern (lib/sentenceParser_describe.ml[1307,85387+61]..[1307,85387+63])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1307,85387+61]..[1307,85387+63])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1308,85452+32]..[1308,85452+60])
                                    pattern (lib/sentenceParser_describe.ml[1308,85452+63]..[1308,85452+76])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1308,85452+63]..[1308,85452+76])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1309,85530+32]..[1309,85530+58])
                                    pattern (lib/sentenceParser_describe.ml[1309,85530+61]..[1309,85530+72])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1309,85530+61]..[1309,85530+72])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1310,85604+32]..[1310,85604+58])
                                    pattern (lib/sentenceParser_describe.ml[1310,85604+61]..[1310,85604+74])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1310,85604+61]..[1310,85604+74])
                                ]
                              expression (lib/sentenceParser_describe.ml[1311,85681+30]..[1311,85681+43])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1311,85681+30]..[1311,85681+43])
                          ]
                          expression (lib/sentenceParser_describe.ml[1312,85728+26]..[1335,87027+27])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1312,85728+30]..[1312,85728+32])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1312,85728+30]..[1312,85728+32])
                                core_type (lib/sentenceParser_describe.ml[1312,85728+35]..[1312,85728+59])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[1312,85728+42]..[1312,85728+59])
                                  [
                                    core_type (lib/sentenceParser_describe.ml[1312,85728+35]..[1312,85728+41])
                                      Ptyp_constr "string" (lib/sentenceParser_describe.ml[1312,85728+35]..[1312,85728+41])
                                      []
                                  ]
                                expression (lib/sentenceParser_describe.ml[1312,85728+62]..[1312,85728+74])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1312,85728+62]..[1312,85728+71])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1312,85728+62]..[1312,85728+71])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1312,85728+72]..[1312,85728+74])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1312,85728+72]..[1312,85728+74])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1313,85806+26]..[1335,87027+27])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1313,85806+30]..[1313,85806+41])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1313,85806+30]..[1313,85806+41])
                                  expression (lib/sentenceParser_describe.ml[1314,85850+28]..[1314,85850+68])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[1314,85850+28]..[1314,85850+41])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1314,85850+28]..[1314,85850+41])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1314,85850+42]..[1314,85850+68])
                              ]
                              expression (lib/sentenceParser_describe.ml[1315,85922+26]..[1335,87027+27])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1315,85922+30]..[1315,85922+39])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1315,85922+30]..[1315,85922+39])
                                    expression (lib/sentenceParser_describe.ml[1315,85922+42]..[1315,85922+55])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1315,85922+42]..[1315,85922+55])
                                ]
                                expression (lib/sentenceParser_describe.ml[1316,85981+26]..[1335,87027+27])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1316,85981+30]..[1316,85981+37])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1316,85981+30]..[1316,85981+37])
                                      expression (lib/sentenceParser_describe.ml[1316,85981+40]..[1316,85981+51])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[1316,85981+40]..[1316,85981+51])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1317,86036+26]..[1335,87027+27])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1317,86036+30]..[1317,86036+32])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[1317,86036+30]..[1317,86036+32])
                                        core_type (lib/sentenceParser_describe.ml[1317,86036+35]..[1317,86036+50])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1317,86036+35]..[1317,86036+50])
                                          []
                                        expression (lib/sentenceParser_describe.ml[1318,86089+28]..[1328,86609+38])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[1318,86089+32]..[1318,86089+34])
                                                Ppat_var "_1" (lib/sentenceParser_describe.ml[1318,86089+32]..[1318,86089+34])
                                              expression (lib/sentenceParser_describe.ml[1319,86126+30]..[1325,86449+40])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser_describe.ml[1319,86126+34]..[1319,86126+36])
                                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1319,86126+34]..[1319,86126+36])
                                                    expression (lib/sentenceParser_describe.ml[1320,86165+32]..[1322,86283+42])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[1320,86165+32]..[1321,86211+70])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[1320,86165+32]..[1320,86165+45])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1320,86165+32]..[1320,86165+45])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[1321,86211+34]..[1321,86211+70])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1321,86211+35]..[1321,86211+49])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1321,86211+35]..[1321,86211+49])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1321,86211+50]..[1321,86211+69])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[1321,86211+51]..[1321,86211+64])
Pexp_constant PConst_string("DEBUG:class",(lib/sentenceParser_describe.ml[1321,86211+52]..[1321,86211+63]),None)
                                                                      expression (lib/sentenceParser_describe.ml[1321,86211+66]..[1321,86211+68])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[1321,86211+66]..[1321,86211+68])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[1322,86283+32]..[1322,86283+42])
                                                        Pexp_construct "SFactor" (lib/sentenceParser_describe.ml[1322,86283+32]..[1322,86283+39])
                                                        Some
                                                          expression (lib/sentenceParser_describe.ml[1322,86283+40]..[1322,86283+42])
                                                            Pexp_ident "_1" (lib/sentenceParser_describe.ml[1322,86283+40]..[1322,86283+42])
                                                ]
                                                expression (lib/sentenceParser_describe.ml[1323,86329+30]..[1325,86449+40])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser_describe.ml[1323,86329+30]..[1324,86373+74])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1323,86329+30]..[1323,86329+43])
                                                      Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1323,86329+30]..[1323,86329+43])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1324,86373+32]..[1324,86373+74])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1324,86373+33]..[1324,86373+47])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1324,86373+33]..[1324,86373+47])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1324,86373+48]..[1324,86373+73])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser_describe.ml[1324,86373+49]..[1324,86373+68])
                                                                    Pexp_constant PConst_string("DEBUG:cterm/class",(lib/sentenceParser_describe.ml[1324,86373+50]..[1324,86373+67]),None)
                                                                  expression (lib/sentenceParser_describe.ml[1324,86373+70]..[1324,86373+72])
                                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[1324,86373+70]..[1324,86373+72])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser_describe.ml[1325,86449+30]..[1325,86449+40])
                                                    Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1325,86449+30]..[1325,86449+37])
                                                    Some
                                                      expression (lib/sentenceParser_describe.ml[1325,86449+38]..[1325,86449+40])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1325,86449+38]..[1325,86449+40])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[1326,86493+28]..[1328,86609+38])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[1326,86493+28]..[1327,86535+72])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1326,86493+28]..[1326,86493+41])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1326,86493+28]..[1326,86493+41])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1327,86535+30]..[1327,86535+72])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1327,86535+31]..[1327,86535+45])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1327,86535+31]..[1327,86535+45])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1327,86535+46]..[1327,86535+71])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1327,86535+47]..[1327,86535+66])
                                                              Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser_describe.ml[1327,86535+48]..[1327,86535+65]),None)
                                                            expression (lib/sentenceParser_describe.ml[1327,86535+68]..[1327,86535+70])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1327,86535+68]..[1327,86535+70])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[1328,86609+28]..[1328,86609+38])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1328,86609+28]..[1328,86609+35])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[1328,86609+36]..[1328,86609+38])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[1328,86609+36]..[1328,86609+38])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1329,86651+26]..[1335,87027+27])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1330,86679+28]..[1330,86679+55])
                                          expression (lib/sentenceParser_describe.ml[1330,86679+58]..[1330,86679+67])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1330,86679+58]..[1330,86679+67])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1331,86748+28]..[1331,86748+54])
                                          expression (lib/sentenceParser_describe.ml[1331,86748+57]..[1331,86748+70])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1331,86748+58]..[1331,86748+66])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1331,86748+58]..[1331,86748+66])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1331,86748+67]..[1331,86748+69])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[1331,86748+67]..[1331,86748+69])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1332,86820+28]..[1332,86820+56])
                                          expression (lib/sentenceParser_describe.ml[1332,86820+59]..[1332,86820+68])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1332,86820+59]..[1332,86820+68])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1333,86890+28]..[1333,86890+54])
                                          expression (lib/sentenceParser_describe.ml[1333,86890+57]..[1333,86890+64])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1333,86890+57]..[1333,86890+64])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1334,86956+28]..[1334,86956+54])
                                          expression (lib/sentenceParser_describe.ml[1334,86956+57]..[1334,86956+70])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1334,86956+57]..[1334,86956+70])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[1335,87027+30]..[1378,89589+37])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1335,87027+36]..[1335,87027+47])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1335,87027+36]..[1335,87027+47])
                      expression (lib/sentenceParser_describe.ml[1336,87078+34]..[1378,89589+35])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1336,87078+38]..[1336,87078+51])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1336,87078+38]..[1336,87078+51])
                            expression (lib/sentenceParser_describe.ml[1337,87132+36]..[1337,87132+75])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1337,87132+36]..[1337,87132+47])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1337,87132+36]..[1337,87132+47])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1337,87132+48]..[1337,87132+75])
                        ]
                        expression (lib/sentenceParser_describe.ml[1338,87211+34]..[1378,89589+35])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1338,87211+38]..[1348,87824+41])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1339,87251+40]..[1339,87251+67])
                                    pattern (lib/sentenceParser_describe.ml[1340,87321+42]..[1340,87321+51])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1340,87321+42]..[1340,87321+51])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1341,87374+40]..[1341,87374+66])
                                    pattern (lib/sentenceParser_describe.ml[1341,87374+69]..[1341,87374+71])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1341,87374+69]..[1341,87374+71])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1342,87447+40]..[1342,87447+68])
                                    pattern (lib/sentenceParser_describe.ml[1343,87518+42]..[1343,87518+55])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1343,87518+42]..[1343,87518+55])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1344,87575+40]..[1344,87575+66])
                                    pattern (lib/sentenceParser_describe.ml[1345,87644+42]..[1345,87644+53])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1345,87644+42]..[1345,87644+53])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1346,87699+40]..[1346,87699+66])
                                    pattern (lib/sentenceParser_describe.ml[1347,87768+42]..[1347,87768+55])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1347,87768+42]..[1347,87768+55])
                                ]
                              expression (lib/sentenceParser_describe.ml[1349,87866+38]..[1349,87866+51])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1349,87866+38]..[1349,87866+51])
                          ]
                          expression (lib/sentenceParser_describe.ml[1350,87921+34]..[1378,89589+35])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1350,87921+38]..[1350,87921+40])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1350,87921+38]..[1350,87921+40])
                                core_type (lib/sentenceParser_describe.ml[1350,87921+43]..[1350,87921+67])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[1350,87921+50]..[1350,87921+67])
                                  [
                                    core_type (lib/sentenceParser_describe.ml[1350,87921+43]..[1350,87921+49])
                                      Ptyp_constr "string" (lib/sentenceParser_describe.ml[1350,87921+43]..[1350,87921+49])
                                      []
                                  ]
                                expression (lib/sentenceParser_describe.ml[1351,87991+36]..[1351,87991+48])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1351,87991+36]..[1351,87991+45])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1351,87991+36]..[1351,87991+45])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1351,87991+46]..[1351,87991+48])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1351,87991+46]..[1351,87991+48])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1352,88043+34]..[1378,89589+35])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1352,88043+38]..[1352,88043+49])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1352,88043+38]..[1352,88043+49])
                                  expression (lib/sentenceParser_describe.ml[1353,88095+36]..[1353,88095+76])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[1353,88095+36]..[1353,88095+49])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1353,88095+36]..[1353,88095+49])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1353,88095+50]..[1353,88095+76])
                              ]
                              expression (lib/sentenceParser_describe.ml[1354,88175+34]..[1378,89589+35])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1354,88175+38]..[1354,88175+47])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1354,88175+38]..[1354,88175+47])
                                    expression (lib/sentenceParser_describe.ml[1354,88175+50]..[1354,88175+63])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1354,88175+50]..[1354,88175+63])
                                ]
                                expression (lib/sentenceParser_describe.ml[1355,88242+34]..[1378,89589+35])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1355,88242+38]..[1355,88242+45])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1355,88242+38]..[1355,88242+45])
                                      expression (lib/sentenceParser_describe.ml[1355,88242+48]..[1355,88242+59])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[1355,88242+48]..[1355,88242+59])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1356,88305+34]..[1378,89589+35])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1356,88305+38]..[1356,88305+40])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[1356,88305+38]..[1356,88305+40])
                                        core_type (lib/sentenceParser_describe.ml[1356,88305+43]..[1356,88305+58])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1356,88305+43]..[1356,88305+58])
                                          []
                                        expression (lib/sentenceParser_describe.ml[1357,88366+36]..[1369,89039+46])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[1357,88366+40]..[1357,88366+42])
                                                Ppat_var "_1" (lib/sentenceParser_describe.ml[1357,88366+40]..[1357,88366+42])
                                              expression (lib/sentenceParser_describe.ml[1358,88411+38]..[1365,88815+48])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser_describe.ml[1358,88411+42]..[1358,88411+44])
                                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1358,88411+42]..[1358,88411+44])
                                                    expression (lib/sentenceParser_describe.ml[1359,88458+40]..[1361,88591+42])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[1359,88458+40]..[1360,88512+77])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[1359,88458+40]..[1359,88458+53])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1359,88458+40]..[1359,88458+53])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[1360,88512+42]..[1360,88512+77])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1360,88512+43]..[1360,88512+57])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1360,88512+43]..[1360,88512+57])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1360,88512+58]..[1360,88512+76])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[1360,88512+59]..[1360,88512+71])
Pexp_constant PConst_string("DEBUG:quid",(lib/sentenceParser_describe.ml[1360,88512+60]..[1360,88512+70]),None)
                                                                      expression (lib/sentenceParser_describe.ml[1360,88512+73]..[1360,88512+75])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[1360,88512+73]..[1360,88512+75])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[1361,88591+40]..[1361,88591+42])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1361,88591+40]..[1361,88591+42])
                                                ]
                                                expression (lib/sentenceParser_describe.ml[1362,88637+38]..[1365,88815+48])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser_describe.ml[1362,88637+38]..[1364,88745+68])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1362,88637+38]..[1362,88637+51])
                                                      Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1362,88637+38]..[1362,88637+51])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1363,88689+40]..[1364,88745+68])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1363,88689+41]..[1363,88689+55])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1363,88689+41]..[1363,88689+55])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1364,88745+43]..[1364,88745+67])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser_describe.ml[1364,88745+44]..[1364,88745+62])
                                                                    Pexp_constant PConst_string("DEBUG:sterm/quid",(lib/sentenceParser_describe.ml[1364,88745+45]..[1364,88745+61]),None)
                                                                  expression (lib/sentenceParser_describe.ml[1364,88745+64]..[1364,88745+66])
                                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[1364,88745+64]..[1364,88745+66])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser_describe.ml[1365,88815+38]..[1365,88815+48])
                                                    Pexp_construct "SFactor" (lib/sentenceParser_describe.ml[1365,88815+38]..[1365,88815+45])
                                                    Some
                                                      expression (lib/sentenceParser_describe.ml[1365,88815+46]..[1365,88815+48])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1365,88815+46]..[1365,88815+48])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[1366,88867+36]..[1369,89039+46])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[1366,88867+36]..[1368,88971+66])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1366,88867+36]..[1366,88867+49])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1366,88867+36]..[1366,88867+49])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1367,88917+38]..[1368,88971+66])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1367,88917+39]..[1367,88917+53])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1367,88917+39]..[1367,88917+53])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1368,88971+41]..[1368,88971+65])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1368,88971+42]..[1368,88971+60])
                                                              Pexp_constant PConst_string("DEBUG:term/sterm",(lib/sentenceParser_describe.ml[1368,88971+43]..[1368,88971+59]),None)
                                                            expression (lib/sentenceParser_describe.ml[1368,88971+62]..[1368,88971+64])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1368,88971+62]..[1368,88971+64])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[1369,89039+36]..[1369,89039+46])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1369,89039+36]..[1369,89039+43])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[1369,89039+44]..[1369,89039+46])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[1369,89039+44]..[1369,89039+46])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1370,89089+34]..[1378,89589+35])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1371,89125+36]..[1371,89125+63])
                                          expression (lib/sentenceParser_describe.ml[1371,89125+66]..[1371,89125+75])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1371,89125+66]..[1371,89125+75])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1372,89202+36]..[1372,89202+62])
                                          expression (lib/sentenceParser_describe.ml[1373,89267+38]..[1373,89267+51])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1373,89267+39]..[1373,89267+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1373,89267+39]..[1373,89267+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1373,89267+48]..[1373,89267+50])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[1373,89267+48]..[1373,89267+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1374,89320+36]..[1374,89320+64])
                                          expression (lib/sentenceParser_describe.ml[1374,89320+67]..[1374,89320+76])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1374,89320+67]..[1374,89320+76])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1375,89398+36]..[1375,89398+62])
                                          expression (lib/sentenceParser_describe.ml[1375,89398+65]..[1375,89398+72])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1375,89398+65]..[1375,89398+72])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1376,89472+36]..[1376,89472+62])
                                          expression (lib/sentenceParser_describe.ml[1377,89537+38]..[1377,89537+51])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1377,89537+38]..[1377,89537+51])
                                      ]
                                      None
                    expression (lib/sentenceParser_describe.ml[1378,89589+38]..[1426,92734+45])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser_describe.ml[1378,89589+44]..[1378,89589+55])
                        Ppat_var "_menhir_env" (lib/sentenceParser_describe.ml[1378,89589+44]..[1378,89589+55])
                      expression (lib/sentenceParser_describe.ml[1379,89648+42]..[1426,92734+43])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser_describe.ml[1379,89648+46]..[1379,89648+59])
                              Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1379,89648+46]..[1379,89648+59])
                            expression (lib/sentenceParser_describe.ml[1380,89710+44]..[1380,89710+83])
                              Pexp_field
                              expression (lib/sentenceParser_describe.ml[1380,89710+44]..[1380,89710+55])
                                Pexp_ident "_menhir_env" (lib/sentenceParser_describe.ml[1380,89710+44]..[1380,89710+55])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser_describe.ml[1380,89710+56]..[1380,89710+83])
                        ]
                        expression (lib/sentenceParser_describe.ml[1381,89797+42]..[1426,92734+43])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser_describe.ml[1381,89797+46]..[1392,90540+49])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1382,89845+48]..[1382,89845+75])
                                    pattern (lib/sentenceParser_describe.ml[1383,89923+50]..[1383,89923+59])
                                      Ppat_var "_menhir_s" (lib/sentenceParser_describe.ml[1383,89923+50]..[1383,89923+59])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1384,89984+48]..[1384,89984+74])
                                    pattern (lib/sentenceParser_describe.ml[1385,90061+50]..[1385,90061+52])
                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1385,90061+50]..[1385,90061+52])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1386,90115+48]..[1386,90115+76])
                                    pattern (lib/sentenceParser_describe.ml[1387,90192+52]..[1387,90192+65])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser_describe.ml[1387,90192+52]..[1387,90192+65])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1388,90259+48]..[1388,90259+74])
                                    pattern (lib/sentenceParser_describe.ml[1389,90336+50]..[1389,90336+61])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser_describe.ml[1389,90336+50]..[1389,90336+61])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1390,90399+48]..[1390,90399+74])
                                    pattern (lib/sentenceParser_describe.ml[1391,90476+50]..[1391,90476+63])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser_describe.ml[1391,90476+50]..[1391,90476+63])
                                ]
                              expression (lib/sentenceParser_describe.ml[1393,90590+46]..[1393,90590+59])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1393,90590+46]..[1393,90590+59])
                          ]
                          expression (lib/sentenceParser_describe.ml[1394,90653+42]..[1426,92734+43])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser_describe.ml[1394,90653+46]..[1394,90653+48])
                                  Ppat_var "_1" (lib/sentenceParser_describe.ml[1394,90653+46]..[1394,90653+48])
                                core_type (lib/sentenceParser_describe.ml[1394,90653+51]..[1394,90653+75])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser_describe.ml[1394,90653+58]..[1394,90653+75])
                                  [
                                    core_type (lib/sentenceParser_describe.ml[1394,90653+51]..[1394,90653+57])
                                      Ptyp_constr "string" (lib/sentenceParser_describe.ml[1394,90653+51]..[1394,90653+57])
                                      []
                                  ]
                                expression (lib/sentenceParser_describe.ml[1395,90731+44]..[1395,90731+56])
                                  Pexp_apply
                                  expression (lib/sentenceParser_describe.ml[1395,90731+44]..[1395,90731+53])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1395,90731+44]..[1395,90731+53])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser_describe.ml[1395,90731+54]..[1395,90731+56])
                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1395,90731+54]..[1395,90731+56])
                                  ]
                            ]
                            expression (lib/sentenceParser_describe.ml[1396,90791+42]..[1426,92734+43])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser_describe.ml[1396,90791+46]..[1396,90791+57])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser_describe.ml[1396,90791+46]..[1396,90791+57])
                                  expression (lib/sentenceParser_describe.ml[1397,90851+44]..[1397,90851+84])
                                    Pexp_field
                                    expression (lib/sentenceParser_describe.ml[1397,90851+44]..[1397,90851+57])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1397,90851+44]..[1397,90851+57])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1397,90851+58]..[1397,90851+84])
                              ]
                              expression (lib/sentenceParser_describe.ml[1398,90939+42]..[1426,92734+43])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser_describe.ml[1398,90939+46]..[1398,90939+55])
                                      Ppat_var "_startpos" (lib/sentenceParser_describe.ml[1398,90939+46]..[1398,90939+55])
                                    expression (lib/sentenceParser_describe.ml[1398,90939+58]..[1398,90939+71])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser_describe.ml[1398,90939+58]..[1398,90939+71])
                                ]
                                expression (lib/sentenceParser_describe.ml[1399,91014+42]..[1426,92734+43])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser_describe.ml[1399,91014+46]..[1399,91014+53])
                                        Ppat_var "_endpos" (lib/sentenceParser_describe.ml[1399,91014+46]..[1399,91014+53])
                                      expression (lib/sentenceParser_describe.ml[1399,91014+56]..[1399,91014+67])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser_describe.ml[1399,91014+56]..[1399,91014+67])
                                  ]
                                  expression (lib/sentenceParser_describe.ml[1400,91085+42]..[1426,92734+43])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser_describe.ml[1400,91085+46]..[1400,91085+48])
                                          Ppat_var "_v" (lib/sentenceParser_describe.ml[1400,91085+46]..[1400,91085+48])
                                        core_type (lib/sentenceParser_describe.ml[1400,91085+51]..[1400,91085+66])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser_describe.ml[1400,91085+51]..[1400,91085+66])
                                          []
                                        expression (lib/sentenceParser_describe.ml[1401,91154+44]..[1414,91974+54])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser_describe.ml[1401,91154+48]..[1401,91154+50])
                                                Ppat_var "_1" (lib/sentenceParser_describe.ml[1401,91154+48]..[1401,91154+50])
                                              expression (lib/sentenceParser_describe.ml[1402,91207+46]..[1410,91718+56])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser_describe.ml[1402,91207+50]..[1402,91207+52])
                                                      Ppat_var "_1" (lib/sentenceParser_describe.ml[1402,91207+50]..[1402,91207+52])
                                                    expression (lib/sentenceParser_describe.ml[1403,91262+48]..[1406,91463+50])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser_describe.ml[1403,91262+48]..[1405,91390+71])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser_describe.ml[1403,91262+48]..[1403,91262+61])
                                                          Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1403,91262+48]..[1403,91262+61])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser_describe.ml[1404,91324+50]..[1405,91390+71])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser_describe.ml[1404,91324+51]..[1404,91324+65])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1404,91324+51]..[1404,91324+65])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser_describe.ml[1405,91390+53]..[1405,91390+70])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser_describe.ml[1405,91390+54]..[1405,91390+65])
Pexp_constant PConst_string("DEBUG:lid",(lib/sentenceParser_describe.ml[1405,91390+55]..[1405,91390+64]),None)
                                                                      expression (lib/sentenceParser_describe.ml[1405,91390+67]..[1405,91390+69])
Pexp_ident "_1" (lib/sentenceParser_describe.ml[1405,91390+67]..[1405,91390+69])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser_describe.ml[1406,91463+48]..[1406,91463+50])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1406,91463+48]..[1406,91463+50])
                                                ]
                                                expression (lib/sentenceParser_describe.ml[1407,91517+46]..[1410,91718+56])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser_describe.ml[1407,91517+46]..[1409,91641+75])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1407,91517+46]..[1407,91517+59])
                                                      Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1407,91517+46]..[1407,91517+59])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1408,91577+48]..[1409,91641+75])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser_describe.ml[1408,91577+49]..[1408,91577+63])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1408,91577+49]..[1408,91577+63])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser_describe.ml[1409,91641+51]..[1409,91641+74])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser_describe.ml[1409,91641+52]..[1409,91641+69])
                                                                    Pexp_constant PConst_string("DEBUG:sterm/lid",(lib/sentenceParser_describe.ml[1409,91641+53]..[1409,91641+68]),None)
                                                                  expression (lib/sentenceParser_describe.ml[1409,91641+71]..[1409,91641+73])
                                                                    Pexp_ident "_1" (lib/sentenceParser_describe.ml[1409,91641+71]..[1409,91641+73])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser_describe.ml[1410,91718+46]..[1410,91718+56])
                                                    Pexp_construct "SFactor" (lib/sentenceParser_describe.ml[1410,91718+46]..[1410,91718+53])
                                                    Some
                                                      expression (lib/sentenceParser_describe.ml[1410,91718+54]..[1410,91718+56])
                                                        Pexp_ident "_1" (lib/sentenceParser_describe.ml[1410,91718+54]..[1410,91718+56])
                                          ]
                                          expression (lib/sentenceParser_describe.ml[1411,91778+44]..[1414,91974+54])
                                            Pexp_sequence
                                            expression (lib/sentenceParser_describe.ml[1411,91778+44]..[1413,91898+74])
                                              Pexp_apply
                                              expression (lib/sentenceParser_describe.ml[1411,91778+44]..[1411,91778+57])
                                                Pexp_ident "print_endline" (lib/sentenceParser_describe.ml[1411,91778+44]..[1411,91778+57])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser_describe.ml[1412,91836+46]..[1413,91898+74])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser_describe.ml[1412,91836+47]..[1412,91836+61])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser_describe.ml[1412,91836+47]..[1412,91836+61])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser_describe.ml[1413,91898+49]..[1413,91898+73])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser_describe.ml[1413,91898+50]..[1413,91898+68])
                                                              Pexp_constant PConst_string("DEBUG:term/sterm",(lib/sentenceParser_describe.ml[1413,91898+51]..[1413,91898+67]),None)
                                                            expression (lib/sentenceParser_describe.ml[1413,91898+70]..[1413,91898+72])
                                                              Pexp_ident "_1" (lib/sentenceParser_describe.ml[1413,91898+70]..[1413,91898+72])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser_describe.ml[1414,91974+44]..[1414,91974+54])
                                              Pexp_construct "NFactor" (lib/sentenceParser_describe.ml[1414,91974+44]..[1414,91974+51])
                                              Some
                                                expression (lib/sentenceParser_describe.ml[1414,91974+52]..[1414,91974+54])
                                                  Pexp_ident "_1" (lib/sentenceParser_describe.ml[1414,91974+52]..[1414,91974+54])
                                    ]
                                    expression (lib/sentenceParser_describe.ml[1415,92032+42]..[1426,92734+43])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser_describe.ml[1416,92076+44]..[1416,92076+71])
                                          expression (lib/sentenceParser_describe.ml[1417,92150+46]..[1417,92150+55])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser_describe.ml[1417,92150+46]..[1417,92150+55])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser_describe.ml[1418,92207+44]..[1418,92207+70])
                                          expression (lib/sentenceParser_describe.ml[1419,92280+46]..[1419,92280+59])
                                            Pexp_apply
                                            expression (lib/sentenceParser_describe.ml[1419,92280+47]..[1419,92280+55])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser_describe.ml[1419,92280+47]..[1419,92280+55])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser_describe.ml[1419,92280+56]..[1419,92280+58])
                                                  Pexp_ident "_v" (lib/sentenceParser_describe.ml[1419,92280+56]..[1419,92280+58])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser_describe.ml[1420,92341+44]..[1420,92341+72])
                                          expression (lib/sentenceParser_describe.ml[1421,92416+46]..[1421,92416+55])
                                            Pexp_ident "_startpos" (lib/sentenceParser_describe.ml[1421,92416+46]..[1421,92416+55])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser_describe.ml[1422,92473+44]..[1422,92473+70])
                                          expression (lib/sentenceParser_describe.ml[1423,92546+46]..[1423,92546+53])
                                            Pexp_ident "_endpos" (lib/sentenceParser_describe.ml[1423,92546+46]..[1423,92546+53])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser_describe.ml[1424,92601+44]..[1424,92601+70])
                                          expression (lib/sentenceParser_describe.ml[1425,92674+46]..[1425,92674+59])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser_describe.ml[1425,92674+46]..[1425,92674+59])
                                      ]
                                      None
                  ]
              <def>
                pattern (lib/sentenceParser_describe.ml[1427,92782+8]..[1427,92782+13])
                  Ppat_var "trace" (lib/sentenceParser_describe.ml[1427,92782+8]..[1427,92782+13])
                expression (lib/sentenceParser_describe.ml[1428,92798+6]..[1430,92961+1482])
                  Pexp_construct "Some" (lib/sentenceParser_describe.ml[1428,92798+6]..[1428,92798+10])
                  Some
                    expression (lib/sentenceParser_describe.ml[1429,92809+8]..[1430,92961+1482])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser_describe.ml[1429,92809+9]..[1429,92809+150])
                          Pexp_array
                          [
                            expression (lib/sentenceParser_describe.ml[1429,92809+11]..[1429,92809+18])
                              Pexp_constant PConst_string("error",(lib/sentenceParser_describe.ml[1429,92809+12]..[1429,92809+17]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+19]..[1429,92809+26])
                              Pexp_constant PConst_string("Tchar",(lib/sentenceParser_describe.ml[1429,92809+20]..[1429,92809+25]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+27]..[1429,92809+33])
                              Pexp_constant PConst_string("STAR",(lib/sentenceParser_describe.ml[1429,92809+28]..[1429,92809+32]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+34]..[1429,92809+42])
                              Pexp_constant PConst_string("RPAREN",(lib/sentenceParser_describe.ml[1429,92809+35]..[1429,92809+41]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+43]..[1429,92809+50])
                              Pexp_constant PConst_string("REGEX",(lib/sentenceParser_describe.ml[1429,92809+44]..[1429,92809+49]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+51]..[1429,92809+61])
                              Pexp_constant PConst_string("QUESTION",(lib/sentenceParser_describe.ml[1429,92809+52]..[1429,92809+60]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+62]..[1429,92809+67])
                              Pexp_constant PConst_string("QID",(lib/sentenceParser_describe.ml[1429,92809+63]..[1429,92809+66]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+68]..[1429,92809+74])
                              Pexp_constant PConst_string("PLUS",(lib/sentenceParser_describe.ml[1429,92809+69]..[1429,92809+73]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+75]..[1429,92809+84])
                              Pexp_constant PConst_string("NEWLINE",(lib/sentenceParser_describe.ml[1429,92809+76]..[1429,92809+83]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+85]..[1429,92809+93])
                              Pexp_constant PConst_string("LPAREN",(lib/sentenceParser_describe.ml[1429,92809+86]..[1429,92809+92]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+94]..[1429,92809+99])
                              Pexp_constant PConst_string("LID",(lib/sentenceParser_describe.ml[1429,92809+95]..[1429,92809+98]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+100]..[1429,92809+105])
                              Pexp_constant PConst_string("EOF",(lib/sentenceParser_describe.ml[1429,92809+101]..[1429,92809+104]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+106]..[1429,92809+112])
                              Pexp_constant PConst_string("DASH",(lib/sentenceParser_describe.ml[1429,92809+107]..[1429,92809+111]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+113]..[1429,92809+130])
                              Pexp_constant PConst_string("COLONCOLONEQUAL",(lib/sentenceParser_describe.ml[1429,92809+114]..[1429,92809+129]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+131]..[1429,92809+138])
                              Pexp_constant PConst_string("CARET",(lib/sentenceParser_describe.ml[1429,92809+132]..[1429,92809+137]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+139]..[1429,92809+144])
                              Pexp_constant PConst_string("BAR",(lib/sentenceParser_describe.ml[1429,92809+140]..[1429,92809+143]),None)
                            expression (lib/sentenceParser_describe.ml[1429,92809+145]..[1429,92809+148])
                              Pexp_constant PConst_string("#",(lib/sentenceParser_describe.ml[1429,92809+146]..[1429,92809+147]),None)
                          ]
                        expression (lib/sentenceParser_describe.ml[1430,92961+10]..[1430,92961+1481])
                          Pexp_array
                          [
                            expression (lib/sentenceParser_describe.ml[1430,92961+12]..[1430,92961+23])
                              Pexp_constant PConst_string("Accepting",(lib/sentenceParser_describe.ml[1430,92961+13]..[1430,92961+22]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+24]..[1430,92961+104])
                              Pexp_constant PConst_string("Reducing production alternation -> alternation BAR list(NEWLINE) concatenation",(lib/sentenceParser_describe.ml[1430,92961+25]..[1430,92961+103]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+105]..[1430,92961+155])
                              Pexp_constant PConst_string("Reducing production alternation -> concatenation",(lib/sentenceParser_describe.ml[1430,92961+106]..[1430,92961+154]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+156]..[1430,92961+209])
                              Pexp_constant PConst_string("Reducing production char_class -> CARET char_class1",(lib/sentenceParser_describe.ml[1430,92961+157]..[1430,92961+208]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+210]..[1430,92961+257])
                              Pexp_constant PConst_string("Reducing production char_class -> char_class1",(lib/sentenceParser_describe.ml[1430,92961+211]..[1430,92961+256]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+258]..[1430,92961+311])
                              Pexp_constant PConst_string("Reducing production char_class1 -> Tchar DASH Tchar",(lib/sentenceParser_describe.ml[1430,92961+259]..[1430,92961+310]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+312]..[1430,92961+366])
                              Pexp_constant PConst_string("Reducing production char_class1 -> char_class1 Tchar",(lib/sentenceParser_describe.ml[1430,92961+313]..[1430,92961+365]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+367]..[1430,92961+409])
                              Pexp_constant PConst_string("Reducing production char_class1 -> Tchar",(lib/sentenceParser_describe.ml[1430,92961+368]..[1430,92961+408]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+410]..[1430,92961+469])
                              Pexp_constant PConst_string("Reducing production concatenation -> concatenation factor",(lib/sentenceParser_describe.ml[1430,92961+411]..[1430,92961+468]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+470]..[1430,92961+515])
                              Pexp_constant PConst_string("Reducing production concatenation -> factor",(lib/sentenceParser_describe.ml[1430,92961+471]..[1430,92961+514]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+516]..[1430,92961+557])
                              Pexp_constant PConst_string("Reducing production factor -> term PLUS",(lib/sentenceParser_describe.ml[1430,92961+517]..[1430,92961+556]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+558]..[1430,92961+603])
                              Pexp_constant PConst_string("Reducing production factor -> term QUESTION",(lib/sentenceParser_describe.ml[1430,92961+559]..[1430,92961+602]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+604]..[1430,92961+645])
                              Pexp_constant PConst_string("Reducing production factor -> term STAR",(lib/sentenceParser_describe.ml[1430,92961+605]..[1430,92961+644]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+646]..[1430,92961+682])
                              Pexp_constant PConst_string("Reducing production factor -> term",(lib/sentenceParser_describe.ml[1430,92961+647]..[1430,92961+681]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+683]..[1430,92961+730])
                              Pexp_constant PConst_string("Reducing production grammar -> rules postlude",(lib/sentenceParser_describe.ml[1430,92961+684]..[1430,92961+729]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+731]..[1430,92961+769])
                              Pexp_constant PConst_string("Reducing production list(NEWLINE) ->",(lib/sentenceParser_describe.ml[1430,92961+732]..[1430,92961+768]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+770]..[1430,92961+830])
                              Pexp_constant PConst_string("Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)",(lib/sentenceParser_describe.ml[1430,92961+771]..[1430,92961+829]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+831]..[1430,92961+886])
                              Pexp_constant PConst_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE",(lib/sentenceParser_describe.ml[1430,92961+832]..[1430,92961+885]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+887]..[1430,92961+965])
                              Pexp_constant PConst_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)",(lib/sentenceParser_describe.ml[1430,92961+888]..[1430,92961+964]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+966]..[1430,92961+1017])
                              Pexp_constant PConst_string("Reducing production postlude -> list(NEWLINE) EOF",(lib/sentenceParser_describe.ml[1430,92961+967]..[1430,92961+1016]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1018]..[1430,92961+1058])
                              Pexp_constant PConst_string("Reducing production rhs -> alternation",(lib/sentenceParser_describe.ml[1430,92961+1019]..[1430,92961+1057]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1059]..[1430,92961+1112])
                              Pexp_constant PConst_string("Reducing production rule -> LID COLONCOLONEQUAL rhs",(lib/sentenceParser_describe.ml[1430,92961+1060]..[1430,92961+1111]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1113]..[1430,92961+1177])
                              Pexp_constant PConst_string("Reducing production rules -> rules nonempty_list(NEWLINE) rule",(lib/sentenceParser_describe.ml[1430,92961+1114]..[1430,92961+1176]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1178]..[1430,92961+1236])
                              Pexp_constant PConst_string("Reducing production rules -> nonempty_list(NEWLINE) rule",(lib/sentenceParser_describe.ml[1430,92961+1179]..[1430,92961+1235]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1237]..[1430,92961+1272])
                              Pexp_constant PConst_string("Reducing production rules -> rule",(lib/sentenceParser_describe.ml[1430,92961+1238]..[1430,92961+1271]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1273]..[1430,92961+1334])
                              Pexp_constant PConst_string("Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN",(lib/sentenceParser_describe.ml[1430,92961+1274]..[1430,92961+1333]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1335]..[1430,92961+1375])
                              Pexp_constant PConst_string("Reducing production term -> char_class",(lib/sentenceParser_describe.ml[1430,92961+1336]..[1430,92961+1374]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1376]..[1430,92961+1411])
                              Pexp_constant PConst_string("Reducing production term -> REGEX",(lib/sentenceParser_describe.ml[1430,92961+1377]..[1430,92961+1410]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1412]..[1430,92961+1445])
                              Pexp_constant PConst_string("Reducing production term -> QID",(lib/sentenceParser_describe.ml[1430,92961+1413]..[1430,92961+1444]),None)
                            expression (lib/sentenceParser_describe.ml[1430,92961+1446]..[1430,92961+1479])
                              Pexp_constant PConst_string("Reducing production term -> LID",(lib/sentenceParser_describe.ml[1430,92961+1447]..[1430,92961+1478]),None)
                          ]
                      ]
            ]
        ]
  structure_item (lib/sentenceParser_describe.ml[1432,94450+0]..[1437,94614+5])
    Pstr_module
    "MenhirInterpreter" (lib/sentenceParser_describe.ml[1432,94450+7]..[1432,94450+24])
      module_expr (lib/sentenceParser_describe.ml[1433,94477+2]..[1437,94614+5])
        Pmod_structure
        [
          structure_item (lib/sentenceParser_describe.ml[1434,94486+4]..[1434,94486+68])
            Pstr_module
            "ET" (lib/sentenceParser_describe.ml[1434,94486+11]..[1434,94486+13])
              module_expr (lib/sentenceParser_describe.ml[1434,94486+16]..[1434,94486+68])
                Pmod_apply
                module_expr (lib/sentenceParser_describe.ml[1434,94486+17]..[1434,94486+59])
                  Pmod_ident "MenhirLib.TableInterpreter.MakeEngineTable" (lib/sentenceParser_describe.ml[1434,94486+17]..[1434,94486+59])
                module_expr (lib/sentenceParser_describe.ml[1434,94486+61]..[1434,94486+67])
                  Pmod_ident "Tables" (lib/sentenceParser_describe.ml[1434,94486+61]..[1434,94486+67])
          structure_item (lib/sentenceParser_describe.ml[1435,94555+4]..[1435,94555+43])
            Pstr_module
            "TI" (lib/sentenceParser_describe.ml[1435,94555+11]..[1435,94555+13])
              module_expr (lib/sentenceParser_describe.ml[1435,94555+16]..[1435,94555+43])
                Pmod_apply
                module_expr (lib/sentenceParser_describe.ml[1435,94555+17]..[1435,94555+38])
                  Pmod_ident "MenhirLib.Engine.Make" (lib/sentenceParser_describe.ml[1435,94555+17]..[1435,94555+38])
                module_expr (lib/sentenceParser_describe.ml[1435,94555+40]..[1435,94555+42])
                  Pmod_ident "ET" (lib/sentenceParser_describe.ml[1435,94555+40]..[1435,94555+42])
          structure_item (lib/sentenceParser_describe.ml[1436,94599+4]..[1436,94599+14])
            Pstr_include            module_expr (lib/sentenceParser_describe.ml[1436,94599+12]..[1436,94599+14])
              Pmod_ident "TI" (lib/sentenceParser_describe.ml[1436,94599+12]..[1436,94599+14])
        ]
  structure_item (lib/sentenceParser_describe.ml[1438,94620+0]..[1439,94647+87])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1438,94620+4]..[1438,94620+11])
          Ppat_var "grammar" (lib/sentenceParser_describe.ml[1438,94620+4]..[1438,94620+11])
        expression (lib/sentenceParser_describe.ml[1438,94620+12]..[1439,94647+87]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParser_describe.ml[1438,94620+12]..[1438,94620+17])
            Ppat_var "lexer" (lib/sentenceParser_describe.ml[1438,94620+12]..[1438,94620+17])
          expression (lib/sentenceParser_describe.ml[1438,94620+18]..[1439,94647+87]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/sentenceParser_describe.ml[1438,94620+18]..[1438,94620+24])
              Ppat_var "lexbuf" (lib/sentenceParser_describe.ml[1438,94620+18]..[1438,94620+24])
            expression (lib/sentenceParser_describe.ml[1439,94647+2]..[1439,94647+87])
              Pexp_constraint
              expression (lib/sentenceParser_describe.ml[1439,94647+3]..[1439,94647+61])
                Pexp_apply
                expression (lib/sentenceParser_describe.ml[1439,94647+3]..[1439,94647+12])
                  Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1439,94647+3]..[1439,94647+12])
                [
                  <arg>
                  Nolabel
                    expression (lib/sentenceParser_describe.ml[1439,94647+13]..[1439,94647+61])
                      Pexp_apply
                      expression (lib/sentenceParser_describe.ml[1439,94647+14]..[1439,94647+37])
                        Pexp_ident "MenhirInterpreter.entry" (lib/sentenceParser_describe.ml[1439,94647+14]..[1439,94647+37])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser_describe.ml[1439,94647+38]..[1439,94647+45])
                            Pexp_variant "Legacy"
                            None
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser_describe.ml[1439,94647+46]..[1439,94647+47])
                            Pexp_constant PConst_int (0,None)
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser_describe.ml[1439,94647+48]..[1439,94647+53])
                            Pexp_ident "lexer" (lib/sentenceParser_describe.ml[1439,94647+48]..[1439,94647+53])
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser_describe.ml[1439,94647+54]..[1439,94647+60])
                            Pexp_ident "lexbuf" (lib/sentenceParser_describe.ml[1439,94647+54]..[1439,94647+60])
                      ]
                ]
              core_type (lib/sentenceParser_describe.ml[1439,94647+64]..[1439,94647+86])
                Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser_describe.ml[1439,94647+64]..[1439,94647+86])
                []
    ]
  structure_item (lib/sentenceParser_describe.ml[1440,94735+0]..[1445,94983+5])
    Pstr_module
    "Incremental" (lib/sentenceParser_describe.ml[1440,94735+7]..[1440,94735+18])
      module_expr (lib/sentenceParser_describe.ml[1441,94756+2]..[1445,94983+5])
        Pmod_structure
        [
          structure_item (lib/sentenceParser_describe.ml[1442,94765+4]..[1444,94887+95])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser_describe.ml[1442,94765+8]..[1442,94765+15])
                  Ppat_var "grammar" (lib/sentenceParser_describe.ml[1442,94765+8]..[1442,94765+15])
                expression (lib/sentenceParser_describe.ml[1442,94765+16]..[1444,94887+95]) ghost
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser_describe.ml[1442,94765+16]..[1442,94765+32])
                    Ppat_var "initial_position" (lib/sentenceParser_describe.ml[1442,94765+16]..[1442,94765+32])
                  expression (lib/sentenceParser_describe.ml[1443,94800+6]..[1444,94887+95])
                    Pexp_constraint
                    expression (lib/sentenceParser_describe.ml[1443,94800+7]..[1443,94800+61])
                      Pexp_apply
                      expression (lib/sentenceParser_describe.ml[1443,94800+7]..[1443,94800+16])
                        Pexp_ident "Obj.magic" (lib/sentenceParser_describe.ml[1443,94800+7]..[1443,94800+16])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser_describe.ml[1443,94800+17]..[1443,94800+61])
                            Pexp_apply
                            expression (lib/sentenceParser_describe.ml[1443,94800+18]..[1443,94800+41])
                              Pexp_ident "MenhirInterpreter.start" (lib/sentenceParser_describe.ml[1443,94800+18]..[1443,94800+41])
                            [
                              <arg>
                              Nolabel
                                expression (lib/sentenceParser_describe.ml[1443,94800+42]..[1443,94800+43])
                                  Pexp_constant PConst_int (0,None)
                              <arg>
                              Nolabel
                                expression (lib/sentenceParser_describe.ml[1443,94800+44]..[1443,94800+60])
                                  Pexp_ident "initial_position" (lib/sentenceParser_describe.ml[1443,94800+44]..[1443,94800+60])
                            ]
                      ]
                    core_type (lib/sentenceParser_describe.ml[1443,94800+64]..[1444,94887+94])
                      Ptyp_constr "MenhirInterpreter.checkpoint" (lib/sentenceParser_describe.ml[1444,94887+66]..[1444,94887+94])
                      [
                        core_type (lib/sentenceParser_describe.ml[1443,94800+64]..[1443,94800+86])
                          Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser_describe.ml[1443,94800+64]..[1443,94800+86])
                          []
                      ]
            ]
        ]
  structure_item (lib/sentenceParser_describe.ml[1446,94989+0]..[1446,94989+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1446,94989+4]..[1446,94989+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1446,94989+4]..[1446,94989+6])
          None
        expression (lib/sentenceParser_describe.ml[1446,94989+9]..[1446,94989+52])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1446,94989+9]..[1446,94989+38])
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/sentenceParser_describe.ml[1446,94989+9]..[1446,94989+38])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1446,94989+39]..[1446,94989+52])
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[1446,94989+40]..[1446,94989+51]),None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1447,95042+0]..[1447,95042+52])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1447,95042+4]..[1447,95042+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1447,95042+4]..[1447,95042+6])
          None
        expression (lib/sentenceParser_describe.ml[1447,95042+9]..[1447,95042+52])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1447,95042+9]..[1447,95042+49])
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/sentenceParser_describe.ml[1447,95042+9]..[1447,95042+49])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1447,95042+50]..[1447,95042+52])
                Pexp_construct "()" (lib/sentenceParser_describe.ml[1447,95042+50]..[1447,95042+52])
                None
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1448,95095+0]..[1448,95095+69])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1448,95095+4]..[1448,95095+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1448,95095+4]..[1448,95095+6])
          None
        expression (lib/sentenceParser_describe.ml[1448,95095+9]..[1448,95095+69])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1448,95095+9]..[1448,95095+66])
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/sentenceParser_describe.ml[1448,95095+9]..[1448,95095+66])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1448,95095+67]..[1448,95095+69])
                Pexp_construct "()" (lib/sentenceParser_describe.ml[1448,95095+67]..[1448,95095+69])
                None
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1449,95165+0]..[1450,95174+75])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1449,95165+4]..[1449,95165+6])
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1449,95165+4]..[1449,95165+6])
          None
        expression (lib/sentenceParser_describe.ml[1450,95174+2]..[1450,95174+75])
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1450,95174+2]..[1450,95174+39])
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/sentenceParser_describe.ml[1450,95174+2]..[1450,95174+39])
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1450,95174+40]..[1450,95174+75])
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser_describe.ml[1450,95174+40]..[1450,95174+75])
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          None
        expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          None
        expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                Pexp_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          None
        expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                Pexp_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Ppat_construct "()" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          None
        expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          Pexp_apply
          expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser_describe.ml[1450,95174+75]..[1450,95174+75]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/sentenceParser_describe.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser"
    "sentenceParser_describe.ml"
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/sentenceParser.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "sentenceParser.ml"
let () = MenhirLib.StaticVersion.require_unreleased
module MenhirBasics =
  struct
    exception Error 
    let _eRR : exn = Error
    type token =
      | Tchar of int 
      | STAR 
      | RPAREN 
      | REGEX of string Positions.located 
      | QUESTION 
      | QID of string Positions.located 
      | PLUS 
      | NEWLINE 
      | LPAREN 
      | LID of string Positions.located 
      | EOF 
      | DASH 
      | COLONCOLONEQUAL 
      | CARET 
      | BAR 
  end
include MenhirBasics
open Syntax
module Tables =
  struct
    include MenhirBasics
    let token2terminal : token -> int =
      fun _tok ->
        match _tok with
        | BAR -> 15
        | CARET -> 14
        | COLONCOLONEQUAL -> 13
        | DASH -> 12
        | EOF -> 11
        | LID _ -> 10
        | LPAREN -> 9
        | NEWLINE -> 8
        | PLUS -> 7
        | QID _ -> 6
        | QUESTION -> 5
        | REGEX _ -> 4
        | RPAREN -> 3
        | STAR -> 2
        | Tchar _ -> 1
    and error_terminal = 0
    and token2value : token -> Obj.t =
      fun _tok ->
        match _tok with
        | BAR -> Obj.repr ()
        | CARET -> Obj.repr ()
        | COLONCOLONEQUAL -> Obj.repr ()
        | DASH -> Obj.repr ()
        | EOF -> Obj.repr ()
        | LID _v -> Obj.repr _v
        | LPAREN -> Obj.repr ()
        | NEWLINE -> Obj.repr ()
        | PLUS -> Obj.repr ()
        | QID _v -> Obj.repr _v
        | QUESTION -> Obj.repr ()
        | REGEX _v -> Obj.repr _v
        | RPAREN -> Obj.repr ()
        | STAR -> Obj.repr ()
        | Tchar _v -> Obj.repr _v
    and default_reduction =
      (8,
        "\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001")
    and error =
      (16,
        "\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000")
    and start = 1
    and action =
      ((8,
         "p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000"),
        (8,
          "\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z"))
    and lhs = (4, "\r\220\203\187\170\153\153\135veC\"!\017\017")
    and goto =
      ((8,
         "\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000"),
        (8,
          "\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029"))
    and semantic_action =
      [|((fun _menhir_env ->
            let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
            let { MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    { MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        { MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            { MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack }
                          }
                      }
                  }
              = _menhir_stack in
            let _4 : Syntax.myfactor = Obj.magic _4 in
            let _3 : unit list = Obj.magic _3 in
            let _2 : unit = Obj.magic _2 in
            let _1 : Syntax.myfactor = Obj.magic _1 in
            let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__4_ in
            let _v : Syntax.myfactor = NFactor _1 in
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = (Obj.repr _v);
              MenhirLib.EngineTypes.startp = _startpos;
              MenhirLib.EngineTypes.endp = _endpos;
              MenhirLib.EngineTypes.next = _menhir_stack
            }));((fun _menhir_env ->
                    let _menhir_stack =
                      _menhir_env.MenhirLib.EngineTypes.stack in
                    let { MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack }
                      = _menhir_stack in
                    let _1 : Syntax.myfactor = Obj.magic _1 in
                    let _endpos__0_ =
                      _menhir_stack.MenhirLib.EngineTypes.endp in
                    let _startpos = _startpos__1_ in
                    let _endpos = _endpos__1_ in
                    let _v : Syntax.myfactor =
                      print_endline (Batteries.dump ("DEBUG:alt", _1));
                      NFactor _1 in
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = (Obj.repr _v);
                      MenhirLib.EngineTypes.startp = _startpos;
                      MenhirLib.EngineTypes.endp = _endpos;
                      MenhirLib.EngineTypes.next = _menhir_stack
                    }));((fun _menhir_env ->
                            let _menhir_stack =
                              _menhir_env.MenhirLib.EngineTypes.stack in
                            let { MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_;
                                      MenhirLib.EngineTypes.next =
                                        _menhir_stack
                                      }
                                  }
                              = _menhir_stack in
                            let _2 : Syntax.myfactor = Obj.magic _2 in
                            let _1 : unit = Obj.magic _1 in
                            let _endpos__0_ =
                              _menhir_stack.MenhirLib.EngineTypes.endp in
                            let _startpos = _startpos__1_ in
                            let _endpos = _endpos__2_ in
                            let _v : Syntax.myfactor =
                              print_endline
                                (Batteries.dump ("DEBUG:ccrs", _2));
                              NFactor _2 in
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = (Obj.repr _v);
                              MenhirLib.EngineTypes.startp = _startpos;
                              MenhirLib.EngineTypes.endp = _endpos;
                              MenhirLib.EngineTypes.next = _menhir_stack
                            }));((fun _menhir_env ->
                                    let _menhir_stack =
                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                    let {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack
                                          }
                                      = _menhir_stack in
                                    let _1 : Syntax.myfactor = Obj.magic _1 in
                                    let _endpos__0_ =
                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                    let _startpos = _startpos__1_ in
                                    let _endpos = _endpos__1_ in
                                    let _v : Syntax.myfactor =
                                      print_endline
                                        (Batteries.dump ("DEBUG:cc2rs", _1));
                                      CharClass in
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv =
                                        (Obj.repr _v);
                                      MenhirLib.EngineTypes.startp =
                                        _startpos;
                                      MenhirLib.EngineTypes.endp = _endpos;
                                      MenhirLib.EngineTypes.next =
                                        _menhir_stack
                                    }));((fun _menhir_env ->
                                            let _menhir_stack =
                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                            let {
                                                  MenhirLib.EngineTypes.state
                                                    = _;
                                                  MenhirLib.EngineTypes.semv
                                                    = _3;
                                                  MenhirLib.EngineTypes.startp
                                                    = _startpos__3_;
                                                  MenhirLib.EngineTypes.endp
                                                    = _endpos__3_;
                                                  MenhirLib.EngineTypes.next
                                                    =
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _;
                                                      MenhirLib.EngineTypes.semv
                                                        = _2;
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos__2_;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos__2_;
                                                      MenhirLib.EngineTypes.next
                                                        =
                                                        {
                                                          MenhirLib.EngineTypes.state
                                                            = _menhir_s;
                                                          MenhirLib.EngineTypes.semv
                                                            = _1;
                                                          MenhirLib.EngineTypes.startp
                                                            = _startpos__1_;
                                                          MenhirLib.EngineTypes.endp
                                                            = _endpos__1_;
                                                          MenhirLib.EngineTypes.next
                                                            = _menhir_stack
                                                          }
                                                      }
                                                  }
                                              = _menhir_stack in
                                            let _3 : int = Obj.magic _3 in
                                            let _2 : unit = Obj.magic _2 in
                                            let _1 : int = Obj.magic _1 in
                                            let _endpos__0_ =
                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                            let _startpos = _startpos__1_ in
                                            let _endpos = _endpos__3_ in
                                            let _v : Syntax.myfactor =
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:cc3rs", _1, _2));
                                              CharInt _1 in
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv =
                                                (Obj.repr _v);
                                              MenhirLib.EngineTypes.startp =
                                                _startpos;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack
                                            }));((fun _menhir_env ->
                                                    let _menhir_stack =
                                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                                    let {
                                                          MenhirLib.EngineTypes.state
                                                            = _;
                                                          MenhirLib.EngineTypes.semv
                                                            = _2;
                                                          MenhirLib.EngineTypes.startp
                                                            = _startpos__2_;
                                                          MenhirLib.EngineTypes.endp
                                                            = _endpos__2_;
                                                          MenhirLib.EngineTypes.next
                                                            =
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                = _1;
                                                              MenhirLib.EngineTypes.startp
                                                                =
                                                                _startpos__1_;
                                                              MenhirLib.EngineTypes.endp
                                                                = _endpos__1_;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                              }
                                                          }
                                                      = _menhir_stack in
                                                    let _2 : int =
                                                      Obj.magic _2 in
                                                    let _1 : Syntax.myfactor
                                                      = Obj.magic _1 in
                                                    let _endpos__0_ =
                                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                                    let _startpos =
                                                      _startpos__1_ in
                                                    let _endpos = _endpos__2_ in
                                                    let _v : Syntax.myfactor
                                                      =
                                                      print_endline
                                                        (Batteries.dump
                                                           ("DEBUG:cc4rs",
                                                             _1));
                                                      NFactor _1 in
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _menhir_s;
                                                      MenhirLib.EngineTypes.semv
                                                        = (Obj.repr _v);
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos;
                                                      MenhirLib.EngineTypes.next
                                                        = _menhir_stack
                                                    }));((fun _menhir_env ->
                                                            let _menhir_stack
                                                              =
                                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                                            let {
                                                                  MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                  MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                  MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                  MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                  MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }
                                                              = _menhir_stack in
                                                            let _1 : 
                                                              int =
                                                              Obj.magic _1 in
                                                            let _endpos__0_ =
                                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                                            let _startpos =
                                                              _startpos__1_ in
                                                            let _endpos =
                                                              _endpos__1_ in
                                                            let _v :
                                                              Syntax.myfactor
                                                              =
                                                              print_endline
                                                                (Batteries.dump
                                                                   ("DEBUG:cc5rs",
                                                                    _1));
                                                              CharInt _1 in
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                =
                                                                (Obj.repr _v);
                                                              MenhirLib.EngineTypes.startp
                                                                = _startpos;
                                                              MenhirLib.EngineTypes.endp
                                                                = _endpos;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                            }));((fun
                                                                    _menhir_env
                                                                    ->
                                                                    let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                    let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                    let _2 :
                                                                    Syntax.myfactor
                                                                    =
                                                                    Obj.magic
                                                                    _2 in
                                                                    let _1 :
                                                                    Syntax.myfactor
                                                                    =
                                                                    Obj.magic
                                                                    _1 in
                                                                    let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                    let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                    let _endpos
                                                                    =
                                                                    _endpos__2_ in
                                                                    let _v :
                                                                    Syntax.myfactor
                                                                    =
                                                                    print_endline
                                                                    (Batteries.dump
                                                                    ("DEBUG:concat1",
                                                                    _1));
                                                                    NFactor
                                                                    _1 in
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let _1 : Syntax.myfactor = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__1_ in
          let _v : Syntax.myfactor =
            print_endline (Batteries.dump ("DEBUG:concat2", _1)); NFactor _1 in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let _1_inlined1 : unit = Obj.magic _1_inlined1 in
                  let _1 : Syntax.myfactor = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_inlined1_ in
                  let _v : Syntax.myfactor =
                    let _2 =
                      let _1 = _1_inlined1 in
                      let _1 =
                        print_endline (Batteries.dump ("DEBUG:plus", _1));
                        Plus in
                      print_endline (Batteries.dump ("DEBUG:mod", _1));
                      NFactor _1 in
                    let _1 =
                      print_endline (Batteries.dump ("DEBUG:termfactor", _1));
                      NFactor _1 in
                    NFactor _1 in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = _1_inlined1;
                                MenhirLib.EngineTypes.startp =
                                  _startpos__1_inlined1_;
                                MenhirLib.EngineTypes.endp =
                                  _endpos__1_inlined1_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = _1;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos__1_;
                                    MenhirLib.EngineTypes.endp = _endpos__1_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let _1_inlined1 : unit = Obj.magic _1_inlined1 in
                          let _1 : Syntax.myfactor = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__1_inlined1_ in
                          let _v : Syntax.myfactor =
                            let _2 =
                              let _1 = _1_inlined1 in
                              let _1 =
                                print_endline
                                  (Batteries.dump ("DEBUG:quest", _1));
                                Question in
                              print_endline
                                (Batteries.dump ("DEBUG:quest", _1));
                              NFactor _1 in
                            let _1 =
                              print_endline
                                (Batteries.dump ("DEBUG:termfactor", _1));
                              NFactor _1 in
                            NFactor _1 in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv =
                                          _1_inlined1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_inlined1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_inlined1_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = _1;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__1_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__1_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let _1_inlined1 : unit =
                                    Obj.magic _1_inlined1 in
                                  let _1 : Syntax.myfactor = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_inlined1_ in
                                  let _v : Syntax.myfactor =
                                    let _2 =
                                      let _1 = Star in
                                      print_endline
                                        (Batteries.dump ("DEBUG:star", _1));
                                      NFactor _1 in
                                    let _1 =
                                      print_endline
                                        (Batteries.dump
                                           ("DEBUG:termfactor", _1));
                                      NFactor _1 in
                                    NFactor _1 in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : Syntax.myfactor =
                                            Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v : Syntax.myfactor =
                                            let _1 =
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:termfactor", _1));
                                              NFactor _1 in
                                            NFactor _1 in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _2;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__2_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__2_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = rs;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos_rs_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos_rs_;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let _2 : unit =
                                                    Obj.magic _2 in
                                                  let rs : Syntax.myfactor =
                                                    Obj.magic rs in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_rs_ in
                                                  let _endpos = _endpos__2_ in
                                                  let _v :
                                                    Syntax.partial_grammar =
                                                    print_endline
                                                      (Batteries.dump
                                                         ("DEBUG:grammar",
                                                           rs, _2));
                                                    {
                                                      pg_filename = "";
                                                      pg_rules = []
                                                    } in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let _menhir_s =
                                                            _menhir_env.MenhirLib.EngineTypes.current in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _endpos =
                                                            _startpos in
                                                          let _v : unit list
                                                            = [] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    unit list
                                                                    =
                                                                    Obj.magic
                                                                    xs in
                                                                  let x :
                                                                    unit =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    unit list
                                                                    = x :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let x : unit = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos_x_ in
          let _v : unit list = [x] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x;
                            MenhirLib.EngineTypes.startp = _startpos_x_;
                            MenhirLib.EngineTypes.endp = _endpos_x_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let xs : unit list = Obj.magic xs in
                  let x : unit = Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_xs_ in
                  let _v : unit list = x :: xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = _2;
                                MenhirLib.EngineTypes.startp = _startpos__2_;
                                MenhirLib.EngineTypes.endp = _endpos__2_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = _1;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos__1_;
                                    MenhirLib.EngineTypes.endp = _endpos__1_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let _2 : unit = Obj.magic _2 in
                          let _1 : unit list = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__2_ in
                          let _v : unit =
                            print_endline (Batteries.dump "DEBUG:DONE") in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let _1 : Syntax.myfactor = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_ in
                                  let _v : Syntax.myfactor =
                                    print_endline
                                      (Batteries.dump ("DEBUG:rhs", _1));
                                    NFactor _1 in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _;
                                                MenhirLib.EngineTypes.semv =
                                                  branches;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_branches_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_branches_;
                                                MenhirLib.EngineTypes.next =
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _;
                                                    MenhirLib.EngineTypes.semv
                                                      = _2;
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos__2_;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos__2_;
                                                    MenhirLib.EngineTypes.next
                                                      =
                                                      {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = symbol;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_symbol_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_symbol_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    }
                                                }
                                            = _menhir_stack in
                                          let branches : Syntax.myfactor =
                                            Obj.magic branches in
                                          let _2 : unit = Obj.magic _2 in
                                          let symbol :
                                            string Positions.located =
                                            Obj.magic symbol in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_symbol_ in
                                          let _endpos = _endpos_branches_ in
                                          let _v : Syntax.parameterized_rule
                                            =
                                            print_endline
                                              (Batteries.dump
                                                 ("DEBUG:rule", symbol,
                                                   branches));
                                            {
                                              pr_nt =
                                                (Positions.value symbol);
                                              pr_positions =
                                                [Positions.position symbol];
                                              pr_branches = []
                                            } in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _3;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__3_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__3_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _2;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__2_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__2_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let _3 :
                                                    Syntax.parameterized_rule
                                                    = Obj.magic _3 in
                                                  let _2 : unit list =
                                                    Obj.magic _2 in
                                                  let _1 : Syntax.myfactor =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__3_ in
                                                  let _v : Syntax.myfactor =
                                                    print_endline
                                                      (Batteries.dump
                                                         ("DEBUG:OLDRULE1",
                                                           _3));
                                                    Rule _3 in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _2;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__2_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__2_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                }
                                                            = _menhir_stack in
                                                          let _2 :
                                                            Syntax.parameterized_rule
                                                            = Obj.magic _2 in
                                                          let _1 : unit list
                                                            = Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__2_ in
                                                          let _v :
                                                            Syntax.myfactor =
                                                            print_endline
                                                              (Batteries.dump
                                                                 ("DEBUG:OLDRULE",
                                                                   _1));
                                                            Rule _2 in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let _1 :
                                                                    Syntax.parameterized_rule
                                                                    =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                  let _v :
                                                                    Syntax.myfactor
                                                                    =
                                                                    print_endline
                                                                    (Batteries.dump
                                                                    ("DEBUG:OLDRULE",
                                                                    _1));
                                                                    Rule _1 in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    }
                }
            = _menhir_stack in
          let _4 : unit = Obj.magic _4 in
          let _3 : Syntax.myfactor = Obj.magic _3 in
          let _2 : unit list = Obj.magic _2 in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__4_ in
          let _v : Syntax.myfactor =
            let _1 =
              let _1 =
                print_endline (Batteries.dump ("DEBUG:rhs", _3)); NFactor _3 in
              print_endline (Batteries.dump ("DEBUG:cterm/group", _1));
              NFactor _1 in
            print_endline (Batteries.dump ("DEBUG:term/cterms", _1));
            NFactor _1 in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let _1 : Syntax.myfactor = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_ in
                  let _v : Syntax.myfactor =
                    let _1 =
                      let _1 =
                        print_endline (Batteries.dump ("DEBUG:class1a", _1));
                        NFactor _1 in
                      print_endline
                        (Batteries.dump ("DEBUG:cterm/class", _1));
                      NFactor _1 in
                    print_endline (Batteries.dump ("DEBUG:term/cterms", _1));
                    NFactor _1 in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = _1;
                                MenhirLib.EngineTypes.startp = _startpos__1_;
                                MenhirLib.EngineTypes.endp = _endpos__1_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let _1 : string Positions.located = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__1_ in
                          let _v : Syntax.myfactor =
                            let _1 =
                              let _1 =
                                print_endline
                                  (Batteries.dump ("DEBUG:class", _1));
                                SFactor _1 in
                              print_endline
                                (Batteries.dump ("DEBUG:cterm/class", _1));
                              NFactor _1 in
                            print_endline
                              (Batteries.dump ("DEBUG:term/cterms", _1));
                            NFactor _1 in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let _1 : string Positions.located =
                                    Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_ in
                                  let _v : Syntax.myfactor =
                                    let _1 =
                                      let _1 =
                                        print_endline
                                          (Batteries.dump ("DEBUG:quid", _1));
                                        _1 in
                                      print_endline
                                        (Batteries.dump
                                           ("DEBUG:sterm/quid", _1));
                                      SFactor _1 in
                                    print_endline
                                      (Batteries.dump
                                         ("DEBUG:term/sterm", _1));
                                    NFactor _1 in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : string Positions.located =
                                            Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v : Syntax.myfactor =
                                            let _1 =
                                              let _1 =
                                                print_endline
                                                  (Batteries.dump
                                                     ("DEBUG:lid", _1));
                                                _1 in
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:sterm/lid", _1));
                                              SFactor _1 in
                                            print_endline
                                              (Batteries.dump
                                                 ("DEBUG:term/sterm", _1));
                                            NFactor _1 in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }))|]
    and trace =
      Some
        ([|"error";"Tchar";"STAR";"RPAREN";"REGEX";"QUESTION";"QID";"PLUS";"NEWLINE";"LPAREN";"LID";"EOF";"DASH";"COLONCOLONEQUAL";"CARET";"BAR";"#"|],
          [|"Accepting";"Reducing production alternation -> alternation BAR list(NEWLINE) concatenation";"Reducing production alternation -> concatenation";"Reducing production char_class -> CARET char_class1";"Reducing production char_class -> char_class1";"Reducing production char_class1 -> Tchar DASH Tchar";"Reducing production char_class1 -> char_class1 Tchar";"Reducing production char_class1 -> Tchar";"Reducing production concatenation -> concatenation factor";"Reducing production concatenation -> factor";"Reducing production factor -> term PLUS";"Reducing production factor -> term QUESTION";"Reducing production factor -> term STAR";"Reducing production factor -> term";"Reducing production grammar -> rules postlude";"Reducing production list(NEWLINE) ->";"Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)";"Reducing production nonempty_list(NEWLINE) -> NEWLINE";"Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)";"Reducing production postlude -> list(NEWLINE) EOF";"Reducing production rhs -> alternation";"Reducing production rule -> LID COLONCOLONEQUAL rhs";"Reducing production rules -> rules nonempty_list(NEWLINE) rule";"Reducing production rules -> nonempty_list(NEWLINE) rule";"Reducing production rules -> rule";"Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN";"Reducing production term -> char_class";"Reducing production term -> REGEX";"Reducing production term -> QID";"Reducing production term -> LID"|])
  end
module MenhirInterpreter =
  struct
    module ET = (MenhirLib.TableInterpreter.MakeEngineTable)(Tables)
    module TI = (MenhirLib.Engine.Make)(ET)
    include TI
  end
let grammar lexer lexbuf =
  (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : Syntax.partial_grammar)
module Incremental =
  struct
    let grammar initial_position =
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : Syntax.partial_grammar
                                                                  MenhirInterpreter.checkpoint)
  end
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
