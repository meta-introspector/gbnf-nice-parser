[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Numbering.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("lib/Numbering.ml",(lib/Numbering.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Ppat_construct "()" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          None
        expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Numbering.ml[13,893+0]..[13,893+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/Numbering.ml[13,893+0]..[13,893+0]) ghost
                Pexp_constant PConst_string("Numbering.ml",(lib/Numbering.ml[13,893+0]..[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..[13,893+9])
    Pstr_open Fresh
    module_expr (lib/Numbering.ml[13,893+5]..[13,893+9])
      Pmod_ident "Sigs" (lib/Numbering.ml[13,893+5]..[13,893+9])
  structure_item (lib/Numbering.ml[15,904+0]..[16,918+49])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[15,904+4]..[15,904+9])
          Ppat_var "force" (lib/Numbering.ml[15,904+4]..[15,904+9])
        expression (lib/Numbering.ml[15,904+10]..[16,918+49]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (lib/Numbering.ml[15,904+10]..[15,904+11])
            Ppat_var "o" (lib/Numbering.ml[15,904+10]..[15,904+11])
          expression (lib/Numbering.ml[16,918+2]..[16,918+49])
            Pexp_match
            expression (lib/Numbering.ml[16,918+8]..[16,918+9])
              Pexp_ident "o" (lib/Numbering.ml[16,918+8]..[16,918+9])
            [
              <case>
                pattern (lib/Numbering.ml[16,918+15]..[16,918+21])
                  Ppat_construct "Some" (lib/Numbering.ml[16,918+15]..[16,918+19])
                  Some
                    []
                    pattern (lib/Numbering.ml[16,918+20]..[16,918+21])
                      Ppat_var "x" (lib/Numbering.ml[16,918+20]..[16,918+21])
                expression (lib/Numbering.ml[16,918+25]..[16,918+26])
                  Pexp_ident "x" (lib/Numbering.ml[16,918+25]..[16,918+26])
              <case>
                pattern (lib/Numbering.ml[16,918+29]..[16,918+33])
                  Ppat_construct "None" (lib/Numbering.ml[16,918+29]..[16,918+33])
                  None
                expression (lib/Numbering.ml[16,918+37]..[16,918+49])
                  Pexp_assert
                  expression (lib/Numbering.ml[16,918+44]..[16,918+49])
                    Pexp_construct "false" (lib/Numbering.ml[16,918+44]..[16,918+49])
                    None
            ]
    ]
  structure_item (lib/Numbering.ml[18,969+0]..[94,2907+3])
    Pstr_module
    "Make" (lib/Numbering.ml[18,969+7]..[18,969+11])
      module_expr (lib/Numbering.ml[18,969+12]..[94,2907+3])
        Pmod_functor "M" (lib/Numbering.ml[18,969+13]..[18,969+14])
        module_type (lib/Numbering.ml[18,969+17]..[18,969+32])
          Pmty_ident "IMPERATIVE_MAPS" (lib/Numbering.ml[18,969+17]..[18,969+32])
        module_expr (lib/Numbering.ml[18,969+36]..[94,2907+3])
          Pmod_structure
          [
            structure_item (lib/Numbering.ml[20,1013+2]..[20,1013+16])
              Pstr_type Rec
              [
                type_declaration "t" (lib/Numbering.ml[20,1013+7]..[20,1013+8]) (lib/Numbering.ml[20,1013+2]..[20,1013+16])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ptype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Numbering.ml[20,1013+11]..[20,1013+16])
                        Ptyp_constr "M.key" (lib/Numbering.ml[20,1013+11]..[20,1013+16])
                        []
              ]
            structure_item (lib/Numbering.ml[24,1078+2]..[24,1078+13])
              Pstr_open Fresh
              module_expr (lib/Numbering.ml[24,1078+7]..[24,1078+13])
                Pmod_ident "Gensym" (lib/Numbering.ml[24,1078+7]..[24,1078+13])
            structure_item (lib/Numbering.ml[26,1093+2]..[27,1103+15])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[26,1093+6]..[26,1093+7])
                    Ppat_var "g" (lib/Numbering.ml[26,1093+6]..[26,1093+7])
                  expression (lib/Numbering.ml[27,1103+4]..[27,1103+15])
                    Pexp_apply
                    expression (lib/Numbering.ml[27,1103+4]..[27,1103+13])
                      Pexp_ident "generator" (lib/Numbering.ml[27,1103+4]..[27,1103+13])
                    [
                      <arg>
                      Nolabel
                        expression (lib/Numbering.ml[27,1103+13]..[27,1103+15])
                          Pexp_construct "()" (lib/Numbering.ml[27,1103+13]..[27,1103+15])
                          None
                    ]
              ]
            structure_item (lib/Numbering.ml[29,1120+2]..[30,1139+13])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[29,1120+6]..[29,1120+13])
                    Ppat_var "current" (lib/Numbering.ml[29,1120+6]..[29,1120+13])
                  expression (lib/Numbering.ml[29,1120+14]..[30,1139+13]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Numbering.ml[29,1120+14]..[29,1120+16])
                      Ppat_construct "()" (lib/Numbering.ml[29,1120+14]..[29,1120+16])
                      None
                    expression (lib/Numbering.ml[30,1139+4]..[30,1139+13])
                      Pexp_apply
                      expression (lib/Numbering.ml[30,1139+4]..[30,1139+11])
                        Pexp_ident "current" (lib/Numbering.ml[30,1139+4]..[30,1139+11])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Numbering.ml[30,1139+12]..[30,1139+13])
                            Pexp_ident "g" (lib/Numbering.ml[30,1139+12]..[30,1139+13])
                      ]
              ]
            structure_item (lib/Numbering.ml[37,1428+2]..[39,1516+49])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[37,1428+6]..[37,1428+44])
                    Ppat_tuple
                    [
                      pattern (lib/Numbering.ml[37,1428+6]..[37,1428+25])
                        Ppat_constraint
                        pattern (lib/Numbering.ml[37,1428+7]..[37,1428+13])
                          Ppat_var "encode" (lib/Numbering.ml[37,1428+7]..[37,1428+13])
                        core_type (lib/Numbering.ml[37,1428+16]..[37,1428+24])
                          Ptyp_arrow
                          Nolabel
                          core_type (lib/Numbering.ml[37,1428+16]..[37,1428+17])
                            Ptyp_constr "t" (lib/Numbering.ml[37,1428+16]..[37,1428+17])
                            []
                          core_type (lib/Numbering.ml[37,1428+21]..[37,1428+24])
                            Ptyp_constr "int" (lib/Numbering.ml[37,1428+21]..[37,1428+24])
                            []
                      pattern (lib/Numbering.ml[37,1428+27]..[37,1428+44])
                        Ppat_constraint
                        pattern (lib/Numbering.ml[37,1428+28]..[37,1428+33])
                          Ppat_var "table" (lib/Numbering.ml[37,1428+28]..[37,1428+33])
                        core_type (lib/Numbering.ml[37,1428+36]..[37,1428+43])
                          Ptyp_constr "M.t" (lib/Numbering.ml[37,1428+40]..[37,1428+43])
                          [
                            core_type (lib/Numbering.ml[37,1428+36]..[37,1428+39])
                              Ptyp_constr "int" (lib/Numbering.ml[37,1428+36]..[37,1428+39])
                              []
                          ]
                    ]
                  expression (lib/Numbering.ml[38,1475+4]..[39,1516+49])
                    Pexp_letmodule "Memo" (lib/Numbering.ml[38,1475+15]..[38,1475+19])
                    module_expr (lib/Numbering.ml[38,1475+22]..[38,1475+37])
                      Pmod_apply
                      module_expr (lib/Numbering.ml[38,1475+22]..[38,1475+34])
                        Pmod_ident "Memoize.Make" (lib/Numbering.ml[38,1475+22]..[38,1475+34])
                      module_expr (lib/Numbering.ml[38,1475+35]..[38,1475+36])
                        Pmod_ident "M" (lib/Numbering.ml[38,1475+35]..[38,1475+36])
                    expression (lib/Numbering.ml[39,1516+4]..[39,1516+49])
                      Pexp_apply
                      expression (lib/Numbering.ml[39,1516+4]..[39,1516+24])
                        Pexp_ident "Memo.visibly_memoize" (lib/Numbering.ml[39,1516+4]..[39,1516+24])
                      [
                        <arg>
                        Nolabel
                          expression (lib/Numbering.ml[39,1516+25]..[39,1516+49])
                            Pexp_fun
                            Nolabel
                            None
                            pattern (lib/Numbering.ml[39,1516+30]..[39,1516+37])
                              Ppat_constraint
                              pattern (lib/Numbering.ml[39,1516+31]..[39,1516+32])
                                Ppat_any
                              core_type (lib/Numbering.ml[39,1516+35]..[39,1516+36])
                                Ptyp_constr "t" (lib/Numbering.ml[39,1516+35]..[39,1516+36])
                                []
                            expression (lib/Numbering.ml[39,1516+41]..[39,1516+48])
                              Pexp_apply
                              expression (lib/Numbering.ml[39,1516+41]..[39,1516+46])
                                Pexp_ident "fresh" (lib/Numbering.ml[39,1516+41]..[39,1516+46])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[39,1516+47]..[39,1516+48])
                                    Pexp_ident "g" (lib/Numbering.ml[39,1516+47]..[39,1516+48])
                              ]
                      ]
              ]
            structure_item (lib/Numbering.ml[43,1628+2]..[49,1819+11])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[43,1628+6]..[43,1628+22])
                    Ppat_var "has_been_encoded" (lib/Numbering.ml[43,1628+6]..[43,1628+22])
                  expression (lib/Numbering.ml[43,1628+23]..[49,1819+11]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Numbering.ml[43,1628+23]..[43,1628+30])
                      Ppat_constraint
                      pattern (lib/Numbering.ml[43,1628+24]..[43,1628+25])
                        Ppat_var "x" (lib/Numbering.ml[43,1628+24]..[43,1628+25])
                      core_type (lib/Numbering.ml[43,1628+28]..[43,1628+29])
                        Ptyp_constr "t" (lib/Numbering.ml[43,1628+28]..[43,1628+29])
                        []
                    expression (lib/Numbering.ml[43,1628+31]..[49,1819+11])
                      Pexp_constraint
                      expression (lib/Numbering.ml[45,1746+4]..[49,1819+11])
                        Pexp_try
                        expression (lib/Numbering.ml[46,1754+6]..[47,1786+10])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/Numbering.ml[46,1754+10]..[46,1754+11])
                                Ppat_any
                              expression (lib/Numbering.ml[46,1754+14]..[46,1754+28])
                                Pexp_apply
                                expression (lib/Numbering.ml[46,1754+14]..[46,1754+20])
                                  Pexp_ident "M.find" (lib/Numbering.ml[46,1754+14]..[46,1754+20])
                                [
                                  <arg>
                                  Nolabel
                                    expression (lib/Numbering.ml[46,1754+21]..[46,1754+22])
                                      Pexp_ident "x" (lib/Numbering.ml[46,1754+21]..[46,1754+22])
                                  <arg>
                                  Nolabel
                                    expression (lib/Numbering.ml[46,1754+23]..[46,1754+28])
                                      Pexp_ident "table" (lib/Numbering.ml[46,1754+23]..[46,1754+28])
                                ]
                          ]
                          expression (lib/Numbering.ml[47,1786+6]..[47,1786+10])
                            Pexp_construct "true" (lib/Numbering.ml[47,1786+6]..[47,1786+10])
                            None
                        [
                          <case>
                            pattern (lib/Numbering.ml[48,1797+9]..[48,1797+18])
                              Ppat_construct "Not_found" (lib/Numbering.ml[48,1797+9]..[48,1797+18])
                              None
                            expression (lib/Numbering.ml[49,1819+6]..[49,1819+11])
                              Pexp_construct "false" (lib/Numbering.ml[49,1819+6]..[49,1819+11])
                              None
                        ]
                      core_type (lib/Numbering.ml[43,1628+33]..[43,1628+37])
                        Ptyp_constr "bool" (lib/Numbering.ml[43,1628+33]..[43,1628+37])
                        []
              ]
            structure_item (lib/Numbering.ml[53,1891+2]..[59,2073+27])
              Pstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[53,1891+6]..[53,1891+21])
                    Ppat_var "reverse_mapping" (lib/Numbering.ml[53,1891+6]..[53,1891+21])
                  expression (lib/Numbering.ml[53,1891+22]..[59,2073+27]) ghost
                    Pexp_fun
                    Nolabel
                    None
                    pattern (lib/Numbering.ml[53,1891+22]..[53,1891+24])
                      Ppat_construct "()" (lib/Numbering.ml[53,1891+22]..[53,1891+24])
                      None
                    expression (lib/Numbering.ml[53,1891+25]..[59,2073+27])
                      Pexp_constraint
                      expression (lib/Numbering.ml[54,1928+4]..[59,2073+27])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[54,1928+8]..[54,1928+9])
                              Ppat_var "n" (lib/Numbering.ml[54,1928+8]..[54,1928+9])
                            expression (lib/Numbering.ml[54,1928+12]..[54,1928+21])
                              Pexp_apply
                              expression (lib/Numbering.ml[54,1928+12]..[54,1928+19])
                                Pexp_ident "current" (lib/Numbering.ml[54,1928+12]..[54,1928+19])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[54,1928+19]..[54,1928+21])
                                    Pexp_construct "()" (lib/Numbering.ml[54,1928+19]..[54,1928+21])
                                    None
                              ]
                        ]
                        expression (lib/Numbering.ml[55,1953+4]..[59,2073+27])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/Numbering.ml[55,1953+8]..[55,1953+32]) ghost
                                Ppat_constraint
                                pattern (lib/Numbering.ml[55,1953+8]..[55,1953+15])
                                  Ppat_var "reverse" (lib/Numbering.ml[55,1953+8]..[55,1953+15])
                                core_type (lib/Numbering.ml[55,1953+18]..[55,1953+32]) ghost
                                  Ptyp_poly
                                  core_type (lib/Numbering.ml[55,1953+18]..[55,1953+32])
                                    Ptyp_constr "array" (lib/Numbering.ml[55,1953+27]..[55,1953+32])
                                    [
                                      core_type (lib/Numbering.ml[55,1953+18]..[55,1953+26])
                                        Ptyp_constr "option" (lib/Numbering.ml[55,1953+20]..[55,1953+26])
                                        [
                                          core_type (lib/Numbering.ml[55,1953+18]..[55,1953+19])
                                            Ptyp_constr "t" (lib/Numbering.ml[55,1953+18]..[55,1953+19])
                                            []
                                        ]
                                    ]
                              expression (lib/Numbering.ml[55,1953+8]..[55,1953+52])
                                Pexp_constraint
                                expression (lib/Numbering.ml[55,1953+35]..[55,1953+52])
                                  Pexp_apply
                                  expression (lib/Numbering.ml[55,1953+35]..[55,1953+45])
                                    Pexp_ident "Array.make" (lib/Numbering.ml[55,1953+35]..[55,1953+45])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[55,1953+46]..[55,1953+47])
                                        Pexp_ident "n" (lib/Numbering.ml[55,1953+46]..[55,1953+47])
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[55,1953+48]..[55,1953+52])
                                        Pexp_construct "None" (lib/Numbering.ml[55,1953+48]..[55,1953+52])
                                        None
                                  ]
                                core_type (lib/Numbering.ml[55,1953+18]..[55,1953+32])
                                  Ptyp_constr "array" (lib/Numbering.ml[55,1953+27]..[55,1953+32])
                                  [
                                    core_type (lib/Numbering.ml[55,1953+18]..[55,1953+26])
                                      Ptyp_constr "option" (lib/Numbering.ml[55,1953+20]..[55,1953+26])
                                      [
                                        core_type (lib/Numbering.ml[55,1953+18]..[55,1953+19])
                                          Ptyp_constr "t" (lib/Numbering.ml[55,1953+18]..[55,1953+19])
                                          []
                                      ]
                                  ]
                          ]
                          expression (lib/Numbering.ml[56,2009+4]..[59,2073+27])
                            Pexp_sequence
                            expression (lib/Numbering.ml[56,2009+4]..[58,2060+11])
                              Pexp_apply
                              expression (lib/Numbering.ml[56,2009+4]..[56,2009+10])
                                Pexp_ident "M.iter" (lib/Numbering.ml[56,2009+4]..[56,2009+10])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[56,2009+11]..[58,2060+5])
                                    Pexp_fun
                                    Nolabel
                                    None
                                    pattern (lib/Numbering.ml[56,2009+16]..[56,2009+17])
                                      Ppat_var "x" (lib/Numbering.ml[56,2009+16]..[56,2009+17])
                                    expression (lib/Numbering.ml[56,2009+18]..[57,2032+27]) ghost
                                      Pexp_fun
                                      Nolabel
                                      None
                                      pattern (lib/Numbering.ml[56,2009+18]..[56,2009+19])
                                        Ppat_var "i" (lib/Numbering.ml[56,2009+18]..[56,2009+19])
                                      expression (lib/Numbering.ml[57,2032+6]..[57,2032+27])
                                        Pexp_apply
                                        expression (lib/Numbering.ml[57,2032+6]..[57,2032+27]) ghost
                                          Pexp_ident "Array.set" (lib/Numbering.ml[57,2032+6]..[57,2032+27]) ghost
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[57,2032+6]..[57,2032+13])
                                              Pexp_ident "reverse" (lib/Numbering.ml[57,2032+6]..[57,2032+13])
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[57,2032+15]..[57,2032+16])
                                              Pexp_ident "i" (lib/Numbering.ml[57,2032+15]..[57,2032+16])
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[57,2032+21]..[57,2032+27])
                                              Pexp_construct "Some" (lib/Numbering.ml[57,2032+21]..[57,2032+25])
                                              Some
                                                expression (lib/Numbering.ml[57,2032+26]..[57,2032+27])
                                                  Pexp_ident "x" (lib/Numbering.ml[57,2032+26]..[57,2032+27])
                                        ]
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[58,2060+6]..[58,2060+11])
                                    Pexp_ident "table" (lib/Numbering.ml[58,2060+6]..[58,2060+11])
                              ]
                            expression (lib/Numbering.ml[59,2073+4]..[59,2073+27])
                              Pexp_apply
                              expression (lib/Numbering.ml[59,2073+4]..[59,2073+13])
                                Pexp_ident "Array.map" (lib/Numbering.ml[59,2073+4]..[59,2073+13])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[59,2073+14]..[59,2073+19])
                                    Pexp_ident "force" (lib/Numbering.ml[59,2073+14]..[59,2073+19])
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[59,2073+20]..[59,2073+27])
                                    Pexp_ident "reverse" (lib/Numbering.ml[59,2073+20]..[59,2073+27])
                              ]
                      core_type (lib/Numbering.ml[53,1891+27]..[53,1891+34])
                        Ptyp_constr "array" (lib/Numbering.ml[53,1891+29]..[53,1891+34])
                        [
                          core_type (lib/Numbering.ml[53,1891+27]..[53,1891+28])
                            Ptyp_constr "t" (lib/Numbering.ml[53,1891+27]..[53,1891+28])
                            []
                        ]
              ]
            structure_item (lib/Numbering.ml[61,2102+2]..[92,2900+5])
              Pstr_module
              "Done" (lib/Numbering.ml[61,2102+9]..[61,2102+13])
                module_expr (lib/Numbering.ml[61,2102+14]..[92,2900+5])
                  Pmod_functor ()
                  module_expr (lib/Numbering.ml[61,2102+19]..[92,2900+5])
                    Pmod_structure
                    [
                      structure_item (lib/Numbering.ml[63,2129+4]..[63,2129+18])
                        Pstr_type Rec
                        [
                          type_declaration "t" (lib/Numbering.ml[63,2129+9]..[63,2129+10]) (lib/Numbering.ml[63,2129+4]..[63,2129+18])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ptype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (lib/Numbering.ml[63,2129+13]..[63,2129+18])
                                  Ptyp_constr "M.key" (lib/Numbering.ml[63,2129+13]..[63,2129+18])
                                  []
                        ]
                      structure_item (lib/Numbering.ml[65,2149+4]..[65,2149+21])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[65,2149+8]..[65,2149+9])
                              Ppat_var "n" (lib/Numbering.ml[65,2149+8]..[65,2149+9])
                            expression (lib/Numbering.ml[65,2149+12]..[65,2149+21])
                              Pexp_apply
                              expression (lib/Numbering.ml[65,2149+12]..[65,2149+19])
                                Pexp_ident "current" (lib/Numbering.ml[65,2149+12]..[65,2149+19])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[65,2149+19]..[65,2149+21])
                                    Pexp_construct "()" (lib/Numbering.ml[65,2149+19]..[65,2149+21])
                                    None
                              ]
                        ]
                      structure_item (lib/Numbering.ml[67,2172+4]..[77,2556+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[67,2172+8]..[67,2172+14])
                              Ppat_var "encode" (lib/Numbering.ml[67,2172+8]..[67,2172+14])
                            expression (lib/Numbering.ml[67,2172+15]..[77,2556+22]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lib/Numbering.ml[67,2172+15]..[67,2172+16])
                                Ppat_var "x" (lib/Numbering.ml[67,2172+15]..[67,2172+16])
                              expression (lib/Numbering.ml[71,2382+6]..[77,2556+22])
                                Pexp_ifthenelse
                                expression (lib/Numbering.ml[71,2382+9]..[71,2382+27])
                                  Pexp_apply
                                  expression (lib/Numbering.ml[71,2382+9]..[71,2382+25])
                                    Pexp_ident "has_been_encoded" (lib/Numbering.ml[71,2382+9]..[71,2382+25])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[71,2382+26]..[71,2382+27])
                                        Pexp_ident "x" (lib/Numbering.ml[71,2382+26]..[71,2382+27])
                                  ]
                                expression (lib/Numbering.ml[72,2415+8]..[72,2415+16])
                                  Pexp_apply
                                  expression (lib/Numbering.ml[72,2415+8]..[72,2415+14])
                                    Pexp_ident "encode" (lib/Numbering.ml[72,2415+8]..[72,2415+14])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[72,2415+15]..[72,2415+16])
                                        Pexp_ident "x" (lib/Numbering.ml[72,2415+15]..[72,2415+16])
                                  ]
                                Some
                                  expression (lib/Numbering.ml[74,2443+8]..[77,2556+22])
                                    Pexp_apply
                                    expression (lib/Numbering.ml[77,2556+11]..[77,2556+22])
                                      Pexp_ident "invalid_arg" (lib/Numbering.ml[77,2556+11]..[77,2556+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/Numbering.ml[74,2443+8]..[76,2538+17])
                                          Pexp_apply
                                          expression (lib/Numbering.ml[74,2443+8]..[74,2443+22])
                                            Pexp_ident "Printf.sprintf" (lib/Numbering.ml[74,2443+8]..[74,2443+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[75,2466+10]..[75,2466+71])
                                                Pexp_constant PConst_string("Fix.Numbering: invalid argument passed to \"encode\".\n%s\n",(lib/Numbering.ml[75,2466+11]..[75,2466+70]),None)
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[76,2538+10]..[76,2538+17])
                                                Pexp_ident "__LOC__" (lib/Numbering.ml[76,2538+10]..[76,2538+17])
                                          ]
                                    ]
                        ]
                      structure_item (lib/Numbering.ml[79,2580+4]..[80,2598+23])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[79,2580+8]..[79,2580+15])
                              Ppat_var "reverse" (lib/Numbering.ml[79,2580+8]..[79,2580+15])
                            expression (lib/Numbering.ml[80,2598+6]..[80,2598+23])
                              Pexp_apply
                              expression (lib/Numbering.ml[80,2598+6]..[80,2598+21])
                                Pexp_ident "reverse_mapping" (lib/Numbering.ml[80,2598+6]..[80,2598+21])
                              [
                                <arg>
                                Nolabel
                                  expression (lib/Numbering.ml[80,2598+21]..[80,2598+23])
                                    Pexp_construct "()" (lib/Numbering.ml[80,2598+21]..[80,2598+23])
                                    None
                              ]
                        ]
                      structure_item (lib/Numbering.ml[82,2623+4]..[90,2876+22])
                        Pstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[82,2623+8]..[82,2623+14])
                              Ppat_var "decode" (lib/Numbering.ml[82,2623+8]..[82,2623+14])
                            expression (lib/Numbering.ml[82,2623+15]..[90,2876+22]) ghost
                              Pexp_fun
                              Nolabel
                              None
                              pattern (lib/Numbering.ml[82,2623+15]..[82,2623+16])
                                Ppat_var "i" (lib/Numbering.ml[82,2623+15]..[82,2623+16])
                              expression (lib/Numbering.ml[83,2642+6]..[90,2876+22])
                                Pexp_ifthenelse
                                expression (lib/Numbering.ml[83,2642+9]..[83,2642+24])
                                  Pexp_apply
                                  expression (lib/Numbering.ml[83,2642+16]..[83,2642+18])
                                    Pexp_ident "&&" (lib/Numbering.ml[83,2642+16]..[83,2642+18])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[83,2642+9]..[83,2642+15])
                                        Pexp_apply
                                        expression (lib/Numbering.ml[83,2642+11]..[83,2642+13])
                                          Pexp_ident "<=" (lib/Numbering.ml[83,2642+11]..[83,2642+13])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[83,2642+9]..[83,2642+10])
                                              Pexp_constant PConst_int (0,None)
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[83,2642+14]..[83,2642+15])
                                              Pexp_ident "i" (lib/Numbering.ml[83,2642+14]..[83,2642+15])
                                        ]
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[83,2642+19]..[83,2642+24])
                                        Pexp_apply
                                        expression (lib/Numbering.ml[83,2642+21]..[83,2642+22])
                                          Pexp_ident "<" (lib/Numbering.ml[83,2642+21]..[83,2642+22])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[83,2642+19]..[83,2642+20])
                                              Pexp_ident "i" (lib/Numbering.ml[83,2642+19]..[83,2642+20])
                                          <arg>
                                          Nolabel
                                            expression (lib/Numbering.ml[83,2642+23]..[83,2642+24])
                                              Pexp_ident "n" (lib/Numbering.ml[83,2642+23]..[83,2642+24])
                                        ]
                                  ]
                                expression (lib/Numbering.ml[84,2672+8]..[84,2672+19])
                                  Pexp_apply
                                  expression (lib/Numbering.ml[84,2672+8]..[84,2672+19]) ghost
                                    Pexp_ident "Array.get" (lib/Numbering.ml[84,2672+8]..[84,2672+19]) ghost
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[84,2672+8]..[84,2672+15])
                                        Pexp_ident "reverse" (lib/Numbering.ml[84,2672+8]..[84,2672+15])
                                    <arg>
                                    Nolabel
                                      expression (lib/Numbering.ml[84,2672+17]..[84,2672+18])
                                        Pexp_ident "i" (lib/Numbering.ml[84,2672+17]..[84,2672+18])
                                  ]
                                Some
                                  expression (lib/Numbering.ml[86,2703+8]..[90,2876+22])
                                    Pexp_apply
                                    expression (lib/Numbering.ml[90,2876+11]..[90,2876+22])
                                      Pexp_ident "invalid_arg" (lib/Numbering.ml[90,2876+11]..[90,2876+22])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/Numbering.ml[86,2703+8]..[89,2854+21])
                                          Pexp_apply
                                          expression (lib/Numbering.ml[86,2703+8]..[86,2703+22])
                                            Pexp_ident "Printf.sprintf" (lib/Numbering.ml[86,2703+8]..[86,2703+22])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[87,2726+10]..[88,2794+59])
                                                Pexp_constant PConst_string("Fix.Numbering: invalid argument passed to \"decode\".\nThe index %d is not in the range [0, %d).\n%s\n",(lib/Numbering.ml[87,2726+11]..[88,2794+58]),None)
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[89,2854+10]..[89,2854+11])
                                                Pexp_ident "i" (lib/Numbering.ml[89,2854+10]..[89,2854+11])
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[89,2854+12]..[89,2854+13])
                                                Pexp_ident "n" (lib/Numbering.ml[89,2854+12]..[89,2854+13])
                                            <arg>
                                            Nolabel
                                              expression (lib/Numbering.ml[89,2854+14]..[89,2854+21])
                                                Pexp_ident "__LOC__" (lib/Numbering.ml[89,2854+14]..[89,2854+21])
                                          ]
                                    ]
                        ]
                    ]
          ]
  structure_item (lib/Numbering.ml[96,2912+0]..[97,2954+56])
    Pstr_module
    "ForOrderedType" (lib/Numbering.ml[96,2912+7]..[96,2912+21])
      module_expr (lib/Numbering.ml[96,2912+22]..[97,2954+56])
        Pmod_functor "T" (lib/Numbering.ml[96,2912+23]..[96,2912+24])
        module_type (lib/Numbering.ml[96,2912+27]..[96,2912+38])
          Pmty_ident "OrderedType" (lib/Numbering.ml[96,2912+27]..[96,2912+38])
        module_expr (lib/Numbering.ml[97,2954+2]..[97,2954+56])
          Pmod_apply
          module_expr (lib/Numbering.ml[97,2954+2]..[97,2954+6])
            Pmod_ident "Make" (lib/Numbering.ml[97,2954+2]..[97,2954+6])
          module_expr (lib/Numbering.ml[97,2954+7]..[97,2954+55])
            Pmod_apply
            module_expr (lib/Numbering.ml[97,2954+7]..[97,2954+42])
              Pmod_ident "Glue.PersistentMapsToImperativeMaps" (lib/Numbering.ml[97,2954+7]..[97,2954+42])
            module_expr (lib/Numbering.ml[97,2954+43]..[97,2954+54])
              Pmod_apply
              module_expr (lib/Numbering.ml[97,2954+43]..[97,2954+51])
                Pmod_ident "Map.Make" (lib/Numbering.ml[97,2954+43]..[97,2954+51])
              module_expr (lib/Numbering.ml[97,2954+52]..[97,2954+53])
                Pmod_ident "T" (lib/Numbering.ml[97,2954+52]..[97,2954+53])
  structure_item (lib/Numbering.ml[99,3012+0]..[100,3052+42])
    Pstr_module
    "ForHashedType" (lib/Numbering.ml[99,3012+7]..[99,3012+20])
      module_expr (lib/Numbering.ml[99,3012+21]..[100,3052+42])
        Pmod_functor "T" (lib/Numbering.ml[99,3012+22]..[99,3012+23])
        module_type (lib/Numbering.ml[99,3012+26]..[99,3012+36])
          Pmty_ident "HashedType" (lib/Numbering.ml[99,3012+26]..[99,3012+36])
        module_expr (lib/Numbering.ml[100,3052+2]..[100,3052+42])
          Pmod_apply
          module_expr (lib/Numbering.ml[100,3052+2]..[100,3052+6])
            Pmod_ident "Make" (lib/Numbering.ml[100,3052+2]..[100,3052+6])
          module_expr (lib/Numbering.ml[100,3052+7]..[100,3052+41])
            Pmod_apply
            module_expr (lib/Numbering.ml[100,3052+7]..[100,3052+38])
              Pmod_ident "Glue.HashTablesAsImperativeMaps" (lib/Numbering.ml[100,3052+7]..[100,3052+38])
            module_expr (lib/Numbering.ml[100,3052+39]..[100,3052+40])
              Pmod_ident "T" (lib/Numbering.ml[100,3052+39]..[100,3052+40])
  structure_item (lib/Numbering.ml[102,3096+0]..[103,3124+42])
    Pstr_module
    "ForType" (lib/Numbering.ml[102,3096+7]..[102,3096+14])
      module_expr (lib/Numbering.ml[102,3096+15]..[103,3124+42])
        Pmod_functor "T" (lib/Numbering.ml[102,3096+16]..[102,3096+17])
        module_type (lib/Numbering.ml[102,3096+20]..[102,3096+24])
          Pmty_ident "TYPE" (lib/Numbering.ml[102,3096+20]..[102,3096+24])
        module_expr (lib/Numbering.ml[103,3124+2]..[103,3124+42])
          Pmod_apply
          module_expr (lib/Numbering.ml[103,3124+2]..[103,3124+15])
            Pmod_ident "ForHashedType" (lib/Numbering.ml[103,3124+2]..[103,3124+15])
          module_expr (lib/Numbering.ml[103,3124+16]..[103,3124+41])
            Pmod_apply
            module_expr (lib/Numbering.ml[103,3124+16]..[103,3124+38])
              Pmod_ident "Glue.TrivialHashedType" (lib/Numbering.ml[103,3124+16]..[103,3124+38])
            module_expr (lib/Numbering.ml[103,3124+39]..[103,3124+40])
              Pmod_ident "T" (lib/Numbering.ml[103,3124+39]..[103,3124+40])
  structure_item (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Ppat_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          None
        expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Ppat_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          None
        expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                Pexp_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                None
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Ppat_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          None
        expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                Pexp_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                None
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Ppat_construct "()" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          None
        expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          Pexp_apply
          expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          [
            <arg>
            Nolabel
              expression (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/Numbering.ml[103,3124+42]..[103,3124+42]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/Numbering.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "Numbering.ml"
open Sigs
let force o = match o with | Some x -> x | None -> assert false
module Make(M:IMPERATIVE_MAPS) =
  struct
    type t = M.key
    open Gensym
    let g = generator ()
    let current () = current g
    let ((encode : t -> int), (table : int M.t)) =
      let module Memo = (Memoize.Make)(M) in
        Memo.visibly_memoize (fun (_ : t) -> fresh g)
    let has_been_encoded (x : t) =
      (try let _ = M.find x table in true with | Not_found -> false : 
      bool)
    let reverse_mapping () =
      (let n = current () in
       let reverse : t option array = Array.make n None in
       M.iter (fun x -> fun i -> reverse.(i) <- (Some x)) table;
       Array.map force reverse : t array)
    module Done() =
      struct
        type t = M.key
        let n = current ()
        let encode x =
          if has_been_encoded x
          then encode x
          else
            invalid_arg
              (Printf.sprintf
                 "Fix.Numbering: invalid argument passed to \"encode\".\n%s\n"
                 __LOC__)
        let reverse = reverse_mapping ()
        let decode i =
          if (0 <= i) && (i < n)
          then reverse.(i)
          else
            invalid_arg
              (Printf.sprintf
                 "Fix.Numbering: invalid argument passed to \"decode\".\nThe index %d is not in the range [0, %d).\n%s\n"
                 i n __LOC__)
      end
  end
module ForOrderedType(T:OrderedType) =
  (Make)((Glue.PersistentMapsToImperativeMaps)((Map.Make)(T)))
module ForHashedType(T:HashedType) =
  (Make)((Glue.HashTablesAsImperativeMaps)(T))
module ForType(T:TYPE) = (ForHashedType)((Glue.TrivialHashedType)(T))
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
                Texp_constant Const_string("lib/Numbering.ml",(lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
          Texp_apply
          expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost
                Texp_constant Const_string("Numbering.ml",(lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+0]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[13,893+0]..lib/Numbering.ml[13,893+9])
    Tstr_open Fresh
    module_expr (lib/Numbering.ml[13,893+5]..lib/Numbering.ml[13,893+9])
      Tmod_ident "Gbnf_parser!.Sigs"
  structure_item (lib/Numbering.ml[15,904+0]..lib/Numbering.ml[16,918+49])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[15,904+4]..lib/Numbering.ml[15,904+9])
          Tpat_var "force/1149"
        expression (lib/Numbering.ml[15,904+10]..lib/Numbering.ml[16,918+49]) ghost
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/Numbering.ml[15,904+10]..lib/Numbering.ml[15,904+11])
                Tpat_var "o/1151"
              expression (lib/Numbering.ml[16,918+2]..lib/Numbering.ml[16,918+49])
                Texp_match
                expression (lib/Numbering.ml[16,918+8]..lib/Numbering.ml[16,918+9])
                  Texp_ident "o/1151"
                [
                  <case>
                    pattern (lib/Numbering.ml[16,918+15]..lib/Numbering.ml[16,918+21])
                      Tpat_value
                      pattern (lib/Numbering.ml[16,918+15]..lib/Numbering.ml[16,918+21])
                        Tpat_construct "Some"
                        [
                          pattern (lib/Numbering.ml[16,918+20]..lib/Numbering.ml[16,918+21])
                            Tpat_var "x/1152"
                        ]
                        None
                    expression (lib/Numbering.ml[16,918+25]..lib/Numbering.ml[16,918+26])
                      Texp_ident "x/1152"
                  <case>
                    pattern (lib/Numbering.ml[16,918+29]..lib/Numbering.ml[16,918+33])
                      Tpat_value
                      pattern (lib/Numbering.ml[16,918+29]..lib/Numbering.ml[16,918+33])
                        Tpat_construct "None"
                        []
                        None
                    expression (lib/Numbering.ml[16,918+37]..lib/Numbering.ml[16,918+49])
                      Texp_assert                      expression (lib/Numbering.ml[16,918+44]..lib/Numbering.ml[16,918+49])
                        Texp_construct "false"
                        []
                ]
          ]
    ]
  structure_item (lib/Numbering.ml[18,969+0]..lib/Numbering.ml[94,2907+3])
    Tstr_module
    Make/1349
      module_expr (lib/Numbering.ml[18,969+12]..lib/Numbering.ml[94,2907+3])
        Tmod_functor "M/1181"
        module_type (lib/Numbering.ml[18,969+17]..lib/Numbering.ml[18,969+32])
          Tmty_ident "Gbnf_parser!.Sigs.IMPERATIVE_MAPS"
        module_expr (lib/Numbering.ml[18,969+36]..lib/Numbering.ml[94,2907+3])
          Tmod_structure
          [
            structure_item (lib/Numbering.ml[20,1013+2]..lib/Numbering.ml[20,1013+16])
              Tstr_type Rec
              [
                type_declaration t/1182 (lib/Numbering.ml[20,1013+2]..lib/Numbering.ml[20,1013+16])
                  ptype_params =
                    []
                  ptype_cstrs =
                    []
                  ptype_kind =
                    Ttype_abstract
                  ptype_private = Public
                  ptype_manifest =
                    Some
                      core_type (lib/Numbering.ml[20,1013+11]..lib/Numbering.ml[20,1013+16])
                        Ttyp_constr "M/1181.key"
                        []
              ]
            structure_item (lib/Numbering.ml[24,1078+2]..lib/Numbering.ml[24,1078+13])
              Tstr_open Fresh
              module_expr (lib/Numbering.ml[24,1078+7]..lib/Numbering.ml[24,1078+13])
                Tmod_ident "Gbnf_parser!.Gensym"
            structure_item (lib/Numbering.ml[26,1093+2]..lib/Numbering.ml[27,1103+15])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[26,1093+6]..lib/Numbering.ml[26,1093+7])
                    Tpat_var "g/1190"
                  expression (lib/Numbering.ml[27,1103+4]..lib/Numbering.ml[27,1103+15])
                    Texp_apply
                    expression (lib/Numbering.ml[27,1103+4]..lib/Numbering.ml[27,1103+13])
                      Texp_ident "Gbnf_parser!.Gensym.generator"
                    [
                      <arg>
                        Nolabel
                        expression (lib/Numbering.ml[27,1103+13]..lib/Numbering.ml[27,1103+15])
                          Texp_construct "()"
                          []
                    ]
              ]
            structure_item (lib/Numbering.ml[29,1120+2]..lib/Numbering.ml[30,1139+13])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[29,1120+6]..lib/Numbering.ml[29,1120+13])
                    Tpat_var "current/1191"
                  expression (lib/Numbering.ml[29,1120+14]..lib/Numbering.ml[30,1139+13]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Numbering.ml[29,1120+14]..lib/Numbering.ml[29,1120+16])
                          Tpat_construct "()"
                          []
                          None
                        expression (lib/Numbering.ml[30,1139+4]..lib/Numbering.ml[30,1139+13])
                          Texp_apply
                          expression (lib/Numbering.ml[30,1139+4]..lib/Numbering.ml[30,1139+11])
                            Texp_ident "Gbnf_parser!.Gensym.current"
                          [
                            <arg>
                              Nolabel
                              expression (lib/Numbering.ml[30,1139+12]..lib/Numbering.ml[30,1139+13])
                                Texp_ident "g/1190"
                          ]
                    ]
              ]
            structure_item (lib/Numbering.ml[37,1428+2]..lib/Numbering.ml[39,1516+49])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[37,1428+6]..lib/Numbering.ml[37,1428+44])
                    Tpat_tuple
                    [
                      pattern (lib/Numbering.ml[37,1428+7]..lib/Numbering.ml[37,1428+13])
                        extra
                          Tpat_extra_constraint
                          core_type (lib/Numbering.ml[37,1428+16]..lib/Numbering.ml[37,1428+24])
                            Ttyp_arrow
                            Nolabel
                            core_type (lib/Numbering.ml[37,1428+16]..lib/Numbering.ml[37,1428+17])
                              Ttyp_constr "t/1182"
                              []
                            core_type (lib/Numbering.ml[37,1428+21]..lib/Numbering.ml[37,1428+24])
                              Ttyp_constr "int/1!"
                              []
                        Tpat_alias "encode/1193"
                        pattern (lib/Numbering.ml[37,1428+7]..lib/Numbering.ml[37,1428+13])
                          Tpat_any
                      pattern (lib/Numbering.ml[37,1428+28]..lib/Numbering.ml[37,1428+33])
                        extra
                          Tpat_extra_constraint
                          core_type (lib/Numbering.ml[37,1428+36]..lib/Numbering.ml[37,1428+43])
                            Ttyp_constr "M/1181.t"
                            [
                              core_type (lib/Numbering.ml[37,1428+36]..lib/Numbering.ml[37,1428+39])
                                Ttyp_constr "int/1!"
                                []
                            ]
                        Tpat_alias "table/1194"
                        pattern (lib/Numbering.ml[37,1428+28]..lib/Numbering.ml[37,1428+33])
                          Tpat_any
                    ]
                  expression (lib/Numbering.ml[38,1475+4]..lib/Numbering.ml[39,1516+49])
                    Texp_letmodule "Memo/1245"
                    module_expr (lib/Numbering.ml[38,1475+22]..lib/Numbering.ml[38,1475+37])
                      Tmod_apply
                      module_expr (lib/Numbering.ml[38,1475+22]..lib/Numbering.ml[38,1475+34])
                        module_expr (lib/Numbering.ml[38,1475+22]..lib/Numbering.ml[38,1475+34])
                          Tmod_ident "Gbnf_parser!.Memoize.Make"
                      module_expr (lib/Numbering.ml[38,1475+35]..lib/Numbering.ml[38,1475+36])
                        Tmod_ident "M/1181"
                    expression (lib/Numbering.ml[39,1516+4]..lib/Numbering.ml[39,1516+49])
                      Texp_apply
                      expression (lib/Numbering.ml[39,1516+4]..lib/Numbering.ml[39,1516+24])
                        Texp_ident "Memo/1245.visibly_memoize"
                      [
                        <arg>
                          Nolabel
                          expression (lib/Numbering.ml[39,1516+25]..lib/Numbering.ml[39,1516+49])
                            Texp_function
                            Nolabel
                            [
                              <case>
                                pattern (lib/Numbering.ml[39,1516+31]..lib/Numbering.ml[39,1516+32])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (lib/Numbering.ml[39,1516+35]..lib/Numbering.ml[39,1516+36])
                                      Ttyp_constr "t/1182"
                                      []
                                  Tpat_any
                                expression (lib/Numbering.ml[39,1516+41]..lib/Numbering.ml[39,1516+48])
                                  Texp_apply
                                  expression (lib/Numbering.ml[39,1516+41]..lib/Numbering.ml[39,1516+46])
                                    Texp_ident "Gbnf_parser!.Gensym.fresh"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Numbering.ml[39,1516+47]..lib/Numbering.ml[39,1516+48])
                                        Texp_ident "g/1190"
                                  ]
                            ]
                      ]
              ]
            structure_item (lib/Numbering.ml[43,1628+2]..lib/Numbering.ml[49,1819+11])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[43,1628+6]..lib/Numbering.ml[43,1628+22])
                    Tpat_var "has_been_encoded/1247"
                  expression (lib/Numbering.ml[43,1628+23]..lib/Numbering.ml[49,1819+11]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Numbering.ml[43,1628+24]..lib/Numbering.ml[43,1628+25])
                          extra
                            Tpat_extra_constraint
                            core_type (lib/Numbering.ml[43,1628+28]..lib/Numbering.ml[43,1628+29])
                              Ttyp_constr "t/1182"
                              []
                          Tpat_alias "x/1249"
                          pattern (lib/Numbering.ml[43,1628+24]..lib/Numbering.ml[43,1628+25])
                            Tpat_any
                        expression (lib/Numbering.ml[45,1746+4]..lib/Numbering.ml[49,1819+11])
                          extra
                            Texp_constraint
                            core_type (lib/Numbering.ml[43,1628+33]..lib/Numbering.ml[43,1628+37])
                              Ttyp_constr "bool/5!"
                              []
                          Texp_try
                          expression (lib/Numbering.ml[46,1754+6]..lib/Numbering.ml[47,1786+10])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/Numbering.ml[46,1754+10]..lib/Numbering.ml[46,1754+11])
                                  Tpat_any
                                expression (lib/Numbering.ml[46,1754+14]..lib/Numbering.ml[46,1754+28])
                                  Texp_apply
                                  expression (lib/Numbering.ml[46,1754+14]..lib/Numbering.ml[46,1754+20])
                                    Texp_ident "M/1181.find"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Numbering.ml[46,1754+21]..lib/Numbering.ml[46,1754+22])
                                        Texp_ident "x/1249"
                                    <arg>
                                      Nolabel
                                      expression (lib/Numbering.ml[46,1754+23]..lib/Numbering.ml[46,1754+28])
                                        Texp_ident "table/1194"
                                  ]
                            ]
                            expression (lib/Numbering.ml[47,1786+6]..lib/Numbering.ml[47,1786+10])
                              Texp_construct "true"
                              []
                          [
                            <case>
                              pattern (lib/Numbering.ml[48,1797+9]..lib/Numbering.ml[48,1797+18])
                                Tpat_construct "Not_found"
                                []
                                None
                              expression (lib/Numbering.ml[49,1819+6]..lib/Numbering.ml[49,1819+11])
                                Texp_construct "false"
                                []
                          ]
                    ]
              ]
            structure_item (lib/Numbering.ml[53,1891+2]..lib/Numbering.ml[59,2073+27])
              Tstr_value Nonrec
              [
                <def>
                  pattern (lib/Numbering.ml[53,1891+6]..lib/Numbering.ml[53,1891+21])
                    Tpat_var "reverse_mapping/1250"
                  expression (lib/Numbering.ml[53,1891+22]..lib/Numbering.ml[59,2073+27]) ghost
                    Texp_function
                    Nolabel
                    [
                      <case>
                        pattern (lib/Numbering.ml[53,1891+22]..lib/Numbering.ml[53,1891+24])
                          Tpat_construct "()"
                          []
                          None
                        expression (lib/Numbering.ml[54,1928+4]..lib/Numbering.ml[59,2073+27])
                          extra
                            Texp_constraint
                            core_type (lib/Numbering.ml[53,1891+27]..lib/Numbering.ml[53,1891+34])
                              Ttyp_constr "array/8!"
                              [
                                core_type (lib/Numbering.ml[53,1891+27]..lib/Numbering.ml[53,1891+28])
                                  Ttyp_constr "t/1182"
                                  []
                              ]
                          Texp_let Nonrec
                          [
                            <def>
                              pattern (lib/Numbering.ml[54,1928+8]..lib/Numbering.ml[54,1928+9])
                                Tpat_var "n/1252"
                              expression (lib/Numbering.ml[54,1928+12]..lib/Numbering.ml[54,1928+21])
                                Texp_apply
                                expression (lib/Numbering.ml[54,1928+12]..lib/Numbering.ml[54,1928+19])
                                  Texp_ident "current/1191"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Numbering.ml[54,1928+19]..lib/Numbering.ml[54,1928+21])
                                      Texp_construct "()"
                                      []
                                ]
                          ]
                          expression (lib/Numbering.ml[55,1953+4]..lib/Numbering.ml[59,2073+27])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/Numbering.ml[55,1953+8]..lib/Numbering.ml[55,1953+15])
                                  extra
                                    Tpat_extra_constraint
                                    core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+32]) ghost
                                      Ttyp_poly
                                      core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+32])
                                        Ttyp_constr "array/8!"
                                        [
                                          core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+26])
                                            Ttyp_constr "option/10!"
                                            [
                                              core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+19])
                                                Ttyp_constr "t/1182"
                                                []
                                            ]
                                        ]
                                  Tpat_var "reverse/1253"
                                expression (lib/Numbering.ml[55,1953+35]..lib/Numbering.ml[55,1953+52])
                                  extra
                                    Texp_constraint
                                    core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+32])
                                      Ttyp_constr "array/8!"
                                      [
                                        core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+26])
                                          Ttyp_constr "option/10!"
                                          [
                                            core_type (lib/Numbering.ml[55,1953+18]..lib/Numbering.ml[55,1953+19])
                                              Ttyp_constr "t/1182"
                                              []
                                          ]
                                      ]
                                  Texp_apply
                                  expression (lib/Numbering.ml[55,1953+35]..lib/Numbering.ml[55,1953+45])
                                    Texp_ident "Stdlib!.Array.make"
                                  [
                                    <arg>
                                      Nolabel
                                      expression (lib/Numbering.ml[55,1953+46]..lib/Numbering.ml[55,1953+47])
                                        Texp_ident "n/1252"
                                    <arg>
                                      Nolabel
                                      expression (lib/Numbering.ml[55,1953+48]..lib/Numbering.ml[55,1953+52])
                                        Texp_construct "None"
                                        []
                                  ]
                            ]
                            expression (lib/Numbering.ml[56,2009+4]..lib/Numbering.ml[59,2073+27])
                              Texp_sequence
                              expression (lib/Numbering.ml[56,2009+4]..lib/Numbering.ml[58,2060+11])
                                Texp_apply
                                expression (lib/Numbering.ml[56,2009+4]..lib/Numbering.ml[56,2009+10])
                                  Texp_ident "M/1181.iter"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Numbering.ml[56,2009+11]..lib/Numbering.ml[58,2060+5])
                                      Texp_function
                                      Nolabel
                                      [
                                        <case>
                                          pattern (lib/Numbering.ml[56,2009+16]..lib/Numbering.ml[56,2009+17])
                                            Tpat_var "x/1301"
                                          expression (lib/Numbering.ml[56,2009+18]..lib/Numbering.ml[57,2032+27]) ghost
                                            Texp_function
                                            Nolabel
                                            [
                                              <case>
                                                pattern (lib/Numbering.ml[56,2009+18]..lib/Numbering.ml[56,2009+19])
                                                  Tpat_var "i/1302"
                                                expression (lib/Numbering.ml[57,2032+6]..lib/Numbering.ml[57,2032+27])
                                                  Texp_apply
                                                  expression (lib/Numbering.ml[57,2032+6]..lib/Numbering.ml[57,2032+27]) ghost
                                                    Texp_ident "Stdlib!.Array.set"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/Numbering.ml[57,2032+6]..lib/Numbering.ml[57,2032+13])
                                                        Texp_ident "reverse/1253"
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/Numbering.ml[57,2032+15]..lib/Numbering.ml[57,2032+16])
                                                        Texp_ident "i/1302"
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/Numbering.ml[57,2032+21]..lib/Numbering.ml[57,2032+27])
                                                        Texp_construct "Some"
                                                        [
                                                          expression (lib/Numbering.ml[57,2032+26]..lib/Numbering.ml[57,2032+27])
                                                            Texp_ident "x/1301"
                                                        ]
                                                  ]
                                            ]
                                      ]
                                  <arg>
                                    Nolabel
                                    expression (lib/Numbering.ml[58,2060+6]..lib/Numbering.ml[58,2060+11])
                                      Texp_ident "table/1194"
                                ]
                              expression (lib/Numbering.ml[59,2073+4]..lib/Numbering.ml[59,2073+27])
                                Texp_apply
                                expression (lib/Numbering.ml[59,2073+4]..lib/Numbering.ml[59,2073+13])
                                  Texp_ident "Stdlib!.Array.map"
                                [
                                  <arg>
                                    Nolabel
                                    expression (lib/Numbering.ml[59,2073+14]..lib/Numbering.ml[59,2073+19])
                                      Texp_ident "force/1149"
                                  <arg>
                                    Nolabel
                                    expression (lib/Numbering.ml[59,2073+20]..lib/Numbering.ml[59,2073+27])
                                      Texp_ident "reverse/1253"
                                ]
                    ]
              ]
            structure_item (lib/Numbering.ml[61,2102+2]..lib/Numbering.ml[92,2900+5])
              Tstr_module
              Done/1348
                module_expr (lib/Numbering.ml[61,2102+14]..lib/Numbering.ml[92,2900+5])
                  Tmod_functor ()
                  module_expr (lib/Numbering.ml[61,2102+19]..lib/Numbering.ml[92,2900+5])
                    Tmod_structure
                    [
                      structure_item (lib/Numbering.ml[63,2129+4]..lib/Numbering.ml[63,2129+18])
                        Tstr_type Rec
                        [
                          type_declaration t/1304 (lib/Numbering.ml[63,2129+4]..lib/Numbering.ml[63,2129+18])
                            ptype_params =
                              []
                            ptype_cstrs =
                              []
                            ptype_kind =
                              Ttype_abstract
                            ptype_private = Public
                            ptype_manifest =
                              Some
                                core_type (lib/Numbering.ml[63,2129+13]..lib/Numbering.ml[63,2129+18])
                                  Ttyp_constr "M/1181.key"
                                  []
                        ]
                      structure_item (lib/Numbering.ml[65,2149+4]..lib/Numbering.ml[65,2149+21])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[65,2149+8]..lib/Numbering.ml[65,2149+9])
                              Tpat_var "n/1305"
                            expression (lib/Numbering.ml[65,2149+12]..lib/Numbering.ml[65,2149+21])
                              Texp_apply
                              expression (lib/Numbering.ml[65,2149+12]..lib/Numbering.ml[65,2149+19])
                                Texp_ident "current/1191"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/Numbering.ml[65,2149+19]..lib/Numbering.ml[65,2149+21])
                                    Texp_construct "()"
                                    []
                              ]
                        ]
                      structure_item (lib/Numbering.ml[67,2172+4]..lib/Numbering.ml[77,2556+22])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[67,2172+8]..lib/Numbering.ml[67,2172+14])
                              Tpat_var "encode/1306"
                            expression (lib/Numbering.ml[67,2172+15]..lib/Numbering.ml[77,2556+22]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (lib/Numbering.ml[67,2172+15]..lib/Numbering.ml[67,2172+16])
                                    Tpat_var "x/1307"
                                  expression (lib/Numbering.ml[71,2382+6]..lib/Numbering.ml[77,2556+22])
                                    Texp_ifthenelse
                                    expression (lib/Numbering.ml[71,2382+9]..lib/Numbering.ml[71,2382+27])
                                      Texp_apply
                                      expression (lib/Numbering.ml[71,2382+9]..lib/Numbering.ml[71,2382+25])
                                        Texp_ident "has_been_encoded/1247"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[71,2382+26]..lib/Numbering.ml[71,2382+27])
                                            Texp_ident "x/1307"
                                      ]
                                    expression (lib/Numbering.ml[72,2415+8]..lib/Numbering.ml[72,2415+16])
                                      Texp_apply
                                      expression (lib/Numbering.ml[72,2415+8]..lib/Numbering.ml[72,2415+14])
                                        Texp_ident "encode/1193"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[72,2415+15]..lib/Numbering.ml[72,2415+16])
                                            Texp_ident "x/1307"
                                      ]
                                    Some
                                      expression (lib/Numbering.ml[74,2443+8]..lib/Numbering.ml[77,2556+22])
                                        Texp_apply
                                        expression (lib/Numbering.ml[77,2556+11]..lib/Numbering.ml[77,2556+22])
                                          Texp_ident "Stdlib!.invalid_arg"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Numbering.ml[74,2443+8]..lib/Numbering.ml[76,2538+17])
                                              Texp_apply
                                              expression (lib/Numbering.ml[74,2443+8]..lib/Numbering.ml[74,2443+22])
                                                Texp_ident "Stdlib!.Printf.sprintf"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                            Texp_constant Const_string("Fix.Numbering: invalid argument passed to \"encode\".\n",(lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost,None)
                                                          expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                            [
                                                              expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                []
                                                              expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                [
                                                                  expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                                    Texp_constant Const_char 0a
                                                                  expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                    []
                                                                ]
                                                            ]
                                                        ]
                                                      expression (lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost
                                                        Texp_constant Const_string("Fix.Numbering: invalid argument passed to \"encode\".\n%s\n",(lib/Numbering.ml[75,2466+10]..lib/Numbering.ml[75,2466+71]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[76,2538+10]..lib/Numbering.ml[76,2538+17])
                                                    Texp_ident "Stdlib!.__LOC__"
                                              ]
                                        ]
                              ]
                        ]
                      structure_item (lib/Numbering.ml[79,2580+4]..lib/Numbering.ml[80,2598+23])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[79,2580+8]..lib/Numbering.ml[79,2580+15])
                              Tpat_var "reverse/1344"
                            expression (lib/Numbering.ml[80,2598+6]..lib/Numbering.ml[80,2598+23])
                              Texp_apply
                              expression (lib/Numbering.ml[80,2598+6]..lib/Numbering.ml[80,2598+21])
                                Texp_ident "reverse_mapping/1250"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/Numbering.ml[80,2598+21]..lib/Numbering.ml[80,2598+23])
                                    Texp_construct "()"
                                    []
                              ]
                        ]
                      structure_item (lib/Numbering.ml[82,2623+4]..lib/Numbering.ml[90,2876+22])
                        Tstr_value Nonrec
                        [
                          <def>
                            pattern (lib/Numbering.ml[82,2623+8]..lib/Numbering.ml[82,2623+14])
                              Tpat_var "decode/1345"
                            expression (lib/Numbering.ml[82,2623+15]..lib/Numbering.ml[90,2876+22]) ghost
                              Texp_function
                              Nolabel
                              [
                                <case>
                                  pattern (lib/Numbering.ml[82,2623+15]..lib/Numbering.ml[82,2623+16])
                                    Tpat_var "i/1347"
                                  expression (lib/Numbering.ml[83,2642+6]..lib/Numbering.ml[90,2876+22])
                                    Texp_ifthenelse
                                    expression (lib/Numbering.ml[83,2642+9]..lib/Numbering.ml[83,2642+24])
                                      Texp_apply
                                      expression (lib/Numbering.ml[83,2642+16]..lib/Numbering.ml[83,2642+18])
                                        Texp_ident "Stdlib!.&&"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[83,2642+9]..lib/Numbering.ml[83,2642+15])
                                            Texp_apply
                                            expression (lib/Numbering.ml[83,2642+11]..lib/Numbering.ml[83,2642+13])
                                              Texp_ident "Stdlib!.<="
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/Numbering.ml[83,2642+9]..lib/Numbering.ml[83,2642+10])
                                                  Texp_constant Const_int 0
                                              <arg>
                                                Nolabel
                                                expression (lib/Numbering.ml[83,2642+14]..lib/Numbering.ml[83,2642+15])
                                                  Texp_ident "i/1347"
                                            ]
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[83,2642+19]..lib/Numbering.ml[83,2642+24])
                                            Texp_apply
                                            expression (lib/Numbering.ml[83,2642+21]..lib/Numbering.ml[83,2642+22])
                                              Texp_ident "Stdlib!.<"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/Numbering.ml[83,2642+19]..lib/Numbering.ml[83,2642+20])
                                                  Texp_ident "i/1347"
                                              <arg>
                                                Nolabel
                                                expression (lib/Numbering.ml[83,2642+23]..lib/Numbering.ml[83,2642+24])
                                                  Texp_ident "n/1305"
                                            ]
                                      ]
                                    expression (lib/Numbering.ml[84,2672+8]..lib/Numbering.ml[84,2672+19])
                                      Texp_apply
                                      expression (lib/Numbering.ml[84,2672+8]..lib/Numbering.ml[84,2672+19]) ghost
                                        Texp_ident "Stdlib!.Array.get"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[84,2672+8]..lib/Numbering.ml[84,2672+15])
                                            Texp_ident "reverse/1344"
                                        <arg>
                                          Nolabel
                                          expression (lib/Numbering.ml[84,2672+17]..lib/Numbering.ml[84,2672+18])
                                            Texp_ident "i/1347"
                                      ]
                                    Some
                                      expression (lib/Numbering.ml[86,2703+8]..lib/Numbering.ml[90,2876+22])
                                        Texp_apply
                                        expression (lib/Numbering.ml[90,2876+11]..lib/Numbering.ml[90,2876+22])
                                          Texp_ident "Stdlib!.invalid_arg"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/Numbering.ml[86,2703+8]..lib/Numbering.ml[89,2854+21])
                                              Texp_apply
                                              expression (lib/Numbering.ml[86,2703+8]..lib/Numbering.ml[86,2703+22])
                                                Texp_ident "Stdlib!.Printf.sprintf"
                                              [
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59])
                                                    Texp_construct "CamlinternalFormatBasics.Format"
                                                    [
                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                        [
                                                          expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                            Texp_constant Const_string("Fix.Numbering: invalid argument passed to \"decode\".\nThe index ",(lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost,None)
                                                          expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                            Texp_construct "CamlinternalFormatBasics.Int"
                                                            [
                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                []
                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                []
                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                []
                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                [
                                                                  expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                    Texp_constant Const_string(" is not in the range [0, ",(lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost,None)
                                                                  expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                    Texp_construct "CamlinternalFormatBasics.Int"
                                                                    [
                                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.Int_d"
                                                                        []
                                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                        []
                                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.No_precision"
                                                                        []
                                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                        Texp_construct "CamlinternalFormatBasics.String_literal"
                                                                        [
                                                                          expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                            Texp_constant Const_string(").\n",(lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost,None)
                                                                          expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                            Texp_construct "CamlinternalFormatBasics.String"
                                                                            [
                                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.No_padding"
                                                                                []
                                                                              expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                                Texp_construct "CamlinternalFormatBasics.Char_literal"
                                                                                [
                                                                                  expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                                    Texp_constant Const_char 0a
                                                                                  expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                                                    Texp_construct "CamlinternalFormatBasics.End_of_format"
                                                                                    []
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                      expression (lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost
                                                        Texp_constant Const_string("Fix.Numbering: invalid argument passed to \"decode\".\nThe index %d is not in the range [0, %d).\n%s\n",(lib/Numbering.ml[87,2726+10]..lib/Numbering.ml[88,2794+59]) ghost,None)
                                                    ]
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[89,2854+10]..lib/Numbering.ml[89,2854+11])
                                                    Texp_ident "i/1347"
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[89,2854+12]..lib/Numbering.ml[89,2854+13])
                                                    Texp_ident "n/1305"
                                                <arg>
                                                  Nolabel
                                                  expression (lib/Numbering.ml[89,2854+14]..lib/Numbering.ml[89,2854+21])
                                                    Texp_ident "Stdlib!.__LOC__"
                                              ]
                                        ]
                              ]
                        ]
                    ]
          ]
  structure_item (lib/Numbering.ml[96,2912+0]..lib/Numbering.ml[97,2954+56])
    Tstr_module
    ForOrderedType/1723
      module_expr (lib/Numbering.ml[96,2912+22]..lib/Numbering.ml[97,2954+56])
        Tmod_functor "T/1361"
        module_type (lib/Numbering.ml[96,2912+27]..lib/Numbering.ml[96,2912+38])
          Tmty_ident "Gbnf_parser!.Sigs.OrderedType"
        module_expr (lib/Numbering.ml[97,2954+2]..lib/Numbering.ml[97,2954+56])
          Tmod_apply
          module_expr (lib/Numbering.ml[97,2954+2]..lib/Numbering.ml[97,2954+6])
            Tmod_ident "Make/1349"
          module_expr (lib/Numbering.ml[97,2954+7]..lib/Numbering.ml[97,2954+55])
            Tmod_apply
            module_expr (lib/Numbering.ml[97,2954+7]..lib/Numbering.ml[97,2954+42])
              module_expr (lib/Numbering.ml[97,2954+7]..lib/Numbering.ml[97,2954+42])
                Tmod_ident "Gbnf_parser!.Glue.PersistentMapsToImperativeMaps"
            module_expr (lib/Numbering.ml[97,2954+43]..lib/Numbering.ml[97,2954+54])
              Tmod_apply
              module_expr (lib/Numbering.ml[97,2954+43]..lib/Numbering.ml[97,2954+51])
                module_expr (lib/Numbering.ml[97,2954+43]..lib/Numbering.ml[97,2954+51])
                  Tmod_ident "Stdlib!.Map.Make"
              module_expr (lib/Numbering.ml[97,2954+52]..lib/Numbering.ml[97,2954+53])
                Tmod_ident "T/1361"
  structure_item (lib/Numbering.ml[99,3012+0]..lib/Numbering.ml[100,3052+42])
    Tstr_module
    ForHashedType/1989
      module_expr (lib/Numbering.ml[99,3012+21]..lib/Numbering.ml[100,3052+42])
        Tmod_functor "T/1807"
        module_type (lib/Numbering.ml[99,3012+26]..lib/Numbering.ml[99,3012+36])
          Tmty_ident "Gbnf_parser!.Sigs.HashedType"
        module_expr (lib/Numbering.ml[100,3052+2]..lib/Numbering.ml[100,3052+42])
          Tmod_apply
          module_expr (lib/Numbering.ml[100,3052+2]..lib/Numbering.ml[100,3052+6])
            Tmod_ident "Make/1349"
          module_expr (lib/Numbering.ml[100,3052+7]..lib/Numbering.ml[100,3052+41])
            Tmod_apply
            module_expr (lib/Numbering.ml[100,3052+7]..lib/Numbering.ml[100,3052+38])
              module_expr (lib/Numbering.ml[100,3052+7]..lib/Numbering.ml[100,3052+38])
                Tmod_ident "Gbnf_parser!.Glue.HashTablesAsImperativeMaps"
            module_expr (lib/Numbering.ml[100,3052+39]..lib/Numbering.ml[100,3052+40])
              Tmod_ident "T/1807"
  structure_item (lib/Numbering.ml[102,3096+0]..lib/Numbering.ml[103,3124+42])
    Tstr_module
    ForType/2011
      module_expr (lib/Numbering.ml[102,3096+15]..lib/Numbering.ml[103,3124+42])
        Tmod_functor "T/1991"
        module_type (lib/Numbering.ml[102,3096+20]..lib/Numbering.ml[102,3096+24])
          Tmty_ident "Gbnf_parser!.Sigs.TYPE"
        module_expr (lib/Numbering.ml[103,3124+2]..lib/Numbering.ml[103,3124+42])
          Tmod_apply
          module_expr (lib/Numbering.ml[103,3124+2]..lib/Numbering.ml[103,3124+15])
            Tmod_ident "ForHashedType/1989"
          module_expr (lib/Numbering.ml[103,3124+16]..lib/Numbering.ml[103,3124+41])
            Tmod_apply
            module_expr (lib/Numbering.ml[103,3124+16]..lib/Numbering.ml[103,3124+38])
              module_expr (lib/Numbering.ml[103,3124+16]..lib/Numbering.ml[103,3124+38])
                Tmod_ident "Gbnf_parser!.Glue.TrivialHashedType"
            module_expr (lib/Numbering.ml[103,3124+39]..lib/Numbering.ml[103,3124+40])
              Tmod_ident "T/1991"
  structure_item (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Texp_apply
          expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost,None)
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Texp_apply
          expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Texp_apply
          expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
          Texp_apply
          expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/Numbering.ml[103,3124+42]..lib/Numbering.ml[103,3124+42]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__Numbering>
 "ForHashedType"[module] ->
     Abs<Gbnf_parser__Numbering.29>
        (T/1807,
         {
          "Done"[module] ->
              Abs<Gbnf_parser__Numbering.24>
                 (()/1,
                  {
                   "decode"[value] -> <Gbnf_parser__Numbering.22>;
                   "encode"[value] -> <Gbnf_parser__Numbering.19>;
                   "n"[value] -> <Gbnf_parser__Numbering.18>;
                   "reverse"[value] -> <Gbnf_parser__Numbering.21>;
                   "t"[type] -> <Gbnf_parser__Numbering.17>;
                   });
          "current"[value] -> <Gbnf_parser__Numbering.6>;
          "encode"[value] -> <Gbnf_parser__Numbering.7>;
          "g"[value] -> <Gbnf_parser__Numbering.5>;
          "has_been_encoded"[value] -> <Gbnf_parser__Numbering.10>;
          "reverse_mapping"[value] -> <Gbnf_parser__Numbering.12>;
          "t"[type] -> <Gbnf_parser__Numbering.4>;
          "table"[value] -> <Gbnf_parser__Numbering.8>;
          });
 "ForOrderedType"[module] ->
     Abs<Gbnf_parser__Numbering.27>
        (T/1361,
         {
          "Done"[module] ->
              Abs<Gbnf_parser__Numbering.24>
                 (()/1,
                  {
                   "decode"[value] -> <Gbnf_parser__Numbering.22>;
                   "encode"[value] -> <Gbnf_parser__Numbering.19>;
                   "n"[value] -> <Gbnf_parser__Numbering.18>;
                   "reverse"[value] -> <Gbnf_parser__Numbering.21>;
                   "t"[type] -> <Gbnf_parser__Numbering.17>;
                   });
          "current"[value] -> <Gbnf_parser__Numbering.6>;
          "encode"[value] -> <Gbnf_parser__Numbering.7>;
          "g"[value] -> <Gbnf_parser__Numbering.5>;
          "has_been_encoded"[value] -> <Gbnf_parser__Numbering.10>;
          "reverse_mapping"[value] -> <Gbnf_parser__Numbering.12>;
          "t"[type] -> <Gbnf_parser__Numbering.4>;
          "table"[value] -> <Gbnf_parser__Numbering.8>;
          });
 "ForType"[module] ->
     Abs<Gbnf_parser__Numbering.31>
        (T/1991,
         {
          "Done"[module] ->
              Abs<Gbnf_parser__Numbering.24>
                 (()/1,
                  {
                   "decode"[value] -> <Gbnf_parser__Numbering.22>;
                   "encode"[value] -> <Gbnf_parser__Numbering.19>;
                   "n"[value] -> <Gbnf_parser__Numbering.18>;
                   "reverse"[value] -> <Gbnf_parser__Numbering.21>;
                   "t"[type] -> <Gbnf_parser__Numbering.17>;
                   });
          "current"[value] -> <Gbnf_parser__Numbering.6>;
          "encode"[value] -> <Gbnf_parser__Numbering.7>;
          "g"[value] -> <Gbnf_parser__Numbering.5>;
          "has_been_encoded"[value] -> <Gbnf_parser__Numbering.10>;
          "reverse_mapping"[value] -> <Gbnf_parser__Numbering.12>;
          "t"[type] -> <Gbnf_parser__Numbering.4>;
          "table"[value] -> <Gbnf_parser__Numbering.8>;
          });
 "Make"[module] ->
     Abs<Gbnf_parser__Numbering.25>
        (M/1181,
         {
          "Done"[module] ->
              Abs<Gbnf_parser__Numbering.24>
                 (()/1,
                  {
                   "decode"[value] -> <Gbnf_parser__Numbering.22>;
                   "encode"[value] -> <Gbnf_parser__Numbering.19>;
                   "n"[value] -> <Gbnf_parser__Numbering.18>;
                   "reverse"[value] -> <Gbnf_parser__Numbering.21>;
                   "t"[type] -> <Gbnf_parser__Numbering.17>;
                   });
          "current"[value] -> <Gbnf_parser__Numbering.6>;
          "encode"[value] -> <Gbnf_parser__Numbering.7>;
          "g"[value] -> <Gbnf_parser__Numbering.5>;
          "has_been_encoded"[value] -> <Gbnf_parser__Numbering.10>;
          "reverse_mapping"[value] -> <Gbnf_parser__Numbering.12>;
          "t"[type] -> <Gbnf_parser__Numbering.4>;
          "table"[value] -> <Gbnf_parser__Numbering.8>;
          });
 "force"[value] -> <Gbnf_parser__Numbering.0>;
 }

(seq
  (let
    (*match*/2893 =
       (apply (field 3 (global Ppx_module_timer_runtime!))
         #"Gbnf_parser__Numbering"))
    0)
  (let
    (*match*/2895 =
       (apply
         (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
         "gbnf_parser"))
    0)
  (let
    (*match*/2897 =
       (apply (field 0 (field 5 (global Expect_test_collector!)))
         "lib/Numbering.ml"))
    0)
  (let
    (*match*/2899 =
       (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
         "Numbering.ml"))
    0)
  (let
    (force/1149 =
       (function o/1151
         (if (isint o/1151)
           (raise
             (makeblock 0 (global Assert_failure/28!)
               [0: "lib/Numbering.ml" 16 37]))
           (let (x/1152 =a (field 0 o/1151)) x/1152))))
    (setfield_ptr(root-init) 0 (global Gbnf_parser__Numbering!) force/1149))
  (let
    (Make/1349 =
       (function M/2908 is_a_functor
         (let
           (M/1181 =a M/2908
            g/1190 = (apply (field 2 (global Gbnf_parser__Gensym!)) 0)
            current/1191 =
              (function param/1192[int] : int
                (apply (field 4 (global Gbnf_parser__Gensym!)) g/1190))
            *match*/2907 =
              (let
                (Memo/1245 =
                   (module-defn(Memo/1245) Gbnf_parser__Numbering.Make.encode lib/Numbering.ml(38):1490-1494
                     (apply
                       (let
                         (let/2900 = (field 1 (global Gbnf_parser__Memoize!)))
                         (field 1 (global Gbnf_parser__Memoize!)))
                       M/1181)))
                (apply (field 1 Memo/1245)
                  (function param/1246 : int
                    (apply (field 3 (global Gbnf_parser__Gensym!)) g/1190))))
            table/1194 =a (field 1 *match*/2907)
            encode/1193 =a (field 0 *match*/2907)
            has_been_encoded/1247 =
              (function x/1249 : int
                (try (seq (apply (field 2 M/1181) x/1249 table/1194) 1)
                 with exn/2901
                  (catch
                    (if (== exn/2901 (field 7 (global Stdlib!))) 0 (exit 13))
                   with (13) (reraise exn/2901))))
            reverse_mapping/1250 =
              (function param/1303[int]
                (let
                  (n/1252 =[int] (apply current/1191 0)
                   reverse/1253 = (caml_make_vect n/1252 0))
                  (seq
                    (apply (field 4 M/1181)
                      (function x/1301 i/1302[int] : int
                        (array.set[addr] reverse/1253 i/1302
                          (makeblock 0 x/1301)))
                      table/1194)
                    (apply (field 14 (global Stdlib__Array!))
                      (field 0 (global Gbnf_parser__Numbering!))
                      reverse/1253))))
            Done/1348 =
              (module-defn(Done/1348) Gbnf_parser__Numbering.Make lib/Numbering.ml(61):2104-2905
                (function */2903 is_a_functor
                  (let
                    (*/2902 =a */2903
                     n/1305 =[int] (apply current/1191 0)
                     encode/1306 =
                       (function x/1307 : int
                         (if (apply has_been_encoded/1247 x/1307)
                           (apply encode/1193 x/1307)
                           (apply (field 0 (global Stdlib!))
                             (apply (field 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "Fix.Numbering: invalid argument passed to \"encode\".\n"
                                 [2: 0 [12: '\n' 0]]]
                                "Fix.Numbering: invalid argument passed to \"encode\".\n%s\n"]
                               #"File \"lib/Numbering.ml\", line 76, characters 10-17"))))
                     reverse/1344 = (apply reverse_mapping/1250 0)
                     decode/1345 =
                       (function i/1347[int]
                         (if (&& (<= 0 i/1347) (< i/1347 n/1305))
                           (array.get[gen] reverse/1344 i/1347)
                           (apply (field 0 (global Stdlib!))
                             (apply (field 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "Fix.Numbering: invalid argument passed to \"decode\".\nThe index "
                                 [4:
                                  0 0 0
                                  [11:
                                   " is not in the range [0, "
                                   [4:
                                    0 0 0 [11: ").\n" [2: 0 [12: '\n' 0]]]]]]]
                                "Fix.Numbering: invalid argument passed to \"decode\".\nThe index %d is not in the range [0, %d).\n%s\n"]
                               i/1347 n/1305
                               #"File \"lib/Numbering.ml\", line 89, characters 14-21")))))
                    (makeblock 0 n/1305 encode/1306 reverse/1344 decode/1345)))))
           (makeblock 0 g/1190 current/1191 encode/1193 table/1194
             has_been_encoded/1247 reverse_mapping/1250 Done/1348))))
    (seq
      (setfield_ptr(root-init) 1 (global Gbnf_parser__Numbering!) Make/1349)
      (let
        (ForOrderedType/1723 =
           (function T/2913 is_a_functor
             (let (T/1361 =a T/2913)
               (apply (field 1 (global Gbnf_parser__Numbering!))
                 (let
                   (let/2912 =
                      (apply
                        (let
                          (let/2911 = (field 9 (global Gbnf_parser__Glue!)))
                          (field 9 (global Gbnf_parser__Glue!)))
                        (let
                          (let/2910 =
                             (apply
                               (let
                                 (let/2909 = (field 0 (global Stdlib__Map!)))
                                 (field 0 (global Stdlib__Map!)))
                               T/1361))
                          (makeblock 0 (field 0 let/2910) (field 3 let/2910)
                            (field 27 let/2910) (field 11 let/2910)))))
                   (makeblock 0 (field 0 let/2912) (field 2 let/2912)
                     (field 3 let/2912) (field 1 let/2912)
                     (field 4 let/2912)))))))
        (seq
          (setfield_ptr(root-init) 2 (global Gbnf_parser__Numbering!)
            ForOrderedType/1723)
          (let
            (ForHashedType/1989 =
               (function T/2916 is_a_functor
                 (let (T/1807 =a T/2916)
                   (apply (field 1 (global Gbnf_parser__Numbering!))
                     (let
                       (let/2915 =
                          (apply
                            (let
                              (let/2914 =
                                 (field 12 (global Gbnf_parser__Glue!)))
                              (field 12 (global Gbnf_parser__Glue!)))
                            T/1807))
                       (makeblock 0 (field 19 let/2915) (field 20 let/2915)
                         (field 21 let/2915) (field 0 let/2915)
                         (field 8 let/2915)))))))
            (seq
              (setfield_ptr(root-init) 3 (global Gbnf_parser__Numbering!)
                ForHashedType/1989)
              (let
                (ForType/2011 =
                   (function T/2918 is_a_functor
                     (let (T/1991 =a T/2918)
                       (apply (field 3 (global Gbnf_parser__Numbering!))
                         (apply
                           (let
                             (let/2917 =
                                (field 4 (global Gbnf_parser__Glue!)))
                             (field 4 (global Gbnf_parser__Glue!)))
                           T/1991)))))
                (seq
                  (setfield_ptr(root-init) 4 (global Gbnf_parser__Numbering!)
                    ForType/2011)
                  (let
                    (*match*/2920 =
                       (apply (field 5 (global Ppx_inline_test_lib!))
                         "gbnf_parser"))
                    0)
                  (let
                    (*match*/2922 =
                       (apply
                         (field 1 (field 5 (global Expect_test_collector!)))
                         0))
                    0)
                  (let
                    (*match*/2924 =
                       (apply
                         (field 1
                           (field 0
                             (global Ppx_bench_lib__Benchmark_accumulator!)))
                         0))
                    0)
                  (let
                    (*match*/2926 =
                       (apply (field 4 (global Ppx_module_timer_runtime!))
                         #"Gbnf_parser__Numbering"))
                    0)
                  0)))))))))
(seq
  (let
    (*match*/2893 =
       (apply (field 3 (global Ppx_module_timer_runtime!))
         #"Gbnf_parser__Numbering"))
    0)
  (let
    (*match*/2895 =
       (apply
         (field 0 (field 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
         "gbnf_parser"))
    0)
  (let
    (*match*/2897 =
       (apply (field 0 (field 5 (global Expect_test_collector!)))
         "lib/Numbering.ml"))
    0)
  (let
    (*match*/2899 =
       (apply (field 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
         "Numbering.ml"))
    0)
  (let
    (force/1149 =
       (function o/1151
         (if (isint o/1151)
           (raise
             (makeblock 0 (global Assert_failure/28!)
               [0: "lib/Numbering.ml" 16 37]))
           (field 0 o/1151))))
    (setfield_ptr(root-init) 0 (global Gbnf_parser__Numbering!) force/1149))
  (let
    (Make/1349 =
       (function M/2908 is_a_functor
         (let
           (g/1190 = (apply (field 2 (global Gbnf_parser__Gensym!)) 0)
            current/1191 =
              (function param/1192[int] : int
                (apply (field 4 (global Gbnf_parser__Gensym!)) g/1190))
            *match*/2907 =
              (let
                (Memo/1245 =
                   (module-defn(Memo/1245) Gbnf_parser__Numbering.Make.encode lib/Numbering.ml(38):1490-1494
                     (apply
                       (let
                         (let/2900 = (field 1 (global Gbnf_parser__Memoize!)))
                         (field 1 (global Gbnf_parser__Memoize!)))
                       M/2908)))
                (apply (field 1 Memo/1245)
                  (function param/1246 : int
                    (apply (field 3 (global Gbnf_parser__Gensym!)) g/1190))))
            table/1194 =a (field 1 *match*/2907)
            encode/1193 =a (field 0 *match*/2907)
            has_been_encoded/1247 =
              (function x/1249 : int
                (try (seq (apply (field 2 M/2908) x/1249 table/1194) 1)
                 with exn/2901
                  (if (== exn/2901 (field 7 (global Stdlib!))) 0
                    (reraise exn/2901))))
            reverse_mapping/1250 =
              (function param/1303[int]
                (let
                  (n/1252 =[int] (apply current/1191 0)
                   reverse/1253 = (caml_make_vect n/1252 0))
                  (seq
                    (apply (field 4 M/2908)
                      (function x/1301 i/1302[int] : int
                        (array.set[addr] reverse/1253 i/1302
                          (makeblock 0 x/1301)))
                      table/1194)
                    (apply (field 14 (global Stdlib__Array!))
                      (field 0 (global Gbnf_parser__Numbering!))
                      reverse/1253))))
            Done/1348 =
              (module-defn(Done/1348) Gbnf_parser__Numbering.Make lib/Numbering.ml(61):2104-2905
                (function */2903 is_a_functor
                  (let
                    (n/1305 =[int] (apply current/1191 0)
                     encode/1306 =
                       (function x/1307 : int
                         (if (apply has_been_encoded/1247 x/1307)
                           (apply encode/1193 x/1307)
                           (apply (field 0 (global Stdlib!))
                             (apply (field 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "Fix.Numbering: invalid argument passed to \"encode\".\n"
                                 [2: 0 [12: '\n' 0]]]
                                "Fix.Numbering: invalid argument passed to \"encode\".\n%s\n"]
                               #"File \"lib/Numbering.ml\", line 76, characters 10-17"))))
                     reverse/1344 = (apply reverse_mapping/1250 0)
                     decode/1345 =
                       (function i/1347[int]
                         (if (&& (<= 0 i/1347) (< i/1347 n/1305))
                           (array.get[gen] reverse/1344 i/1347)
                           (apply (field 0 (global Stdlib!))
                             (apply (field 3 (global Stdlib__Printf!))
                               [0:
                                [11:
                                 "Fix.Numbering: invalid argument passed to \"decode\".\nThe index "
                                 [4:
                                  0 0 0
                                  [11:
                                   " is not in the range [0, "
                                   [4:
                                    0 0 0 [11: ").\n" [2: 0 [12: '\n' 0]]]]]]]
                                "Fix.Numbering: invalid argument passed to \"decode\".\nThe index %d is not in the range [0, %d).\n%s\n"]
                               i/1347 n/1305
                               #"File \"lib/Numbering.ml\", line 89, characters 14-21")))))
                    (makeblock 0 n/1305 encode/1306 reverse/1344 decode/1345)))))
           (makeblock 0 g/1190 current/1191 encode/1193 table/1194
             has_been_encoded/1247 reverse_mapping/1250 Done/1348))))
    (seq
      (setfield_ptr(root-init) 1 (global Gbnf_parser__Numbering!) Make/1349)
      (let
        (ForOrderedType/1723 =
           (function T/2913 is_a_functor
             (apply (field 1 (global Gbnf_parser__Numbering!))
               (let
                 (let/2912 =
                    (apply
                      (let (let/2911 = (field 9 (global Gbnf_parser__Glue!)))
                        (field 9 (global Gbnf_parser__Glue!)))
                      (let
                        (let/2910 =
                           (apply
                             (let
                               (let/2909 = (field 0 (global Stdlib__Map!)))
                               (field 0 (global Stdlib__Map!)))
                             T/2913))
                        (makeblock 0 (field 0 let/2910) (field 3 let/2910)
                          (field 27 let/2910) (field 11 let/2910)))))
                 (makeblock 0 (field 0 let/2912) (field 2 let/2912)
                   (field 3 let/2912) (field 1 let/2912) (field 4 let/2912))))))
        (seq
          (setfield_ptr(root-init) 2 (global Gbnf_parser__Numbering!)
            ForOrderedType/1723)
          (let
            (ForHashedType/1989 =
               (function T/2916 is_a_functor
                 (apply (field 1 (global Gbnf_parser__Numbering!))
                   (let
                     (let/2915 =
                        (apply
                          (let
                            (let/2914 =
                               (field 12 (global Gbnf_parser__Glue!)))
                            (field 12 (global Gbnf_parser__Glue!)))
                          T/2916))
                     (makeblock 0 (field 19 let/2915) (field 20 let/2915)
                       (field 21 let/2915) (field 0 let/2915)
                       (field 8 let/2915))))))
            (seq
              (setfield_ptr(root-init) 3 (global Gbnf_parser__Numbering!)
                ForHashedType/1989)
              (let
                (ForType/2011 =
                   (function T/2918 is_a_functor
                     (apply (field 3 (global Gbnf_parser__Numbering!))
                       (apply
                         (let
                           (let/2917 = (field 4 (global Gbnf_parser__Glue!)))
                           (field 4 (global Gbnf_parser__Glue!)))
                         T/2918))))
                (seq
                  (setfield_ptr(root-init) 4 (global Gbnf_parser__Numbering!)
                    ForType/2011)
                  (let
                    (*match*/2920 =
                       (apply (field 5 (global Ppx_inline_test_lib!))
                         "gbnf_parser"))
                    0)
                  (let
                    (*match*/2922 =
                       (apply
                         (field 1 (field 5 (global Expect_test_collector!)))
                         0))
                    0)
                  (let
                    (*match*/2924 =
                       (apply
                         (field 1
                           (field 0
                             (global Ppx_bench_lib__Benchmark_accumulator!)))
                         0))
                    0)
                  (let
                    (*match*/2926 =
                       (apply (field 4 (global Ppx_module_timer_runtime!))
                         #"Gbnf_parser__Numbering"))
                    0)
                  0)))))))))
