[
  structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
    Pstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          None
        expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_start" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          None
        expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.set" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          None
        expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
            Pexp_ident "Expect_test_collector.Current_file.set" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          [
            <arg>
            Labelled "absolute_filename"
              expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
                Pexp_constant PConst_string("lib/sentenceParser.ml",(lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          None
        expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
            Pexp_ident "Ppx_inline_test_lib.set_lib_and_partition" (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost,None)
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost
                Pexp_constant PConst_string("sentenceParser.ml",(lib/sentenceParser.ml[4,73+0]..[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..[5,82+42])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+4]..[4,73+6])
          Ppat_construct "()" (lib/sentenceParser.ml[4,73+4]..[4,73+6])
          None
        expression (lib/sentenceParser.ml[5,82+2]..[5,82+42])
          Pexp_ident "MenhirLib.StaticVersion.require_20230608" (lib/sentenceParser.ml[5,82+2]..[5,82+42])
    ]
  structure_item (lib/sentenceParser.ml[7,126+0]..[48,819+3])
    Pstr_module
    "MenhirBasics" (lib/sentenceParser.ml[7,126+7]..[7,126+19])
      module_expr (lib/sentenceParser.ml[7,126+22]..[48,819+3])
        Pmod_structure
        [
          structure_item (lib/sentenceParser.ml[9,158+2]..[9,158+17])
            Pstr_exception
            type_exception
              ptyext_constructor =
                extension_constructor (lib/sentenceParser.ml[9,158+2]..[9,158+17])
                  pext_name = "Error"
                  pext_kind =
                    Pext_decl
                      []
                      None
          structure_item (lib/sentenceParser.ml[11,179+2]..[13,206+17])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[11,179+6]..[11,179+10])
                  Ppat_var "_eRR" (lib/sentenceParser.ml[11,179+6]..[11,179+10])
                expression (lib/sentenceParser.ml[12,192+4]..[13,206+17])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser.ml[12,192+8]..[12,192+10])
                    Ppat_var "_s" (lib/sentenceParser.ml[12,192+8]..[12,192+10])
                  expression (lib/sentenceParser.ml[13,206+6]..[13,206+17])
                    Pexp_apply
                    expression (lib/sentenceParser.ml[13,206+6]..[13,206+11])
                      Pexp_ident "raise" (lib/sentenceParser.ml[13,206+6]..[13,206+11])
                    [
                      <arg>
                      Nolabel
                        expression (lib/sentenceParser.ml[13,206+12]..[13,206+17])
                          Pexp_construct "Error" (lib/sentenceParser.ml[13,206+12]..[13,206+17])
                          None
                    ]
            ]
          structure_item (lib/sentenceParser.ml[15,227+2]..[46,806+9])
            Pstr_type Rec
            [
              type_declaration "token" (lib/sentenceParser.ml[15,227+7]..[15,227+12]) (lib/sentenceParser.ml[15,227+2]..[46,806+9])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ptype_variant
                    [
                      (lib/sentenceParser.ml[16,243+4]..[20,332+3])
                        "Tchar" (lib/sentenceParser.ml[16,243+6]..[16,243+11])
                        [
                          core_type (lib/sentenceParser.mly[26,290+8]..[26,290+11])
                            Ptyp_constr "int" (lib/sentenceParser.mly[26,290+8]..[26,290+11])
                            []
                        ]
                        None
                      (lib/sentenceParser.ml[21,336+4]..[21,336+10])
                        "STAR" (lib/sentenceParser.ml[21,336+6]..[21,336+10])
                        []
                        None
                      (lib/sentenceParser.ml[22,347+4]..[22,347+12])
                        "RPAREN" (lib/sentenceParser.ml[22,347+6]..[22,347+12])
                        []
                        None
                      (lib/sentenceParser.ml[23,360+4]..[27,470+3])
                        "REGEX" (lib/sentenceParser.ml[23,360+6]..[23,360+11])
                        [
                          core_type (lib/sentenceParser.mly[39,407+8]..[39,407+32])
                            Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,407+15]..[39,407+32])
                            [
                              core_type (lib/sentenceParser.mly[39,407+8]..[39,407+14])
                                Ptyp_constr "string" (lib/sentenceParser.mly[39,407+8]..[39,407+14])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[28,474+4]..[28,474+14])
                        "QUESTION" (lib/sentenceParser.ml[28,474+6]..[28,474+14])
                        []
                        None
                      (lib/sentenceParser.ml[29,489+4]..[33,597+3])
                        "QID" (lib/sentenceParser.ml[29,489+6]..[29,489+9])
                        [
                          core_type (lib/sentenceParser.mly[39,534+8]..[39,534+32])
                            Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,534+15]..[39,534+32])
                            [
                              core_type (lib/sentenceParser.mly[39,534+8]..[39,534+14])
                                Ptyp_constr "string" (lib/sentenceParser.mly[39,534+8]..[39,534+14])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[34,601+4]..[34,601+10])
                        "PLUS" (lib/sentenceParser.ml[34,601+6]..[34,601+10])
                        []
                        None
                      (lib/sentenceParser.ml[35,612+4]..[35,612+13])
                        "NEWLINE" (lib/sentenceParser.ml[35,612+6]..[35,612+13])
                        []
                        None
                      (lib/sentenceParser.ml[36,626+4]..[36,626+12])
                        "LPAREN" (lib/sentenceParser.ml[36,626+6]..[36,626+12])
                        []
                        None
                      (lib/sentenceParser.ml[37,639+4]..[41,747+3])
                        "LID" (lib/sentenceParser.ml[37,639+6]..[37,639+9])
                        [
                          core_type (lib/sentenceParser.mly[39,684+8]..[39,684+32])
                            Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,684+15]..[39,684+32])
                            [
                              core_type (lib/sentenceParser.mly[39,684+8]..[39,684+14])
                                Ptyp_constr "string" (lib/sentenceParser.mly[39,684+8]..[39,684+14])
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[42,751+4]..[42,751+9])
                        "EOF" (lib/sentenceParser.ml[42,751+6]..[42,751+9])
                        []
                        None
                      (lib/sentenceParser.ml[43,761+4]..[43,761+10])
                        "DASH" (lib/sentenceParser.ml[43,761+6]..[43,761+10])
                        []
                        None
                      (lib/sentenceParser.ml[44,772+4]..[44,772+21])
                        "COLONCOLONEQUAL" (lib/sentenceParser.ml[44,772+6]..[44,772+21])
                        []
                        None
                      (lib/sentenceParser.ml[45,794+4]..[45,794+11])
                        "CARET" (lib/sentenceParser.ml[45,794+6]..[45,794+11])
                        []
                        None
                      (lib/sentenceParser.ml[46,806+4]..[46,806+9])
                        "BAR" (lib/sentenceParser.ml[46,806+6]..[46,806+9])
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (lib/sentenceParser.ml[50,824+0]..[50,824+20])
    Pstr_include    module_expr (lib/sentenceParser.ml[50,824+8]..[50,824+20])
      Pmod_ident "MenhirBasics" (lib/sentenceParser.ml[50,824+8]..[50,824+20])
  structure_item (lib/sentenceParser.mly[23,879+0]..[23,879+11])
    Pstr_open Fresh
    module_expr (lib/sentenceParser.mly[23,879+5]..[23,879+11])
      Pmod_ident "Syntax" (lib/sentenceParser.mly[23,879+5]..[23,879+11])
  structure_item (lib/sentenceParser.ml[58,922+0]..[1312,49153+3])
    Pstr_module
    "Tables" (lib/sentenceParser.ml[58,922+7]..[58,922+13])
      module_expr (lib/sentenceParser.ml[58,922+16]..[1312,49153+3])
        Pmod_structure
        [
          structure_item (lib/sentenceParser.ml[60,948+2]..[60,948+22])
            Pstr_include            module_expr (lib/sentenceParser.ml[60,948+10]..[60,948+22])
              Pmod_ident "MenhirBasics" (lib/sentenceParser.ml[60,948+10]..[60,948+22])
          structure_item (lib/sentenceParser.ml[62,974+2]..[1310,49142+7])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[62,974+6]..[62,974+20])
                  Ppat_var "token2terminal" (lib/sentenceParser.ml[62,974+6]..[62,974+20])
                core_type (lib/sentenceParser.ml[62,974+23]..[62,974+35])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/sentenceParser.ml[62,974+23]..[62,974+28])
                    Ptyp_constr "token" (lib/sentenceParser.ml[62,974+23]..[62,974+28])
                    []
                  core_type (lib/sentenceParser.ml[62,974+32]..[62,974+35])
                    Ptyp_constr "int" (lib/sentenceParser.ml[62,974+32]..[62,974+35])
                    []
                expression (lib/sentenceParser.ml[63,1012+4]..[94,1493+11])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser.ml[63,1012+8]..[63,1012+12])
                    Ppat_var "_tok" (lib/sentenceParser.ml[63,1012+8]..[63,1012+12])
                  expression (lib/sentenceParser.ml[64,1028+6]..[94,1493+11])
                    Pexp_match
                    expression (lib/sentenceParser.ml[64,1028+12]..[64,1028+16])
                      Pexp_ident "_tok" (lib/sentenceParser.ml[64,1028+12]..[64,1028+16])
                    [
                      <case>
                        pattern (lib/sentenceParser.ml[65,1050+8]..[65,1050+11])
                          Ppat_construct "BAR" (lib/sentenceParser.ml[65,1050+8]..[65,1050+11])
                          None
                        expression (lib/sentenceParser.ml[66,1065+10]..[66,1065+12])
                          Pexp_constant PConst_int (15,None)
                      <case>
                        pattern (lib/sentenceParser.ml[67,1078+8]..[67,1078+13])
                          Ppat_construct "CARET" (lib/sentenceParser.ml[67,1078+8]..[67,1078+13])
                          None
                        expression (lib/sentenceParser.ml[68,1095+10]..[68,1095+12])
                          Pexp_constant PConst_int (14,None)
                      <case>
                        pattern (lib/sentenceParser.ml[69,1108+8]..[69,1108+23])
                          Ppat_construct "COLONCOLONEQUAL" (lib/sentenceParser.ml[69,1108+8]..[69,1108+23])
                          None
                        expression (lib/sentenceParser.ml[70,1135+10]..[70,1135+12])
                          Pexp_constant PConst_int (13,None)
                      <case>
                        pattern (lib/sentenceParser.ml[71,1148+8]..[71,1148+12])
                          Ppat_construct "DASH" (lib/sentenceParser.ml[71,1148+8]..[71,1148+12])
                          None
                        expression (lib/sentenceParser.ml[72,1164+10]..[72,1164+12])
                          Pexp_constant PConst_int (12,None)
                      <case>
                        pattern (lib/sentenceParser.ml[73,1177+8]..[73,1177+11])
                          Ppat_construct "EOF" (lib/sentenceParser.ml[73,1177+8]..[73,1177+11])
                          None
                        expression (lib/sentenceParser.ml[74,1192+10]..[74,1192+12])
                          Pexp_constant PConst_int (11,None)
                      <case>
                        pattern (lib/sentenceParser.ml[75,1205+8]..[75,1205+13])
                          Ppat_construct "LID" (lib/sentenceParser.ml[75,1205+8]..[75,1205+11])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[75,1205+12]..[75,1205+13])
                              Ppat_any
                        expression (lib/sentenceParser.ml[76,1222+10]..[76,1222+12])
                          Pexp_constant PConst_int (10,None)
                      <case>
                        pattern (lib/sentenceParser.ml[77,1235+8]..[77,1235+14])
                          Ppat_construct "LPAREN" (lib/sentenceParser.ml[77,1235+8]..[77,1235+14])
                          None
                        expression (lib/sentenceParser.ml[78,1253+10]..[78,1253+11])
                          Pexp_constant PConst_int (9,None)
                      <case>
                        pattern (lib/sentenceParser.ml[79,1265+8]..[79,1265+15])
                          Ppat_construct "NEWLINE" (lib/sentenceParser.ml[79,1265+8]..[79,1265+15])
                          None
                        expression (lib/sentenceParser.ml[80,1284+10]..[80,1284+11])
                          Pexp_constant PConst_int (8,None)
                      <case>
                        pattern (lib/sentenceParser.ml[81,1296+8]..[81,1296+12])
                          Ppat_construct "PLUS" (lib/sentenceParser.ml[81,1296+8]..[81,1296+12])
                          None
                        expression (lib/sentenceParser.ml[82,1312+10]..[82,1312+11])
                          Pexp_constant PConst_int (7,None)
                      <case>
                        pattern (lib/sentenceParser.ml[83,1324+8]..[83,1324+13])
                          Ppat_construct "QID" (lib/sentenceParser.ml[83,1324+8]..[83,1324+11])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[83,1324+12]..[83,1324+13])
                              Ppat_any
                        expression (lib/sentenceParser.ml[84,1341+10]..[84,1341+11])
                          Pexp_constant PConst_int (6,None)
                      <case>
                        pattern (lib/sentenceParser.ml[85,1353+8]..[85,1353+16])
                          Ppat_construct "QUESTION" (lib/sentenceParser.ml[85,1353+8]..[85,1353+16])
                          None
                        expression (lib/sentenceParser.ml[86,1373+10]..[86,1373+11])
                          Pexp_constant PConst_int (5,None)
                      <case>
                        pattern (lib/sentenceParser.ml[87,1385+8]..[87,1385+15])
                          Ppat_construct "REGEX" (lib/sentenceParser.ml[87,1385+8]..[87,1385+13])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[87,1385+14]..[87,1385+15])
                              Ppat_any
                        expression (lib/sentenceParser.ml[88,1404+10]..[88,1404+11])
                          Pexp_constant PConst_int (4,None)
                      <case>
                        pattern (lib/sentenceParser.ml[89,1416+8]..[89,1416+14])
                          Ppat_construct "RPAREN" (lib/sentenceParser.ml[89,1416+8]..[89,1416+14])
                          None
                        expression (lib/sentenceParser.ml[90,1434+10]..[90,1434+11])
                          Pexp_constant PConst_int (3,None)
                      <case>
                        pattern (lib/sentenceParser.ml[91,1446+8]..[91,1446+12])
                          Ppat_construct "STAR" (lib/sentenceParser.ml[91,1446+8]..[91,1446+12])
                          None
                        expression (lib/sentenceParser.ml[92,1462+10]..[92,1462+11])
                          Pexp_constant PConst_int (2,None)
                      <case>
                        pattern (lib/sentenceParser.ml[93,1474+8]..[93,1474+15])
                          Ppat_construct "Tchar" (lib/sentenceParser.ml[93,1474+8]..[93,1474+13])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[93,1474+14]..[93,1474+15])
                              Ppat_any
                        expression (lib/sentenceParser.ml[94,1493+10]..[94,1493+11])
                          Pexp_constant PConst_int (1,None)
                    ]
              <def>
                pattern (lib/sentenceParser.ml[96,1508+6]..[96,1508+20])
                  Ppat_var "error_terminal" (lib/sentenceParser.ml[96,1508+6]..[96,1508+20])
                expression (lib/sentenceParser.ml[97,1531+4]..[97,1531+5])
                  Pexp_constant PConst_int (0,None)
              <def>
                pattern (lib/sentenceParser.ml[99,1540+6]..[99,1540+17])
                  Ppat_var "token2value" (lib/sentenceParser.ml[99,1540+6]..[99,1540+17])
                core_type (lib/sentenceParser.ml[99,1540+20]..[99,1540+34])
                  Ptyp_arrow
                  Nolabel
                  core_type (lib/sentenceParser.ml[99,1540+20]..[99,1540+25])
                    Ptyp_constr "token" (lib/sentenceParser.ml[99,1540+20]..[99,1540+25])
                    []
                  core_type (lib/sentenceParser.ml[99,1540+29]..[99,1540+34])
                    Ptyp_constr "Obj.t" (lib/sentenceParser.ml[99,1540+29]..[99,1540+34])
                    []
                expression (lib/sentenceParser.ml[100,1577+4]..[131,2196+21])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser.ml[100,1577+8]..[100,1577+12])
                    Ppat_var "_tok" (lib/sentenceParser.ml[100,1577+8]..[100,1577+12])
                  expression (lib/sentenceParser.ml[101,1593+6]..[131,2196+21])
                    Pexp_match
                    expression (lib/sentenceParser.ml[101,1593+12]..[101,1593+16])
                      Pexp_ident "_tok" (lib/sentenceParser.ml[101,1593+12]..[101,1593+16])
                    [
                      <case>
                        pattern (lib/sentenceParser.ml[102,1615+8]..[102,1615+11])
                          Ppat_construct "BAR" (lib/sentenceParser.ml[102,1615+8]..[102,1615+11])
                          None
                        expression (lib/sentenceParser.ml[103,1630+10]..[103,1630+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[103,1630+10]..[103,1630+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[103,1630+10]..[103,1630+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[103,1630+19]..[103,1630+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[103,1630+19]..[103,1630+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[104,1652+8]..[104,1652+13])
                          Ppat_construct "CARET" (lib/sentenceParser.ml[104,1652+8]..[104,1652+13])
                          None
                        expression (lib/sentenceParser.ml[105,1669+10]..[105,1669+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[105,1669+10]..[105,1669+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[105,1669+10]..[105,1669+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[105,1669+19]..[105,1669+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[105,1669+19]..[105,1669+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[106,1691+8]..[106,1691+23])
                          Ppat_construct "COLONCOLONEQUAL" (lib/sentenceParser.ml[106,1691+8]..[106,1691+23])
                          None
                        expression (lib/sentenceParser.ml[107,1718+10]..[107,1718+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[107,1718+10]..[107,1718+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[107,1718+10]..[107,1718+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[107,1718+19]..[107,1718+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[107,1718+19]..[107,1718+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[108,1740+8]..[108,1740+12])
                          Ppat_construct "DASH" (lib/sentenceParser.ml[108,1740+8]..[108,1740+12])
                          None
                        expression (lib/sentenceParser.ml[109,1756+10]..[109,1756+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[109,1756+10]..[109,1756+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[109,1756+10]..[109,1756+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[109,1756+19]..[109,1756+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[109,1756+19]..[109,1756+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[110,1778+8]..[110,1778+11])
                          Ppat_construct "EOF" (lib/sentenceParser.ml[110,1778+8]..[110,1778+11])
                          None
                        expression (lib/sentenceParser.ml[111,1793+10]..[111,1793+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[111,1793+10]..[111,1793+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[111,1793+10]..[111,1793+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[111,1793+19]..[111,1793+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[111,1793+19]..[111,1793+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[112,1815+8]..[112,1815+14])
                          Ppat_construct "LID" (lib/sentenceParser.ml[112,1815+8]..[112,1815+11])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[112,1815+12]..[112,1815+14])
                              Ppat_var "_v" (lib/sentenceParser.ml[112,1815+12]..[112,1815+14])
                        expression (lib/sentenceParser.ml[113,1833+10]..[113,1833+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[113,1833+10]..[113,1833+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[113,1833+10]..[113,1833+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[113,1833+19]..[113,1833+21])
                                Pexp_ident "_v" (lib/sentenceParser.ml[113,1833+19]..[113,1833+21])
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[114,1855+8]..[114,1855+14])
                          Ppat_construct "LPAREN" (lib/sentenceParser.ml[114,1855+8]..[114,1855+14])
                          None
                        expression (lib/sentenceParser.ml[115,1873+10]..[115,1873+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[115,1873+10]..[115,1873+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[115,1873+10]..[115,1873+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[115,1873+19]..[115,1873+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[115,1873+19]..[115,1873+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[116,1895+8]..[116,1895+15])
                          Ppat_construct "NEWLINE" (lib/sentenceParser.ml[116,1895+8]..[116,1895+15])
                          None
                        expression (lib/sentenceParser.ml[117,1914+10]..[117,1914+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[117,1914+10]..[117,1914+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[117,1914+10]..[117,1914+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[117,1914+19]..[117,1914+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[117,1914+19]..[117,1914+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[118,1936+8]..[118,1936+12])
                          Ppat_construct "PLUS" (lib/sentenceParser.ml[118,1936+8]..[118,1936+12])
                          None
                        expression (lib/sentenceParser.ml[119,1952+10]..[119,1952+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[119,1952+10]..[119,1952+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[119,1952+10]..[119,1952+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[119,1952+19]..[119,1952+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[119,1952+19]..[119,1952+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[120,1974+8]..[120,1974+14])
                          Ppat_construct "QID" (lib/sentenceParser.ml[120,1974+8]..[120,1974+11])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[120,1974+12]..[120,1974+14])
                              Ppat_var "_v" (lib/sentenceParser.ml[120,1974+12]..[120,1974+14])
                        expression (lib/sentenceParser.ml[121,1992+10]..[121,1992+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[121,1992+10]..[121,1992+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[121,1992+10]..[121,1992+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[121,1992+19]..[121,1992+21])
                                Pexp_ident "_v" (lib/sentenceParser.ml[121,1992+19]..[121,1992+21])
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[122,2014+8]..[122,2014+16])
                          Ppat_construct "QUESTION" (lib/sentenceParser.ml[122,2014+8]..[122,2014+16])
                          None
                        expression (lib/sentenceParser.ml[123,2034+10]..[123,2034+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[123,2034+10]..[123,2034+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[123,2034+10]..[123,2034+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[123,2034+19]..[123,2034+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[123,2034+19]..[123,2034+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[124,2056+8]..[124,2056+16])
                          Ppat_construct "REGEX" (lib/sentenceParser.ml[124,2056+8]..[124,2056+13])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[124,2056+14]..[124,2056+16])
                              Ppat_var "_v" (lib/sentenceParser.ml[124,2056+14]..[124,2056+16])
                        expression (lib/sentenceParser.ml[125,2076+10]..[125,2076+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[125,2076+10]..[125,2076+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[125,2076+10]..[125,2076+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[125,2076+19]..[125,2076+21])
                                Pexp_ident "_v" (lib/sentenceParser.ml[125,2076+19]..[125,2076+21])
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[126,2098+8]..[126,2098+14])
                          Ppat_construct "RPAREN" (lib/sentenceParser.ml[126,2098+8]..[126,2098+14])
                          None
                        expression (lib/sentenceParser.ml[127,2116+10]..[127,2116+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[127,2116+10]..[127,2116+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[127,2116+10]..[127,2116+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[127,2116+19]..[127,2116+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[127,2116+19]..[127,2116+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[128,2138+8]..[128,2138+12])
                          Ppat_construct "STAR" (lib/sentenceParser.ml[128,2138+8]..[128,2138+12])
                          None
                        expression (lib/sentenceParser.ml[129,2154+10]..[129,2154+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[129,2154+10]..[129,2154+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[129,2154+10]..[129,2154+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[129,2154+19]..[129,2154+21])
                                Pexp_construct "()" (lib/sentenceParser.ml[129,2154+19]..[129,2154+21])
                                None
                          ]
                      <case>
                        pattern (lib/sentenceParser.ml[130,2176+8]..[130,2176+16])
                          Ppat_construct "Tchar" (lib/sentenceParser.ml[130,2176+8]..[130,2176+13])
                          Some
                            []
                            pattern (lib/sentenceParser.ml[130,2176+14]..[130,2176+16])
                              Ppat_var "_v" (lib/sentenceParser.ml[130,2176+14]..[130,2176+16])
                        expression (lib/sentenceParser.ml[131,2196+10]..[131,2196+21])
                          Pexp_apply
                          expression (lib/sentenceParser.ml[131,2196+10]..[131,2196+18])
                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[131,2196+10]..[131,2196+18])
                          [
                            <arg>
                            Nolabel
                              expression (lib/sentenceParser.ml[131,2196+19]..[131,2196+21])
                                Pexp_ident "_v" (lib/sentenceParser.ml[131,2196+19]..[131,2196+21])
                          ]
                    ]
              <def>
                pattern (lib/sentenceParser.ml[133,2221+6]..[133,2221+23])
                  Ppat_var "default_reduction" (lib/sentenceParser.ml[133,2221+6]..[133,2221+23])
                expression (lib/sentenceParser.ml[134,2247+4]..[134,2247+185])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser.ml[134,2247+5]..[134,2247+6])
                      Pexp_constant PConst_int (8,None)
                    expression (lib/sentenceParser.ml[134,2247+8]..[134,2247+184])
                      Pexp_constant PConst_string("\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001",(lib/sentenceParser.ml[134,2247+9]..[134,2247+183]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[136,2436+6]..[136,2436+11])
                  Ppat_var "error" (lib/sentenceParser.ml[136,2436+6]..[136,2436+11])
                expression (lib/sentenceParser.ml[137,2450+4]..[137,2450+327])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser.ml[137,2450+5]..[137,2450+7])
                      Pexp_constant PConst_int (16,None)
                    expression (lib/sentenceParser.ml[137,2450+9]..[137,2450+326])
                      Pexp_constant PConst_string("\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000",(lib/sentenceParser.ml[137,2450+10]..[137,2450+325]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[139,2781+6]..[139,2781+11])
                  Ppat_var "start" (lib/sentenceParser.ml[139,2781+6]..[139,2781+11])
                expression (lib/sentenceParser.ml[140,2795+4]..[140,2795+5])
                  Pexp_constant PConst_int (1,None)
              <def>
                pattern (lib/sentenceParser.ml[142,2804+6]..[142,2804+12])
                  Ppat_var "action" (lib/sentenceParser.ml[142,2804+6]..[142,2804+12])
                expression (lib/sentenceParser.ml[143,2819+4]..[143,2819+440])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser.ml[143,2819+5]..[143,2819+153])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser.ml[143,2819+6]..[143,2819+7])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser.ml[143,2819+9]..[143,2819+152])
                          Pexp_constant PConst_string("p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000",(lib/sentenceParser.ml[143,2819+10]..[143,2819+151]),None)
                      ]
                    expression (lib/sentenceParser.ml[143,2819+155]..[143,2819+439])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser.ml[143,2819+156]..[143,2819+157])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser.ml[143,2819+159]..[143,2819+438])
                          Pexp_constant PConst_string("\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z",(lib/sentenceParser.ml[143,2819+160]..[143,2819+437]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[145,3263+6]..[145,3263+9])
                  Ppat_var "lhs" (lib/sentenceParser.ml[145,3263+6]..[145,3263+9])
                expression (lib/sentenceParser.ml[146,3275+4]..[146,3275+55])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser.ml[146,3275+5]..[146,3275+6])
                      Pexp_constant PConst_int (4,None)
                    expression (lib/sentenceParser.ml[146,3275+8]..[146,3275+54])
                      Pexp_constant PConst_string("\r\220\203\187\170\153\153\135veC\"!\017\017",(lib/sentenceParser.ml[146,3275+9]..[146,3275+53]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[148,3334+6]..[148,3334+10])
                  Ppat_var "goto" (lib/sentenceParser.ml[148,3334+6]..[148,3334+10])
                expression (lib/sentenceParser.ml[149,3347+4]..[149,3347+317])
                  Pexp_tuple
                  [
                    expression (lib/sentenceParser.ml[149,3347+5]..[149,3347+176])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser.ml[149,3347+6]..[149,3347+7])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser.ml[149,3347+9]..[149,3347+175])
                          Pexp_constant PConst_string("\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000",(lib/sentenceParser.ml[149,3347+10]..[149,3347+174]),None)
                      ]
                    expression (lib/sentenceParser.ml[149,3347+178]..[149,3347+316])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser.ml[149,3347+179]..[149,3347+180])
                          Pexp_constant PConst_int (8,None)
                        expression (lib/sentenceParser.ml[149,3347+182]..[149,3347+315])
                          Pexp_constant PConst_string("\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029",(lib/sentenceParser.ml[149,3347+183]..[149,3347+314]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[151,3668+6]..[151,3668+21])
                  Ppat_var "semantic_action" (lib/sentenceParser.ml[151,3668+6]..[151,3668+21])
                expression (lib/sentenceParser.ml[152,3692+4]..[1258,47159+6])
                  Pexp_array
                  [
                    expression (lib/sentenceParser.ml[153,3699+6]..[198,5683+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[153,3699+11]..[153,3699+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[153,3699+11]..[153,3699+22])
                      expression (lib/sentenceParser.ml[154,3725+8]..[198,5683+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[154,3725+12]..[154,3725+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[154,3725+12]..[154,3725+25])
                            expression (lib/sentenceParser.ml[154,3725+28]..[154,3725+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[154,3725+28]..[154,3725+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[154,3725+28]..[154,3725+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[154,3725+40]..[154,3725+67])
                        ]
                        expression (lib/sentenceParser.ml[155,3796+8]..[198,5683+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[155,3796+12]..[179,4876+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[156,3810+10]..[156,3810+37])
                                    pattern (lib/sentenceParser.ml[156,3810+40]..[156,3810+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[157,3853+10]..[157,3853+36])
                                    pattern (lib/sentenceParser.ml[157,3853+39]..[157,3853+41])
                                      Ppat_var "_4" (lib/sentenceParser.ml[157,3853+39]..[157,3853+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[158,3896+10]..[158,3896+38])
                                    pattern (lib/sentenceParser.ml[158,3896+41]..[158,3896+54])
                                      Ppat_var "_startpos__4_" (lib/sentenceParser.ml[158,3896+41]..[158,3896+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[159,3952+10]..[159,3952+36])
                                    pattern (lib/sentenceParser.ml[159,3952+39]..[159,3952+50])
                                      Ppat_var "_endpos__4_" (lib/sentenceParser.ml[159,3952+39]..[159,3952+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[160,4004+10]..[160,4004+36])
                                    pattern (lib/sentenceParser.ml[160,4004+39]..[178,4863+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[161,4045+12]..[161,4045+39])
                                          pattern (lib/sentenceParser.ml[161,4045+42]..[161,4045+43])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[162,4090+12]..[162,4090+38])
                                          pattern (lib/sentenceParser.ml[162,4090+41]..[162,4090+43])
                                            Ppat_var "_3" (lib/sentenceParser.ml[162,4090+41]..[162,4090+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[163,4135+12]..[163,4135+40])
                                          pattern (lib/sentenceParser.ml[163,4135+43]..[163,4135+56])
                                            Ppat_var "_startpos__3_" (lib/sentenceParser.ml[163,4135+43]..[163,4135+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[164,4193+12]..[164,4193+38])
                                          pattern (lib/sentenceParser.ml[164,4193+41]..[164,4193+52])
                                            Ppat_var "_endpos__3_" (lib/sentenceParser.ml[164,4193+41]..[164,4193+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[165,4247+12]..[165,4247+38])
                                          pattern (lib/sentenceParser.ml[165,4247+41]..[177,4848+13])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[166,4290+14]..[166,4290+41])
                                                pattern (lib/sentenceParser.ml[166,4290+44]..[166,4290+45])
                                                  Ppat_any
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[167,4337+14]..[167,4337+40])
                                                pattern (lib/sentenceParser.ml[167,4337+43]..[167,4337+45])
                                                  Ppat_var "_2" (lib/sentenceParser.ml[167,4337+43]..[167,4337+45])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[168,4384+14]..[168,4384+42])
                                                pattern (lib/sentenceParser.ml[168,4384+45]..[168,4384+58])
                                                  Ppat_var "_startpos__2_" (lib/sentenceParser.ml[168,4384+45]..[168,4384+58])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[169,4444+14]..[169,4444+40])
                                                pattern (lib/sentenceParser.ml[169,4444+43]..[169,4444+54])
                                                  Ppat_var "_endpos__2_" (lib/sentenceParser.ml[169,4444+43]..[169,4444+54])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[170,4500+14]..[170,4500+40])
                                                pattern (lib/sentenceParser.ml[170,4500+43]..[176,4831+15])
                                                  Ppat_record Closed
                                                  [
                                                    "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[171,4545+16]..[171,4545+43])
                                                      pattern (lib/sentenceParser.ml[171,4545+46]..[171,4545+55])
                                                        Ppat_var "_menhir_s" (lib/sentenceParser.ml[171,4545+46]..[171,4545+55])
                                                    "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[172,4602+16]..[172,4602+42])
                                                      pattern (lib/sentenceParser.ml[172,4602+45]..[172,4602+47])
                                                        Ppat_var "_1" (lib/sentenceParser.ml[172,4602+45]..[172,4602+47])
                                                    "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[173,4651+16]..[173,4651+44])
                                                      pattern (lib/sentenceParser.ml[173,4651+47]..[173,4651+60])
                                                        Ppat_var "_startpos__1_" (lib/sentenceParser.ml[173,4651+47]..[173,4651+60])
                                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[174,4713+16]..[174,4713+42])
                                                      pattern (lib/sentenceParser.ml[174,4713+45]..[174,4713+56])
                                                        Ppat_var "_endpos__1_" (lib/sentenceParser.ml[174,4713+45]..[174,4713+56])
                                                    "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[175,4771+16]..[175,4771+42])
                                                      pattern (lib/sentenceParser.ml[175,4771+45]..[175,4771+58])
                                                        Ppat_var "_menhir_stack" (lib/sentenceParser.ml[175,4771+45]..[175,4771+58])
                                                  ]
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[179,4876+12]..[179,4876+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[179,4876+12]..[179,4876+25])
                          ]
                          expression (lib/sentenceParser.ml[180,4905+8]..[198,5683+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[180,4905+12]..[180,4905+14])
                                  Ppat_var "_4" (lib/sentenceParser.ml[180,4905+12]..[180,4905+14])
                                core_type (lib/sentenceParser.ml[180,4905+18]..[180,4905+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[180,4905+18]..[180,4905+33])
                                  []
                                expression (lib/sentenceParser.ml[180,4905+37]..[180,4905+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[180,4905+37]..[180,4905+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[180,4905+37]..[180,4905+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[180,4905+47]..[180,4905+49])
                                        Pexp_ident "_4" (lib/sentenceParser.ml[180,4905+47]..[180,4905+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[181,4958+8]..[198,5683+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[181,4958+12]..[181,4958+14])
                                    Ppat_var "_3" (lib/sentenceParser.ml[181,4958+12]..[181,4958+14])
                                  core_type (lib/sentenceParser.ml[181,4958+18]..[181,4958+27])
                                    Ptyp_constr "list" (lib/sentenceParser.ml[181,4958+23]..[181,4958+27])
                                    [
                                      core_type (lib/sentenceParser.ml[181,4958+18]..[181,4958+22])
                                        Ptyp_constr "unit" (lib/sentenceParser.ml[181,4958+18]..[181,4958+22])
                                        []
                                    ]
                                  expression (lib/sentenceParser.ml[181,4958+31]..[181,4958+43])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[181,4958+31]..[181,4958+40])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[181,4958+31]..[181,4958+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[181,4958+41]..[181,4958+43])
                                          Pexp_ident "_3" (lib/sentenceParser.ml[181,4958+41]..[181,4958+43])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[182,5005+8]..[198,5683+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[182,5005+12]..[182,5005+14])
                                      Ppat_var "_2" (lib/sentenceParser.ml[182,5005+12]..[182,5005+14])
                                    core_type (lib/sentenceParser.ml[182,5005+17]..[182,5005+21])
                                      Ptyp_constr "unit" (lib/sentenceParser.ml[182,5005+17]..[182,5005+21])
                                      []
                                    expression (lib/sentenceParser.ml[182,5005+24]..[182,5005+36])
                                      Pexp_apply
                                      expression (lib/sentenceParser.ml[182,5005+24]..[182,5005+33])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[182,5005+24]..[182,5005+33])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser.ml[182,5005+34]..[182,5005+36])
                                            Pexp_ident "_2" (lib/sentenceParser.ml[182,5005+34]..[182,5005+36])
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[183,5045+8]..[198,5683+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[183,5045+12]..[183,5045+14])
                                        Ppat_var "_1" (lib/sentenceParser.ml[183,5045+12]..[183,5045+14])
                                      core_type (lib/sentenceParser.ml[183,5045+18]..[183,5045+33])
                                        Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[183,5045+18]..[183,5045+33])
                                        []
                                      expression (lib/sentenceParser.ml[183,5045+37]..[183,5045+49])
                                        Pexp_apply
                                        expression (lib/sentenceParser.ml[183,5045+37]..[183,5045+46])
                                          Pexp_ident "Obj.magic" (lib/sentenceParser.ml[183,5045+37]..[183,5045+46])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/sentenceParser.ml[183,5045+47]..[183,5045+49])
                                              Pexp_ident "_1" (lib/sentenceParser.ml[183,5045+47]..[183,5045+49])
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[184,5098+8]..[198,5683+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[184,5098+12]..[184,5098+23])
                                          Ppat_var "_endpos__0_" (lib/sentenceParser.ml[184,5098+12]..[184,5098+23])
                                        expression (lib/sentenceParser.ml[184,5098+26]..[184,5098+66])
                                          Pexp_field
                                          expression (lib/sentenceParser.ml[184,5098+26]..[184,5098+39])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[184,5098+26]..[184,5098+39])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[184,5098+40]..[184,5098+66])
                                    ]
                                    expression (lib/sentenceParser.ml[185,5168+8]..[198,5683+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[185,5168+12]..[185,5168+21])
                                            Ppat_var "_startpos" (lib/sentenceParser.ml[185,5168+12]..[185,5168+21])
                                          expression (lib/sentenceParser.ml[185,5168+24]..[185,5168+37])
                                            Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[185,5168+24]..[185,5168+37])
                                      ]
                                      expression (lib/sentenceParser.ml[186,5209+8]..[198,5683+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[186,5209+12]..[186,5209+19])
                                              Ppat_var "_endpos" (lib/sentenceParser.ml[186,5209+12]..[186,5209+19])
                                            expression (lib/sentenceParser.ml[186,5209+22]..[186,5209+33])
                                              Pexp_ident "_endpos__4_" (lib/sentenceParser.ml[186,5209+22]..[186,5209+33])
                                        ]
                                        expression (lib/sentenceParser.ml[187,5246+8]..[198,5683+9])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[187,5246+12]..[187,5246+14])
                                                Ppat_var "_v" (lib/sentenceParser.ml[187,5246+12]..[187,5246+14])
                                              core_type (lib/sentenceParser.ml[187,5246+18]..[187,5246+33])
                                                Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[187,5246+18]..[187,5246+33])
                                                []
                                              expression (lib/sentenceParser.mly[179,5315+43]..[179,5315+58])
                                                Pexp_construct "NFactor" (lib/sentenceParser.mly[179,5315+45]..[179,5315+52])
                                                Some
                                                  expression (lib/sentenceParser.mly[179,5315+54]..[179,5315+56])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[179,5315+54]..[179,5315+56])
                                          ]
                                          expression (lib/sentenceParser.ml[192,5416+8]..[198,5683+9])
                                            Pexp_record
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[193,5426+10]..[193,5426+37])
                                                expression (lib/sentenceParser.ml[193,5426+40]..[193,5426+49])
                                                  Pexp_ident "_menhir_s" (lib/sentenceParser.ml[193,5426+40]..[193,5426+49])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[194,5477+10]..[194,5477+36])
                                                expression (lib/sentenceParser.ml[194,5477+39]..[194,5477+50])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.ml[194,5477+39]..[194,5477+47])
                                                    Pexp_ident "Obj.repr" (lib/sentenceParser.ml[194,5477+39]..[194,5477+47])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.ml[194,5477+48]..[194,5477+50])
                                                        Pexp_ident "_v" (lib/sentenceParser.ml[194,5477+48]..[194,5477+50])
                                                  ]
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[195,5529+10]..[195,5529+38])
                                                expression (lib/sentenceParser.ml[195,5529+41]..[195,5529+50])
                                                  Pexp_ident "_startpos" (lib/sentenceParser.ml[195,5529+41]..[195,5529+50])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[196,5581+10]..[196,5581+36])
                                                expression (lib/sentenceParser.ml[196,5581+39]..[196,5581+46])
                                                  Pexp_ident "_endpos" (lib/sentenceParser.ml[196,5581+39]..[196,5581+46])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[197,5629+10]..[197,5629+36])
                                                expression (lib/sentenceParser.ml[197,5629+39]..[197,5629+52])
                                                  Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[197,5629+39]..[197,5629+52])
                                            ]
                                            None
                    expression (lib/sentenceParser.ml[199,5695+6]..[223,6759+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[199,5695+11]..[199,5695+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[199,5695+11]..[199,5695+22])
                      expression (lib/sentenceParser.ml[200,5721+8]..[223,6759+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[200,5721+12]..[200,5721+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[200,5721+12]..[200,5721+25])
                            expression (lib/sentenceParser.ml[200,5721+28]..[200,5721+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[200,5721+28]..[200,5721+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[200,5721+28]..[200,5721+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[200,5721+40]..[200,5721+67])
                        ]
                        expression (lib/sentenceParser.ml[201,5792+8]..[223,6759+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[201,5792+12]..[207,6062+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[202,5806+10]..[202,5806+37])
                                    pattern (lib/sentenceParser.ml[202,5806+40]..[202,5806+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[202,5806+40]..[202,5806+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[203,5857+10]..[203,5857+36])
                                    pattern (lib/sentenceParser.ml[203,5857+39]..[203,5857+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[203,5857+39]..[203,5857+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[204,5900+10]..[204,5900+38])
                                    pattern (lib/sentenceParser.ml[204,5900+41]..[204,5900+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[204,5900+41]..[204,5900+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[205,5956+10]..[205,5956+36])
                                    pattern (lib/sentenceParser.ml[205,5956+39]..[205,5956+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[205,5956+39]..[205,5956+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[206,6008+10]..[206,6008+36])
                                    pattern (lib/sentenceParser.ml[206,6008+39]..[206,6008+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[206,6008+39]..[206,6008+52])
                                ]
                              expression (lib/sentenceParser.ml[207,6062+12]..[207,6062+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[207,6062+12]..[207,6062+25])
                          ]
                          expression (lib/sentenceParser.ml[208,6091+8]..[223,6759+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[208,6091+12]..[208,6091+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[208,6091+12]..[208,6091+14])
                                core_type (lib/sentenceParser.ml[208,6091+18]..[208,6091+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[208,6091+18]..[208,6091+33])
                                  []
                                expression (lib/sentenceParser.ml[208,6091+37]..[208,6091+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[208,6091+37]..[208,6091+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[208,6091+37]..[208,6091+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[208,6091+47]..[208,6091+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[208,6091+47]..[208,6091+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[209,6144+8]..[223,6759+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[209,6144+12]..[209,6144+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[209,6144+12]..[209,6144+23])
                                  expression (lib/sentenceParser.ml[209,6144+26]..[209,6144+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[209,6144+26]..[209,6144+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[209,6144+26]..[209,6144+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[209,6144+40]..[209,6144+66])
                              ]
                              expression (lib/sentenceParser.ml[210,6214+8]..[223,6759+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[210,6214+12]..[210,6214+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[210,6214+12]..[210,6214+21])
                                    expression (lib/sentenceParser.ml[210,6214+24]..[210,6214+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[210,6214+24]..[210,6214+37])
                                ]
                                expression (lib/sentenceParser.ml[211,6255+8]..[223,6759+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[211,6255+12]..[211,6255+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[211,6255+12]..[211,6255+19])
                                      expression (lib/sentenceParser.ml[211,6255+22]..[211,6255+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[211,6255+22]..[211,6255+33])
                                  ]
                                  expression (lib/sentenceParser.ml[212,6292+8]..[223,6759+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[212,6292+12]..[212,6292+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[212,6292+12]..[212,6292+14])
                                        core_type (lib/sentenceParser.ml[212,6292+18]..[212,6292+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[212,6292+18]..[212,6292+33])
                                          []
                                        expression (lib/sentenceParser.mly[180,6361+18]..[180,6361+88])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[180,6361+25]..[180,6361+75])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[180,6361+26]..[180,6361+39])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[180,6361+26]..[180,6361+39])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[180,6361+40]..[180,6361+74])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[180,6361+41]..[180,6361+55])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[180,6361+41]..[180,6361+55])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[180,6361+56]..[180,6361+73])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[180,6361+57]..[180,6361+68])
                                                            Pexp_constant PConst_string("DEBUG:alt",(lib/sentenceParser.mly[180,6361+58]..[180,6361+67]),None)
                                                          expression (lib/sentenceParser.mly[180,6361+70]..[180,6361+72])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[180,6361+70]..[180,6361+72])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[180,6361+77]..[180,6361+87])
                                            Pexp_construct "NFactor" (lib/sentenceParser.mly[180,6361+77]..[180,6361+84])
                                            Some
                                              expression (lib/sentenceParser.mly[180,6361+85]..[180,6361+87])
                                                Pexp_ident "_1" (lib/sentenceParser.mly[180,6361+85]..[180,6361+87])
                                    ]
                                    expression (lib/sentenceParser.ml[217,6492+8]..[223,6759+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[218,6502+10]..[218,6502+37])
                                          expression (lib/sentenceParser.ml[218,6502+40]..[218,6502+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[218,6502+40]..[218,6502+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[219,6553+10]..[219,6553+36])
                                          expression (lib/sentenceParser.ml[219,6553+39]..[219,6553+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[219,6553+39]..[219,6553+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[219,6553+39]..[219,6553+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[219,6553+48]..[219,6553+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[219,6553+48]..[219,6553+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[220,6605+10]..[220,6605+38])
                                          expression (lib/sentenceParser.ml[220,6605+41]..[220,6605+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[220,6605+41]..[220,6605+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[221,6657+10]..[221,6657+36])
                                          expression (lib/sentenceParser.ml[221,6657+39]..[221,6657+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[221,6657+39]..[221,6657+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[222,6705+10]..[222,6705+36])
                                          expression (lib/sentenceParser.ml[222,6705+39]..[222,6705+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[222,6705+39]..[222,6705+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[224,6771+6]..[255,8113+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[224,6771+11]..[224,6771+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[224,6771+11]..[224,6771+22])
                      expression (lib/sentenceParser.ml[225,6797+8]..[255,8113+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[225,6797+12]..[225,6797+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[225,6797+12]..[225,6797+25])
                            expression (lib/sentenceParser.ml[225,6797+28]..[225,6797+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[225,6797+28]..[225,6797+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[225,6797+28]..[225,6797+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[225,6797+40]..[225,6797+67])
                        ]
                        expression (lib/sentenceParser.ml[226,6868+8]..[255,8113+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[226,6868+12]..[238,7396+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[227,6882+10]..[227,6882+37])
                                    pattern (lib/sentenceParser.ml[227,6882+40]..[227,6882+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[228,6925+10]..[228,6925+36])
                                    pattern (lib/sentenceParser.ml[228,6925+39]..[228,6925+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[228,6925+39]..[228,6925+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[229,6968+10]..[229,6968+38])
                                    pattern (lib/sentenceParser.ml[229,6968+41]..[229,6968+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[229,6968+41]..[229,6968+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[230,7024+10]..[230,7024+36])
                                    pattern (lib/sentenceParser.ml[230,7024+39]..[230,7024+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[230,7024+39]..[230,7024+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[231,7076+10]..[231,7076+36])
                                    pattern (lib/sentenceParser.ml[231,7076+39]..[237,7383+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[232,7117+12]..[232,7117+39])
                                          pattern (lib/sentenceParser.ml[232,7117+42]..[232,7117+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[232,7117+42]..[232,7117+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[233,7170+12]..[233,7170+38])
                                          pattern (lib/sentenceParser.ml[233,7170+41]..[233,7170+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[233,7170+41]..[233,7170+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[234,7215+12]..[234,7215+40])
                                          pattern (lib/sentenceParser.ml[234,7215+43]..[234,7215+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[234,7215+43]..[234,7215+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[235,7273+12]..[235,7273+38])
                                          pattern (lib/sentenceParser.ml[235,7273+41]..[235,7273+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[235,7273+41]..[235,7273+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[236,7327+12]..[236,7327+38])
                                          pattern (lib/sentenceParser.ml[236,7327+41]..[236,7327+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[236,7327+41]..[236,7327+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[238,7396+12]..[238,7396+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[238,7396+12]..[238,7396+25])
                          ]
                          expression (lib/sentenceParser.ml[239,7425+8]..[255,8113+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[239,7425+12]..[239,7425+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[239,7425+12]..[239,7425+14])
                                core_type (lib/sentenceParser.ml[239,7425+18]..[239,7425+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[239,7425+18]..[239,7425+33])
                                  []
                                expression (lib/sentenceParser.ml[239,7425+37]..[239,7425+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[239,7425+37]..[239,7425+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[239,7425+37]..[239,7425+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[239,7425+47]..[239,7425+49])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[239,7425+47]..[239,7425+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[240,7478+8]..[255,8113+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[240,7478+12]..[240,7478+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[240,7478+12]..[240,7478+14])
                                  core_type (lib/sentenceParser.ml[240,7478+17]..[240,7478+21])
                                    Ptyp_constr "unit" (lib/sentenceParser.ml[240,7478+17]..[240,7478+21])
                                    []
                                  expression (lib/sentenceParser.ml[240,7478+24]..[240,7478+36])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[240,7478+24]..[240,7478+33])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[240,7478+24]..[240,7478+33])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[240,7478+34]..[240,7478+36])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[240,7478+34]..[240,7478+36])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[241,7518+8]..[255,8113+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[241,7518+12]..[241,7518+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[241,7518+12]..[241,7518+23])
                                    expression (lib/sentenceParser.ml[241,7518+26]..[241,7518+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[241,7518+26]..[241,7518+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[241,7518+26]..[241,7518+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[241,7518+40]..[241,7518+66])
                                ]
                                expression (lib/sentenceParser.ml[242,7588+8]..[255,8113+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[242,7588+12]..[242,7588+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[242,7588+12]..[242,7588+21])
                                      expression (lib/sentenceParser.ml[242,7588+24]..[242,7588+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[242,7588+24]..[242,7588+37])
                                  ]
                                  expression (lib/sentenceParser.ml[243,7629+8]..[255,8113+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[243,7629+12]..[243,7629+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[243,7629+12]..[243,7629+19])
                                        expression (lib/sentenceParser.ml[243,7629+22]..[243,7629+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[243,7629+22]..[243,7629+33])
                                    ]
                                    expression (lib/sentenceParser.ml[244,7666+8]..[255,8113+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[244,7666+12]..[244,7666+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[244,7666+12]..[244,7666+14])
                                          core_type (lib/sentenceParser.ml[244,7666+18]..[244,7666+33])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[244,7666+18]..[244,7666+33])
                                            []
                                          expression (lib/sentenceParser.mly[189,7735+0]..[189,7735+68])
                                            Pexp_sequence
                                            expression (lib/sentenceParser.mly[189,7735+4]..[189,7735+54])
                                              Pexp_apply
                                              expression (lib/sentenceParser.mly[189,7735+5]..[189,7735+18])
                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[189,7735+5]..[189,7735+18])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.mly[189,7735+19]..[189,7735+53])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[189,7735+20]..[189,7735+34])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[189,7735+20]..[189,7735+34])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[189,7735+35]..[189,7735+52])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[189,7735+36]..[189,7735+48])
                                                              Pexp_constant PConst_string("DEBUG:ccrs",(lib/sentenceParser.mly[189,7735+37]..[189,7735+47]),None)
                                                            expression (lib/sentenceParser.mly[189,7735+49]..[189,7735+51])
                                                              Pexp_ident "_2" (lib/sentenceParser.mly[189,7735+49]..[189,7735+51])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser.mly[189,7735+57]..[189,7735+67])
                                              Pexp_construct "NFactor" (lib/sentenceParser.mly[189,7735+57]..[189,7735+64])
                                              Some
                                                expression (lib/sentenceParser.mly[189,7735+65]..[189,7735+67])
                                                  Pexp_ident "_2" (lib/sentenceParser.mly[189,7735+65]..[189,7735+67])
                                      ]
                                      expression (lib/sentenceParser.ml[249,7846+8]..[255,8113+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[250,7856+10]..[250,7856+37])
                                            expression (lib/sentenceParser.ml[250,7856+40]..[250,7856+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[250,7856+40]..[250,7856+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[251,7907+10]..[251,7907+36])
                                            expression (lib/sentenceParser.ml[251,7907+39]..[251,7907+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[251,7907+39]..[251,7907+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[251,7907+39]..[251,7907+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[251,7907+48]..[251,7907+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[251,7907+48]..[251,7907+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[252,7959+10]..[252,7959+38])
                                            expression (lib/sentenceParser.ml[252,7959+41]..[252,7959+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[252,7959+41]..[252,7959+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[253,8011+10]..[253,8011+36])
                                            expression (lib/sentenceParser.ml[253,8011+39]..[253,8011+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[253,8011+39]..[253,8011+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[254,8059+10]..[254,8059+36])
                                            expression (lib/sentenceParser.ml[254,8059+39]..[254,8059+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[254,8059+39]..[254,8059+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[256,8125+6]..[280,9173+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[256,8125+11]..[256,8125+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[256,8125+11]..[256,8125+22])
                      expression (lib/sentenceParser.ml[257,8151+8]..[280,9173+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[257,8151+12]..[257,8151+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[257,8151+12]..[257,8151+25])
                            expression (lib/sentenceParser.ml[257,8151+28]..[257,8151+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[257,8151+28]..[257,8151+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[257,8151+28]..[257,8151+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[257,8151+40]..[257,8151+67])
                        ]
                        expression (lib/sentenceParser.ml[258,8222+8]..[280,9173+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[258,8222+12]..[264,8492+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[259,8236+10]..[259,8236+37])
                                    pattern (lib/sentenceParser.ml[259,8236+40]..[259,8236+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[259,8236+40]..[259,8236+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[260,8287+10]..[260,8287+36])
                                    pattern (lib/sentenceParser.ml[260,8287+39]..[260,8287+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[260,8287+39]..[260,8287+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[261,8330+10]..[261,8330+38])
                                    pattern (lib/sentenceParser.ml[261,8330+41]..[261,8330+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[261,8330+41]..[261,8330+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[262,8386+10]..[262,8386+36])
                                    pattern (lib/sentenceParser.ml[262,8386+39]..[262,8386+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[262,8386+39]..[262,8386+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[263,8438+10]..[263,8438+36])
                                    pattern (lib/sentenceParser.ml[263,8438+39]..[263,8438+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[263,8438+39]..[263,8438+52])
                                ]
                              expression (lib/sentenceParser.ml[264,8492+12]..[264,8492+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[264,8492+12]..[264,8492+25])
                          ]
                          expression (lib/sentenceParser.ml[265,8521+8]..[280,9173+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[265,8521+12]..[265,8521+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[265,8521+12]..[265,8521+14])
                                core_type (lib/sentenceParser.ml[265,8521+18]..[265,8521+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[265,8521+18]..[265,8521+33])
                                  []
                                expression (lib/sentenceParser.ml[265,8521+37]..[265,8521+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[265,8521+37]..[265,8521+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[265,8521+37]..[265,8521+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[265,8521+47]..[265,8521+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[265,8521+47]..[265,8521+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[266,8574+8]..[280,9173+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[266,8574+12]..[266,8574+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[266,8574+12]..[266,8574+23])
                                  expression (lib/sentenceParser.ml[266,8574+26]..[266,8574+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[266,8574+26]..[266,8574+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[266,8574+26]..[266,8574+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[266,8574+40]..[266,8574+66])
                              ]
                              expression (lib/sentenceParser.ml[267,8644+8]..[280,9173+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[267,8644+12]..[267,8644+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[267,8644+12]..[267,8644+21])
                                    expression (lib/sentenceParser.ml[267,8644+24]..[267,8644+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[267,8644+24]..[267,8644+37])
                                ]
                                expression (lib/sentenceParser.ml[268,8685+8]..[280,9173+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[268,8685+12]..[268,8685+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[268,8685+12]..[268,8685+19])
                                      expression (lib/sentenceParser.ml[268,8685+22]..[268,8685+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[268,8685+22]..[268,8685+33])
                                  ]
                                  expression (lib/sentenceParser.ml[269,8722+8]..[280,9173+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[269,8722+12]..[269,8722+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[269,8722+12]..[269,8722+14])
                                        core_type (lib/sentenceParser.ml[269,8722+18]..[269,8722+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[269,8722+18]..[269,8722+33])
                                          []
                                        expression (lib/sentenceParser.mly[192,8791+4]..[192,8791+72])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[192,8791+8]..[192,8791+59])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[192,8791+9]..[192,8791+22])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[192,8791+9]..[192,8791+22])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[192,8791+23]..[192,8791+58])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[192,8791+24]..[192,8791+38])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[192,8791+24]..[192,8791+38])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[192,8791+39]..[192,8791+57])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[192,8791+40]..[192,8791+53])
                                                            Pexp_constant PConst_string("DEBUG:cc2rs",(lib/sentenceParser.mly[192,8791+41]..[192,8791+52]),None)
                                                          expression (lib/sentenceParser.mly[192,8791+54]..[192,8791+56])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[192,8791+54]..[192,8791+56])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[192,8791+61]..[192,8791+70])
                                            Pexp_construct "CharClass" (lib/sentenceParser.mly[192,8791+61]..[192,8791+70])
                                            None
                                    ]
                                    expression (lib/sentenceParser.ml[274,8906+8]..[280,9173+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[275,8916+10]..[275,8916+37])
                                          expression (lib/sentenceParser.ml[275,8916+40]..[275,8916+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[275,8916+40]..[275,8916+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[276,8967+10]..[276,8967+36])
                                          expression (lib/sentenceParser.ml[276,8967+39]..[276,8967+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[276,8967+39]..[276,8967+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[276,8967+39]..[276,8967+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[276,8967+48]..[276,8967+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[276,8967+48]..[276,8967+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[277,9019+10]..[277,9019+38])
                                          expression (lib/sentenceParser.ml[277,9019+41]..[277,9019+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[277,9019+41]..[277,9019+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[278,9071+10]..[278,9071+36])
                                          expression (lib/sentenceParser.ml[278,9071+39]..[278,9071+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[278,9071+39]..[278,9071+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[279,9119+10]..[279,9119+36])
                                          expression (lib/sentenceParser.ml[279,9119+39]..[279,9119+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[279,9119+39]..[279,9119+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[281,9185+6]..[329,11098+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[281,9185+11]..[281,9185+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[281,9185+11]..[281,9185+22])
                      expression (lib/sentenceParser.ml[282,9211+8]..[329,11098+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[282,9211+12]..[282,9211+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[282,9211+12]..[282,9211+25])
                            expression (lib/sentenceParser.ml[282,9211+28]..[282,9211+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[282,9211+28]..[282,9211+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[282,9211+28]..[282,9211+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[282,9211+40]..[282,9211+67])
                        ]
                        expression (lib/sentenceParser.ml[283,9282+8]..[329,11098+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[283,9282+12]..[301,10080+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[284,9296+10]..[284,9296+37])
                                    pattern (lib/sentenceParser.ml[284,9296+40]..[284,9296+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[285,9339+10]..[285,9339+36])
                                    pattern (lib/sentenceParser.ml[285,9339+39]..[285,9339+41])
                                      Ppat_var "_3" (lib/sentenceParser.ml[285,9339+39]..[285,9339+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[286,9382+10]..[286,9382+38])
                                    pattern (lib/sentenceParser.ml[286,9382+41]..[286,9382+54])
                                      Ppat_var "_startpos__3_" (lib/sentenceParser.ml[286,9382+41]..[286,9382+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[287,9438+10]..[287,9438+36])
                                    pattern (lib/sentenceParser.ml[287,9438+39]..[287,9438+50])
                                      Ppat_var "_endpos__3_" (lib/sentenceParser.ml[287,9438+39]..[287,9438+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[288,9490+10]..[288,9490+36])
                                    pattern (lib/sentenceParser.ml[288,9490+39]..[300,10067+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[289,9531+12]..[289,9531+39])
                                          pattern (lib/sentenceParser.ml[289,9531+42]..[289,9531+43])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[290,9576+12]..[290,9576+38])
                                          pattern (lib/sentenceParser.ml[290,9576+41]..[290,9576+43])
                                            Ppat_var "_2" (lib/sentenceParser.ml[290,9576+41]..[290,9576+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[291,9621+12]..[291,9621+40])
                                          pattern (lib/sentenceParser.ml[291,9621+43]..[291,9621+56])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser.ml[291,9621+43]..[291,9621+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[292,9679+12]..[292,9679+38])
                                          pattern (lib/sentenceParser.ml[292,9679+41]..[292,9679+52])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser.ml[292,9679+41]..[292,9679+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[293,9733+12]..[293,9733+38])
                                          pattern (lib/sentenceParser.ml[293,9733+41]..[299,10052+13])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[294,9776+14]..[294,9776+41])
                                                pattern (lib/sentenceParser.ml[294,9776+44]..[294,9776+53])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser.ml[294,9776+44]..[294,9776+53])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[295,9831+14]..[295,9831+40])
                                                pattern (lib/sentenceParser.ml[295,9831+43]..[295,9831+45])
                                                  Ppat_var "_1" (lib/sentenceParser.ml[295,9831+43]..[295,9831+45])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[296,9878+14]..[296,9878+42])
                                                pattern (lib/sentenceParser.ml[296,9878+45]..[296,9878+58])
                                                  Ppat_var "_startpos__1_" (lib/sentenceParser.ml[296,9878+45]..[296,9878+58])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[297,9938+14]..[297,9938+40])
                                                pattern (lib/sentenceParser.ml[297,9938+43]..[297,9938+54])
                                                  Ppat_var "_endpos__1_" (lib/sentenceParser.ml[297,9938+43]..[297,9938+54])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[298,9994+14]..[298,9994+40])
                                                pattern (lib/sentenceParser.ml[298,9994+43]..[298,9994+56])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser.ml[298,9994+43]..[298,9994+56])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[301,10080+12]..[301,10080+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[301,10080+12]..[301,10080+25])
                          ]
                          expression (lib/sentenceParser.ml[302,10109+8]..[329,11098+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[302,10109+12]..[302,10109+14])
                                  Ppat_var "_3" (lib/sentenceParser.ml[302,10109+12]..[302,10109+14])
                                core_type (lib/sentenceParser.mly[26,10158+8]..[26,10158+11])
                                  Ptyp_constr "int" (lib/sentenceParser.mly[26,10158+8]..[26,10158+11])
                                  []
                                expression (lib/sentenceParser.ml[306,10201+12]..[306,10201+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[306,10201+12]..[306,10201+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[306,10201+12]..[306,10201+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[306,10201+22]..[306,10201+24])
                                        Pexp_ident "_3" (lib/sentenceParser.ml[306,10201+22]..[306,10201+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[307,10229+8]..[329,11098+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[307,10229+12]..[307,10229+14])
                                    Ppat_var "_2" (lib/sentenceParser.ml[307,10229+12]..[307,10229+14])
                                  core_type (lib/sentenceParser.ml[307,10229+17]..[307,10229+21])
                                    Ptyp_constr "unit" (lib/sentenceParser.ml[307,10229+17]..[307,10229+21])
                                    []
                                  expression (lib/sentenceParser.ml[307,10229+24]..[307,10229+36])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[307,10229+24]..[307,10229+33])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[307,10229+24]..[307,10229+33])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[307,10229+34]..[307,10229+36])
                                          Pexp_ident "_2" (lib/sentenceParser.ml[307,10229+34]..[307,10229+36])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[308,10269+8]..[329,11098+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[308,10269+12]..[308,10269+14])
                                      Ppat_var "_1" (lib/sentenceParser.ml[308,10269+12]..[308,10269+14])
                                    core_type (lib/sentenceParser.mly[26,10318+8]..[26,10318+11])
                                      Ptyp_constr "int" (lib/sentenceParser.mly[26,10318+8]..[26,10318+11])
                                      []
                                    expression (lib/sentenceParser.ml[312,10361+12]..[312,10361+24])
                                      Pexp_apply
                                      expression (lib/sentenceParser.ml[312,10361+12]..[312,10361+21])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[312,10361+12]..[312,10361+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser.ml[312,10361+22]..[312,10361+24])
                                            Pexp_ident "_1" (lib/sentenceParser.ml[312,10361+22]..[312,10361+24])
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[313,10389+8]..[329,11098+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[313,10389+12]..[313,10389+23])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser.ml[313,10389+12]..[313,10389+23])
                                      expression (lib/sentenceParser.ml[313,10389+26]..[313,10389+66])
                                        Pexp_field
                                        expression (lib/sentenceParser.ml[313,10389+26]..[313,10389+39])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[313,10389+26]..[313,10389+39])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[313,10389+40]..[313,10389+66])
                                  ]
                                  expression (lib/sentenceParser.ml[314,10459+8]..[329,11098+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[314,10459+12]..[314,10459+21])
                                          Ppat_var "_startpos" (lib/sentenceParser.ml[314,10459+12]..[314,10459+21])
                                        expression (lib/sentenceParser.ml[314,10459+24]..[314,10459+37])
                                          Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[314,10459+24]..[314,10459+37])
                                    ]
                                    expression (lib/sentenceParser.ml[315,10500+8]..[329,11098+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[315,10500+12]..[315,10500+19])
                                            Ppat_var "_endpos" (lib/sentenceParser.ml[315,10500+12]..[315,10500+19])
                                          expression (lib/sentenceParser.ml[315,10500+22]..[315,10500+33])
                                            Pexp_ident "_endpos__3_" (lib/sentenceParser.ml[315,10500+22]..[315,10500+33])
                                      ]
                                      expression (lib/sentenceParser.ml[316,10537+8]..[329,11098+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[316,10537+12]..[316,10537+14])
                                              Ppat_var "_v" (lib/sentenceParser.ml[316,10537+12]..[316,10537+14])
                                            core_type (lib/sentenceParser.ml[316,10537+18]..[316,10537+33])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[316,10537+18]..[316,10537+33])
                                              []
                                            expression (lib/sentenceParser.mly[197,10606+9]..[199,10778+10])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[197,10606+13]..[197,10606+67])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[197,10606+14]..[197,10606+27])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[197,10606+14]..[197,10606+27])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[197,10606+28]..[197,10606+66])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[197,10606+29]..[197,10606+43])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[197,10606+29]..[197,10606+43])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[197,10606+44]..[197,10606+65])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[197,10606+45]..[197,10606+58])
                                                                Pexp_constant PConst_string("DEBUG:cc3rs",(lib/sentenceParser.mly[197,10606+46]..[197,10606+57]),None)
                                                              expression (lib/sentenceParser.mly[197,10606+59]..[197,10606+61])
                                                                Pexp_ident "_1" (lib/sentenceParser.mly[197,10606+59]..[197,10606+61])
                                                              expression (lib/sentenceParser.mly[197,10606+62]..[197,10606+64])
                                                                Pexp_ident "_2" (lib/sentenceParser.mly[197,10606+62]..[197,10606+64])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[197,10606+70]..[197,10606+80])
                                                Pexp_construct "CharInt" (lib/sentenceParser.mly[197,10606+70]..[197,10606+77])
                                                Some
                                                  expression (lib/sentenceParser.mly[197,10606+78]..[197,10606+80])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[197,10606+78]..[197,10606+80])
                                        ]
                                        expression (lib/sentenceParser.ml[323,10831+8]..[329,11098+9])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[324,10841+10]..[324,10841+37])
                                              expression (lib/sentenceParser.ml[324,10841+40]..[324,10841+49])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser.ml[324,10841+40]..[324,10841+49])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[325,10892+10]..[325,10892+36])
                                              expression (lib/sentenceParser.ml[325,10892+39]..[325,10892+50])
                                                Pexp_apply
                                                expression (lib/sentenceParser.ml[325,10892+39]..[325,10892+47])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser.ml[325,10892+39]..[325,10892+47])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.ml[325,10892+48]..[325,10892+50])
                                                      Pexp_ident "_v" (lib/sentenceParser.ml[325,10892+48]..[325,10892+50])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[326,10944+10]..[326,10944+38])
                                              expression (lib/sentenceParser.ml[326,10944+41]..[326,10944+50])
                                                Pexp_ident "_startpos" (lib/sentenceParser.ml[326,10944+41]..[326,10944+50])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[327,10996+10]..[327,10996+36])
                                              expression (lib/sentenceParser.ml[327,10996+39]..[327,10996+46])
                                                Pexp_ident "_endpos" (lib/sentenceParser.ml[327,10996+39]..[327,10996+46])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[328,11044+10]..[328,11044+36])
                                              expression (lib/sentenceParser.ml[328,11044+39]..[328,11044+52])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[328,11044+39]..[328,11044+52])
                                          ]
                                          None
                    expression (lib/sentenceParser.ml[330,11110+6]..[365,12537+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[330,11110+11]..[330,11110+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[330,11110+11]..[330,11110+22])
                      expression (lib/sentenceParser.ml[331,11136+8]..[365,12537+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[331,11136+12]..[331,11136+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[331,11136+12]..[331,11136+25])
                            expression (lib/sentenceParser.ml[331,11136+28]..[331,11136+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[331,11136+28]..[331,11136+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[331,11136+28]..[331,11136+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[331,11136+40]..[331,11136+67])
                        ]
                        expression (lib/sentenceParser.ml[332,11207+8]..[365,12537+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[332,11207+12]..[344,11735+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[333,11221+10]..[333,11221+37])
                                    pattern (lib/sentenceParser.ml[333,11221+40]..[333,11221+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[334,11264+10]..[334,11264+36])
                                    pattern (lib/sentenceParser.ml[334,11264+39]..[334,11264+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[334,11264+39]..[334,11264+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[335,11307+10]..[335,11307+38])
                                    pattern (lib/sentenceParser.ml[335,11307+41]..[335,11307+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[335,11307+41]..[335,11307+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[336,11363+10]..[336,11363+36])
                                    pattern (lib/sentenceParser.ml[336,11363+39]..[336,11363+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[336,11363+39]..[336,11363+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[337,11415+10]..[337,11415+36])
                                    pattern (lib/sentenceParser.ml[337,11415+39]..[343,11722+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[338,11456+12]..[338,11456+39])
                                          pattern (lib/sentenceParser.ml[338,11456+42]..[338,11456+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[338,11456+42]..[338,11456+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[339,11509+12]..[339,11509+38])
                                          pattern (lib/sentenceParser.ml[339,11509+41]..[339,11509+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[339,11509+41]..[339,11509+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[340,11554+12]..[340,11554+40])
                                          pattern (lib/sentenceParser.ml[340,11554+43]..[340,11554+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[340,11554+43]..[340,11554+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[341,11612+12]..[341,11612+38])
                                          pattern (lib/sentenceParser.ml[341,11612+41]..[341,11612+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[341,11612+41]..[341,11612+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[342,11666+12]..[342,11666+38])
                                          pattern (lib/sentenceParser.ml[342,11666+41]..[342,11666+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[342,11666+41]..[342,11666+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[344,11735+12]..[344,11735+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[344,11735+12]..[344,11735+25])
                          ]
                          expression (lib/sentenceParser.ml[345,11764+8]..[365,12537+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[345,11764+12]..[345,11764+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[345,11764+12]..[345,11764+14])
                                core_type (lib/sentenceParser.mly[26,11813+8]..[26,11813+11])
                                  Ptyp_constr "int" (lib/sentenceParser.mly[26,11813+8]..[26,11813+11])
                                  []
                                expression (lib/sentenceParser.ml[349,11856+12]..[349,11856+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[349,11856+12]..[349,11856+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[349,11856+12]..[349,11856+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[349,11856+22]..[349,11856+24])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[349,11856+22]..[349,11856+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[350,11884+8]..[365,12537+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[350,11884+12]..[350,11884+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[350,11884+12]..[350,11884+14])
                                  core_type (lib/sentenceParser.ml[350,11884+18]..[350,11884+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[350,11884+18]..[350,11884+33])
                                    []
                                  expression (lib/sentenceParser.ml[350,11884+37]..[350,11884+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[350,11884+37]..[350,11884+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[350,11884+37]..[350,11884+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[350,11884+47]..[350,11884+49])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[350,11884+47]..[350,11884+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[351,11937+8]..[365,12537+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[351,11937+12]..[351,11937+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[351,11937+12]..[351,11937+23])
                                    expression (lib/sentenceParser.ml[351,11937+26]..[351,11937+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[351,11937+26]..[351,11937+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[351,11937+26]..[351,11937+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[351,11937+40]..[351,11937+66])
                                ]
                                expression (lib/sentenceParser.ml[352,12007+8]..[365,12537+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[352,12007+12]..[352,12007+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[352,12007+12]..[352,12007+21])
                                      expression (lib/sentenceParser.ml[352,12007+24]..[352,12007+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[352,12007+24]..[352,12007+37])
                                  ]
                                  expression (lib/sentenceParser.ml[353,12048+8]..[365,12537+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[353,12048+12]..[353,12048+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[353,12048+12]..[353,12048+19])
                                        expression (lib/sentenceParser.ml[353,12048+22]..[353,12048+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[353,12048+22]..[353,12048+33])
                                    ]
                                    expression (lib/sentenceParser.ml[354,12085+8]..[365,12537+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[354,12085+12]..[354,12085+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[354,12085+12]..[354,12085+14])
                                          core_type (lib/sentenceParser.ml[354,12085+18]..[354,12085+33])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[354,12085+18]..[354,12085+33])
                                            []
                                          expression (lib/sentenceParser.mly[202,12154+4]..[202,12154+73])
                                            Pexp_sequence
                                            expression (lib/sentenceParser.mly[202,12154+8]..[202,12154+59])
                                              Pexp_apply
                                              expression (lib/sentenceParser.mly[202,12154+9]..[202,12154+22])
                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[202,12154+9]..[202,12154+22])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.mly[202,12154+23]..[202,12154+58])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[202,12154+24]..[202,12154+38])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[202,12154+24]..[202,12154+38])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[202,12154+39]..[202,12154+57])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[202,12154+40]..[202,12154+53])
                                                              Pexp_constant PConst_string("DEBUG:cc4rs",(lib/sentenceParser.mly[202,12154+41]..[202,12154+52]),None)
                                                            expression (lib/sentenceParser.mly[202,12154+54]..[202,12154+56])
                                                              Pexp_ident "_1" (lib/sentenceParser.mly[202,12154+54]..[202,12154+56])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser.mly[202,12154+61]..[202,12154+71])
                                              Pexp_construct "NFactor" (lib/sentenceParser.mly[202,12154+61]..[202,12154+68])
                                              Some
                                                expression (lib/sentenceParser.mly[202,12154+69]..[202,12154+71])
                                                  Pexp_ident "_1" (lib/sentenceParser.mly[202,12154+69]..[202,12154+71])
                                      ]
                                      expression (lib/sentenceParser.ml[359,12270+8]..[365,12537+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[360,12280+10]..[360,12280+37])
                                            expression (lib/sentenceParser.ml[360,12280+40]..[360,12280+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[360,12280+40]..[360,12280+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[361,12331+10]..[361,12331+36])
                                            expression (lib/sentenceParser.ml[361,12331+39]..[361,12331+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[361,12331+39]..[361,12331+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[361,12331+39]..[361,12331+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[361,12331+48]..[361,12331+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[361,12331+48]..[361,12331+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[362,12383+10]..[362,12383+38])
                                            expression (lib/sentenceParser.ml[362,12383+41]..[362,12383+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[362,12383+41]..[362,12383+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[363,12435+10]..[363,12435+36])
                                            expression (lib/sentenceParser.ml[363,12435+39]..[363,12435+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[363,12435+39]..[363,12435+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[364,12483+10]..[364,12483+36])
                                            expression (lib/sentenceParser.ml[364,12483+39]..[364,12483+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[364,12483+39]..[364,12483+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[366,12549+6]..[394,13665+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[366,12549+11]..[366,12549+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[366,12549+11]..[366,12549+22])
                      expression (lib/sentenceParser.ml[367,12575+8]..[394,13665+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[367,12575+12]..[367,12575+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[367,12575+12]..[367,12575+25])
                            expression (lib/sentenceParser.ml[367,12575+28]..[367,12575+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[367,12575+28]..[367,12575+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[367,12575+28]..[367,12575+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[367,12575+40]..[367,12575+67])
                        ]
                        expression (lib/sentenceParser.ml[368,12646+8]..[394,13665+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[368,12646+12]..[374,12916+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[369,12660+10]..[369,12660+37])
                                    pattern (lib/sentenceParser.ml[369,12660+40]..[369,12660+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[369,12660+40]..[369,12660+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[370,12711+10]..[370,12711+36])
                                    pattern (lib/sentenceParser.ml[370,12711+39]..[370,12711+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[370,12711+39]..[370,12711+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[371,12754+10]..[371,12754+38])
                                    pattern (lib/sentenceParser.ml[371,12754+41]..[371,12754+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[371,12754+41]..[371,12754+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[372,12810+10]..[372,12810+36])
                                    pattern (lib/sentenceParser.ml[372,12810+39]..[372,12810+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[372,12810+39]..[372,12810+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[373,12862+10]..[373,12862+36])
                                    pattern (lib/sentenceParser.ml[373,12862+39]..[373,12862+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[373,12862+39]..[373,12862+52])
                                ]
                              expression (lib/sentenceParser.ml[374,12916+12]..[374,12916+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[374,12916+12]..[374,12916+25])
                          ]
                          expression (lib/sentenceParser.ml[375,12945+8]..[394,13665+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[375,12945+12]..[375,12945+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[375,12945+12]..[375,12945+14])
                                core_type (lib/sentenceParser.mly[26,12994+8]..[26,12994+11])
                                  Ptyp_constr "int" (lib/sentenceParser.mly[26,12994+8]..[26,12994+11])
                                  []
                                expression (lib/sentenceParser.ml[379,13037+12]..[379,13037+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[379,13037+12]..[379,13037+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[379,13037+12]..[379,13037+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[379,13037+22]..[379,13037+24])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[379,13037+22]..[379,13037+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[380,13065+8]..[394,13665+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[380,13065+12]..[380,13065+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[380,13065+12]..[380,13065+23])
                                  expression (lib/sentenceParser.ml[380,13065+26]..[380,13065+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[380,13065+26]..[380,13065+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[380,13065+26]..[380,13065+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[380,13065+40]..[380,13065+66])
                              ]
                              expression (lib/sentenceParser.ml[381,13135+8]..[394,13665+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[381,13135+12]..[381,13135+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[381,13135+12]..[381,13135+21])
                                    expression (lib/sentenceParser.ml[381,13135+24]..[381,13135+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[381,13135+24]..[381,13135+37])
                                ]
                                expression (lib/sentenceParser.ml[382,13176+8]..[394,13665+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[382,13176+12]..[382,13176+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[382,13176+12]..[382,13176+19])
                                      expression (lib/sentenceParser.ml[382,13176+22]..[382,13176+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[382,13176+22]..[382,13176+33])
                                  ]
                                  expression (lib/sentenceParser.ml[383,13213+8]..[394,13665+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[383,13213+12]..[383,13213+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[383,13213+12]..[383,13213+14])
                                        core_type (lib/sentenceParser.ml[383,13213+18]..[383,13213+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[383,13213+18]..[383,13213+33])
                                          []
                                        expression (lib/sentenceParser.mly[205,13282+4]..[205,13282+73])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[205,13282+8]..[205,13282+59])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[205,13282+9]..[205,13282+22])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[205,13282+9]..[205,13282+22])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[205,13282+23]..[205,13282+58])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[205,13282+24]..[205,13282+38])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[205,13282+24]..[205,13282+38])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[205,13282+39]..[205,13282+57])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[205,13282+40]..[205,13282+53])
                                                            Pexp_constant PConst_string("DEBUG:cc5rs",(lib/sentenceParser.mly[205,13282+41]..[205,13282+52]),None)
                                                          expression (lib/sentenceParser.mly[205,13282+54]..[205,13282+56])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[205,13282+54]..[205,13282+56])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[205,13282+61]..[205,13282+71])
                                            Pexp_construct "CharInt" (lib/sentenceParser.mly[205,13282+61]..[205,13282+68])
                                            Some
                                              expression (lib/sentenceParser.mly[205,13282+69]..[205,13282+71])
                                                Pexp_ident "_1" (lib/sentenceParser.mly[205,13282+69]..[205,13282+71])
                                    ]
                                    expression (lib/sentenceParser.ml[388,13398+8]..[394,13665+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[389,13408+10]..[389,13408+37])
                                          expression (lib/sentenceParser.ml[389,13408+40]..[389,13408+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[389,13408+40]..[389,13408+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[390,13459+10]..[390,13459+36])
                                          expression (lib/sentenceParser.ml[390,13459+39]..[390,13459+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[390,13459+39]..[390,13459+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[390,13459+39]..[390,13459+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[390,13459+48]..[390,13459+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[390,13459+48]..[390,13459+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[391,13511+10]..[391,13511+38])
                                          expression (lib/sentenceParser.ml[391,13511+41]..[391,13511+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[391,13511+41]..[391,13511+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[392,13563+10]..[392,13563+36])
                                          expression (lib/sentenceParser.ml[392,13563+39]..[392,13563+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[392,13563+39]..[392,13563+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[393,13611+10]..[393,13611+36])
                                          expression (lib/sentenceParser.ml[393,13611+39]..[393,13611+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[393,13611+39]..[393,13611+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[395,13677+6]..[426,15064+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[395,13677+11]..[395,13677+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[395,13677+11]..[395,13677+22])
                      expression (lib/sentenceParser.ml[396,13703+8]..[426,15064+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[396,13703+12]..[396,13703+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[396,13703+12]..[396,13703+25])
                            expression (lib/sentenceParser.ml[396,13703+28]..[396,13703+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[396,13703+28]..[396,13703+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[396,13703+28]..[396,13703+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[396,13703+40]..[396,13703+67])
                        ]
                        expression (lib/sentenceParser.ml[397,13774+8]..[426,15064+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[397,13774+12]..[409,14302+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[398,13788+10]..[398,13788+37])
                                    pattern (lib/sentenceParser.ml[398,13788+40]..[398,13788+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[399,13831+10]..[399,13831+36])
                                    pattern (lib/sentenceParser.ml[399,13831+39]..[399,13831+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[399,13831+39]..[399,13831+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[400,13874+10]..[400,13874+38])
                                    pattern (lib/sentenceParser.ml[400,13874+41]..[400,13874+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[400,13874+41]..[400,13874+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[401,13930+10]..[401,13930+36])
                                    pattern (lib/sentenceParser.ml[401,13930+39]..[401,13930+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[401,13930+39]..[401,13930+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[402,13982+10]..[402,13982+36])
                                    pattern (lib/sentenceParser.ml[402,13982+39]..[408,14289+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[403,14023+12]..[403,14023+39])
                                          pattern (lib/sentenceParser.ml[403,14023+42]..[403,14023+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[403,14023+42]..[403,14023+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[404,14076+12]..[404,14076+38])
                                          pattern (lib/sentenceParser.ml[404,14076+41]..[404,14076+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[404,14076+41]..[404,14076+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[405,14121+12]..[405,14121+40])
                                          pattern (lib/sentenceParser.ml[405,14121+43]..[405,14121+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[405,14121+43]..[405,14121+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[406,14179+12]..[406,14179+38])
                                          pattern (lib/sentenceParser.ml[406,14179+41]..[406,14179+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[406,14179+41]..[406,14179+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[407,14233+12]..[407,14233+38])
                                          pattern (lib/sentenceParser.ml[407,14233+41]..[407,14233+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[407,14233+41]..[407,14233+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[409,14302+12]..[409,14302+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[409,14302+12]..[409,14302+25])
                          ]
                          expression (lib/sentenceParser.ml[410,14331+8]..[426,15064+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[410,14331+12]..[410,14331+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[410,14331+12]..[410,14331+14])
                                core_type (lib/sentenceParser.ml[410,14331+18]..[410,14331+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[410,14331+18]..[410,14331+33])
                                  []
                                expression (lib/sentenceParser.ml[410,14331+37]..[410,14331+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[410,14331+37]..[410,14331+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[410,14331+37]..[410,14331+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[410,14331+47]..[410,14331+49])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[410,14331+47]..[410,14331+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[411,14384+8]..[426,15064+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[411,14384+12]..[411,14384+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[411,14384+12]..[411,14384+14])
                                  core_type (lib/sentenceParser.ml[411,14384+18]..[411,14384+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[411,14384+18]..[411,14384+33])
                                    []
                                  expression (lib/sentenceParser.ml[411,14384+37]..[411,14384+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[411,14384+37]..[411,14384+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[411,14384+37]..[411,14384+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[411,14384+47]..[411,14384+49])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[411,14384+47]..[411,14384+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[412,14437+8]..[426,15064+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[412,14437+12]..[412,14437+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[412,14437+12]..[412,14437+23])
                                    expression (lib/sentenceParser.ml[412,14437+26]..[412,14437+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[412,14437+26]..[412,14437+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[412,14437+26]..[412,14437+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[412,14437+40]..[412,14437+66])
                                ]
                                expression (lib/sentenceParser.ml[413,14507+8]..[426,15064+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[413,14507+12]..[413,14507+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[413,14507+12]..[413,14507+21])
                                      expression (lib/sentenceParser.ml[413,14507+24]..[413,14507+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[413,14507+24]..[413,14507+37])
                                  ]
                                  expression (lib/sentenceParser.ml[414,14548+8]..[426,15064+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[414,14548+12]..[414,14548+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[414,14548+12]..[414,14548+19])
                                        expression (lib/sentenceParser.ml[414,14548+22]..[414,14548+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[414,14548+22]..[414,14548+33])
                                    ]
                                    expression (lib/sentenceParser.ml[415,14585+8]..[426,15064+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[415,14585+12]..[415,14585+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[415,14585+12]..[415,14585+14])
                                          core_type (lib/sentenceParser.ml[415,14585+18]..[415,14585+33])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[415,14585+18]..[415,14585+33])
                                            []
                                          expression (lib/sentenceParser.mly[175,14654+26]..[175,14654+100])
                                            Pexp_sequence
                                            expression (lib/sentenceParser.mly[175,14654+33]..[175,14654+87])
                                              Pexp_apply
                                              expression (lib/sentenceParser.mly[175,14654+34]..[175,14654+47])
                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[175,14654+34]..[175,14654+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.mly[175,14654+48]..[175,14654+86])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[175,14654+49]..[175,14654+63])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[175,14654+49]..[175,14654+63])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[175,14654+64]..[175,14654+85])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[175,14654+65]..[175,14654+80])
                                                              Pexp_constant PConst_string("DEBUG:concat1",(lib/sentenceParser.mly[175,14654+66]..[175,14654+79]),None)
                                                            expression (lib/sentenceParser.mly[175,14654+82]..[175,14654+84])
                                                              Pexp_ident "_1" (lib/sentenceParser.mly[175,14654+82]..[175,14654+84])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser.mly[175,14654+89]..[175,14654+99])
                                              Pexp_construct "NFactor" (lib/sentenceParser.mly[175,14654+89]..[175,14654+96])
                                              Some
                                                expression (lib/sentenceParser.mly[175,14654+97]..[175,14654+99])
                                                  Pexp_ident "_1" (lib/sentenceParser.mly[175,14654+97]..[175,14654+99])
                                      ]
                                      expression (lib/sentenceParser.ml[420,14797+8]..[426,15064+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[421,14807+10]..[421,14807+37])
                                            expression (lib/sentenceParser.ml[421,14807+40]..[421,14807+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[421,14807+40]..[421,14807+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[422,14858+10]..[422,14858+36])
                                            expression (lib/sentenceParser.ml[422,14858+39]..[422,14858+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[422,14858+39]..[422,14858+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[422,14858+39]..[422,14858+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[422,14858+48]..[422,14858+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[422,14858+48]..[422,14858+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[423,14910+10]..[423,14910+38])
                                            expression (lib/sentenceParser.ml[423,14910+41]..[423,14910+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[423,14910+41]..[423,14910+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[424,14962+10]..[424,14962+36])
                                            expression (lib/sentenceParser.ml[424,14962+39]..[424,14962+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[424,14962+39]..[424,14962+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[425,15010+10]..[425,15010+36])
                                            expression (lib/sentenceParser.ml[425,15010+39]..[425,15010+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[425,15010+39]..[425,15010+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[427,15076+6]..[451,16137+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[427,15076+11]..[427,15076+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[427,15076+11]..[427,15076+22])
                      expression (lib/sentenceParser.ml[428,15102+8]..[451,16137+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[428,15102+12]..[428,15102+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[428,15102+12]..[428,15102+25])
                            expression (lib/sentenceParser.ml[428,15102+28]..[428,15102+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[428,15102+28]..[428,15102+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[428,15102+28]..[428,15102+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[428,15102+40]..[428,15102+67])
                        ]
                        expression (lib/sentenceParser.ml[429,15173+8]..[451,16137+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[429,15173+12]..[435,15443+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[430,15187+10]..[430,15187+37])
                                    pattern (lib/sentenceParser.ml[430,15187+40]..[430,15187+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[430,15187+40]..[430,15187+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[431,15238+10]..[431,15238+36])
                                    pattern (lib/sentenceParser.ml[431,15238+39]..[431,15238+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[431,15238+39]..[431,15238+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[432,15281+10]..[432,15281+38])
                                    pattern (lib/sentenceParser.ml[432,15281+41]..[432,15281+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[432,15281+41]..[432,15281+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[433,15337+10]..[433,15337+36])
                                    pattern (lib/sentenceParser.ml[433,15337+39]..[433,15337+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[433,15337+39]..[433,15337+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[434,15389+10]..[434,15389+36])
                                    pattern (lib/sentenceParser.ml[434,15389+39]..[434,15389+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[434,15389+39]..[434,15389+52])
                                ]
                              expression (lib/sentenceParser.ml[435,15443+12]..[435,15443+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[435,15443+12]..[435,15443+25])
                          ]
                          expression (lib/sentenceParser.ml[436,15472+8]..[451,16137+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[436,15472+12]..[436,15472+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[436,15472+12]..[436,15472+14])
                                core_type (lib/sentenceParser.ml[436,15472+18]..[436,15472+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[436,15472+18]..[436,15472+33])
                                  []
                                expression (lib/sentenceParser.ml[436,15472+37]..[436,15472+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[436,15472+37]..[436,15472+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[436,15472+37]..[436,15472+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[436,15472+47]..[436,15472+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[436,15472+47]..[436,15472+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[437,15525+8]..[451,16137+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[437,15525+12]..[437,15525+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[437,15525+12]..[437,15525+23])
                                  expression (lib/sentenceParser.ml[437,15525+26]..[437,15525+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[437,15525+26]..[437,15525+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[437,15525+26]..[437,15525+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[437,15525+40]..[437,15525+66])
                              ]
                              expression (lib/sentenceParser.ml[438,15595+8]..[451,16137+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[438,15595+12]..[438,15595+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[438,15595+12]..[438,15595+21])
                                    expression (lib/sentenceParser.ml[438,15595+24]..[438,15595+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[438,15595+24]..[438,15595+37])
                                ]
                                expression (lib/sentenceParser.ml[439,15636+8]..[451,16137+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[439,15636+12]..[439,15636+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[439,15636+12]..[439,15636+19])
                                      expression (lib/sentenceParser.ml[439,15636+22]..[439,15636+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[439,15636+22]..[439,15636+33])
                                  ]
                                  expression (lib/sentenceParser.ml[440,15673+8]..[451,16137+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[440,15673+12]..[440,15673+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[440,15673+12]..[440,15673+14])
                                        core_type (lib/sentenceParser.ml[440,15673+18]..[440,15673+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[440,15673+18]..[440,15673+33])
                                          []
                                        expression (lib/sentenceParser.mly[176,15742+11]..[176,15742+85])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[176,15742+18]..[176,15742+72])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[176,15742+19]..[176,15742+32])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[176,15742+19]..[176,15742+32])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[176,15742+33]..[176,15742+71])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[176,15742+34]..[176,15742+48])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[176,15742+34]..[176,15742+48])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[176,15742+49]..[176,15742+70])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[176,15742+50]..[176,15742+65])
                                                            Pexp_constant PConst_string("DEBUG:concat2",(lib/sentenceParser.mly[176,15742+51]..[176,15742+64]),None)
                                                          expression (lib/sentenceParser.mly[176,15742+67]..[176,15742+69])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[176,15742+67]..[176,15742+69])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[176,15742+74]..[176,15742+84])
                                            Pexp_construct "NFactor" (lib/sentenceParser.mly[176,15742+74]..[176,15742+81])
                                            Some
                                              expression (lib/sentenceParser.mly[176,15742+82]..[176,15742+84])
                                                Pexp_ident "_1" (lib/sentenceParser.mly[176,15742+82]..[176,15742+84])
                                    ]
                                    expression (lib/sentenceParser.ml[445,15870+8]..[451,16137+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[446,15880+10]..[446,15880+37])
                                          expression (lib/sentenceParser.ml[446,15880+40]..[446,15880+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[446,15880+40]..[446,15880+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[447,15931+10]..[447,15931+36])
                                          expression (lib/sentenceParser.ml[447,15931+39]..[447,15931+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[447,15931+39]..[447,15931+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[447,15931+39]..[447,15931+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[447,15931+48]..[447,15931+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[447,15931+48]..[447,15931+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[448,15983+10]..[448,15983+38])
                                          expression (lib/sentenceParser.ml[448,15983+41]..[448,15983+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[448,15983+41]..[448,15983+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[449,16035+10]..[449,16035+36])
                                          expression (lib/sentenceParser.ml[449,16035+39]..[449,16035+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[449,16035+39]..[449,16035+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[450,16083+10]..[450,16083+36])
                                          expression (lib/sentenceParser.ml[450,16083+39]..[450,16083+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[450,16083+39]..[450,16083+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[452,16149+6]..[511,18309+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[452,16149+11]..[452,16149+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[452,16149+11]..[452,16149+22])
                      expression (lib/sentenceParser.ml[453,16175+8]..[511,18309+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[453,16175+12]..[453,16175+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[453,16175+12]..[453,16175+25])
                            expression (lib/sentenceParser.ml[453,16175+28]..[453,16175+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[453,16175+28]..[453,16175+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[453,16175+28]..[453,16175+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[453,16175+40]..[453,16175+67])
                        ]
                        expression (lib/sentenceParser.ml[454,16246+8]..[511,18309+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[454,16246+12]..[466,16801+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[455,16260+10]..[455,16260+37])
                                    pattern (lib/sentenceParser.ml[455,16260+40]..[455,16260+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[456,16303+10]..[456,16303+36])
                                    pattern (lib/sentenceParser.ml[456,16303+39]..[456,16303+50])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser.ml[456,16303+39]..[456,16303+50])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[457,16355+10]..[457,16355+38])
                                    pattern (lib/sentenceParser.ml[457,16355+41]..[457,16355+63])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser.ml[457,16355+41]..[457,16355+63])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[458,16420+10]..[458,16420+36])
                                    pattern (lib/sentenceParser.ml[458,16420+39]..[458,16420+59])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser.ml[458,16420+39]..[458,16420+59])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[459,16481+10]..[459,16481+36])
                                    pattern (lib/sentenceParser.ml[459,16481+39]..[465,16788+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[460,16522+12]..[460,16522+39])
                                          pattern (lib/sentenceParser.ml[460,16522+42]..[460,16522+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[460,16522+42]..[460,16522+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[461,16575+12]..[461,16575+38])
                                          pattern (lib/sentenceParser.ml[461,16575+41]..[461,16575+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[461,16575+41]..[461,16575+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[462,16620+12]..[462,16620+40])
                                          pattern (lib/sentenceParser.ml[462,16620+43]..[462,16620+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[462,16620+43]..[462,16620+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[463,16678+12]..[463,16678+38])
                                          pattern (lib/sentenceParser.ml[463,16678+41]..[463,16678+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[463,16678+41]..[463,16678+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[464,16732+12]..[464,16732+38])
                                          pattern (lib/sentenceParser.ml[464,16732+41]..[464,16732+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[464,16732+41]..[464,16732+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[466,16801+12]..[466,16801+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[466,16801+12]..[466,16801+25])
                          ]
                          expression (lib/sentenceParser.ml[467,16830+8]..[511,18309+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[467,16830+12]..[467,16830+23])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser.ml[467,16830+12]..[467,16830+23])
                                core_type (lib/sentenceParser.ml[467,16830+26]..[467,16830+30])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[467,16830+26]..[467,16830+30])
                                  []
                                expression (lib/sentenceParser.ml[467,16830+33]..[467,16830+54])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[467,16830+33]..[467,16830+42])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[467,16830+33]..[467,16830+42])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[467,16830+43]..[467,16830+54])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser.ml[467,16830+43]..[467,16830+54])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[468,16888+8]..[511,18309+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[468,16888+12]..[468,16888+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[468,16888+12]..[468,16888+14])
                                  core_type (lib/sentenceParser.ml[468,16888+18]..[468,16888+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[468,16888+18]..[468,16888+33])
                                    []
                                  expression (lib/sentenceParser.ml[468,16888+37]..[468,16888+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[468,16888+37]..[468,16888+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[468,16888+37]..[468,16888+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[468,16888+47]..[468,16888+49])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[468,16888+47]..[468,16888+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[469,16941+8]..[511,18309+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[469,16941+12]..[469,16941+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[469,16941+12]..[469,16941+23])
                                    expression (lib/sentenceParser.ml[469,16941+26]..[469,16941+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[469,16941+26]..[469,16941+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[469,16941+26]..[469,16941+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[469,16941+40]..[469,16941+66])
                                ]
                                expression (lib/sentenceParser.ml[470,17011+8]..[511,18309+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[470,17011+12]..[470,17011+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[470,17011+12]..[470,17011+21])
                                      expression (lib/sentenceParser.ml[470,17011+24]..[470,17011+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[470,17011+24]..[470,17011+37])
                                  ]
                                  expression (lib/sentenceParser.ml[471,17052+8]..[511,18309+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[471,17052+12]..[471,17052+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[471,17052+12]..[471,17052+19])
                                        expression (lib/sentenceParser.ml[471,17052+22]..[471,17052+42])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser.ml[471,17052+22]..[471,17052+42])
                                    ]
                                    expression (lib/sentenceParser.ml[472,17098+8]..[511,18309+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[472,17098+12]..[472,17098+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[472,17098+12]..[472,17098+14])
                                          expression (lib/sentenceParser.ml[473,17115+10]..[503,17999+31])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[473,17115+14]..[473,17115+16])
                                                  Ppat_var "_2" (lib/sentenceParser.ml[473,17115+14]..[473,17115+16])
                                                expression (lib/sentenceParser.ml[474,17134+12]..lib/sentenceParser.mly[160,17388+80])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[474,17134+16]..[474,17134+18])
                                                        Ppat_var "_1" (lib/sentenceParser.ml[474,17134+16]..[474,17134+18])
                                                      expression (lib/sentenceParser.ml[474,17134+21]..[474,17134+32])
                                                        Pexp_ident "_1_inlined1" (lib/sentenceParser.ml[474,17134+21]..[474,17134+32])
                                                  ]
                                                  expression (lib/sentenceParser.ml[475,17170+12]..lib/sentenceParser.mly[160,17388+80])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[475,17170+16]..[475,17170+18])
                                                          Ppat_var "_1" (lib/sentenceParser.ml[475,17170+16]..[475,17170+18])
                                                        expression (lib/sentenceParser.mly[172,17223+9]..[172,17223+74])
                                                          Pexp_sequence
                                                          expression (lib/sentenceParser.mly[172,17223+16]..[172,17223+67])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[172,17223+17]..[172,17223+30])
                                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[172,17223+17]..[172,17223+30])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[172,17223+31]..[172,17223+66])
                                                                  Pexp_apply
                                                                  expression (lib/sentenceParser.mly[172,17223+32]..[172,17223+46])
                                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[172,17223+32]..[172,17223+46])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lib/sentenceParser.mly[172,17223+47]..[172,17223+65])
Pexp_tuple
[
  expression (lib/sentenceParser.mly[172,17223+48]..[172,17223+60])
    Pexp_constant PConst_string("DEBUG:plus",(lib/sentenceParser.mly[172,17223+49]..[172,17223+59]),None)
  expression (lib/sentenceParser.mly[172,17223+62]..[172,17223+64])
    Pexp_ident "_1" (lib/sentenceParser.mly[172,17223+62]..[172,17223+64])
]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[172,17223+69]..[172,17223+73])
                                                            Pexp_construct "Plus" (lib/sentenceParser.mly[172,17223+69]..[172,17223+73])
                                                            None
                                                    ]
                                                    expression (lib/sentenceParser.mly[160,17388+10]..[160,17388+80])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[160,17388+17]..[160,17388+67])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[160,17388+18]..[160,17388+31])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[160,17388+18]..[160,17388+31])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[160,17388+32]..[160,17388+66])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[160,17388+33]..[160,17388+47])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[160,17388+33]..[160,17388+47])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[160,17388+48]..[160,17388+65])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[160,17388+49]..[160,17388+60])
Pexp_constant PConst_string("DEBUG:mod",(lib/sentenceParser.mly[160,17388+50]..[160,17388+59]),None)
                                                                      expression (lib/sentenceParser.mly[160,17388+62]..[160,17388+64])
Pexp_ident "_1" (lib/sentenceParser.mly[160,17388+62]..[160,17388+64])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[160,17388+69]..[160,17388+79])
                                                        Pexp_construct "NFactor" (lib/sentenceParser.mly[160,17388+69]..[160,17388+76])
                                                        Some
                                                          expression (lib/sentenceParser.mly[160,17388+77]..[160,17388+79])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[160,17388+77]..[160,17388+79])
                                            ]
                                            expression (lib/sentenceParser.ml[486,17525+10]..[503,17999+31])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[486,17525+14]..[486,17525+16])
                                                    Ppat_var "_1" (lib/sentenceParser.ml[486,17525+14]..[486,17525+16])
                                                  expression (lib/sentenceParser.mly[139,17576+11]..[139,17576+88])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser.mly[139,17576+18]..[139,17576+75])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[139,17576+19]..[139,17576+32])
                                                        Pexp_ident "print_endline" (lib/sentenceParser.mly[139,17576+19]..[139,17576+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[139,17576+33]..[139,17576+74])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[139,17576+34]..[139,17576+48])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[139,17576+34]..[139,17576+48])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[139,17576+49]..[139,17576+73])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[139,17576+50]..[139,17576+68])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,17576+51]..[139,17576+67]),None)
                                                                    expression (lib/sentenceParser.mly[139,17576+70]..[139,17576+72])
                                                                      Pexp_ident "_1" (lib/sentenceParser.mly[139,17576+70]..[139,17576+72])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[139,17576+77]..[139,17576+87])
                                                      Pexp_construct "NFactor" (lib/sentenceParser.mly[139,17576+77]..[139,17576+84])
                                                      Some
                                                        expression (lib/sentenceParser.mly[139,17576+85]..[139,17576+87])
                                                          Pexp_ident "_1" (lib/sentenceParser.mly[139,17576+85]..[139,17576+87])
                                              ]
                                              expression (lib/sentenceParser.ml[491,17709+10]..[503,17999+31])
                                                Pexp_constraint
                                                expression (lib/sentenceParser.mly[142,17752+24]..[150,17961+7])
                                                  Pexp_construct "NFactor" (lib/sentenceParser.mly[149,17942+8]..[149,17942+15])
                                                  Some
                                                    expression (lib/sentenceParser.mly[149,17942+16]..[149,17942+18])
                                                      Pexp_ident "_1" (lib/sentenceParser.mly[149,17942+16]..[149,17942+18])
                                                core_type (lib/sentenceParser.ml[503,17999+14]..[503,17999+29])
                                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[503,17999+14]..[503,17999+29])
                                                  []
                                      ]
                                      expression (lib/sentenceParser.ml[505,18042+8]..[511,18309+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[506,18052+10]..[506,18052+37])
                                            expression (lib/sentenceParser.ml[506,18052+40]..[506,18052+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[506,18052+40]..[506,18052+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[507,18103+10]..[507,18103+36])
                                            expression (lib/sentenceParser.ml[507,18103+39]..[507,18103+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[507,18103+39]..[507,18103+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[507,18103+39]..[507,18103+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[507,18103+48]..[507,18103+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[507,18103+48]..[507,18103+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[508,18155+10]..[508,18155+38])
                                            expression (lib/sentenceParser.ml[508,18155+41]..[508,18155+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[508,18155+41]..[508,18155+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[509,18207+10]..[509,18207+36])
                                            expression (lib/sentenceParser.ml[509,18207+39]..[509,18207+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[509,18207+39]..[509,18207+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[510,18255+10]..[510,18255+36])
                                            expression (lib/sentenceParser.ml[510,18255+39]..[510,18255+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[510,18255+39]..[510,18255+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[512,18321+6]..[571,20494+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[512,18321+11]..[512,18321+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[512,18321+11]..[512,18321+22])
                      expression (lib/sentenceParser.ml[513,18347+8]..[571,20494+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[513,18347+12]..[513,18347+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[513,18347+12]..[513,18347+25])
                            expression (lib/sentenceParser.ml[513,18347+28]..[513,18347+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[513,18347+28]..[513,18347+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[513,18347+28]..[513,18347+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[513,18347+40]..[513,18347+67])
                        ]
                        expression (lib/sentenceParser.ml[514,18418+8]..[571,20494+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[514,18418+12]..[526,18973+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[515,18432+10]..[515,18432+37])
                                    pattern (lib/sentenceParser.ml[515,18432+40]..[515,18432+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[516,18475+10]..[516,18475+36])
                                    pattern (lib/sentenceParser.ml[516,18475+39]..[516,18475+50])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser.ml[516,18475+39]..[516,18475+50])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[517,18527+10]..[517,18527+38])
                                    pattern (lib/sentenceParser.ml[517,18527+41]..[517,18527+63])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser.ml[517,18527+41]..[517,18527+63])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[518,18592+10]..[518,18592+36])
                                    pattern (lib/sentenceParser.ml[518,18592+39]..[518,18592+59])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser.ml[518,18592+39]..[518,18592+59])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[519,18653+10]..[519,18653+36])
                                    pattern (lib/sentenceParser.ml[519,18653+39]..[525,18960+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[520,18694+12]..[520,18694+39])
                                          pattern (lib/sentenceParser.ml[520,18694+42]..[520,18694+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[520,18694+42]..[520,18694+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[521,18747+12]..[521,18747+38])
                                          pattern (lib/sentenceParser.ml[521,18747+41]..[521,18747+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[521,18747+41]..[521,18747+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[522,18792+12]..[522,18792+40])
                                          pattern (lib/sentenceParser.ml[522,18792+43]..[522,18792+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[522,18792+43]..[522,18792+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[523,18850+12]..[523,18850+38])
                                          pattern (lib/sentenceParser.ml[523,18850+41]..[523,18850+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[523,18850+41]..[523,18850+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[524,18904+12]..[524,18904+38])
                                          pattern (lib/sentenceParser.ml[524,18904+41]..[524,18904+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[524,18904+41]..[524,18904+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[526,18973+12]..[526,18973+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[526,18973+12]..[526,18973+25])
                          ]
                          expression (lib/sentenceParser.ml[527,19002+8]..[571,20494+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[527,19002+12]..[527,19002+23])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser.ml[527,19002+12]..[527,19002+23])
                                core_type (lib/sentenceParser.ml[527,19002+26]..[527,19002+30])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[527,19002+26]..[527,19002+30])
                                  []
                                expression (lib/sentenceParser.ml[527,19002+33]..[527,19002+54])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[527,19002+33]..[527,19002+42])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[527,19002+33]..[527,19002+42])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[527,19002+43]..[527,19002+54])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser.ml[527,19002+43]..[527,19002+54])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[528,19060+8]..[571,20494+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[528,19060+12]..[528,19060+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[528,19060+12]..[528,19060+14])
                                  core_type (lib/sentenceParser.ml[528,19060+18]..[528,19060+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[528,19060+18]..[528,19060+33])
                                    []
                                  expression (lib/sentenceParser.ml[528,19060+37]..[528,19060+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[528,19060+37]..[528,19060+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[528,19060+37]..[528,19060+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[528,19060+47]..[528,19060+49])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[528,19060+47]..[528,19060+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[529,19113+8]..[571,20494+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[529,19113+12]..[529,19113+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[529,19113+12]..[529,19113+23])
                                    expression (lib/sentenceParser.ml[529,19113+26]..[529,19113+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[529,19113+26]..[529,19113+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[529,19113+26]..[529,19113+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[529,19113+40]..[529,19113+66])
                                ]
                                expression (lib/sentenceParser.ml[530,19183+8]..[571,20494+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[530,19183+12]..[530,19183+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[530,19183+12]..[530,19183+21])
                                      expression (lib/sentenceParser.ml[530,19183+24]..[530,19183+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[530,19183+24]..[530,19183+37])
                                  ]
                                  expression (lib/sentenceParser.ml[531,19224+8]..[571,20494+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[531,19224+12]..[531,19224+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[531,19224+12]..[531,19224+19])
                                        expression (lib/sentenceParser.ml[531,19224+22]..[531,19224+42])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser.ml[531,19224+22]..[531,19224+42])
                                    ]
                                    expression (lib/sentenceParser.ml[532,19270+8]..[571,20494+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[532,19270+12]..[532,19270+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[532,19270+12]..[532,19270+14])
                                          expression (lib/sentenceParser.ml[533,19287+10]..[563,20184+31])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[533,19287+14]..[533,19287+16])
                                                  Ppat_var "_2" (lib/sentenceParser.ml[533,19287+14]..[533,19287+16])
                                                expression (lib/sentenceParser.ml[534,19306+12]..lib/sentenceParser.mly[161,19570+83])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[534,19306+16]..[534,19306+18])
                                                        Ppat_var "_1" (lib/sentenceParser.ml[534,19306+16]..[534,19306+18])
                                                      expression (lib/sentenceParser.ml[534,19306+21]..[534,19306+32])
                                                        Pexp_ident "_1_inlined1" (lib/sentenceParser.ml[534,19306+21]..[534,19306+32])
                                                  ]
                                                  expression (lib/sentenceParser.ml[535,19342+12]..lib/sentenceParser.mly[161,19570+83])
                                                    Pexp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[535,19342+16]..[535,19342+18])
                                                          Ppat_var "_1" (lib/sentenceParser.ml[535,19342+16]..[535,19342+18])
                                                        expression (lib/sentenceParser.mly[170,19395+14]..[170,19395+84])
                                                          Pexp_sequence
                                                          expression (lib/sentenceParser.mly[170,19395+21]..[170,19395+73])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[170,19395+22]..[170,19395+35])
                                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[170,19395+22]..[170,19395+35])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[170,19395+36]..[170,19395+72])
                                                                  Pexp_apply
                                                                  expression (lib/sentenceParser.mly[170,19395+37]..[170,19395+51])
                                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[170,19395+37]..[170,19395+51])
                                                                  [
                                                                    <arg>
                                                                    Nolabel
                                                                      expression (lib/sentenceParser.mly[170,19395+52]..[170,19395+71])
Pexp_tuple
[
  expression (lib/sentenceParser.mly[170,19395+53]..[170,19395+66])
    Pexp_constant PConst_string("DEBUG:quest",(lib/sentenceParser.mly[170,19395+54]..[170,19395+65]),None)
  expression (lib/sentenceParser.mly[170,19395+68]..[170,19395+70])
    Pexp_ident "_1" (lib/sentenceParser.mly[170,19395+68]..[170,19395+70])
]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[170,19395+75]..[170,19395+83])
                                                            Pexp_construct "Question" (lib/sentenceParser.mly[170,19395+75]..[170,19395+83])
                                                            None
                                                    ]
                                                    expression (lib/sentenceParser.mly[161,19570+11]..[161,19570+83])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[161,19570+18]..[161,19570+70])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[161,19570+19]..[161,19570+32])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[161,19570+19]..[161,19570+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[161,19570+33]..[161,19570+69])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[161,19570+34]..[161,19570+48])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[161,19570+34]..[161,19570+48])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[161,19570+49]..[161,19570+68])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[161,19570+50]..[161,19570+63])
Pexp_constant PConst_string("DEBUG:quest",(lib/sentenceParser.mly[161,19570+51]..[161,19570+62]),None)
                                                                      expression (lib/sentenceParser.mly[161,19570+65]..[161,19570+67])
Pexp_ident "_1" (lib/sentenceParser.mly[161,19570+65]..[161,19570+67])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[161,19570+72]..[161,19570+82])
                                                        Pexp_construct "NFactor" (lib/sentenceParser.mly[161,19570+72]..[161,19570+79])
                                                        Some
                                                          expression (lib/sentenceParser.mly[161,19570+80]..[161,19570+82])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[161,19570+80]..[161,19570+82])
                                            ]
                                            expression (lib/sentenceParser.ml[546,19710+10]..[563,20184+31])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[546,19710+14]..[546,19710+16])
                                                    Ppat_var "_1" (lib/sentenceParser.ml[546,19710+14]..[546,19710+16])
                                                  expression (lib/sentenceParser.mly[139,19761+11]..[139,19761+88])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser.mly[139,19761+18]..[139,19761+75])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[139,19761+19]..[139,19761+32])
                                                        Pexp_ident "print_endline" (lib/sentenceParser.mly[139,19761+19]..[139,19761+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[139,19761+33]..[139,19761+74])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[139,19761+34]..[139,19761+48])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[139,19761+34]..[139,19761+48])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[139,19761+49]..[139,19761+73])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[139,19761+50]..[139,19761+68])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,19761+51]..[139,19761+67]),None)
                                                                    expression (lib/sentenceParser.mly[139,19761+70]..[139,19761+72])
                                                                      Pexp_ident "_1" (lib/sentenceParser.mly[139,19761+70]..[139,19761+72])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[139,19761+77]..[139,19761+87])
                                                      Pexp_construct "NFactor" (lib/sentenceParser.mly[139,19761+77]..[139,19761+84])
                                                      Some
                                                        expression (lib/sentenceParser.mly[139,19761+85]..[139,19761+87])
                                                          Pexp_ident "_1" (lib/sentenceParser.mly[139,19761+85]..[139,19761+87])
                                              ]
                                              expression (lib/sentenceParser.ml[551,19894+10]..[563,20184+31])
                                                Pexp_constraint
                                                expression (lib/sentenceParser.mly[142,19937+24]..[150,20146+7])
                                                  Pexp_construct "NFactor" (lib/sentenceParser.mly[149,20127+8]..[149,20127+15])
                                                  Some
                                                    expression (lib/sentenceParser.mly[149,20127+16]..[149,20127+18])
                                                      Pexp_ident "_1" (lib/sentenceParser.mly[149,20127+16]..[149,20127+18])
                                                core_type (lib/sentenceParser.ml[563,20184+14]..[563,20184+29])
                                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[563,20184+14]..[563,20184+29])
                                                  []
                                      ]
                                      expression (lib/sentenceParser.ml[565,20227+8]..[571,20494+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[566,20237+10]..[566,20237+37])
                                            expression (lib/sentenceParser.ml[566,20237+40]..[566,20237+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[566,20237+40]..[566,20237+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[567,20288+10]..[567,20288+36])
                                            expression (lib/sentenceParser.ml[567,20288+39]..[567,20288+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[567,20288+39]..[567,20288+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[567,20288+39]..[567,20288+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[567,20288+48]..[567,20288+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[567,20288+48]..[567,20288+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[568,20340+10]..[568,20340+38])
                                            expression (lib/sentenceParser.ml[568,20340+41]..[568,20340+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[568,20340+41]..[568,20340+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[569,20392+10]..[569,20392+36])
                                            expression (lib/sentenceParser.ml[569,20392+39]..[569,20392+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[569,20392+39]..[569,20392+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[570,20440+10]..[570,20440+36])
                                            expression (lib/sentenceParser.ml[570,20440+39]..[570,20440+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[570,20440+39]..[570,20440+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[572,20506+6]..[633,22663+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[572,20506+11]..[572,20506+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[572,20506+11]..[572,20506+22])
                      expression (lib/sentenceParser.ml[573,20532+8]..[633,22663+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[573,20532+12]..[573,20532+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[573,20532+12]..[573,20532+25])
                            expression (lib/sentenceParser.ml[573,20532+28]..[573,20532+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[573,20532+28]..[573,20532+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[573,20532+28]..[573,20532+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[573,20532+40]..[573,20532+67])
                        ]
                        expression (lib/sentenceParser.ml[574,20603+8]..[633,22663+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[574,20603+12]..[586,21158+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[575,20617+10]..[575,20617+37])
                                    pattern (lib/sentenceParser.ml[575,20617+40]..[575,20617+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[576,20660+10]..[576,20660+36])
                                    pattern (lib/sentenceParser.ml[576,20660+39]..[576,20660+50])
                                      Ppat_var "_1_inlined1" (lib/sentenceParser.ml[576,20660+39]..[576,20660+50])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[577,20712+10]..[577,20712+38])
                                    pattern (lib/sentenceParser.ml[577,20712+41]..[577,20712+63])
                                      Ppat_var "_startpos__1_inlined1_" (lib/sentenceParser.ml[577,20712+41]..[577,20712+63])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[578,20777+10]..[578,20777+36])
                                    pattern (lib/sentenceParser.ml[578,20777+39]..[578,20777+59])
                                      Ppat_var "_endpos__1_inlined1_" (lib/sentenceParser.ml[578,20777+39]..[578,20777+59])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[579,20838+10]..[579,20838+36])
                                    pattern (lib/sentenceParser.ml[579,20838+39]..[585,21145+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[580,20879+12]..[580,20879+39])
                                          pattern (lib/sentenceParser.ml[580,20879+42]..[580,20879+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[580,20879+42]..[580,20879+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[581,20932+12]..[581,20932+38])
                                          pattern (lib/sentenceParser.ml[581,20932+41]..[581,20932+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[581,20932+41]..[581,20932+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[582,20977+12]..[582,20977+40])
                                          pattern (lib/sentenceParser.ml[582,20977+43]..[582,20977+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[582,20977+43]..[582,20977+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[583,21035+12]..[583,21035+38])
                                          pattern (lib/sentenceParser.ml[583,21035+41]..[583,21035+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[583,21035+41]..[583,21035+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[584,21089+12]..[584,21089+38])
                                          pattern (lib/sentenceParser.ml[584,21089+41]..[584,21089+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[584,21089+41]..[584,21089+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[586,21158+12]..[586,21158+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[586,21158+12]..[586,21158+25])
                          ]
                          expression (lib/sentenceParser.ml[587,21187+8]..[633,22663+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[587,21187+12]..[587,21187+23])
                                  Ppat_var "_1_inlined1" (lib/sentenceParser.ml[587,21187+12]..[587,21187+23])
                                core_type (lib/sentenceParser.ml[587,21187+26]..[587,21187+30])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[587,21187+26]..[587,21187+30])
                                  []
                                expression (lib/sentenceParser.ml[587,21187+33]..[587,21187+54])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[587,21187+33]..[587,21187+42])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[587,21187+33]..[587,21187+42])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[587,21187+43]..[587,21187+54])
                                        Pexp_ident "_1_inlined1" (lib/sentenceParser.ml[587,21187+43]..[587,21187+54])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[588,21245+8]..[633,22663+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[588,21245+12]..[588,21245+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[588,21245+12]..[588,21245+14])
                                  core_type (lib/sentenceParser.ml[588,21245+18]..[588,21245+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[588,21245+18]..[588,21245+33])
                                    []
                                  expression (lib/sentenceParser.ml[588,21245+37]..[588,21245+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[588,21245+37]..[588,21245+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[588,21245+37]..[588,21245+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[588,21245+47]..[588,21245+49])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[588,21245+47]..[588,21245+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[589,21298+8]..[633,22663+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[589,21298+12]..[589,21298+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[589,21298+12]..[589,21298+23])
                                    expression (lib/sentenceParser.ml[589,21298+26]..[589,21298+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[589,21298+26]..[589,21298+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[589,21298+26]..[589,21298+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[589,21298+40]..[589,21298+66])
                                ]
                                expression (lib/sentenceParser.ml[590,21368+8]..[633,22663+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[590,21368+12]..[590,21368+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[590,21368+12]..[590,21368+21])
                                      expression (lib/sentenceParser.ml[590,21368+24]..[590,21368+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[590,21368+24]..[590,21368+37])
                                  ]
                                  expression (lib/sentenceParser.ml[591,21409+8]..[633,22663+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[591,21409+12]..[591,21409+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[591,21409+12]..[591,21409+19])
                                        expression (lib/sentenceParser.ml[591,21409+22]..[591,21409+42])
                                          Pexp_ident "_endpos__1_inlined1_" (lib/sentenceParser.ml[591,21409+22]..[591,21409+42])
                                    ]
                                    expression (lib/sentenceParser.ml[592,21455+8]..[633,22663+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[592,21455+12]..[592,21455+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[592,21455+12]..[592,21455+14])
                                          expression (lib/sentenceParser.ml[593,21472+10]..[625,22353+31])
                                            Pexp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[593,21472+14]..[593,21472+16])
                                                  Ppat_var "_2" (lib/sentenceParser.ml[593,21472+14]..[593,21472+16])
                                                expression (lib/sentenceParser.ml[594,21491+12]..lib/sentenceParser.mly[162,21741+81])
                                                  Pexp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[594,21491+16]..[594,21491+18])
                                                        Ppat_var "_1" (lib/sentenceParser.ml[594,21491+16]..[594,21491+18])
                                                      expression (lib/sentenceParser.mly[165,21544+11]..[168,21641+9])
                                                        Pexp_construct "Star" (lib/sentenceParser.mly[167,21626+10]..[167,21626+14])
                                                        None
                                                  ]
                                                  expression (lib/sentenceParser.mly[162,21741+10]..[162,21741+81])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser.mly[162,21741+17]..[162,21741+68])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[162,21741+18]..[162,21741+31])
                                                        Pexp_ident "print_endline" (lib/sentenceParser.mly[162,21741+18]..[162,21741+31])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[162,21741+32]..[162,21741+67])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[162,21741+33]..[162,21741+47])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[162,21741+33]..[162,21741+47])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[162,21741+48]..[162,21741+66])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[162,21741+49]..[162,21741+61])
                                                                      Pexp_constant PConst_string("DEBUG:star",(lib/sentenceParser.mly[162,21741+50]..[162,21741+60]),None)
                                                                    expression (lib/sentenceParser.mly[162,21741+63]..[162,21741+65])
                                                                      Pexp_ident "_1" (lib/sentenceParser.mly[162,21741+63]..[162,21741+65])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[162,21741+70]..[162,21741+80])
                                                      Pexp_construct "NFactor" (lib/sentenceParser.mly[162,21741+70]..[162,21741+77])
                                                      Some
                                                        expression (lib/sentenceParser.mly[162,21741+78]..[162,21741+80])
                                                          Pexp_ident "_1" (lib/sentenceParser.mly[162,21741+78]..[162,21741+80])
                                            ]
                                            expression (lib/sentenceParser.ml[608,21879+10]..[625,22353+31])
                                              Pexp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[608,21879+14]..[608,21879+16])
                                                    Ppat_var "_1" (lib/sentenceParser.ml[608,21879+14]..[608,21879+16])
                                                  expression (lib/sentenceParser.mly[139,21930+11]..[139,21930+88])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser.mly[139,21930+18]..[139,21930+75])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[139,21930+19]..[139,21930+32])
                                                        Pexp_ident "print_endline" (lib/sentenceParser.mly[139,21930+19]..[139,21930+32])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[139,21930+33]..[139,21930+74])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[139,21930+34]..[139,21930+48])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[139,21930+34]..[139,21930+48])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[139,21930+49]..[139,21930+73])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[139,21930+50]..[139,21930+68])
                                                                      Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,21930+51]..[139,21930+67]),None)
                                                                    expression (lib/sentenceParser.mly[139,21930+70]..[139,21930+72])
                                                                      Pexp_ident "_1" (lib/sentenceParser.mly[139,21930+70]..[139,21930+72])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[139,21930+77]..[139,21930+87])
                                                      Pexp_construct "NFactor" (lib/sentenceParser.mly[139,21930+77]..[139,21930+84])
                                                      Some
                                                        expression (lib/sentenceParser.mly[139,21930+85]..[139,21930+87])
                                                          Pexp_ident "_1" (lib/sentenceParser.mly[139,21930+85]..[139,21930+87])
                                              ]
                                              expression (lib/sentenceParser.ml[613,22063+10]..[625,22353+31])
                                                Pexp_constraint
                                                expression (lib/sentenceParser.mly[142,22106+24]..[150,22315+7])
                                                  Pexp_construct "NFactor" (lib/sentenceParser.mly[149,22296+8]..[149,22296+15])
                                                  Some
                                                    expression (lib/sentenceParser.mly[149,22296+16]..[149,22296+18])
                                                      Pexp_ident "_1" (lib/sentenceParser.mly[149,22296+16]..[149,22296+18])
                                                core_type (lib/sentenceParser.ml[625,22353+14]..[625,22353+29])
                                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[625,22353+14]..[625,22353+29])
                                                  []
                                      ]
                                      expression (lib/sentenceParser.ml[627,22396+8]..[633,22663+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[628,22406+10]..[628,22406+37])
                                            expression (lib/sentenceParser.ml[628,22406+40]..[628,22406+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[628,22406+40]..[628,22406+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[629,22457+10]..[629,22457+36])
                                            expression (lib/sentenceParser.ml[629,22457+39]..[629,22457+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[629,22457+39]..[629,22457+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[629,22457+39]..[629,22457+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[629,22457+48]..[629,22457+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[629,22457+48]..[629,22457+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[630,22509+10]..[630,22509+38])
                                            expression (lib/sentenceParser.ml[630,22509+41]..[630,22509+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[630,22509+41]..[630,22509+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[631,22561+10]..[631,22561+36])
                                            expression (lib/sentenceParser.ml[631,22561+39]..[631,22561+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[631,22561+39]..[631,22561+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[632,22609+10]..[632,22609+36])
                                            expression (lib/sentenceParser.ml[632,22609+39]..[632,22609+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[632,22609+39]..[632,22609+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[634,22675+6]..[670,24005+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[634,22675+11]..[634,22675+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[634,22675+11]..[634,22675+22])
                      expression (lib/sentenceParser.ml[635,22701+8]..[670,24005+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[635,22701+12]..[635,22701+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[635,22701+12]..[635,22701+25])
                            expression (lib/sentenceParser.ml[635,22701+28]..[635,22701+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[635,22701+28]..[635,22701+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[635,22701+28]..[635,22701+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[635,22701+40]..[635,22701+67])
                        ]
                        expression (lib/sentenceParser.ml[636,22772+8]..[670,24005+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[636,22772+12]..[642,23042+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[637,22786+10]..[637,22786+37])
                                    pattern (lib/sentenceParser.ml[637,22786+40]..[637,22786+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[637,22786+40]..[637,22786+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[638,22837+10]..[638,22837+36])
                                    pattern (lib/sentenceParser.ml[638,22837+39]..[638,22837+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[638,22837+39]..[638,22837+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[639,22880+10]..[639,22880+38])
                                    pattern (lib/sentenceParser.ml[639,22880+41]..[639,22880+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[639,22880+41]..[639,22880+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[640,22936+10]..[640,22936+36])
                                    pattern (lib/sentenceParser.ml[640,22936+39]..[640,22936+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[640,22936+39]..[640,22936+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[641,22988+10]..[641,22988+36])
                                    pattern (lib/sentenceParser.ml[641,22988+39]..[641,22988+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[641,22988+39]..[641,22988+52])
                                ]
                              expression (lib/sentenceParser.ml[642,23042+12]..[642,23042+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[642,23042+12]..[642,23042+25])
                          ]
                          expression (lib/sentenceParser.ml[643,23071+8]..[670,24005+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[643,23071+12]..[643,23071+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[643,23071+12]..[643,23071+14])
                                core_type (lib/sentenceParser.ml[643,23071+18]..[643,23071+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[643,23071+18]..[643,23071+33])
                                  []
                                expression (lib/sentenceParser.ml[643,23071+37]..[643,23071+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[643,23071+37]..[643,23071+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[643,23071+37]..[643,23071+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[643,23071+47]..[643,23071+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[643,23071+47]..[643,23071+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[644,23124+8]..[670,24005+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[644,23124+12]..[644,23124+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[644,23124+12]..[644,23124+23])
                                  expression (lib/sentenceParser.ml[644,23124+26]..[644,23124+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[644,23124+26]..[644,23124+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[644,23124+26]..[644,23124+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[644,23124+40]..[644,23124+66])
                              ]
                              expression (lib/sentenceParser.ml[645,23194+8]..[670,24005+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[645,23194+12]..[645,23194+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[645,23194+12]..[645,23194+21])
                                    expression (lib/sentenceParser.ml[645,23194+24]..[645,23194+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[645,23194+24]..[645,23194+37])
                                ]
                                expression (lib/sentenceParser.ml[646,23235+8]..[670,24005+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[646,23235+12]..[646,23235+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[646,23235+12]..[646,23235+19])
                                      expression (lib/sentenceParser.ml[646,23235+22]..[646,23235+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[646,23235+22]..[646,23235+33])
                                  ]
                                  expression (lib/sentenceParser.ml[647,23272+8]..[670,24005+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[647,23272+12]..[647,23272+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[647,23272+12]..[647,23272+14])
                                        expression (lib/sentenceParser.ml[648,23289+10]..[662,23695+31])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[648,23289+14]..[648,23289+16])
                                                Ppat_var "_1" (lib/sentenceParser.ml[648,23289+14]..[648,23289+16])
                                              expression (lib/sentenceParser.mly[139,23340+11]..[139,23340+88])
                                                Pexp_sequence
                                                expression (lib/sentenceParser.mly[139,23340+18]..[139,23340+75])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[139,23340+19]..[139,23340+32])
                                                    Pexp_ident "print_endline" (lib/sentenceParser.mly[139,23340+19]..[139,23340+32])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[139,23340+33]..[139,23340+74])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[139,23340+34]..[139,23340+48])
                                                          Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[139,23340+34]..[139,23340+48])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[139,23340+49]..[139,23340+73])
                                                              Pexp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[139,23340+50]..[139,23340+68])
                                                                  Pexp_constant PConst_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,23340+51]..[139,23340+67]),None)
                                                                expression (lib/sentenceParser.mly[139,23340+70]..[139,23340+72])
                                                                  Pexp_ident "_1" (lib/sentenceParser.mly[139,23340+70]..[139,23340+72])
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[139,23340+77]..[139,23340+87])
                                                  Pexp_construct "NFactor" (lib/sentenceParser.mly[139,23340+77]..[139,23340+84])
                                                  Some
                                                    expression (lib/sentenceParser.mly[139,23340+85]..[139,23340+87])
                                                      Pexp_ident "_1" (lib/sentenceParser.mly[139,23340+85]..[139,23340+87])
                                          ]
                                          expression (lib/sentenceParser.ml[653,23473+10]..[662,23695+31])
                                            Pexp_constraint
                                            expression (lib/sentenceParser.mly[152,23516+16]..[157,23657+7])
                                              Pexp_construct "NFactor" (lib/sentenceParser.mly[156,23638+8]..[156,23638+15])
                                              Some
                                                expression (lib/sentenceParser.mly[156,23638+16]..[156,23638+18])
                                                  Pexp_ident "_1" (lib/sentenceParser.mly[156,23638+16]..[156,23638+18])
                                            core_type (lib/sentenceParser.ml[662,23695+14]..[662,23695+29])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[662,23695+14]..[662,23695+29])
                                              []
                                    ]
                                    expression (lib/sentenceParser.ml[664,23738+8]..[670,24005+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[665,23748+10]..[665,23748+37])
                                          expression (lib/sentenceParser.ml[665,23748+40]..[665,23748+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[665,23748+40]..[665,23748+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[666,23799+10]..[666,23799+36])
                                          expression (lib/sentenceParser.ml[666,23799+39]..[666,23799+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[666,23799+39]..[666,23799+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[666,23799+39]..[666,23799+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[666,23799+48]..[666,23799+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[666,23799+48]..[666,23799+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[667,23851+10]..[667,23851+38])
                                          expression (lib/sentenceParser.ml[667,23851+41]..[667,23851+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[667,23851+41]..[667,23851+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[668,23903+10]..[668,23903+36])
                                          expression (lib/sentenceParser.ml[668,23903+39]..[668,23903+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[668,23903+39]..[668,23903+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[669,23951+10]..[669,23951+36])
                                          expression (lib/sentenceParser.ml[669,23951+39]..[669,23951+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[669,23951+39]..[669,23951+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[671,24017+6]..[708,25491+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[671,24017+11]..[671,24017+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[671,24017+11]..[671,24017+22])
                      expression (lib/sentenceParser.ml[672,24043+8]..[708,25491+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[672,24043+12]..[672,24043+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[672,24043+12]..[672,24043+25])
                            expression (lib/sentenceParser.ml[672,24043+28]..[672,24043+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[672,24043+28]..[672,24043+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[672,24043+28]..[672,24043+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[672,24043+40]..[672,24043+67])
                        ]
                        expression (lib/sentenceParser.ml[673,24114+8]..[708,25491+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[673,24114+12]..[685,24642+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[674,24128+10]..[674,24128+37])
                                    pattern (lib/sentenceParser.ml[674,24128+40]..[674,24128+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[675,24171+10]..[675,24171+36])
                                    pattern (lib/sentenceParser.ml[675,24171+39]..[675,24171+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[675,24171+39]..[675,24171+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[676,24214+10]..[676,24214+38])
                                    pattern (lib/sentenceParser.ml[676,24214+41]..[676,24214+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[676,24214+41]..[676,24214+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[677,24270+10]..[677,24270+36])
                                    pattern (lib/sentenceParser.ml[677,24270+39]..[677,24270+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[677,24270+39]..[677,24270+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[678,24322+10]..[678,24322+36])
                                    pattern (lib/sentenceParser.ml[678,24322+39]..[684,24629+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[679,24363+12]..[679,24363+39])
                                          pattern (lib/sentenceParser.ml[679,24363+42]..[679,24363+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[679,24363+42]..[679,24363+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[680,24416+12]..[680,24416+38])
                                          pattern (lib/sentenceParser.ml[680,24416+41]..[680,24416+43])
                                            Ppat_var "rs" (lib/sentenceParser.ml[680,24416+41]..[680,24416+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[681,24461+12]..[681,24461+40])
                                          pattern (lib/sentenceParser.ml[681,24461+43]..[681,24461+56])
                                            Ppat_var "_startpos_rs_" (lib/sentenceParser.ml[681,24461+43]..[681,24461+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[682,24519+12]..[682,24519+38])
                                          pattern (lib/sentenceParser.ml[682,24519+41]..[682,24519+52])
                                            Ppat_var "_endpos_rs_" (lib/sentenceParser.ml[682,24519+41]..[682,24519+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[683,24573+12]..[683,24573+38])
                                          pattern (lib/sentenceParser.ml[683,24573+41]..[683,24573+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[683,24573+41]..[683,24573+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[685,24642+12]..[685,24642+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[685,24642+12]..[685,24642+25])
                          ]
                          expression (lib/sentenceParser.ml[686,24671+8]..[708,25491+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[686,24671+12]..[686,24671+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[686,24671+12]..[686,24671+14])
                                core_type (lib/sentenceParser.ml[686,24671+18]..[686,24671+22])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[686,24671+18]..[686,24671+22])
                                  []
                                expression (lib/sentenceParser.ml[686,24671+26]..[686,24671+38])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[686,24671+26]..[686,24671+35])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[686,24671+26]..[686,24671+35])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[686,24671+36]..[686,24671+38])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[686,24671+36]..[686,24671+38])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[687,24713+8]..[708,25491+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[687,24713+12]..[687,24713+14])
                                    Ppat_var "rs" (lib/sentenceParser.ml[687,24713+12]..[687,24713+14])
                                  core_type (lib/sentenceParser.ml[687,24713+18]..[687,24713+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[687,24713+18]..[687,24713+33])
                                    []
                                  expression (lib/sentenceParser.ml[687,24713+37]..[687,24713+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[687,24713+37]..[687,24713+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[687,24713+37]..[687,24713+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[687,24713+47]..[687,24713+49])
                                          Pexp_ident "rs" (lib/sentenceParser.ml[687,24713+47]..[687,24713+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[688,24766+8]..[708,25491+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[688,24766+12]..[688,24766+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[688,24766+12]..[688,24766+23])
                                    expression (lib/sentenceParser.ml[688,24766+26]..[688,24766+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[688,24766+26]..[688,24766+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[688,24766+26]..[688,24766+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[688,24766+40]..[688,24766+66])
                                ]
                                expression (lib/sentenceParser.ml[689,24836+8]..[708,25491+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[689,24836+12]..[689,24836+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[689,24836+12]..[689,24836+21])
                                      expression (lib/sentenceParser.ml[689,24836+24]..[689,24836+37])
                                        Pexp_ident "_startpos_rs_" (lib/sentenceParser.ml[689,24836+24]..[689,24836+37])
                                  ]
                                  expression (lib/sentenceParser.ml[690,24877+8]..[708,25491+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[690,24877+12]..[690,24877+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[690,24877+12]..[690,24877+19])
                                        expression (lib/sentenceParser.ml[690,24877+22]..[690,24877+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[690,24877+22]..[690,24877+33])
                                    ]
                                    expression (lib/sentenceParser.ml[691,24914+8]..[708,25491+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[691,24914+12]..[691,24914+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[691,24914+12]..[691,24914+14])
                                          core_type (lib/sentenceParser.ml[691,24914+18]..[691,24914+40])
                                            Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser.ml[691,24914+18]..[691,24914+40])
                                            []
                                          expression (lib/sentenceParser.mly[80,24989+4]..[86,25176+5])
                                            Pexp_sequence
                                            expression (lib/sentenceParser.mly[81,24995+6]..[81,24995+63])
                                              Pexp_apply
                                              expression (lib/sentenceParser.mly[81,24995+7]..[81,24995+20])
                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[81,24995+7]..[81,24995+20])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.mly[81,24995+21]..[81,24995+62])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[81,24995+22]..[81,24995+36])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[81,24995+22]..[81,24995+36])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[81,24995+37]..[81,24995+61])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[81,24995+38]..[81,24995+53])
                                                              Pexp_constant PConst_string("DEBUG:grammar",(lib/sentenceParser.mly[81,24995+39]..[81,24995+52]),None)
                                                            expression (lib/sentenceParser.mly[81,24995+54]..[81,24995+56])
                                                              Pexp_ident "rs" (lib/sentenceParser.mly[81,24995+54]..[81,24995+56])
                                                            expression (lib/sentenceParser.mly[81,24995+58]..[81,24995+60])
                                                              Pexp_ident "_2" (lib/sentenceParser.mly[81,24995+58]..[81,24995+60])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser.mly[82,25060+6]..[85,25168+7])
                                              Pexp_record
                                              [
                                                "pg_filename" (lib/sentenceParser.mly[83,25068+8]..[83,25068+19])
                                                  expression (lib/sentenceParser.mly[83,25068+31]..[83,25068+33])
                                                    Pexp_constant PConst_string("",(lib/sentenceParser.mly[83,25068+32]..[83,25068+32]),None)
                                                "pg_rules" (lib/sentenceParser.mly[84,25133+8]..[84,25133+16])
                                                  expression (lib/sentenceParser.mly[84,25133+31]..[84,25133+33])
                                                    Pexp_construct "[]" (lib/sentenceParser.mly[84,25133+31]..[84,25133+33])
                                                    None
                                              ]
                                              None
                                      ]
                                      expression (lib/sentenceParser.ml[702,25224+8]..[708,25491+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[703,25234+10]..[703,25234+37])
                                            expression (lib/sentenceParser.ml[703,25234+40]..[703,25234+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[703,25234+40]..[703,25234+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[704,25285+10]..[704,25285+36])
                                            expression (lib/sentenceParser.ml[704,25285+39]..[704,25285+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[704,25285+39]..[704,25285+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[704,25285+39]..[704,25285+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[704,25285+48]..[704,25285+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[704,25285+48]..[704,25285+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[705,25337+10]..[705,25337+38])
                                            expression (lib/sentenceParser.ml[705,25337+41]..[705,25337+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[705,25337+41]..[705,25337+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[706,25389+10]..[706,25389+36])
                                            expression (lib/sentenceParser.ml[706,25389+39]..[706,25389+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[706,25389+39]..[706,25389+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[707,25437+10]..[707,25437+36])
                                            expression (lib/sentenceParser.ml[707,25437+39]..[707,25437+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[707,25437+39]..[707,25437+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[709,25503+6]..[726,26217+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[709,25503+11]..[709,25503+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[709,25503+11]..[709,25503+22])
                      expression (lib/sentenceParser.ml[710,25529+8]..[726,26217+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[710,25529+12]..[710,25529+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[710,25529+12]..[710,25529+25])
                            expression (lib/sentenceParser.ml[710,25529+28]..[710,25529+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[710,25529+28]..[710,25529+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[710,25529+28]..[710,25529+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[710,25529+40]..[710,25529+67])
                        ]
                        expression (lib/sentenceParser.ml[711,25600+8]..[726,26217+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[711,25600+12]..[711,25600+21])
                                Ppat_var "_menhir_s" (lib/sentenceParser.ml[711,25600+12]..[711,25600+21])
                              expression (lib/sentenceParser.ml[711,25600+24]..[711,25600+65])
                                Pexp_field
                                expression (lib/sentenceParser.ml[711,25600+24]..[711,25600+35])
                                  Pexp_ident "_menhir_env" (lib/sentenceParser.ml[711,25600+24]..[711,25600+35])
                                "MenhirLib.EngineTypes.current" (lib/sentenceParser.ml[711,25600+36]..[711,25600+65])
                          ]
                          expression (lib/sentenceParser.ml[712,25669+8]..[726,26217+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[712,25669+12]..[712,25669+23])
                                  Ppat_var "_endpos__0_" (lib/sentenceParser.ml[712,25669+12]..[712,25669+23])
                                expression (lib/sentenceParser.ml[712,25669+26]..[712,25669+66])
                                  Pexp_field
                                  expression (lib/sentenceParser.ml[712,25669+26]..[712,25669+39])
                                    Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[712,25669+26]..[712,25669+39])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[712,25669+40]..[712,25669+66])
                            ]
                            expression (lib/sentenceParser.ml[713,25739+8]..[726,26217+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[713,25739+12]..[713,25739+21])
                                    Ppat_var "_startpos" (lib/sentenceParser.ml[713,25739+12]..[713,25739+21])
                                  expression (lib/sentenceParser.ml[713,25739+24]..[713,25739+64])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[713,25739+24]..[713,25739+37])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[713,25739+24]..[713,25739+37])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[713,25739+38]..[713,25739+64])
                              ]
                              expression (lib/sentenceParser.ml[714,25807+8]..[726,26217+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[714,25807+12]..[714,25807+19])
                                      Ppat_var "_endpos" (lib/sentenceParser.ml[714,25807+12]..[714,25807+19])
                                    expression (lib/sentenceParser.ml[714,25807+22]..[714,25807+31])
                                      Pexp_ident "_startpos" (lib/sentenceParser.ml[714,25807+22]..[714,25807+31])
                                ]
                                expression (lib/sentenceParser.ml[715,25842+8]..[726,26217+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[715,25842+12]..[715,25842+14])
                                        Ppat_var "_v" (lib/sentenceParser.ml[715,25842+12]..[715,25842+14])
                                      core_type (lib/sentenceParser.ml[715,25842+18]..[715,25842+27])
                                        Ptyp_constr "list" (lib/sentenceParser.ml[715,25842+23]..[715,25842+27])
                                        [
                                          core_type (lib/sentenceParser.ml[715,25842+18]..[715,25842+22])
                                            Ptyp_constr "unit" (lib/sentenceParser.ml[715,25842+18]..[715,25842+22])
                                            []
                                        ]
                                      expression (<standard.mly>[208,25897+4]..[208,25897+10])
                                        Pexp_construct "[]" (<standard.mly>[208,25897+6]..[208,25897+8])
                                        None
                                  ]
                                  expression (lib/sentenceParser.ml[720,25950+8]..[726,26217+9])
                                    Pexp_record
                                    [
                                      "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[721,25960+10]..[721,25960+37])
                                        expression (lib/sentenceParser.ml[721,25960+40]..[721,25960+49])
                                          Pexp_ident "_menhir_s" (lib/sentenceParser.ml[721,25960+40]..[721,25960+49])
                                      "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[722,26011+10]..[722,26011+36])
                                        expression (lib/sentenceParser.ml[722,26011+39]..[722,26011+50])
                                          Pexp_apply
                                          expression (lib/sentenceParser.ml[722,26011+39]..[722,26011+47])
                                            Pexp_ident "Obj.repr" (lib/sentenceParser.ml[722,26011+39]..[722,26011+47])
                                          [
                                            <arg>
                                            Nolabel
                                              expression (lib/sentenceParser.ml[722,26011+48]..[722,26011+50])
                                                Pexp_ident "_v" (lib/sentenceParser.ml[722,26011+48]..[722,26011+50])
                                          ]
                                      "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[723,26063+10]..[723,26063+38])
                                        expression (lib/sentenceParser.ml[723,26063+41]..[723,26063+50])
                                          Pexp_ident "_startpos" (lib/sentenceParser.ml[723,26063+41]..[723,26063+50])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[724,26115+10]..[724,26115+36])
                                        expression (lib/sentenceParser.ml[724,26115+39]..[724,26115+46])
                                          Pexp_ident "_endpos" (lib/sentenceParser.ml[724,26115+39]..[724,26115+46])
                                      "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[725,26163+10]..[725,26163+36])
                                        expression (lib/sentenceParser.ml[725,26163+39]..[725,26163+52])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[725,26163+39]..[725,26163+52])
                                    ]
                                    None
                    expression (lib/sentenceParser.ml[727,26229+6]..[758,27492+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[727,26229+11]..[727,26229+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[727,26229+11]..[727,26229+22])
                      expression (lib/sentenceParser.ml[728,26255+8]..[758,27492+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[728,26255+12]..[728,26255+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[728,26255+12]..[728,26255+25])
                            expression (lib/sentenceParser.ml[728,26255+28]..[728,26255+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[728,26255+28]..[728,26255+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[728,26255+28]..[728,26255+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[728,26255+40]..[728,26255+67])
                        ]
                        expression (lib/sentenceParser.ml[729,26326+8]..[758,27492+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[729,26326+12]..[741,26851+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[730,26340+10]..[730,26340+37])
                                    pattern (lib/sentenceParser.ml[730,26340+40]..[730,26340+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[731,26383+10]..[731,26383+36])
                                    pattern (lib/sentenceParser.ml[731,26383+39]..[731,26383+41])
                                      Ppat_var "xs" (lib/sentenceParser.ml[731,26383+39]..[731,26383+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[732,26426+10]..[732,26426+38])
                                    pattern (lib/sentenceParser.ml[732,26426+41]..[732,26426+54])
                                      Ppat_var "_startpos_xs_" (lib/sentenceParser.ml[732,26426+41]..[732,26426+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[733,26482+10]..[733,26482+36])
                                    pattern (lib/sentenceParser.ml[733,26482+39]..[733,26482+50])
                                      Ppat_var "_endpos_xs_" (lib/sentenceParser.ml[733,26482+39]..[733,26482+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[734,26534+10]..[734,26534+36])
                                    pattern (lib/sentenceParser.ml[734,26534+39]..[740,26838+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[735,26575+12]..[735,26575+39])
                                          pattern (lib/sentenceParser.ml[735,26575+42]..[735,26575+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[735,26575+42]..[735,26575+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[736,26628+12]..[736,26628+38])
                                          pattern (lib/sentenceParser.ml[736,26628+41]..[736,26628+42])
                                            Ppat_var "x" (lib/sentenceParser.ml[736,26628+41]..[736,26628+42])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[737,26672+12]..[737,26672+40])
                                          pattern (lib/sentenceParser.ml[737,26672+43]..[737,26672+55])
                                            Ppat_var "_startpos_x_" (lib/sentenceParser.ml[737,26672+43]..[737,26672+55])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[738,26729+12]..[738,26729+38])
                                          pattern (lib/sentenceParser.ml[738,26729+41]..[738,26729+51])
                                            Ppat_var "_endpos_x_" (lib/sentenceParser.ml[738,26729+41]..[738,26729+51])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[739,26782+12]..[739,26782+38])
                                          pattern (lib/sentenceParser.ml[739,26782+41]..[739,26782+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[739,26782+41]..[739,26782+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[741,26851+12]..[741,26851+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[741,26851+12]..[741,26851+25])
                          ]
                          expression (lib/sentenceParser.ml[742,26880+8]..[758,27492+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[742,26880+12]..[742,26880+14])
                                  Ppat_var "xs" (lib/sentenceParser.ml[742,26880+12]..[742,26880+14])
                                core_type (lib/sentenceParser.ml[742,26880+18]..[742,26880+27])
                                  Ptyp_constr "list" (lib/sentenceParser.ml[742,26880+23]..[742,26880+27])
                                  [
                                    core_type (lib/sentenceParser.ml[742,26880+18]..[742,26880+22])
                                      Ptyp_constr "unit" (lib/sentenceParser.ml[742,26880+18]..[742,26880+22])
                                      []
                                  ]
                                expression (lib/sentenceParser.ml[742,26880+31]..[742,26880+43])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[742,26880+31]..[742,26880+40])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[742,26880+31]..[742,26880+40])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[742,26880+41]..[742,26880+43])
                                        Pexp_ident "xs" (lib/sentenceParser.ml[742,26880+41]..[742,26880+43])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[743,26927+8]..[758,27492+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[743,26927+12]..[743,26927+13])
                                    Ppat_var "x" (lib/sentenceParser.ml[743,26927+12]..[743,26927+13])
                                  core_type (lib/sentenceParser.ml[743,26927+16]..[743,26927+20])
                                    Ptyp_constr "unit" (lib/sentenceParser.ml[743,26927+16]..[743,26927+20])
                                    []
                                  expression (lib/sentenceParser.ml[743,26927+23]..[743,26927+34])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[743,26927+23]..[743,26927+32])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[743,26927+23]..[743,26927+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[743,26927+33]..[743,26927+34])
                                          Pexp_ident "x" (lib/sentenceParser.ml[743,26927+33]..[743,26927+34])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[744,26965+8]..[758,27492+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[744,26965+12]..[744,26965+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[744,26965+12]..[744,26965+23])
                                    expression (lib/sentenceParser.ml[744,26965+26]..[744,26965+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[744,26965+26]..[744,26965+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[744,26965+26]..[744,26965+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[744,26965+40]..[744,26965+66])
                                ]
                                expression (lib/sentenceParser.ml[745,27035+8]..[758,27492+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[745,27035+12]..[745,27035+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[745,27035+12]..[745,27035+21])
                                      expression (lib/sentenceParser.ml[745,27035+24]..[745,27035+36])
                                        Pexp_ident "_startpos_x_" (lib/sentenceParser.ml[745,27035+24]..[745,27035+36])
                                  ]
                                  expression (lib/sentenceParser.ml[746,27075+8]..[758,27492+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[746,27075+12]..[746,27075+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[746,27075+12]..[746,27075+19])
                                        expression (lib/sentenceParser.ml[746,27075+22]..[746,27075+33])
                                          Pexp_ident "_endpos_xs_" (lib/sentenceParser.ml[746,27075+22]..[746,27075+33])
                                    ]
                                    expression (lib/sentenceParser.ml[747,27112+8]..[758,27492+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[747,27112+12]..[747,27112+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[747,27112+12]..[747,27112+14])
                                          core_type (lib/sentenceParser.ml[747,27112+18]..[747,27112+27])
                                            Ptyp_constr "list" (lib/sentenceParser.ml[747,27112+23]..[747,27112+27])
                                            [
                                              core_type (lib/sentenceParser.ml[747,27112+18]..[747,27112+22])
                                                Ptyp_constr "unit" (lib/sentenceParser.ml[747,27112+18]..[747,27112+22])
                                                []
                                            ]
                                          expression (<standard.mly>[210,27167+4]..[210,27167+15])
                                            Pexp_construct "::" (<standard.mly>[210,27167+8]..[210,27167+10])
                                            Some
                                              expression (<standard.mly>[210,27167+6]..[210,27167+13]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (<standard.mly>[210,27167+6]..[210,27167+7])
                                                    Pexp_ident "x" (<standard.mly>[210,27167+6]..[210,27167+7])
                                                  expression (<standard.mly>[210,27167+11]..[210,27167+13])
                                                    Pexp_ident "xs" (<standard.mly>[210,27167+11]..[210,27167+13])
                                                ]
                                      ]
                                      expression (lib/sentenceParser.ml[752,27225+8]..[758,27492+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[753,27235+10]..[753,27235+37])
                                            expression (lib/sentenceParser.ml[753,27235+40]..[753,27235+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[753,27235+40]..[753,27235+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[754,27286+10]..[754,27286+36])
                                            expression (lib/sentenceParser.ml[754,27286+39]..[754,27286+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[754,27286+39]..[754,27286+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[754,27286+39]..[754,27286+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[754,27286+48]..[754,27286+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[754,27286+48]..[754,27286+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[755,27338+10]..[755,27338+38])
                                            expression (lib/sentenceParser.ml[755,27338+41]..[755,27338+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[755,27338+41]..[755,27338+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[756,27390+10]..[756,27390+36])
                                            expression (lib/sentenceParser.ml[756,27390+39]..[756,27390+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[756,27390+39]..[756,27390+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[757,27438+10]..[757,27438+36])
                                            expression (lib/sentenceParser.ml[757,27438+39]..[757,27438+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[757,27438+39]..[757,27438+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[759,27504+6]..[783,28459+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[759,27504+11]..[759,27504+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[759,27504+11]..[759,27504+22])
                      expression (lib/sentenceParser.ml[760,27530+8]..[783,28459+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[760,27530+12]..[760,27530+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[760,27530+12]..[760,27530+25])
                            expression (lib/sentenceParser.ml[760,27530+28]..[760,27530+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[760,27530+28]..[760,27530+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[760,27530+28]..[760,27530+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[760,27530+40]..[760,27530+67])
                        ]
                        expression (lib/sentenceParser.ml[761,27601+8]..[783,28459+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[761,27601+12]..[767,27868+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[762,27615+10]..[762,27615+37])
                                    pattern (lib/sentenceParser.ml[762,27615+40]..[762,27615+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[762,27615+40]..[762,27615+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[763,27666+10]..[763,27666+36])
                                    pattern (lib/sentenceParser.ml[763,27666+39]..[763,27666+40])
                                      Ppat_var "x" (lib/sentenceParser.ml[763,27666+39]..[763,27666+40])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[764,27708+10]..[764,27708+38])
                                    pattern (lib/sentenceParser.ml[764,27708+41]..[764,27708+53])
                                      Ppat_var "_startpos_x_" (lib/sentenceParser.ml[764,27708+41]..[764,27708+53])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[765,27763+10]..[765,27763+36])
                                    pattern (lib/sentenceParser.ml[765,27763+39]..[765,27763+49])
                                      Ppat_var "_endpos_x_" (lib/sentenceParser.ml[765,27763+39]..[765,27763+49])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[766,27814+10]..[766,27814+36])
                                    pattern (lib/sentenceParser.ml[766,27814+39]..[766,27814+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[766,27814+39]..[766,27814+52])
                                ]
                              expression (lib/sentenceParser.ml[767,27868+12]..[767,27868+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[767,27868+12]..[767,27868+25])
                          ]
                          expression (lib/sentenceParser.ml[768,27897+8]..[783,28459+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[768,27897+12]..[768,27897+13])
                                  Ppat_var "x" (lib/sentenceParser.ml[768,27897+12]..[768,27897+13])
                                core_type (lib/sentenceParser.ml[768,27897+16]..[768,27897+20])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[768,27897+16]..[768,27897+20])
                                  []
                                expression (lib/sentenceParser.ml[768,27897+23]..[768,27897+34])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[768,27897+23]..[768,27897+32])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[768,27897+23]..[768,27897+32])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[768,27897+33]..[768,27897+34])
                                        Pexp_ident "x" (lib/sentenceParser.ml[768,27897+33]..[768,27897+34])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[769,27935+8]..[783,28459+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[769,27935+12]..[769,27935+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[769,27935+12]..[769,27935+23])
                                  expression (lib/sentenceParser.ml[769,27935+26]..[769,27935+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[769,27935+26]..[769,27935+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[769,27935+26]..[769,27935+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[769,27935+40]..[769,27935+66])
                              ]
                              expression (lib/sentenceParser.ml[770,28005+8]..[783,28459+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[770,28005+12]..[770,28005+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[770,28005+12]..[770,28005+21])
                                    expression (lib/sentenceParser.ml[770,28005+24]..[770,28005+36])
                                      Pexp_ident "_startpos_x_" (lib/sentenceParser.ml[770,28005+24]..[770,28005+36])
                                ]
                                expression (lib/sentenceParser.ml[771,28045+8]..[783,28459+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[771,28045+12]..[771,28045+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[771,28045+12]..[771,28045+19])
                                      expression (lib/sentenceParser.ml[771,28045+22]..[771,28045+32])
                                        Pexp_ident "_endpos_x_" (lib/sentenceParser.ml[771,28045+22]..[771,28045+32])
                                  ]
                                  expression (lib/sentenceParser.ml[772,28081+8]..[783,28459+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[772,28081+12]..[772,28081+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[772,28081+12]..[772,28081+14])
                                        core_type (lib/sentenceParser.ml[772,28081+18]..[772,28081+27])
                                          Ptyp_constr "list" (lib/sentenceParser.ml[772,28081+23]..[772,28081+27])
                                          [
                                            core_type (lib/sentenceParser.ml[772,28081+18]..[772,28081+22])
                                              Ptyp_constr "unit" (lib/sentenceParser.ml[772,28081+18]..[772,28081+22])
                                              []
                                          ]
                                        expression (<standard.mly>[218,28136+4]..[218,28136+13])
                                          Pexp_construct "::" (<standard.mly>[218,28136+8]..[218,28136+11]) ghost
                                          Some
                                            expression (<standard.mly>[218,28136+8]..[218,28136+11]) ghost
                                              Pexp_tuple
                                              [
                                                expression (<standard.mly>[218,28136+8]..[218,28136+9])
                                                  Pexp_ident "x" (<standard.mly>[218,28136+8]..[218,28136+9])
                                                expression (<standard.mly>[218,28136+10]..[218,28136+11]) ghost
                                                  Pexp_construct "[]" (<standard.mly>[218,28136+10]..[218,28136+11]) ghost
                                                  None
                                              ]
                                    ]
                                    expression (lib/sentenceParser.ml[777,28192+8]..[783,28459+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[778,28202+10]..[778,28202+37])
                                          expression (lib/sentenceParser.ml[778,28202+40]..[778,28202+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[778,28202+40]..[778,28202+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[779,28253+10]..[779,28253+36])
                                          expression (lib/sentenceParser.ml[779,28253+39]..[779,28253+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[779,28253+39]..[779,28253+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[779,28253+39]..[779,28253+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[779,28253+48]..[779,28253+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[779,28253+48]..[779,28253+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[780,28305+10]..[780,28305+38])
                                          expression (lib/sentenceParser.ml[780,28305+41]..[780,28305+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[780,28305+41]..[780,28305+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[781,28357+10]..[781,28357+36])
                                          expression (lib/sentenceParser.ml[781,28357+39]..[781,28357+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[781,28357+39]..[781,28357+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[782,28405+10]..[782,28405+36])
                                          expression (lib/sentenceParser.ml[782,28405+39]..[782,28405+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[782,28405+39]..[782,28405+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[784,28471+6]..[815,29734+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[784,28471+11]..[784,28471+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[784,28471+11]..[784,28471+22])
                      expression (lib/sentenceParser.ml[785,28497+8]..[815,29734+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[785,28497+12]..[785,28497+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[785,28497+12]..[785,28497+25])
                            expression (lib/sentenceParser.ml[785,28497+28]..[785,28497+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[785,28497+28]..[785,28497+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[785,28497+28]..[785,28497+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[785,28497+40]..[785,28497+67])
                        ]
                        expression (lib/sentenceParser.ml[786,28568+8]..[815,29734+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[786,28568+12]..[798,29093+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[787,28582+10]..[787,28582+37])
                                    pattern (lib/sentenceParser.ml[787,28582+40]..[787,28582+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[788,28625+10]..[788,28625+36])
                                    pattern (lib/sentenceParser.ml[788,28625+39]..[788,28625+41])
                                      Ppat_var "xs" (lib/sentenceParser.ml[788,28625+39]..[788,28625+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[789,28668+10]..[789,28668+38])
                                    pattern (lib/sentenceParser.ml[789,28668+41]..[789,28668+54])
                                      Ppat_var "_startpos_xs_" (lib/sentenceParser.ml[789,28668+41]..[789,28668+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[790,28724+10]..[790,28724+36])
                                    pattern (lib/sentenceParser.ml[790,28724+39]..[790,28724+50])
                                      Ppat_var "_endpos_xs_" (lib/sentenceParser.ml[790,28724+39]..[790,28724+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[791,28776+10]..[791,28776+36])
                                    pattern (lib/sentenceParser.ml[791,28776+39]..[797,29080+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[792,28817+12]..[792,28817+39])
                                          pattern (lib/sentenceParser.ml[792,28817+42]..[792,28817+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[792,28817+42]..[792,28817+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[793,28870+12]..[793,28870+38])
                                          pattern (lib/sentenceParser.ml[793,28870+41]..[793,28870+42])
                                            Ppat_var "x" (lib/sentenceParser.ml[793,28870+41]..[793,28870+42])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[794,28914+12]..[794,28914+40])
                                          pattern (lib/sentenceParser.ml[794,28914+43]..[794,28914+55])
                                            Ppat_var "_startpos_x_" (lib/sentenceParser.ml[794,28914+43]..[794,28914+55])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[795,28971+12]..[795,28971+38])
                                          pattern (lib/sentenceParser.ml[795,28971+41]..[795,28971+51])
                                            Ppat_var "_endpos_x_" (lib/sentenceParser.ml[795,28971+41]..[795,28971+51])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[796,29024+12]..[796,29024+38])
                                          pattern (lib/sentenceParser.ml[796,29024+41]..[796,29024+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[796,29024+41]..[796,29024+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[798,29093+12]..[798,29093+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[798,29093+12]..[798,29093+25])
                          ]
                          expression (lib/sentenceParser.ml[799,29122+8]..[815,29734+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[799,29122+12]..[799,29122+14])
                                  Ppat_var "xs" (lib/sentenceParser.ml[799,29122+12]..[799,29122+14])
                                core_type (lib/sentenceParser.ml[799,29122+18]..[799,29122+27])
                                  Ptyp_constr "list" (lib/sentenceParser.ml[799,29122+23]..[799,29122+27])
                                  [
                                    core_type (lib/sentenceParser.ml[799,29122+18]..[799,29122+22])
                                      Ptyp_constr "unit" (lib/sentenceParser.ml[799,29122+18]..[799,29122+22])
                                      []
                                  ]
                                expression (lib/sentenceParser.ml[799,29122+31]..[799,29122+43])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[799,29122+31]..[799,29122+40])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[799,29122+31]..[799,29122+40])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[799,29122+41]..[799,29122+43])
                                        Pexp_ident "xs" (lib/sentenceParser.ml[799,29122+41]..[799,29122+43])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[800,29169+8]..[815,29734+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[800,29169+12]..[800,29169+13])
                                    Ppat_var "x" (lib/sentenceParser.ml[800,29169+12]..[800,29169+13])
                                  core_type (lib/sentenceParser.ml[800,29169+16]..[800,29169+20])
                                    Ptyp_constr "unit" (lib/sentenceParser.ml[800,29169+16]..[800,29169+20])
                                    []
                                  expression (lib/sentenceParser.ml[800,29169+23]..[800,29169+34])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[800,29169+23]..[800,29169+32])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[800,29169+23]..[800,29169+32])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[800,29169+33]..[800,29169+34])
                                          Pexp_ident "x" (lib/sentenceParser.ml[800,29169+33]..[800,29169+34])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[801,29207+8]..[815,29734+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[801,29207+12]..[801,29207+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[801,29207+12]..[801,29207+23])
                                    expression (lib/sentenceParser.ml[801,29207+26]..[801,29207+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[801,29207+26]..[801,29207+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[801,29207+26]..[801,29207+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[801,29207+40]..[801,29207+66])
                                ]
                                expression (lib/sentenceParser.ml[802,29277+8]..[815,29734+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[802,29277+12]..[802,29277+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[802,29277+12]..[802,29277+21])
                                      expression (lib/sentenceParser.ml[802,29277+24]..[802,29277+36])
                                        Pexp_ident "_startpos_x_" (lib/sentenceParser.ml[802,29277+24]..[802,29277+36])
                                  ]
                                  expression (lib/sentenceParser.ml[803,29317+8]..[815,29734+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[803,29317+12]..[803,29317+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[803,29317+12]..[803,29317+19])
                                        expression (lib/sentenceParser.ml[803,29317+22]..[803,29317+33])
                                          Pexp_ident "_endpos_xs_" (lib/sentenceParser.ml[803,29317+22]..[803,29317+33])
                                    ]
                                    expression (lib/sentenceParser.ml[804,29354+8]..[815,29734+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[804,29354+12]..[804,29354+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[804,29354+12]..[804,29354+14])
                                          core_type (lib/sentenceParser.ml[804,29354+18]..[804,29354+27])
                                            Ptyp_constr "list" (lib/sentenceParser.ml[804,29354+23]..[804,29354+27])
                                            [
                                              core_type (lib/sentenceParser.ml[804,29354+18]..[804,29354+22])
                                                Ptyp_constr "unit" (lib/sentenceParser.ml[804,29354+18]..[804,29354+22])
                                                []
                                            ]
                                          expression (<standard.mly>[220,29409+4]..[220,29409+15])
                                            Pexp_construct "::" (<standard.mly>[220,29409+8]..[220,29409+10])
                                            Some
                                              expression (<standard.mly>[220,29409+6]..[220,29409+13]) ghost
                                                Pexp_tuple
                                                [
                                                  expression (<standard.mly>[220,29409+6]..[220,29409+7])
                                                    Pexp_ident "x" (<standard.mly>[220,29409+6]..[220,29409+7])
                                                  expression (<standard.mly>[220,29409+11]..[220,29409+13])
                                                    Pexp_ident "xs" (<standard.mly>[220,29409+11]..[220,29409+13])
                                                ]
                                      ]
                                      expression (lib/sentenceParser.ml[809,29467+8]..[815,29734+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[810,29477+10]..[810,29477+37])
                                            expression (lib/sentenceParser.ml[810,29477+40]..[810,29477+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[810,29477+40]..[810,29477+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[811,29528+10]..[811,29528+36])
                                            expression (lib/sentenceParser.ml[811,29528+39]..[811,29528+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[811,29528+39]..[811,29528+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[811,29528+39]..[811,29528+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[811,29528+48]..[811,29528+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[811,29528+48]..[811,29528+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[812,29580+10]..[812,29580+38])
                                            expression (lib/sentenceParser.ml[812,29580+41]..[812,29580+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[812,29580+41]..[812,29580+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[813,29632+10]..[813,29632+36])
                                            expression (lib/sentenceParser.ml[813,29632+39]..[813,29632+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[813,29632+39]..[813,29632+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[814,29680+10]..[814,29680+36])
                                            expression (lib/sentenceParser.ml[814,29680+39]..[814,29680+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[814,29680+39]..[814,29680+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[816,29746+6]..[849,31086+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[816,29746+11]..[816,29746+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[816,29746+11]..[816,29746+22])
                      expression (lib/sentenceParser.ml[817,29772+8]..[849,31086+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[817,29772+12]..[817,29772+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[817,29772+12]..[817,29772+25])
                            expression (lib/sentenceParser.ml[817,29772+28]..[817,29772+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[817,29772+28]..[817,29772+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[817,29772+28]..[817,29772+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[817,29772+40]..[817,29772+67])
                        ]
                        expression (lib/sentenceParser.ml[818,29843+8]..[849,31086+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[818,29843+12]..[830,30371+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[819,29857+10]..[819,29857+37])
                                    pattern (lib/sentenceParser.ml[819,29857+40]..[819,29857+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[820,29900+10]..[820,29900+36])
                                    pattern (lib/sentenceParser.ml[820,29900+39]..[820,29900+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[820,29900+39]..[820,29900+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[821,29943+10]..[821,29943+38])
                                    pattern (lib/sentenceParser.ml[821,29943+41]..[821,29943+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[821,29943+41]..[821,29943+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[822,29999+10]..[822,29999+36])
                                    pattern (lib/sentenceParser.ml[822,29999+39]..[822,29999+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[822,29999+39]..[822,29999+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[823,30051+10]..[823,30051+36])
                                    pattern (lib/sentenceParser.ml[823,30051+39]..[829,30358+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[824,30092+12]..[824,30092+39])
                                          pattern (lib/sentenceParser.ml[824,30092+42]..[824,30092+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[824,30092+42]..[824,30092+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[825,30145+12]..[825,30145+38])
                                          pattern (lib/sentenceParser.ml[825,30145+41]..[825,30145+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[825,30145+41]..[825,30145+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[826,30190+12]..[826,30190+40])
                                          pattern (lib/sentenceParser.ml[826,30190+43]..[826,30190+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[826,30190+43]..[826,30190+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[827,30248+12]..[827,30248+38])
                                          pattern (lib/sentenceParser.ml[827,30248+41]..[827,30248+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[827,30248+41]..[827,30248+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[828,30302+12]..[828,30302+38])
                                          pattern (lib/sentenceParser.ml[828,30302+41]..[828,30302+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[828,30302+41]..[828,30302+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[830,30371+12]..[830,30371+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[830,30371+12]..[830,30371+25])
                          ]
                          expression (lib/sentenceParser.ml[831,30400+8]..[849,31086+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[831,30400+12]..[831,30400+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[831,30400+12]..[831,30400+14])
                                core_type (lib/sentenceParser.ml[831,30400+17]..[831,30400+21])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[831,30400+17]..[831,30400+21])
                                  []
                                expression (lib/sentenceParser.ml[831,30400+24]..[831,30400+36])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[831,30400+24]..[831,30400+33])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[831,30400+24]..[831,30400+33])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[831,30400+34]..[831,30400+36])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[831,30400+34]..[831,30400+36])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[832,30440+8]..[849,31086+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[832,30440+12]..[832,30440+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[832,30440+12]..[832,30440+14])
                                  core_type (lib/sentenceParser.ml[832,30440+18]..[832,30440+27])
                                    Ptyp_constr "list" (lib/sentenceParser.ml[832,30440+23]..[832,30440+27])
                                    [
                                      core_type (lib/sentenceParser.ml[832,30440+18]..[832,30440+22])
                                        Ptyp_constr "unit" (lib/sentenceParser.ml[832,30440+18]..[832,30440+22])
                                        []
                                    ]
                                  expression (lib/sentenceParser.ml[832,30440+31]..[832,30440+43])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[832,30440+31]..[832,30440+40])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[832,30440+31]..[832,30440+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[832,30440+41]..[832,30440+43])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[832,30440+41]..[832,30440+43])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[833,30487+8]..[849,31086+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[833,30487+12]..[833,30487+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[833,30487+12]..[833,30487+23])
                                    expression (lib/sentenceParser.ml[833,30487+26]..[833,30487+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[833,30487+26]..[833,30487+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[833,30487+26]..[833,30487+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[833,30487+40]..[833,30487+66])
                                ]
                                expression (lib/sentenceParser.ml[834,30557+8]..[849,31086+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[834,30557+12]..[834,30557+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[834,30557+12]..[834,30557+21])
                                      expression (lib/sentenceParser.ml[834,30557+24]..[834,30557+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[834,30557+24]..[834,30557+37])
                                  ]
                                  expression (lib/sentenceParser.ml[835,30598+8]..[849,31086+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[835,30598+12]..[835,30598+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[835,30598+12]..[835,30598+19])
                                        expression (lib/sentenceParser.ml[835,30598+22]..[835,30598+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[835,30598+22]..[835,30598+33])
                                    ]
                                    expression (lib/sentenceParser.ml[836,30635+8]..[849,31086+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[836,30635+12]..[836,30635+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[836,30635+12]..[836,30635+14])
                                          core_type (lib/sentenceParser.ml[836,30635+18]..[836,30635+22])
                                            Ptyp_constr "unit" (lib/sentenceParser.ml[836,30635+18]..[836,30635+22])
                                            []
                                          expression (lib/sentenceParser.mly[105,30693+15]..[107,30760+16])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[106,30711+1]..[106,30711+14])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[106,30711+1]..[106,30711+14])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[106,30711+15]..[106,30711+46])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[106,30711+16]..[106,30711+30])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[106,30711+16]..[106,30711+30])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[106,30711+31]..[106,30711+45])
                                                        Pexp_constant PConst_string("DEBUG:DONE",(lib/sentenceParser.mly[106,30711+33]..[106,30711+43]),None)
                                                  ]
                                            ]
                                      ]
                                      expression (lib/sentenceParser.ml[843,30819+8]..[849,31086+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[844,30829+10]..[844,30829+37])
                                            expression (lib/sentenceParser.ml[844,30829+40]..[844,30829+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[844,30829+40]..[844,30829+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[845,30880+10]..[845,30880+36])
                                            expression (lib/sentenceParser.ml[845,30880+39]..[845,30880+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[845,30880+39]..[845,30880+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[845,30880+39]..[845,30880+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[845,30880+48]..[845,30880+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[845,30880+48]..[845,30880+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[846,30932+10]..[846,30932+38])
                                            expression (lib/sentenceParser.ml[846,30932+41]..[846,30932+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[846,30932+41]..[846,30932+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[847,30984+10]..[847,30984+36])
                                            expression (lib/sentenceParser.ml[847,30984+39]..[847,30984+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[847,30984+39]..[847,30984+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[848,31032+10]..[848,31032+36])
                                            expression (lib/sentenceParser.ml[848,31032+39]..[848,31032+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[848,31032+39]..[848,31032+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[850,31098+6]..[874,32160+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[850,31098+11]..[850,31098+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[850,31098+11]..[850,31098+22])
                      expression (lib/sentenceParser.ml[851,31124+8]..[874,32160+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[851,31124+12]..[851,31124+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[851,31124+12]..[851,31124+25])
                            expression (lib/sentenceParser.ml[851,31124+28]..[851,31124+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[851,31124+28]..[851,31124+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[851,31124+28]..[851,31124+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[851,31124+40]..[851,31124+67])
                        ]
                        expression (lib/sentenceParser.ml[852,31195+8]..[874,32160+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[852,31195+12]..[858,31465+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[853,31209+10]..[853,31209+37])
                                    pattern (lib/sentenceParser.ml[853,31209+40]..[853,31209+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[853,31209+40]..[853,31209+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[854,31260+10]..[854,31260+36])
                                    pattern (lib/sentenceParser.ml[854,31260+39]..[854,31260+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[854,31260+39]..[854,31260+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[855,31303+10]..[855,31303+38])
                                    pattern (lib/sentenceParser.ml[855,31303+41]..[855,31303+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[855,31303+41]..[855,31303+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[856,31359+10]..[856,31359+36])
                                    pattern (lib/sentenceParser.ml[856,31359+39]..[856,31359+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[856,31359+39]..[856,31359+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[857,31411+10]..[857,31411+36])
                                    pattern (lib/sentenceParser.ml[857,31411+39]..[857,31411+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[857,31411+39]..[857,31411+52])
                                ]
                              expression (lib/sentenceParser.ml[858,31465+12]..[858,31465+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[858,31465+12]..[858,31465+25])
                          ]
                          expression (lib/sentenceParser.ml[859,31494+8]..[874,32160+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[859,31494+12]..[859,31494+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[859,31494+12]..[859,31494+14])
                                core_type (lib/sentenceParser.ml[859,31494+18]..[859,31494+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[859,31494+18]..[859,31494+33])
                                  []
                                expression (lib/sentenceParser.ml[859,31494+37]..[859,31494+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[859,31494+37]..[859,31494+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[859,31494+37]..[859,31494+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[859,31494+47]..[859,31494+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[859,31494+47]..[859,31494+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[860,31547+8]..[874,32160+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[860,31547+12]..[860,31547+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[860,31547+12]..[860,31547+23])
                                  expression (lib/sentenceParser.ml[860,31547+26]..[860,31547+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[860,31547+26]..[860,31547+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[860,31547+26]..[860,31547+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[860,31547+40]..[860,31547+66])
                              ]
                              expression (lib/sentenceParser.ml[861,31617+8]..[874,32160+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[861,31617+12]..[861,31617+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[861,31617+12]..[861,31617+21])
                                    expression (lib/sentenceParser.ml[861,31617+24]..[861,31617+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[861,31617+24]..[861,31617+37])
                                ]
                                expression (lib/sentenceParser.ml[862,31658+8]..[874,32160+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[862,31658+12]..[862,31658+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[862,31658+12]..[862,31658+19])
                                      expression (lib/sentenceParser.ml[862,31658+22]..[862,31658+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[862,31658+22]..[862,31658+33])
                                  ]
                                  expression (lib/sentenceParser.ml[863,31695+8]..[874,32160+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[863,31695+12]..[863,31695+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[863,31695+12]..[863,31695+14])
                                        core_type (lib/sentenceParser.ml[863,31695+18]..[863,31695+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[863,31695+18]..[863,31695+33])
                                          []
                                        expression (lib/sentenceParser.mly[183,31764+16]..[183,31764+86])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[183,31764+23]..[183,31764+73])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[183,31764+24]..[183,31764+37])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[183,31764+24]..[183,31764+37])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[183,31764+38]..[183,31764+72])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[183,31764+39]..[183,31764+53])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[183,31764+39]..[183,31764+53])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[183,31764+54]..[183,31764+71])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[183,31764+55]..[183,31764+66])
                                                            Pexp_constant PConst_string("DEBUG:rhs",(lib/sentenceParser.mly[183,31764+56]..[183,31764+65]),None)
                                                          expression (lib/sentenceParser.mly[183,31764+68]..[183,31764+70])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[183,31764+68]..[183,31764+70])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[183,31764+75]..[183,31764+85])
                                            Pexp_construct "NFactor" (lib/sentenceParser.mly[183,31764+75]..[183,31764+82])
                                            Some
                                              expression (lib/sentenceParser.mly[183,31764+83]..[183,31764+85])
                                                Pexp_ident "_1" (lib/sentenceParser.mly[183,31764+83]..[183,31764+85])
                                    ]
                                    expression (lib/sentenceParser.ml[868,31893+8]..[874,32160+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[869,31903+10]..[869,31903+37])
                                          expression (lib/sentenceParser.ml[869,31903+40]..[869,31903+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[869,31903+40]..[869,31903+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[870,31954+10]..[870,31954+36])
                                          expression (lib/sentenceParser.ml[870,31954+39]..[870,31954+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[870,31954+39]..[870,31954+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[870,31954+39]..[870,31954+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[870,31954+48]..[870,31954+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[870,31954+48]..[870,31954+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[871,32006+10]..[871,32006+38])
                                          expression (lib/sentenceParser.ml[871,32006+41]..[871,32006+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[871,32006+41]..[871,32006+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[872,32058+10]..[872,32058+36])
                                          expression (lib/sentenceParser.ml[872,32058+39]..[872,32058+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[872,32058+39]..[872,32058+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[873,32106+10]..[873,32106+36])
                                          expression (lib/sentenceParser.ml[873,32106+39]..[873,32106+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[873,32106+39]..[873,32106+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[875,32172+6]..[924,34189+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[875,32172+11]..[875,32172+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[875,32172+11]..[875,32172+22])
                      expression (lib/sentenceParser.ml[876,32198+8]..[924,34189+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[876,32198+12]..[876,32198+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[876,32198+12]..[876,32198+25])
                            expression (lib/sentenceParser.ml[876,32198+28]..[876,32198+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[876,32198+28]..[876,32198+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[876,32198+28]..[876,32198+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[876,32198+40]..[876,32198+67])
                        ]
                        expression (lib/sentenceParser.ml[877,32269+8]..[924,34189+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[877,32269+12]..[895,33097+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[878,32283+10]..[878,32283+37])
                                    pattern (lib/sentenceParser.ml[878,32283+40]..[878,32283+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[879,32326+10]..[879,32326+36])
                                    pattern (lib/sentenceParser.ml[879,32326+39]..[879,32326+47])
                                      Ppat_var "branches" (lib/sentenceParser.ml[879,32326+39]..[879,32326+47])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[880,32375+10]..[880,32375+38])
                                    pattern (lib/sentenceParser.ml[880,32375+41]..[880,32375+60])
                                      Ppat_var "_startpos_branches_" (lib/sentenceParser.ml[880,32375+41]..[880,32375+60])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[881,32437+10]..[881,32437+36])
                                    pattern (lib/sentenceParser.ml[881,32437+39]..[881,32437+56])
                                      Ppat_var "_endpos_branches_" (lib/sentenceParser.ml[881,32437+39]..[881,32437+56])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[882,32495+10]..[882,32495+36])
                                    pattern (lib/sentenceParser.ml[882,32495+39]..[894,33084+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[883,32536+12]..[883,32536+39])
                                          pattern (lib/sentenceParser.ml[883,32536+42]..[883,32536+43])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[884,32581+12]..[884,32581+38])
                                          pattern (lib/sentenceParser.ml[884,32581+41]..[884,32581+43])
                                            Ppat_var "_2" (lib/sentenceParser.ml[884,32581+41]..[884,32581+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[885,32626+12]..[885,32626+40])
                                          pattern (lib/sentenceParser.ml[885,32626+43]..[885,32626+56])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser.ml[885,32626+43]..[885,32626+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[886,32684+12]..[886,32684+38])
                                          pattern (lib/sentenceParser.ml[886,32684+41]..[886,32684+52])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser.ml[886,32684+41]..[886,32684+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[887,32738+12]..[887,32738+38])
                                          pattern (lib/sentenceParser.ml[887,32738+41]..[893,33069+13])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[888,32781+14]..[888,32781+41])
                                                pattern (lib/sentenceParser.ml[888,32781+44]..[888,32781+53])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser.ml[888,32781+44]..[888,32781+53])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[889,32836+14]..[889,32836+40])
                                                pattern (lib/sentenceParser.ml[889,32836+43]..[889,32836+49])
                                                  Ppat_var "symbol" (lib/sentenceParser.ml[889,32836+43]..[889,32836+49])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[890,32887+14]..[890,32887+42])
                                                pattern (lib/sentenceParser.ml[890,32887+45]..[890,32887+62])
                                                  Ppat_var "_startpos_symbol_" (lib/sentenceParser.ml[890,32887+45]..[890,32887+62])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[891,32951+14]..[891,32951+40])
                                                pattern (lib/sentenceParser.ml[891,32951+43]..[891,32951+58])
                                                  Ppat_var "_endpos_symbol_" (lib/sentenceParser.ml[891,32951+43]..[891,32951+58])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[892,33011+14]..[892,33011+40])
                                                pattern (lib/sentenceParser.ml[892,33011+43]..[892,33011+56])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser.ml[892,33011+43]..[892,33011+56])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[895,33097+12]..[895,33097+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[895,33097+12]..[895,33097+25])
                          ]
                          expression (lib/sentenceParser.ml[896,33126+8]..[924,34189+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[896,33126+12]..[896,33126+20])
                                  Ppat_var "branches" (lib/sentenceParser.ml[896,33126+12]..[896,33126+20])
                                core_type (lib/sentenceParser.ml[896,33126+24]..[896,33126+39])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[896,33126+24]..[896,33126+39])
                                  []
                                expression (lib/sentenceParser.ml[896,33126+43]..[896,33126+61])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[896,33126+43]..[896,33126+52])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[896,33126+43]..[896,33126+52])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[896,33126+53]..[896,33126+61])
                                        Pexp_ident "branches" (lib/sentenceParser.ml[896,33126+53]..[896,33126+61])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[897,33191+8]..[924,34189+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[897,33191+12]..[897,33191+14])
                                    Ppat_var "_2" (lib/sentenceParser.ml[897,33191+12]..[897,33191+14])
                                  core_type (lib/sentenceParser.ml[897,33191+17]..[897,33191+21])
                                    Ptyp_constr "unit" (lib/sentenceParser.ml[897,33191+17]..[897,33191+21])
                                    []
                                  expression (lib/sentenceParser.ml[897,33191+24]..[897,33191+36])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[897,33191+24]..[897,33191+33])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[897,33191+24]..[897,33191+33])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[897,33191+34]..[897,33191+36])
                                          Pexp_ident "_2" (lib/sentenceParser.ml[897,33191+34]..[897,33191+36])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[898,33231+8]..[924,34189+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[898,33231+12]..[898,33231+18])
                                      Ppat_var "symbol" (lib/sentenceParser.ml[898,33231+12]..[898,33231+18])
                                    core_type (lib/sentenceParser.mly[39,33284+8]..[39,33284+32])
                                      Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,33284+15]..[39,33284+32])
                                      [
                                        core_type (lib/sentenceParser.mly[39,33284+8]..[39,33284+14])
                                          Ptyp_constr "string" (lib/sentenceParser.mly[39,33284+8]..[39,33284+14])
                                          []
                                      ]
                                    expression (lib/sentenceParser.ml[902,33348+12]..[902,33348+28])
                                      Pexp_apply
                                      expression (lib/sentenceParser.ml[902,33348+12]..[902,33348+21])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[902,33348+12]..[902,33348+21])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser.ml[902,33348+22]..[902,33348+28])
                                            Pexp_ident "symbol" (lib/sentenceParser.ml[902,33348+22]..[902,33348+28])
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[903,33380+8]..[924,34189+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[903,33380+12]..[903,33380+23])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser.ml[903,33380+12]..[903,33380+23])
                                      expression (lib/sentenceParser.ml[903,33380+26]..[903,33380+66])
                                        Pexp_field
                                        expression (lib/sentenceParser.ml[903,33380+26]..[903,33380+39])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[903,33380+26]..[903,33380+39])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[903,33380+40]..[903,33380+66])
                                  ]
                                  expression (lib/sentenceParser.ml[904,33450+8]..[924,34189+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[904,33450+12]..[904,33450+21])
                                          Ppat_var "_startpos" (lib/sentenceParser.ml[904,33450+12]..[904,33450+21])
                                        expression (lib/sentenceParser.ml[904,33450+24]..[904,33450+41])
                                          Pexp_ident "_startpos_symbol_" (lib/sentenceParser.ml[904,33450+24]..[904,33450+41])
                                    ]
                                    expression (lib/sentenceParser.ml[905,33495+8]..[924,34189+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[905,33495+12]..[905,33495+19])
                                            Ppat_var "_endpos" (lib/sentenceParser.ml[905,33495+12]..[905,33495+19])
                                          expression (lib/sentenceParser.ml[905,33495+22]..[905,33495+39])
                                            Pexp_ident "_endpos_branches_" (lib/sentenceParser.ml[905,33495+22]..[905,33495+39])
                                      ]
                                      expression (lib/sentenceParser.ml[906,33538+8]..[924,34189+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[906,33538+12]..[906,33538+14])
                                              Ppat_var "_v" (lib/sentenceParser.ml[906,33538+12]..[906,33538+14])
                                            core_type (lib/sentenceParser.ml[906,33538+18]..[906,33538+43])
                                              Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser.ml[906,33538+18]..[906,33538+43])
                                              []
                                            expression (lib/sentenceParser.mly[93,33616+4]..[100,33874+5])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[94,33622+6]..[94,33622+71])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[94,33622+7]..[94,33622+20])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[94,33622+7]..[94,33622+20])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[94,33622+21]..[94,33622+70])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[94,33622+22]..[94,33622+36])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[94,33622+22]..[94,33622+36])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[94,33622+37]..[94,33622+69])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[94,33622+38]..[94,33622+50])
                                                                Pexp_constant PConst_string("DEBUG:rule",(lib/sentenceParser.mly[94,33622+39]..[94,33622+49]),None)
                                                              expression (lib/sentenceParser.mly[94,33622+52]..[94,33622+58])
                                                                Pexp_ident "symbol" (lib/sentenceParser.mly[94,33622+52]..[94,33622+58])
                                                              expression (lib/sentenceParser.mly[94,33622+60]..[94,33622+68])
                                                                Pexp_ident "branches" (lib/sentenceParser.mly[94,33622+60]..[94,33622+68])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[95,33695+6]..[99,33866+7])
                                                Pexp_record
                                                [
                                                  "pr_nt" (lib/sentenceParser.mly[96,33703+8]..[96,33703+13])
                                                    expression (lib/sentenceParser.mly[96,33703+25]..[96,33703+47])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[96,33703+25]..[96,33703+40])
                                                        Pexp_ident "Positions.value" (lib/sentenceParser.mly[96,33703+25]..[96,33703+40])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[96,33703+41]..[96,33703+47])
                                                            Pexp_ident "symbol" (lib/sentenceParser.mly[96,33703+41]..[96,33703+47])
                                                      ]
                                                  "pr_positions" (lib/sentenceParser.mly[97,33752+8]..[97,33752+20])
                                                    expression (lib/sentenceParser.mly[97,33752+25]..[97,33752+54])
                                                      Pexp_construct "::" (lib/sentenceParser.mly[97,33752+27]..[97,33752+54]) ghost
                                                      Some
                                                        expression (lib/sentenceParser.mly[97,33752+27]..[97,33752+54]) ghost
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[97,33752+27]..[97,33752+52])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[97,33752+27]..[97,33752+45])
                                                                Pexp_ident "Positions.position" (lib/sentenceParser.mly[97,33752+27]..[97,33752+45])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[97,33752+46]..[97,33752+52])
                                                                    Pexp_ident "symbol" (lib/sentenceParser.mly[97,33752+46]..[97,33752+52])
                                                              ]
                                                            expression (lib/sentenceParser.mly[97,33752+53]..[97,33752+54]) ghost
                                                              Pexp_construct "[]" (lib/sentenceParser.mly[97,33752+53]..[97,33752+54]) ghost
                                                              None
                                                          ]
                                                  "pr_branches" (lib/sentenceParser.mly[98,33808+8]..[98,33808+19])
                                                    expression (lib/sentenceParser.mly[98,33808+26]..[98,33808+28])
                                                      Pexp_construct "[]" (lib/sentenceParser.mly[98,33808+26]..[98,33808+28])
                                                      None
                                                ]
                                                None
                                        ]
                                        expression (lib/sentenceParser.ml[918,33922+8]..[924,34189+9])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[919,33932+10]..[919,33932+37])
                                              expression (lib/sentenceParser.ml[919,33932+40]..[919,33932+49])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser.ml[919,33932+40]..[919,33932+49])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[920,33983+10]..[920,33983+36])
                                              expression (lib/sentenceParser.ml[920,33983+39]..[920,33983+50])
                                                Pexp_apply
                                                expression (lib/sentenceParser.ml[920,33983+39]..[920,33983+47])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser.ml[920,33983+39]..[920,33983+47])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.ml[920,33983+48]..[920,33983+50])
                                                      Pexp_ident "_v" (lib/sentenceParser.ml[920,33983+48]..[920,33983+50])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[921,34035+10]..[921,34035+38])
                                              expression (lib/sentenceParser.ml[921,34035+41]..[921,34035+50])
                                                Pexp_ident "_startpos" (lib/sentenceParser.ml[921,34035+41]..[921,34035+50])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[922,34087+10]..[922,34087+36])
                                              expression (lib/sentenceParser.ml[922,34087+39]..[922,34087+46])
                                                Pexp_ident "_endpos" (lib/sentenceParser.ml[922,34087+39]..[922,34087+46])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[923,34135+10]..[923,34135+36])
                                              expression (lib/sentenceParser.ml[923,34135+39]..[923,34135+52])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[923,34135+39]..[923,34135+52])
                                          ]
                                          None
                    expression (lib/sentenceParser.ml[925,34201+6]..[966,35949+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[925,34201+11]..[925,34201+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[925,34201+11]..[925,34201+22])
                      expression (lib/sentenceParser.ml[926,34227+8]..[966,35949+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[926,34227+12]..[926,34227+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[926,34227+12]..[926,34227+25])
                            expression (lib/sentenceParser.ml[926,34227+28]..[926,34227+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[926,34227+28]..[926,34227+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[926,34227+28]..[926,34227+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[926,34227+40]..[926,34227+67])
                        ]
                        expression (lib/sentenceParser.ml[927,34298+8]..[966,35949+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[927,34298+12]..[945,35096+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[928,34312+10]..[928,34312+37])
                                    pattern (lib/sentenceParser.ml[928,34312+40]..[928,34312+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[929,34355+10]..[929,34355+36])
                                    pattern (lib/sentenceParser.ml[929,34355+39]..[929,34355+41])
                                      Ppat_var "_3" (lib/sentenceParser.ml[929,34355+39]..[929,34355+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[930,34398+10]..[930,34398+38])
                                    pattern (lib/sentenceParser.ml[930,34398+41]..[930,34398+54])
                                      Ppat_var "_startpos__3_" (lib/sentenceParser.ml[930,34398+41]..[930,34398+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[931,34454+10]..[931,34454+36])
                                    pattern (lib/sentenceParser.ml[931,34454+39]..[931,34454+50])
                                      Ppat_var "_endpos__3_" (lib/sentenceParser.ml[931,34454+39]..[931,34454+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[932,34506+10]..[932,34506+36])
                                    pattern (lib/sentenceParser.ml[932,34506+39]..[944,35083+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[933,34547+12]..[933,34547+39])
                                          pattern (lib/sentenceParser.ml[933,34547+42]..[933,34547+43])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[934,34592+12]..[934,34592+38])
                                          pattern (lib/sentenceParser.ml[934,34592+41]..[934,34592+43])
                                            Ppat_var "_2" (lib/sentenceParser.ml[934,34592+41]..[934,34592+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[935,34637+12]..[935,34637+40])
                                          pattern (lib/sentenceParser.ml[935,34637+43]..[935,34637+56])
                                            Ppat_var "_startpos__2_" (lib/sentenceParser.ml[935,34637+43]..[935,34637+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[936,34695+12]..[936,34695+38])
                                          pattern (lib/sentenceParser.ml[936,34695+41]..[936,34695+52])
                                            Ppat_var "_endpos__2_" (lib/sentenceParser.ml[936,34695+41]..[936,34695+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[937,34749+12]..[937,34749+38])
                                          pattern (lib/sentenceParser.ml[937,34749+41]..[943,35068+13])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[938,34792+14]..[938,34792+41])
                                                pattern (lib/sentenceParser.ml[938,34792+44]..[938,34792+53])
                                                  Ppat_var "_menhir_s" (lib/sentenceParser.ml[938,34792+44]..[938,34792+53])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[939,34847+14]..[939,34847+40])
                                                pattern (lib/sentenceParser.ml[939,34847+43]..[939,34847+45])
                                                  Ppat_var "_1" (lib/sentenceParser.ml[939,34847+43]..[939,34847+45])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[940,34894+14]..[940,34894+42])
                                                pattern (lib/sentenceParser.ml[940,34894+45]..[940,34894+58])
                                                  Ppat_var "_startpos__1_" (lib/sentenceParser.ml[940,34894+45]..[940,34894+58])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[941,34954+14]..[941,34954+40])
                                                pattern (lib/sentenceParser.ml[941,34954+43]..[941,34954+54])
                                                  Ppat_var "_endpos__1_" (lib/sentenceParser.ml[941,34954+43]..[941,34954+54])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[942,35010+14]..[942,35010+40])
                                                pattern (lib/sentenceParser.ml[942,35010+43]..[942,35010+56])
                                                  Ppat_var "_menhir_stack" (lib/sentenceParser.ml[942,35010+43]..[942,35010+56])
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[945,35096+12]..[945,35096+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[945,35096+12]..[945,35096+25])
                          ]
                          expression (lib/sentenceParser.ml[946,35125+8]..[966,35949+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[946,35125+12]..[946,35125+14])
                                  Ppat_var "_3" (lib/sentenceParser.ml[946,35125+12]..[946,35125+14])
                                core_type (lib/sentenceParser.ml[946,35125+18]..[946,35125+43])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser.ml[946,35125+18]..[946,35125+43])
                                  []
                                expression (lib/sentenceParser.ml[946,35125+47]..[946,35125+59])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[946,35125+47]..[946,35125+56])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[946,35125+47]..[946,35125+56])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[946,35125+57]..[946,35125+59])
                                        Pexp_ident "_3" (lib/sentenceParser.ml[946,35125+57]..[946,35125+59])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[947,35188+8]..[966,35949+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[947,35188+12]..[947,35188+14])
                                    Ppat_var "_2" (lib/sentenceParser.ml[947,35188+12]..[947,35188+14])
                                  core_type (lib/sentenceParser.ml[947,35188+18]..[947,35188+27])
                                    Ptyp_constr "list" (lib/sentenceParser.ml[947,35188+23]..[947,35188+27])
                                    [
                                      core_type (lib/sentenceParser.ml[947,35188+18]..[947,35188+22])
                                        Ptyp_constr "unit" (lib/sentenceParser.ml[947,35188+18]..[947,35188+22])
                                        []
                                    ]
                                  expression (lib/sentenceParser.ml[947,35188+31]..[947,35188+43])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[947,35188+31]..[947,35188+40])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[947,35188+31]..[947,35188+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[947,35188+41]..[947,35188+43])
                                          Pexp_ident "_2" (lib/sentenceParser.ml[947,35188+41]..[947,35188+43])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[948,35235+8]..[966,35949+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[948,35235+12]..[948,35235+14])
                                      Ppat_var "_1" (lib/sentenceParser.ml[948,35235+12]..[948,35235+14])
                                    core_type (lib/sentenceParser.ml[948,35235+18]..[948,35235+33])
                                      Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[948,35235+18]..[948,35235+33])
                                      []
                                    expression (lib/sentenceParser.ml[948,35235+37]..[948,35235+49])
                                      Pexp_apply
                                      expression (lib/sentenceParser.ml[948,35235+37]..[948,35235+46])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[948,35235+37]..[948,35235+46])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser.ml[948,35235+47]..[948,35235+49])
                                            Pexp_ident "_1" (lib/sentenceParser.ml[948,35235+47]..[948,35235+49])
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[949,35288+8]..[966,35949+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[949,35288+12]..[949,35288+23])
                                        Ppat_var "_endpos__0_" (lib/sentenceParser.ml[949,35288+12]..[949,35288+23])
                                      expression (lib/sentenceParser.ml[949,35288+26]..[949,35288+66])
                                        Pexp_field
                                        expression (lib/sentenceParser.ml[949,35288+26]..[949,35288+39])
                                          Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[949,35288+26]..[949,35288+39])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[949,35288+40]..[949,35288+66])
                                  ]
                                  expression (lib/sentenceParser.ml[950,35358+8]..[966,35949+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[950,35358+12]..[950,35358+21])
                                          Ppat_var "_startpos" (lib/sentenceParser.ml[950,35358+12]..[950,35358+21])
                                        expression (lib/sentenceParser.ml[950,35358+24]..[950,35358+37])
                                          Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[950,35358+24]..[950,35358+37])
                                    ]
                                    expression (lib/sentenceParser.ml[951,35399+8]..[966,35949+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[951,35399+12]..[951,35399+19])
                                            Ppat_var "_endpos" (lib/sentenceParser.ml[951,35399+12]..[951,35399+19])
                                          expression (lib/sentenceParser.ml[951,35399+22]..[951,35399+33])
                                            Pexp_ident "_endpos__3_" (lib/sentenceParser.ml[951,35399+22]..[951,35399+33])
                                      ]
                                      expression (lib/sentenceParser.ml[952,35436+8]..[966,35949+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[952,35436+12]..[952,35436+14])
                                              Ppat_var "_v" (lib/sentenceParser.ml[952,35436+12]..[952,35436+14])
                                            core_type (lib/sentenceParser.ml[952,35436+18]..[952,35436+33])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[952,35436+18]..[952,35436+33])
                                              []
                                            expression (lib/sentenceParser.mly[64,35504+23]..[67,35629+10])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[65,35529+11]..[65,35529+65])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[65,35529+12]..[65,35529+25])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[65,35529+12]..[65,35529+25])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[65,35529+26]..[65,35529+64])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[65,35529+27]..[65,35529+41])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[65,35529+27]..[65,35529+41])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[65,35529+42]..[65,35529+63])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[65,35529+43]..[65,35529+59])
                                                                Pexp_constant PConst_string("DEBUG:OLDRULE1",(lib/sentenceParser.mly[65,35529+44]..[65,35529+58]),None)
                                                              expression (lib/sentenceParser.mly[65,35529+60]..[65,35529+62])
                                                                Pexp_ident "_3" (lib/sentenceParser.mly[65,35529+60]..[65,35529+62])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[66,35596+25]..[66,35596+32])
                                                Pexp_construct "Rule" (lib/sentenceParser.mly[66,35596+25]..[66,35596+29])
                                                Some
                                                  expression (lib/sentenceParser.mly[66,35596+30]..[66,35596+32])
                                                    Pexp_ident "_3" (lib/sentenceParser.mly[66,35596+30]..[66,35596+32])
                                        ]
                                        expression (lib/sentenceParser.ml[960,35682+8]..[966,35949+9])
                                          Pexp_record
                                          [
                                            "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[961,35692+10]..[961,35692+37])
                                              expression (lib/sentenceParser.ml[961,35692+40]..[961,35692+49])
                                                Pexp_ident "_menhir_s" (lib/sentenceParser.ml[961,35692+40]..[961,35692+49])
                                            "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[962,35743+10]..[962,35743+36])
                                              expression (lib/sentenceParser.ml[962,35743+39]..[962,35743+50])
                                                Pexp_apply
                                                expression (lib/sentenceParser.ml[962,35743+39]..[962,35743+47])
                                                  Pexp_ident "Obj.repr" (lib/sentenceParser.ml[962,35743+39]..[962,35743+47])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.ml[962,35743+48]..[962,35743+50])
                                                      Pexp_ident "_v" (lib/sentenceParser.ml[962,35743+48]..[962,35743+50])
                                                ]
                                            "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[963,35795+10]..[963,35795+38])
                                              expression (lib/sentenceParser.ml[963,35795+41]..[963,35795+50])
                                                Pexp_ident "_startpos" (lib/sentenceParser.ml[963,35795+41]..[963,35795+50])
                                            "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[964,35847+10]..[964,35847+36])
                                              expression (lib/sentenceParser.ml[964,35847+39]..[964,35847+46])
                                                Pexp_ident "_endpos" (lib/sentenceParser.ml[964,35847+39]..[964,35847+46])
                                            "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[965,35895+10]..[965,35895+36])
                                              expression (lib/sentenceParser.ml[965,35895+39]..[965,35895+52])
                                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[965,35895+39]..[965,35895+52])
                                          ]
                                          None
                    expression (lib/sentenceParser.ml[967,35961+6]..[1001,37384+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[967,35961+11]..[967,35961+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[967,35961+11]..[967,35961+22])
                      expression (lib/sentenceParser.ml[968,35987+8]..[1001,37384+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[968,35987+12]..[968,35987+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[968,35987+12]..[968,35987+25])
                            expression (lib/sentenceParser.ml[968,35987+28]..[968,35987+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[968,35987+28]..[968,35987+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[968,35987+28]..[968,35987+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[968,35987+40]..[968,35987+67])
                        ]
                        expression (lib/sentenceParser.ml[969,36058+8]..[1001,37384+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[969,36058+12]..[981,36586+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[970,36072+10]..[970,36072+37])
                                    pattern (lib/sentenceParser.ml[970,36072+40]..[970,36072+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[971,36115+10]..[971,36115+36])
                                    pattern (lib/sentenceParser.ml[971,36115+39]..[971,36115+41])
                                      Ppat_var "_2" (lib/sentenceParser.ml[971,36115+39]..[971,36115+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[972,36158+10]..[972,36158+38])
                                    pattern (lib/sentenceParser.ml[972,36158+41]..[972,36158+54])
                                      Ppat_var "_startpos__2_" (lib/sentenceParser.ml[972,36158+41]..[972,36158+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[973,36214+10]..[973,36214+36])
                                    pattern (lib/sentenceParser.ml[973,36214+39]..[973,36214+50])
                                      Ppat_var "_endpos__2_" (lib/sentenceParser.ml[973,36214+39]..[973,36214+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[974,36266+10]..[974,36266+36])
                                    pattern (lib/sentenceParser.ml[974,36266+39]..[980,36573+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[975,36307+12]..[975,36307+39])
                                          pattern (lib/sentenceParser.ml[975,36307+42]..[975,36307+51])
                                            Ppat_var "_menhir_s" (lib/sentenceParser.ml[975,36307+42]..[975,36307+51])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[976,36360+12]..[976,36360+38])
                                          pattern (lib/sentenceParser.ml[976,36360+41]..[976,36360+43])
                                            Ppat_var "_1" (lib/sentenceParser.ml[976,36360+41]..[976,36360+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[977,36405+12]..[977,36405+40])
                                          pattern (lib/sentenceParser.ml[977,36405+43]..[977,36405+56])
                                            Ppat_var "_startpos__1_" (lib/sentenceParser.ml[977,36405+43]..[977,36405+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[978,36463+12]..[978,36463+38])
                                          pattern (lib/sentenceParser.ml[978,36463+41]..[978,36463+52])
                                            Ppat_var "_endpos__1_" (lib/sentenceParser.ml[978,36463+41]..[978,36463+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[979,36517+12]..[979,36517+38])
                                          pattern (lib/sentenceParser.ml[979,36517+41]..[979,36517+54])
                                            Ppat_var "_menhir_stack" (lib/sentenceParser.ml[979,36517+41]..[979,36517+54])
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[981,36586+12]..[981,36586+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[981,36586+12]..[981,36586+25])
                          ]
                          expression (lib/sentenceParser.ml[982,36615+8]..[1001,37384+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[982,36615+12]..[982,36615+14])
                                  Ppat_var "_2" (lib/sentenceParser.ml[982,36615+12]..[982,36615+14])
                                core_type (lib/sentenceParser.ml[982,36615+18]..[982,36615+43])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser.ml[982,36615+18]..[982,36615+43])
                                  []
                                expression (lib/sentenceParser.ml[982,36615+47]..[982,36615+59])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[982,36615+47]..[982,36615+56])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[982,36615+47]..[982,36615+56])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[982,36615+57]..[982,36615+59])
                                        Pexp_ident "_2" (lib/sentenceParser.ml[982,36615+57]..[982,36615+59])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[983,36678+8]..[1001,37384+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[983,36678+12]..[983,36678+14])
                                    Ppat_var "_1" (lib/sentenceParser.ml[983,36678+12]..[983,36678+14])
                                  core_type (lib/sentenceParser.ml[983,36678+18]..[983,36678+27])
                                    Ptyp_constr "list" (lib/sentenceParser.ml[983,36678+23]..[983,36678+27])
                                    [
                                      core_type (lib/sentenceParser.ml[983,36678+18]..[983,36678+22])
                                        Ptyp_constr "unit" (lib/sentenceParser.ml[983,36678+18]..[983,36678+22])
                                        []
                                    ]
                                  expression (lib/sentenceParser.ml[983,36678+31]..[983,36678+43])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[983,36678+31]..[983,36678+40])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[983,36678+31]..[983,36678+40])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[983,36678+41]..[983,36678+43])
                                          Pexp_ident "_1" (lib/sentenceParser.ml[983,36678+41]..[983,36678+43])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[984,36725+8]..[1001,37384+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[984,36725+12]..[984,36725+23])
                                      Ppat_var "_endpos__0_" (lib/sentenceParser.ml[984,36725+12]..[984,36725+23])
                                    expression (lib/sentenceParser.ml[984,36725+26]..[984,36725+66])
                                      Pexp_field
                                      expression (lib/sentenceParser.ml[984,36725+26]..[984,36725+39])
                                        Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[984,36725+26]..[984,36725+39])
                                      "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[984,36725+40]..[984,36725+66])
                                ]
                                expression (lib/sentenceParser.ml[985,36795+8]..[1001,37384+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[985,36795+12]..[985,36795+21])
                                        Ppat_var "_startpos" (lib/sentenceParser.ml[985,36795+12]..[985,36795+21])
                                      expression (lib/sentenceParser.ml[985,36795+24]..[985,36795+37])
                                        Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[985,36795+24]..[985,36795+37])
                                  ]
                                  expression (lib/sentenceParser.ml[986,36836+8]..[1001,37384+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[986,36836+12]..[986,36836+19])
                                          Ppat_var "_endpos" (lib/sentenceParser.ml[986,36836+12]..[986,36836+19])
                                        expression (lib/sentenceParser.ml[986,36836+22]..[986,36836+33])
                                          Pexp_ident "_endpos__2_" (lib/sentenceParser.ml[986,36836+22]..[986,36836+33])
                                    ]
                                    expression (lib/sentenceParser.ml[987,36873+8]..[1001,37384+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[987,36873+12]..[987,36873+14])
                                            Ppat_var "_v" (lib/sentenceParser.ml[987,36873+12]..[987,36873+14])
                                          core_type (lib/sentenceParser.ml[987,36873+18]..[987,36873+33])
                                            Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[987,36873+18]..[987,36873+33])
                                            []
                                          expression (lib/sentenceParser.mly[69,36941+25]..[72,37073+1])
                                            Pexp_sequence
                                            expression (lib/sentenceParser.mly[70,36968+21]..[70,36968+74])
                                              Pexp_apply
                                              expression (lib/sentenceParser.mly[70,36968+22]..[70,36968+35])
                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[70,36968+22]..[70,36968+35])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.mly[70,36968+36]..[70,36968+73])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[70,36968+37]..[70,36968+51])
                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[70,36968+37]..[70,36968+51])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[70,36968+52]..[70,36968+72])
                                                          Pexp_tuple
                                                          [
                                                            expression (lib/sentenceParser.mly[70,36968+53]..[70,36968+68])
                                                              Pexp_constant PConst_string("DEBUG:OLDRULE",(lib/sentenceParser.mly[70,36968+54]..[70,36968+67]),None)
                                                            expression (lib/sentenceParser.mly[70,36968+69]..[70,36968+71])
                                                              Pexp_ident "_1" (lib/sentenceParser.mly[70,36968+69]..[70,36968+71])
                                                          ]
                                                    ]
                                              ]
                                            expression (lib/sentenceParser.mly[71,37044+21]..[71,37044+28])
                                              Pexp_construct "Rule" (lib/sentenceParser.mly[71,37044+21]..[71,37044+25])
                                              Some
                                                expression (lib/sentenceParser.mly[71,37044+26]..[71,37044+28])
                                                  Pexp_ident "_2" (lib/sentenceParser.mly[71,37044+26]..[71,37044+28])
                                      ]
                                      expression (lib/sentenceParser.ml[995,37117+8]..[1001,37384+9])
                                        Pexp_record
                                        [
                                          "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[996,37127+10]..[996,37127+37])
                                            expression (lib/sentenceParser.ml[996,37127+40]..[996,37127+49])
                                              Pexp_ident "_menhir_s" (lib/sentenceParser.ml[996,37127+40]..[996,37127+49])
                                          "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[997,37178+10]..[997,37178+36])
                                            expression (lib/sentenceParser.ml[997,37178+39]..[997,37178+50])
                                              Pexp_apply
                                              expression (lib/sentenceParser.ml[997,37178+39]..[997,37178+47])
                                                Pexp_ident "Obj.repr" (lib/sentenceParser.ml[997,37178+39]..[997,37178+47])
                                              [
                                                <arg>
                                                Nolabel
                                                  expression (lib/sentenceParser.ml[997,37178+48]..[997,37178+50])
                                                    Pexp_ident "_v" (lib/sentenceParser.ml[997,37178+48]..[997,37178+50])
                                              ]
                                          "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[998,37230+10]..[998,37230+38])
                                            expression (lib/sentenceParser.ml[998,37230+41]..[998,37230+50])
                                              Pexp_ident "_startpos" (lib/sentenceParser.ml[998,37230+41]..[998,37230+50])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[999,37282+10]..[999,37282+36])
                                            expression (lib/sentenceParser.ml[999,37282+39]..[999,37282+46])
                                              Pexp_ident "_endpos" (lib/sentenceParser.ml[999,37282+39]..[999,37282+46])
                                          "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1000,37330+10]..[1000,37330+36])
                                            expression (lib/sentenceParser.ml[1000,37330+39]..[1000,37330+52])
                                              Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1000,37330+39]..[1000,37330+52])
                                        ]
                                        None
                    expression (lib/sentenceParser.ml[1002,37396+6]..[1029,38460+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1002,37396+11]..[1002,37396+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1002,37396+11]..[1002,37396+22])
                      expression (lib/sentenceParser.ml[1003,37422+8]..[1029,38460+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1003,37422+12]..[1003,37422+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1003,37422+12]..[1003,37422+25])
                            expression (lib/sentenceParser.ml[1003,37422+28]..[1003,37422+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1003,37422+28]..[1003,37422+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1003,37422+28]..[1003,37422+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1003,37422+40]..[1003,37422+67])
                        ]
                        expression (lib/sentenceParser.ml[1004,37493+8]..[1029,38460+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1004,37493+12]..[1010,37763+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1005,37507+10]..[1005,37507+37])
                                    pattern (lib/sentenceParser.ml[1005,37507+40]..[1005,37507+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[1005,37507+40]..[1005,37507+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1006,37558+10]..[1006,37558+36])
                                    pattern (lib/sentenceParser.ml[1006,37558+39]..[1006,37558+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[1006,37558+39]..[1006,37558+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1007,37601+10]..[1007,37601+38])
                                    pattern (lib/sentenceParser.ml[1007,37601+41]..[1007,37601+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1007,37601+41]..[1007,37601+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1008,37657+10]..[1008,37657+36])
                                    pattern (lib/sentenceParser.ml[1008,37657+39]..[1008,37657+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1008,37657+39]..[1008,37657+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1009,37709+10]..[1009,37709+36])
                                    pattern (lib/sentenceParser.ml[1009,37709+39]..[1009,37709+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1009,37709+39]..[1009,37709+52])
                                ]
                              expression (lib/sentenceParser.ml[1010,37763+12]..[1010,37763+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1010,37763+12]..[1010,37763+25])
                          ]
                          expression (lib/sentenceParser.ml[1011,37792+8]..[1029,38460+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1011,37792+12]..[1011,37792+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[1011,37792+12]..[1011,37792+14])
                                core_type (lib/sentenceParser.ml[1011,37792+18]..[1011,37792+43])
                                  Ptyp_constr "Syntax.parameterized_rule" (lib/sentenceParser.ml[1011,37792+18]..[1011,37792+43])
                                  []
                                expression (lib/sentenceParser.ml[1011,37792+47]..[1011,37792+59])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1011,37792+47]..[1011,37792+56])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1011,37792+47]..[1011,37792+56])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1011,37792+57]..[1011,37792+59])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[1011,37792+57]..[1011,37792+59])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1012,37855+8]..[1029,38460+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1012,37855+12]..[1012,37855+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1012,37855+12]..[1012,37855+23])
                                  expression (lib/sentenceParser.ml[1012,37855+26]..[1012,37855+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[1012,37855+26]..[1012,37855+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1012,37855+26]..[1012,37855+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1012,37855+40]..[1012,37855+66])
                              ]
                              expression (lib/sentenceParser.ml[1013,37925+8]..[1029,38460+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1013,37925+12]..[1013,37925+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[1013,37925+12]..[1013,37925+21])
                                    expression (lib/sentenceParser.ml[1013,37925+24]..[1013,37925+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1013,37925+24]..[1013,37925+37])
                                ]
                                expression (lib/sentenceParser.ml[1014,37966+8]..[1029,38460+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1014,37966+12]..[1014,37966+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[1014,37966+12]..[1014,37966+19])
                                      expression (lib/sentenceParser.ml[1014,37966+22]..[1014,37966+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[1014,37966+22]..[1014,37966+33])
                                  ]
                                  expression (lib/sentenceParser.ml[1015,38003+8]..[1029,38460+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1015,38003+12]..[1015,38003+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[1015,38003+12]..[1015,38003+14])
                                        core_type (lib/sentenceParser.ml[1015,38003+18]..[1015,38003+33])
                                          Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1015,38003+18]..[1015,38003+33])
                                          []
                                        expression (lib/sentenceParser.mly[73,38071+12]..[76,38148+1])
                                          Pexp_sequence
                                          expression (lib/sentenceParser.mly[74,38085+0]..[74,38085+53])
                                            Pexp_apply
                                            expression (lib/sentenceParser.mly[74,38085+1]..[74,38085+14])
                                              Pexp_ident "print_endline" (lib/sentenceParser.mly[74,38085+1]..[74,38085+14])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.mly[74,38085+15]..[74,38085+52])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.mly[74,38085+16]..[74,38085+30])
                                                    Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[74,38085+16]..[74,38085+30])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.mly[74,38085+31]..[74,38085+51])
                                                        Pexp_tuple
                                                        [
                                                          expression (lib/sentenceParser.mly[74,38085+32]..[74,38085+47])
                                                            Pexp_constant PConst_string("DEBUG:OLDRULE",(lib/sentenceParser.mly[74,38085+33]..[74,38085+46]),None)
                                                          expression (lib/sentenceParser.mly[74,38085+48]..[74,38085+50])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[74,38085+48]..[74,38085+50])
                                                        ]
                                                  ]
                                            ]
                                          expression (lib/sentenceParser.mly[75,38140+0]..[75,38140+7])
                                            Pexp_construct "Rule" (lib/sentenceParser.mly[75,38140+0]..[75,38140+4])
                                            Some
                                              expression (lib/sentenceParser.mly[75,38140+5]..[75,38140+7])
                                                Pexp_ident "_1" (lib/sentenceParser.mly[75,38140+5]..[75,38140+7])
                                    ]
                                    expression (lib/sentenceParser.ml[1023,38193+8]..[1029,38460+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1024,38203+10]..[1024,38203+37])
                                          expression (lib/sentenceParser.ml[1024,38203+40]..[1024,38203+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1024,38203+40]..[1024,38203+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1025,38254+10]..[1025,38254+36])
                                          expression (lib/sentenceParser.ml[1025,38254+39]..[1025,38254+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[1025,38254+39]..[1025,38254+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1025,38254+39]..[1025,38254+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[1025,38254+48]..[1025,38254+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[1025,38254+48]..[1025,38254+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1026,38306+10]..[1026,38306+38])
                                          expression (lib/sentenceParser.ml[1026,38306+41]..[1026,38306+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[1026,38306+41]..[1026,38306+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1027,38358+10]..[1027,38358+36])
                                          expression (lib/sentenceParser.ml[1027,38358+39]..[1027,38358+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[1027,38358+39]..[1027,38358+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1028,38406+10]..[1028,38406+36])
                                          expression (lib/sentenceParser.ml[1028,38406+39]..[1028,38406+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1028,38406+39]..[1028,38406+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[1030,38472+6]..[1089,40915+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1030,38472+11]..[1030,38472+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1030,38472+11]..[1030,38472+22])
                      expression (lib/sentenceParser.ml[1031,38498+8]..[1089,40915+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1031,38498+12]..[1031,38498+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1031,38498+12]..[1031,38498+25])
                            expression (lib/sentenceParser.ml[1031,38498+28]..[1031,38498+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1031,38498+28]..[1031,38498+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1031,38498+28]..[1031,38498+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1031,38498+40]..[1031,38498+67])
                        ]
                        expression (lib/sentenceParser.ml[1032,38569+8]..[1089,40915+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1032,38569+12]..[1056,39649+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1033,38583+10]..[1033,38583+37])
                                    pattern (lib/sentenceParser.ml[1033,38583+40]..[1033,38583+41])
                                      Ppat_any
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1034,38626+10]..[1034,38626+36])
                                    pattern (lib/sentenceParser.ml[1034,38626+39]..[1034,38626+41])
                                      Ppat_var "_4" (lib/sentenceParser.ml[1034,38626+39]..[1034,38626+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1035,38669+10]..[1035,38669+38])
                                    pattern (lib/sentenceParser.ml[1035,38669+41]..[1035,38669+54])
                                      Ppat_var "_startpos__4_" (lib/sentenceParser.ml[1035,38669+41]..[1035,38669+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1036,38725+10]..[1036,38725+36])
                                    pattern (lib/sentenceParser.ml[1036,38725+39]..[1036,38725+50])
                                      Ppat_var "_endpos__4_" (lib/sentenceParser.ml[1036,38725+39]..[1036,38725+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1037,38777+10]..[1037,38777+36])
                                    pattern (lib/sentenceParser.ml[1037,38777+39]..[1055,39636+11])
                                      Ppat_record Closed
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1038,38818+12]..[1038,38818+39])
                                          pattern (lib/sentenceParser.ml[1038,38818+42]..[1038,38818+43])
                                            Ppat_any
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1039,38863+12]..[1039,38863+38])
                                          pattern (lib/sentenceParser.ml[1039,38863+41]..[1039,38863+43])
                                            Ppat_var "_3" (lib/sentenceParser.ml[1039,38863+41]..[1039,38863+43])
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1040,38908+12]..[1040,38908+40])
                                          pattern (lib/sentenceParser.ml[1040,38908+43]..[1040,38908+56])
                                            Ppat_var "_startpos__3_" (lib/sentenceParser.ml[1040,38908+43]..[1040,38908+56])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1041,38966+12]..[1041,38966+38])
                                          pattern (lib/sentenceParser.ml[1041,38966+41]..[1041,38966+52])
                                            Ppat_var "_endpos__3_" (lib/sentenceParser.ml[1041,38966+41]..[1041,38966+52])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1042,39020+12]..[1042,39020+38])
                                          pattern (lib/sentenceParser.ml[1042,39020+41]..[1054,39621+13])
                                            Ppat_record Closed
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1043,39063+14]..[1043,39063+41])
                                                pattern (lib/sentenceParser.ml[1043,39063+44]..[1043,39063+45])
                                                  Ppat_any
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1044,39110+14]..[1044,39110+40])
                                                pattern (lib/sentenceParser.ml[1044,39110+43]..[1044,39110+45])
                                                  Ppat_var "_2" (lib/sentenceParser.ml[1044,39110+43]..[1044,39110+45])
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1045,39157+14]..[1045,39157+42])
                                                pattern (lib/sentenceParser.ml[1045,39157+45]..[1045,39157+58])
                                                  Ppat_var "_startpos__2_" (lib/sentenceParser.ml[1045,39157+45]..[1045,39157+58])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1046,39217+14]..[1046,39217+40])
                                                pattern (lib/sentenceParser.ml[1046,39217+43]..[1046,39217+54])
                                                  Ppat_var "_endpos__2_" (lib/sentenceParser.ml[1046,39217+43]..[1046,39217+54])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1047,39273+14]..[1047,39273+40])
                                                pattern (lib/sentenceParser.ml[1047,39273+43]..[1053,39604+15])
                                                  Ppat_record Closed
                                                  [
                                                    "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1048,39318+16]..[1048,39318+43])
                                                      pattern (lib/sentenceParser.ml[1048,39318+46]..[1048,39318+55])
                                                        Ppat_var "_menhir_s" (lib/sentenceParser.ml[1048,39318+46]..[1048,39318+55])
                                                    "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1049,39375+16]..[1049,39375+42])
                                                      pattern (lib/sentenceParser.ml[1049,39375+45]..[1049,39375+47])
                                                        Ppat_var "_1" (lib/sentenceParser.ml[1049,39375+45]..[1049,39375+47])
                                                    "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1050,39424+16]..[1050,39424+44])
                                                      pattern (lib/sentenceParser.ml[1050,39424+47]..[1050,39424+60])
                                                        Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1050,39424+47]..[1050,39424+60])
                                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1051,39486+16]..[1051,39486+42])
                                                      pattern (lib/sentenceParser.ml[1051,39486+45]..[1051,39486+56])
                                                        Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1051,39486+45]..[1051,39486+56])
                                                    "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1052,39544+16]..[1052,39544+42])
                                                      pattern (lib/sentenceParser.ml[1052,39544+45]..[1052,39544+58])
                                                        Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1052,39544+45]..[1052,39544+58])
                                                  ]
                                            ]
                                      ]
                                ]
                              expression (lib/sentenceParser.ml[1056,39649+12]..[1056,39649+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1056,39649+12]..[1056,39649+25])
                          ]
                          expression (lib/sentenceParser.ml[1057,39678+8]..[1089,40915+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1057,39678+12]..[1057,39678+14])
                                  Ppat_var "_4" (lib/sentenceParser.ml[1057,39678+12]..[1057,39678+14])
                                core_type (lib/sentenceParser.ml[1057,39678+17]..[1057,39678+21])
                                  Ptyp_constr "unit" (lib/sentenceParser.ml[1057,39678+17]..[1057,39678+21])
                                  []
                                expression (lib/sentenceParser.ml[1057,39678+24]..[1057,39678+36])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1057,39678+24]..[1057,39678+33])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1057,39678+24]..[1057,39678+33])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1057,39678+34]..[1057,39678+36])
                                        Pexp_ident "_4" (lib/sentenceParser.ml[1057,39678+34]..[1057,39678+36])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1058,39718+8]..[1089,40915+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1058,39718+12]..[1058,39718+14])
                                    Ppat_var "_3" (lib/sentenceParser.ml[1058,39718+12]..[1058,39718+14])
                                  core_type (lib/sentenceParser.ml[1058,39718+18]..[1058,39718+33])
                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1058,39718+18]..[1058,39718+33])
                                    []
                                  expression (lib/sentenceParser.ml[1058,39718+37]..[1058,39718+49])
                                    Pexp_apply
                                    expression (lib/sentenceParser.ml[1058,39718+37]..[1058,39718+46])
                                      Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1058,39718+37]..[1058,39718+46])
                                    [
                                      <arg>
                                      Nolabel
                                        expression (lib/sentenceParser.ml[1058,39718+47]..[1058,39718+49])
                                          Pexp_ident "_3" (lib/sentenceParser.ml[1058,39718+47]..[1058,39718+49])
                                    ]
                              ]
                              expression (lib/sentenceParser.ml[1059,39771+8]..[1089,40915+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1059,39771+12]..[1059,39771+14])
                                      Ppat_var "_2" (lib/sentenceParser.ml[1059,39771+12]..[1059,39771+14])
                                    core_type (lib/sentenceParser.ml[1059,39771+18]..[1059,39771+27])
                                      Ptyp_constr "list" (lib/sentenceParser.ml[1059,39771+23]..[1059,39771+27])
                                      [
                                        core_type (lib/sentenceParser.ml[1059,39771+18]..[1059,39771+22])
                                          Ptyp_constr "unit" (lib/sentenceParser.ml[1059,39771+18]..[1059,39771+22])
                                          []
                                      ]
                                    expression (lib/sentenceParser.ml[1059,39771+31]..[1059,39771+43])
                                      Pexp_apply
                                      expression (lib/sentenceParser.ml[1059,39771+31]..[1059,39771+40])
                                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1059,39771+31]..[1059,39771+40])
                                      [
                                        <arg>
                                        Nolabel
                                          expression (lib/sentenceParser.ml[1059,39771+41]..[1059,39771+43])
                                            Pexp_ident "_2" (lib/sentenceParser.ml[1059,39771+41]..[1059,39771+43])
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1060,39818+8]..[1089,40915+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1060,39818+12]..[1060,39818+14])
                                        Ppat_var "_1" (lib/sentenceParser.ml[1060,39818+12]..[1060,39818+14])
                                      core_type (lib/sentenceParser.ml[1060,39818+17]..[1060,39818+21])
                                        Ptyp_constr "unit" (lib/sentenceParser.ml[1060,39818+17]..[1060,39818+21])
                                        []
                                      expression (lib/sentenceParser.ml[1060,39818+24]..[1060,39818+36])
                                        Pexp_apply
                                        expression (lib/sentenceParser.ml[1060,39818+24]..[1060,39818+33])
                                          Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1060,39818+24]..[1060,39818+33])
                                        [
                                          <arg>
                                          Nolabel
                                            expression (lib/sentenceParser.ml[1060,39818+34]..[1060,39818+36])
                                              Pexp_ident "_1" (lib/sentenceParser.ml[1060,39818+34]..[1060,39818+36])
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[1061,39858+8]..[1089,40915+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1061,39858+12]..[1061,39858+23])
                                          Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1061,39858+12]..[1061,39858+23])
                                        expression (lib/sentenceParser.ml[1061,39858+26]..[1061,39858+66])
                                          Pexp_field
                                          expression (lib/sentenceParser.ml[1061,39858+26]..[1061,39858+39])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1061,39858+26]..[1061,39858+39])
                                          "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1061,39858+40]..[1061,39858+66])
                                    ]
                                    expression (lib/sentenceParser.ml[1062,39928+8]..[1089,40915+9])
                                      Pexp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1062,39928+12]..[1062,39928+21])
                                            Ppat_var "_startpos" (lib/sentenceParser.ml[1062,39928+12]..[1062,39928+21])
                                          expression (lib/sentenceParser.ml[1062,39928+24]..[1062,39928+37])
                                            Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1062,39928+24]..[1062,39928+37])
                                      ]
                                      expression (lib/sentenceParser.ml[1063,39969+8]..[1089,40915+9])
                                        Pexp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1063,39969+12]..[1063,39969+19])
                                              Ppat_var "_endpos" (lib/sentenceParser.ml[1063,39969+12]..[1063,39969+19])
                                            expression (lib/sentenceParser.ml[1063,39969+22]..[1063,39969+33])
                                              Pexp_ident "_endpos__4_" (lib/sentenceParser.ml[1063,39969+22]..[1063,39969+33])
                                        ]
                                        expression (lib/sentenceParser.ml[1064,40006+8]..[1089,40915+9])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1064,40006+12]..[1064,40006+14])
                                                Ppat_var "_v" (lib/sentenceParser.ml[1064,40006+12]..[1064,40006+14])
                                              expression (lib/sentenceParser.ml[1065,40023+10]..[1081,40605+31])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[1065,40023+14]..[1065,40023+16])
                                                      Ppat_var "_1" (lib/sentenceParser.ml[1065,40023+14]..[1065,40023+16])
                                                    expression (lib/sentenceParser.ml[1066,40042+12]..lib/sentenceParser.mly[127,40288+89])
                                                      Pexp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lib/sentenceParser.ml[1066,40042+16]..[1066,40042+18])
                                                            Ppat_var "_1" (lib/sentenceParser.ml[1066,40042+16]..[1066,40042+18])
                                                          expression (lib/sentenceParser.mly[131,40095+31]..[131,40095+101])
                                                            Pexp_sequence
                                                            expression (lib/sentenceParser.mly[131,40095+38]..[131,40095+88])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[131,40095+39]..[131,40095+52])
                                                                Pexp_ident "print_endline" (lib/sentenceParser.mly[131,40095+39]..[131,40095+52])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[131,40095+53]..[131,40095+87])
                                                                    Pexp_apply
                                                                    expression (lib/sentenceParser.mly[131,40095+54]..[131,40095+68])
                                                                      Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[131,40095+54]..[131,40095+68])
                                                                    [
                                                                      <arg>
                                                                      Nolabel
expression (lib/sentenceParser.mly[131,40095+69]..[131,40095+86])
  Pexp_tuple
  [
    expression (lib/sentenceParser.mly[131,40095+70]..[131,40095+81])
      Pexp_constant PConst_string("DEBUG:rhs",(lib/sentenceParser.mly[131,40095+71]..[131,40095+80]),None)
    expression (lib/sentenceParser.mly[131,40095+83]..[131,40095+85])
      Pexp_ident "_3" (lib/sentenceParser.mly[131,40095+83]..[131,40095+85])
  ]
                                                                    ]
                                                              ]
                                                            expression (lib/sentenceParser.mly[131,40095+90]..[131,40095+100])
                                                              Pexp_construct "NFactor" (lib/sentenceParser.mly[131,40095+90]..[131,40095+97])
                                                              Some
                                                                expression (lib/sentenceParser.mly[131,40095+98]..[131,40095+100])
                                                                  Pexp_ident "_3" (lib/sentenceParser.mly[131,40095+98]..[131,40095+100])
                                                      ]
                                                      expression (lib/sentenceParser.mly[127,40288+11]..[127,40288+89])
                                                        Pexp_sequence
                                                        expression (lib/sentenceParser.mly[127,40288+18]..[127,40288+76])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser.mly[127,40288+19]..[127,40288+32])
                                                            Pexp_ident "print_endline" (lib/sentenceParser.mly[127,40288+19]..[127,40288+32])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser.mly[127,40288+33]..[127,40288+75])
                                                                Pexp_apply
                                                                expression (lib/sentenceParser.mly[127,40288+34]..[127,40288+48])
                                                                  Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[127,40288+34]..[127,40288+48])
                                                                [
                                                                  <arg>
                                                                  Nolabel
                                                                    expression (lib/sentenceParser.mly[127,40288+49]..[127,40288+74])
                                                                      Pexp_tuple
                                                                      [
expression (lib/sentenceParser.mly[127,40288+50]..[127,40288+69])
  Pexp_constant PConst_string("DEBUG:cterm/group",(lib/sentenceParser.mly[127,40288+51]..[127,40288+68]),None)
expression (lib/sentenceParser.mly[127,40288+71]..[127,40288+73])
  Pexp_ident "_1" (lib/sentenceParser.mly[127,40288+71]..[127,40288+73])
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser.mly[127,40288+78]..[127,40288+88])
                                                          Pexp_construct "NFactor" (lib/sentenceParser.mly[127,40288+78]..[127,40288+85])
                                                          Some
                                                            expression (lib/sentenceParser.mly[127,40288+86]..[127,40288+88])
                                                              Pexp_ident "_1" (lib/sentenceParser.mly[127,40288+86]..[127,40288+88])
                                                ]
                                                expression (lib/sentenceParser.ml[1077,40435+10]..[1081,40605+31])
                                                  Pexp_constraint
                                                  expression (lib/sentenceParser.mly[123,40478+17]..[123,40478+95])
                                                    Pexp_sequence
                                                    expression (lib/sentenceParser.mly[123,40478+24]..[123,40478+82])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[123,40478+25]..[123,40478+38])
                                                        Pexp_ident "print_endline" (lib/sentenceParser.mly[123,40478+25]..[123,40478+38])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[123,40478+39]..[123,40478+81])
                                                            Pexp_apply
                                                            expression (lib/sentenceParser.mly[123,40478+40]..[123,40478+54])
                                                              Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[123,40478+40]..[123,40478+54])
                                                            [
                                                              <arg>
                                                              Nolabel
                                                                expression (lib/sentenceParser.mly[123,40478+55]..[123,40478+80])
                                                                  Pexp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[123,40478+56]..[123,40478+75])
                                                                      Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,40478+57]..[123,40478+74]),None)
                                                                    expression (lib/sentenceParser.mly[123,40478+77]..[123,40478+79])
                                                                      Pexp_ident "_1" (lib/sentenceParser.mly[123,40478+77]..[123,40478+79])
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[123,40478+84]..[123,40478+94])
                                                      Pexp_construct "NFactor" (lib/sentenceParser.mly[123,40478+84]..[123,40478+91])
                                                      Some
                                                        expression (lib/sentenceParser.mly[123,40478+92]..[123,40478+94])
                                                          Pexp_ident "_1" (lib/sentenceParser.mly[123,40478+92]..[123,40478+94])
                                                  core_type (lib/sentenceParser.ml[1081,40605+14]..[1081,40605+29])
                                                    Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1081,40605+14]..[1081,40605+29])
                                                    []
                                          ]
                                          expression (lib/sentenceParser.ml[1083,40648+8]..[1089,40915+9])
                                            Pexp_record
                                            [
                                              "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1084,40658+10]..[1084,40658+37])
                                                expression (lib/sentenceParser.ml[1084,40658+40]..[1084,40658+49])
                                                  Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1084,40658+40]..[1084,40658+49])
                                              "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1085,40709+10]..[1085,40709+36])
                                                expression (lib/sentenceParser.ml[1085,40709+39]..[1085,40709+50])
                                                  Pexp_apply
                                                  expression (lib/sentenceParser.ml[1085,40709+39]..[1085,40709+47])
                                                    Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1085,40709+39]..[1085,40709+47])
                                                  [
                                                    <arg>
                                                    Nolabel
                                                      expression (lib/sentenceParser.ml[1085,40709+48]..[1085,40709+50])
                                                        Pexp_ident "_v" (lib/sentenceParser.ml[1085,40709+48]..[1085,40709+50])
                                                  ]
                                              "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1086,40761+10]..[1086,40761+38])
                                                expression (lib/sentenceParser.ml[1086,40761+41]..[1086,40761+50])
                                                  Pexp_ident "_startpos" (lib/sentenceParser.ml[1086,40761+41]..[1086,40761+50])
                                              "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1087,40813+10]..[1087,40813+36])
                                                expression (lib/sentenceParser.ml[1087,40813+39]..[1087,40813+46])
                                                  Pexp_ident "_endpos" (lib/sentenceParser.ml[1087,40813+39]..[1087,40813+46])
                                              "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1088,40861+10]..[1088,40861+36])
                                                expression (lib/sentenceParser.ml[1088,40861+39]..[1088,40861+52])
                                                  Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1088,40861+39]..[1088,40861+52])
                                            ]
                                            None
                    expression (lib/sentenceParser.ml[1090,40927+6]..[1128,42425+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1090,40927+11]..[1090,40927+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1090,40927+11]..[1090,40927+22])
                      expression (lib/sentenceParser.ml[1091,40953+8]..[1128,42425+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1091,40953+12]..[1091,40953+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1091,40953+12]..[1091,40953+25])
                            expression (lib/sentenceParser.ml[1091,40953+28]..[1091,40953+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1091,40953+28]..[1091,40953+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1091,40953+28]..[1091,40953+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1091,40953+40]..[1091,40953+67])
                        ]
                        expression (lib/sentenceParser.ml[1092,41024+8]..[1128,42425+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1092,41024+12]..[1098,41294+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1093,41038+10]..[1093,41038+37])
                                    pattern (lib/sentenceParser.ml[1093,41038+40]..[1093,41038+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[1093,41038+40]..[1093,41038+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1094,41089+10]..[1094,41089+36])
                                    pattern (lib/sentenceParser.ml[1094,41089+39]..[1094,41089+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[1094,41089+39]..[1094,41089+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1095,41132+10]..[1095,41132+38])
                                    pattern (lib/sentenceParser.ml[1095,41132+41]..[1095,41132+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1095,41132+41]..[1095,41132+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1096,41188+10]..[1096,41188+36])
                                    pattern (lib/sentenceParser.ml[1096,41188+39]..[1096,41188+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1096,41188+39]..[1096,41188+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1097,41240+10]..[1097,41240+36])
                                    pattern (lib/sentenceParser.ml[1097,41240+39]..[1097,41240+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1097,41240+39]..[1097,41240+52])
                                ]
                              expression (lib/sentenceParser.ml[1098,41294+12]..[1098,41294+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1098,41294+12]..[1098,41294+25])
                          ]
                          expression (lib/sentenceParser.ml[1099,41323+8]..[1128,42425+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1099,41323+12]..[1099,41323+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[1099,41323+12]..[1099,41323+14])
                                core_type (lib/sentenceParser.ml[1099,41323+18]..[1099,41323+33])
                                  Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1099,41323+18]..[1099,41323+33])
                                  []
                                expression (lib/sentenceParser.ml[1099,41323+37]..[1099,41323+49])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1099,41323+37]..[1099,41323+46])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1099,41323+37]..[1099,41323+46])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1099,41323+47]..[1099,41323+49])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[1099,41323+47]..[1099,41323+49])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1100,41376+8]..[1128,42425+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1100,41376+12]..[1100,41376+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1100,41376+12]..[1100,41376+23])
                                  expression (lib/sentenceParser.ml[1100,41376+26]..[1100,41376+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[1100,41376+26]..[1100,41376+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1100,41376+26]..[1100,41376+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1100,41376+40]..[1100,41376+66])
                              ]
                              expression (lib/sentenceParser.ml[1101,41446+8]..[1128,42425+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1101,41446+12]..[1101,41446+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[1101,41446+12]..[1101,41446+21])
                                    expression (lib/sentenceParser.ml[1101,41446+24]..[1101,41446+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1101,41446+24]..[1101,41446+37])
                                ]
                                expression (lib/sentenceParser.ml[1102,41487+8]..[1128,42425+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1102,41487+12]..[1102,41487+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[1102,41487+12]..[1102,41487+19])
                                      expression (lib/sentenceParser.ml[1102,41487+22]..[1102,41487+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[1102,41487+22]..[1102,41487+33])
                                  ]
                                  expression (lib/sentenceParser.ml[1103,41524+8]..[1128,42425+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1103,41524+12]..[1103,41524+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[1103,41524+12]..[1103,41524+14])
                                        expression (lib/sentenceParser.ml[1104,41541+10]..[1120,42115+31])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1104,41541+14]..[1104,41541+16])
                                                Ppat_var "_1" (lib/sentenceParser.ml[1104,41541+14]..[1104,41541+16])
                                              expression (lib/sentenceParser.ml[1105,41560+12]..lib/sentenceParser.mly[128,41797+90])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[1105,41560+16]..[1105,41560+18])
                                                      Ppat_var "_1" (lib/sentenceParser.ml[1105,41560+16]..[1105,41560+18])
                                                    expression (lib/sentenceParser.mly[135,41613+18]..[135,41613+92])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[135,41613+25]..[135,41613+79])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[135,41613+26]..[135,41613+39])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[135,41613+26]..[135,41613+39])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[135,41613+40]..[135,41613+78])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[135,41613+41]..[135,41613+55])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[135,41613+41]..[135,41613+55])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[135,41613+56]..[135,41613+77])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[135,41613+57]..[135,41613+72])
Pexp_constant PConst_string("DEBUG:class1a",(lib/sentenceParser.mly[135,41613+58]..[135,41613+71]),None)
                                                                      expression (lib/sentenceParser.mly[135,41613+74]..[135,41613+76])
Pexp_ident "_1" (lib/sentenceParser.mly[135,41613+74]..[135,41613+76])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[135,41613+81]..[135,41613+91])
                                                        Pexp_construct "NFactor" (lib/sentenceParser.mly[135,41613+81]..[135,41613+88])
                                                        Some
                                                          expression (lib/sentenceParser.mly[135,41613+89]..[135,41613+91])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[135,41613+89]..[135,41613+91])
                                                ]
                                                expression (lib/sentenceParser.mly[128,41797+12]..[128,41797+90])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser.mly[128,41797+19]..[128,41797+77])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[128,41797+20]..[128,41797+33])
                                                      Pexp_ident "print_endline" (lib/sentenceParser.mly[128,41797+20]..[128,41797+33])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[128,41797+34]..[128,41797+76])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser.mly[128,41797+35]..[128,41797+49])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[128,41797+35]..[128,41797+49])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser.mly[128,41797+50]..[128,41797+75])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[128,41797+51]..[128,41797+70])
                                                                    Pexp_constant PConst_string("DEBUG:cterm/class",(lib/sentenceParser.mly[128,41797+52]..[128,41797+69]),None)
                                                                  expression (lib/sentenceParser.mly[128,41797+72]..[128,41797+74])
                                                                    Pexp_ident "_1" (lib/sentenceParser.mly[128,41797+72]..[128,41797+74])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[128,41797+79]..[128,41797+89])
                                                    Pexp_construct "NFactor" (lib/sentenceParser.mly[128,41797+79]..[128,41797+86])
                                                    Some
                                                      expression (lib/sentenceParser.mly[128,41797+87]..[128,41797+89])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[128,41797+87]..[128,41797+89])
                                          ]
                                          expression (lib/sentenceParser.ml[1116,41945+10]..[1120,42115+31])
                                            Pexp_constraint
                                            expression (lib/sentenceParser.mly[123,41988+17]..[123,41988+95])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[123,41988+24]..[123,41988+82])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[123,41988+25]..[123,41988+38])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[123,41988+25]..[123,41988+38])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[123,41988+39]..[123,41988+81])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[123,41988+40]..[123,41988+54])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[123,41988+40]..[123,41988+54])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[123,41988+55]..[123,41988+80])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[123,41988+56]..[123,41988+75])
                                                                Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,41988+57]..[123,41988+74]),None)
                                                              expression (lib/sentenceParser.mly[123,41988+77]..[123,41988+79])
                                                                Pexp_ident "_1" (lib/sentenceParser.mly[123,41988+77]..[123,41988+79])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[123,41988+84]..[123,41988+94])
                                                Pexp_construct "NFactor" (lib/sentenceParser.mly[123,41988+84]..[123,41988+91])
                                                Some
                                                  expression (lib/sentenceParser.mly[123,41988+92]..[123,41988+94])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[123,41988+92]..[123,41988+94])
                                            core_type (lib/sentenceParser.ml[1120,42115+14]..[1120,42115+29])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1120,42115+14]..[1120,42115+29])
                                              []
                                    ]
                                    expression (lib/sentenceParser.ml[1122,42158+8]..[1128,42425+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1123,42168+10]..[1123,42168+37])
                                          expression (lib/sentenceParser.ml[1123,42168+40]..[1123,42168+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1123,42168+40]..[1123,42168+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1124,42219+10]..[1124,42219+36])
                                          expression (lib/sentenceParser.ml[1124,42219+39]..[1124,42219+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[1124,42219+39]..[1124,42219+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1124,42219+39]..[1124,42219+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[1124,42219+48]..[1124,42219+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[1124,42219+48]..[1124,42219+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1125,42271+10]..[1125,42271+38])
                                          expression (lib/sentenceParser.ml[1125,42271+41]..[1125,42271+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[1125,42271+41]..[1125,42271+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1126,42323+10]..[1126,42323+36])
                                          expression (lib/sentenceParser.ml[1126,42323+39]..[1126,42323+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[1126,42323+39]..[1126,42323+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1127,42371+10]..[1127,42371+36])
                                          expression (lib/sentenceParser.ml[1127,42371+39]..[1127,42371+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1127,42371+39]..[1127,42371+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[1129,42437+6]..[1171,44015+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1129,42437+11]..[1129,42437+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1129,42437+11]..[1129,42437+22])
                      expression (lib/sentenceParser.ml[1130,42463+8]..[1171,44015+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1130,42463+12]..[1130,42463+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1130,42463+12]..[1130,42463+25])
                            expression (lib/sentenceParser.ml[1130,42463+28]..[1130,42463+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1130,42463+28]..[1130,42463+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1130,42463+28]..[1130,42463+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1130,42463+40]..[1130,42463+67])
                        ]
                        expression (lib/sentenceParser.ml[1131,42534+8]..[1171,44015+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1131,42534+12]..[1137,42804+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1132,42548+10]..[1132,42548+37])
                                    pattern (lib/sentenceParser.ml[1132,42548+40]..[1132,42548+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[1132,42548+40]..[1132,42548+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1133,42599+10]..[1133,42599+36])
                                    pattern (lib/sentenceParser.ml[1133,42599+39]..[1133,42599+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[1133,42599+39]..[1133,42599+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1134,42642+10]..[1134,42642+38])
                                    pattern (lib/sentenceParser.ml[1134,42642+41]..[1134,42642+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1134,42642+41]..[1134,42642+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1135,42698+10]..[1135,42698+36])
                                    pattern (lib/sentenceParser.ml[1135,42698+39]..[1135,42698+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1135,42698+39]..[1135,42698+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1136,42750+10]..[1136,42750+36])
                                    pattern (lib/sentenceParser.ml[1136,42750+39]..[1136,42750+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1136,42750+39]..[1136,42750+52])
                                ]
                              expression (lib/sentenceParser.ml[1137,42804+12]..[1137,42804+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1137,42804+12]..[1137,42804+25])
                          ]
                          expression (lib/sentenceParser.ml[1138,42833+8]..[1171,44015+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1138,42833+12]..[1138,42833+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[1138,42833+12]..[1138,42833+14])
                                core_type (lib/sentenceParser.mly[39,42882+8]..[39,42882+32])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,42882+15]..[39,42882+32])
                                  [
                                    core_type (lib/sentenceParser.mly[39,42882+8]..[39,42882+14])
                                      Ptyp_constr "string" (lib/sentenceParser.mly[39,42882+8]..[39,42882+14])
                                      []
                                  ]
                                expression (lib/sentenceParser.ml[1142,42947+12]..[1142,42947+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1142,42947+12]..[1142,42947+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1142,42947+12]..[1142,42947+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1142,42947+22]..[1142,42947+24])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[1142,42947+22]..[1142,42947+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1143,42975+8]..[1171,44015+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1143,42975+12]..[1143,42975+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1143,42975+12]..[1143,42975+23])
                                  expression (lib/sentenceParser.ml[1143,42975+26]..[1143,42975+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[1143,42975+26]..[1143,42975+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1143,42975+26]..[1143,42975+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1143,42975+40]..[1143,42975+66])
                              ]
                              expression (lib/sentenceParser.ml[1144,43045+8]..[1171,44015+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1144,43045+12]..[1144,43045+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[1144,43045+12]..[1144,43045+21])
                                    expression (lib/sentenceParser.ml[1144,43045+24]..[1144,43045+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1144,43045+24]..[1144,43045+37])
                                ]
                                expression (lib/sentenceParser.ml[1145,43086+8]..[1171,44015+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1145,43086+12]..[1145,43086+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[1145,43086+12]..[1145,43086+19])
                                      expression (lib/sentenceParser.ml[1145,43086+22]..[1145,43086+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[1145,43086+22]..[1145,43086+33])
                                  ]
                                  expression (lib/sentenceParser.ml[1146,43123+8]..[1171,44015+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1146,43123+12]..[1146,43123+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[1146,43123+12]..[1146,43123+14])
                                        expression (lib/sentenceParser.ml[1147,43140+10]..[1163,43705+31])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1147,43140+14]..[1147,43140+16])
                                                Ppat_var "_1" (lib/sentenceParser.ml[1147,43140+14]..[1147,43140+16])
                                              expression (lib/sentenceParser.ml[1148,43159+12]..lib/sentenceParser.mly[128,43387+90])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[1148,43159+16]..[1148,43159+18])
                                                      Ppat_var "_1" (lib/sentenceParser.ml[1148,43159+16]..[1148,43159+18])
                                                    expression (lib/sentenceParser.mly[136,43212+11]..[136,43212+83])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[136,43212+18]..[136,43212+70])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[136,43212+19]..[136,43212+32])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[136,43212+19]..[136,43212+32])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[136,43212+33]..[136,43212+69])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[136,43212+34]..[136,43212+48])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[136,43212+34]..[136,43212+48])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[136,43212+49]..[136,43212+68])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[136,43212+50]..[136,43212+63])
Pexp_constant PConst_string("DEBUG:class",(lib/sentenceParser.mly[136,43212+51]..[136,43212+62]),None)
                                                                      expression (lib/sentenceParser.mly[136,43212+65]..[136,43212+67])
Pexp_ident "_1" (lib/sentenceParser.mly[136,43212+65]..[136,43212+67])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[136,43212+72]..[136,43212+82])
                                                        Pexp_construct "SFactor" (lib/sentenceParser.mly[136,43212+72]..[136,43212+79])
                                                        Some
                                                          expression (lib/sentenceParser.mly[136,43212+80]..[136,43212+82])
                                                            Pexp_ident "_1" (lib/sentenceParser.mly[136,43212+80]..[136,43212+82])
                                                ]
                                                expression (lib/sentenceParser.mly[128,43387+12]..[128,43387+90])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser.mly[128,43387+19]..[128,43387+77])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[128,43387+20]..[128,43387+33])
                                                      Pexp_ident "print_endline" (lib/sentenceParser.mly[128,43387+20]..[128,43387+33])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[128,43387+34]..[128,43387+76])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser.mly[128,43387+35]..[128,43387+49])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[128,43387+35]..[128,43387+49])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser.mly[128,43387+50]..[128,43387+75])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[128,43387+51]..[128,43387+70])
                                                                    Pexp_constant PConst_string("DEBUG:cterm/class",(lib/sentenceParser.mly[128,43387+52]..[128,43387+69]),None)
                                                                  expression (lib/sentenceParser.mly[128,43387+72]..[128,43387+74])
                                                                    Pexp_ident "_1" (lib/sentenceParser.mly[128,43387+72]..[128,43387+74])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[128,43387+79]..[128,43387+89])
                                                    Pexp_construct "NFactor" (lib/sentenceParser.mly[128,43387+79]..[128,43387+86])
                                                    Some
                                                      expression (lib/sentenceParser.mly[128,43387+87]..[128,43387+89])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[128,43387+87]..[128,43387+89])
                                          ]
                                          expression (lib/sentenceParser.ml[1159,43535+10]..[1163,43705+31])
                                            Pexp_constraint
                                            expression (lib/sentenceParser.mly[123,43578+17]..[123,43578+95])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[123,43578+24]..[123,43578+82])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[123,43578+25]..[123,43578+38])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[123,43578+25]..[123,43578+38])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[123,43578+39]..[123,43578+81])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[123,43578+40]..[123,43578+54])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[123,43578+40]..[123,43578+54])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[123,43578+55]..[123,43578+80])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[123,43578+56]..[123,43578+75])
                                                                Pexp_constant PConst_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,43578+57]..[123,43578+74]),None)
                                                              expression (lib/sentenceParser.mly[123,43578+77]..[123,43578+79])
                                                                Pexp_ident "_1" (lib/sentenceParser.mly[123,43578+77]..[123,43578+79])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[123,43578+84]..[123,43578+94])
                                                Pexp_construct "NFactor" (lib/sentenceParser.mly[123,43578+84]..[123,43578+91])
                                                Some
                                                  expression (lib/sentenceParser.mly[123,43578+92]..[123,43578+94])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[123,43578+92]..[123,43578+94])
                                            core_type (lib/sentenceParser.ml[1163,43705+14]..[1163,43705+29])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1163,43705+14]..[1163,43705+29])
                                              []
                                    ]
                                    expression (lib/sentenceParser.ml[1165,43748+8]..[1171,44015+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1166,43758+10]..[1166,43758+37])
                                          expression (lib/sentenceParser.ml[1166,43758+40]..[1166,43758+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1166,43758+40]..[1166,43758+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1167,43809+10]..[1167,43809+36])
                                          expression (lib/sentenceParser.ml[1167,43809+39]..[1167,43809+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[1167,43809+39]..[1167,43809+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1167,43809+39]..[1167,43809+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[1167,43809+48]..[1167,43809+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[1167,43809+48]..[1167,43809+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1168,43861+10]..[1168,43861+38])
                                          expression (lib/sentenceParser.ml[1168,43861+41]..[1168,43861+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[1168,43861+41]..[1168,43861+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1169,43913+10]..[1169,43913+36])
                                          expression (lib/sentenceParser.ml[1169,43913+39]..[1169,43913+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[1169,43913+39]..[1169,43913+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1170,43961+10]..[1170,43961+36])
                                          expression (lib/sentenceParser.ml[1170,43961+39]..[1170,43961+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1170,43961+39]..[1170,43961+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[1172,44027+6]..[1214,45582+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1172,44027+11]..[1172,44027+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1172,44027+11]..[1172,44027+22])
                      expression (lib/sentenceParser.ml[1173,44053+8]..[1214,45582+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1173,44053+12]..[1173,44053+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1173,44053+12]..[1173,44053+25])
                            expression (lib/sentenceParser.ml[1173,44053+28]..[1173,44053+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1173,44053+28]..[1173,44053+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1173,44053+28]..[1173,44053+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1173,44053+40]..[1173,44053+67])
                        ]
                        expression (lib/sentenceParser.ml[1174,44124+8]..[1214,45582+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1174,44124+12]..[1180,44394+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1175,44138+10]..[1175,44138+37])
                                    pattern (lib/sentenceParser.ml[1175,44138+40]..[1175,44138+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[1175,44138+40]..[1175,44138+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1176,44189+10]..[1176,44189+36])
                                    pattern (lib/sentenceParser.ml[1176,44189+39]..[1176,44189+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[1176,44189+39]..[1176,44189+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1177,44232+10]..[1177,44232+38])
                                    pattern (lib/sentenceParser.ml[1177,44232+41]..[1177,44232+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1177,44232+41]..[1177,44232+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1178,44288+10]..[1178,44288+36])
                                    pattern (lib/sentenceParser.ml[1178,44288+39]..[1178,44288+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1178,44288+39]..[1178,44288+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1179,44340+10]..[1179,44340+36])
                                    pattern (lib/sentenceParser.ml[1179,44340+39]..[1179,44340+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1179,44340+39]..[1179,44340+52])
                                ]
                              expression (lib/sentenceParser.ml[1180,44394+12]..[1180,44394+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1180,44394+12]..[1180,44394+25])
                          ]
                          expression (lib/sentenceParser.ml[1181,44423+8]..[1214,45582+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1181,44423+12]..[1181,44423+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[1181,44423+12]..[1181,44423+14])
                                core_type (lib/sentenceParser.mly[39,44472+8]..[39,44472+32])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,44472+15]..[39,44472+32])
                                  [
                                    core_type (lib/sentenceParser.mly[39,44472+8]..[39,44472+14])
                                      Ptyp_constr "string" (lib/sentenceParser.mly[39,44472+8]..[39,44472+14])
                                      []
                                  ]
                                expression (lib/sentenceParser.ml[1185,44537+12]..[1185,44537+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1185,44537+12]..[1185,44537+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1185,44537+12]..[1185,44537+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1185,44537+22]..[1185,44537+24])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[1185,44537+22]..[1185,44537+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1186,44565+8]..[1214,45582+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1186,44565+12]..[1186,44565+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1186,44565+12]..[1186,44565+23])
                                  expression (lib/sentenceParser.ml[1186,44565+26]..[1186,44565+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[1186,44565+26]..[1186,44565+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1186,44565+26]..[1186,44565+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1186,44565+40]..[1186,44565+66])
                              ]
                              expression (lib/sentenceParser.ml[1187,44635+8]..[1214,45582+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1187,44635+12]..[1187,44635+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[1187,44635+12]..[1187,44635+21])
                                    expression (lib/sentenceParser.ml[1187,44635+24]..[1187,44635+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1187,44635+24]..[1187,44635+37])
                                ]
                                expression (lib/sentenceParser.ml[1188,44676+8]..[1214,45582+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1188,44676+12]..[1188,44676+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[1188,44676+12]..[1188,44676+19])
                                      expression (lib/sentenceParser.ml[1188,44676+22]..[1188,44676+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[1188,44676+22]..[1188,44676+33])
                                  ]
                                  expression (lib/sentenceParser.ml[1189,44713+8]..[1214,45582+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1189,44713+12]..[1189,44713+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[1189,44713+12]..[1189,44713+14])
                                        expression (lib/sentenceParser.ml[1190,44730+10]..[1206,45272+31])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1190,44730+14]..[1190,44730+16])
                                                Ppat_var "_1" (lib/sentenceParser.ml[1190,44730+14]..[1190,44730+16])
                                              expression (lib/sentenceParser.ml[1191,44749+12]..lib/sentenceParser.mly[119,44967+85])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[1191,44749+16]..[1191,44749+18])
                                                      Ppat_var "_1" (lib/sentenceParser.ml[1191,44749+16]..[1191,44749+18])
                                                    expression (lib/sentenceParser.mly[114,44802+8]..[114,44802+73])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[114,44802+15]..[114,44802+66])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[114,44802+16]..[114,44802+29])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[114,44802+16]..[114,44802+29])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[114,44802+30]..[114,44802+65])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[114,44802+31]..[114,44802+45])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[114,44802+31]..[114,44802+45])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[114,44802+46]..[114,44802+64])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[114,44802+47]..[114,44802+59])
Pexp_constant PConst_string("DEBUG:quid",(lib/sentenceParser.mly[114,44802+48]..[114,44802+58]),None)
                                                                      expression (lib/sentenceParser.mly[114,44802+61]..[114,44802+63])
Pexp_ident "_1" (lib/sentenceParser.mly[114,44802+61]..[114,44802+63])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[114,44802+69]..[114,44802+71])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[114,44802+69]..[114,44802+71])
                                                ]
                                                expression (lib/sentenceParser.mly[119,44967+8]..[119,44967+85])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser.mly[119,44967+15]..[119,44967+72])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[119,44967+16]..[119,44967+29])
                                                      Pexp_ident "print_endline" (lib/sentenceParser.mly[119,44967+16]..[119,44967+29])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[119,44967+30]..[119,44967+71])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser.mly[119,44967+31]..[119,44967+45])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[119,44967+31]..[119,44967+45])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser.mly[119,44967+46]..[119,44967+70])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[119,44967+47]..[119,44967+65])
                                                                    Pexp_constant PConst_string("DEBUG:sterm/quid",(lib/sentenceParser.mly[119,44967+48]..[119,44967+64]),None)
                                                                  expression (lib/sentenceParser.mly[119,44967+67]..[119,44967+69])
                                                                    Pexp_ident "_1" (lib/sentenceParser.mly[119,44967+67]..[119,44967+69])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[119,44967+74]..[119,44967+84])
                                                    Pexp_construct "SFactor" (lib/sentenceParser.mly[119,44967+74]..[119,44967+81])
                                                    Some
                                                      expression (lib/sentenceParser.mly[119,44967+82]..[119,44967+84])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[119,44967+82]..[119,44967+84])
                                          ]
                                          expression (lib/sentenceParser.ml[1202,45110+10]..[1206,45272+31])
                                            Pexp_constraint
                                            expression (lib/sentenceParser.mly[124,45153+10]..[124,45153+87])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[124,45153+17]..[124,45153+74])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[124,45153+18]..[124,45153+31])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[124,45153+18]..[124,45153+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[124,45153+32]..[124,45153+73])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[124,45153+33]..[124,45153+47])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[124,45153+33]..[124,45153+47])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[124,45153+48]..[124,45153+72])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[124,45153+49]..[124,45153+67])
                                                                Pexp_constant PConst_string("DEBUG:term/sterm",(lib/sentenceParser.mly[124,45153+50]..[124,45153+66]),None)
                                                              expression (lib/sentenceParser.mly[124,45153+69]..[124,45153+71])
                                                                Pexp_ident "_1" (lib/sentenceParser.mly[124,45153+69]..[124,45153+71])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[124,45153+76]..[124,45153+86])
                                                Pexp_construct "NFactor" (lib/sentenceParser.mly[124,45153+76]..[124,45153+83])
                                                Some
                                                  expression (lib/sentenceParser.mly[124,45153+84]..[124,45153+86])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[124,45153+84]..[124,45153+86])
                                            core_type (lib/sentenceParser.ml[1206,45272+14]..[1206,45272+29])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1206,45272+14]..[1206,45272+29])
                                              []
                                    ]
                                    expression (lib/sentenceParser.ml[1208,45315+8]..[1214,45582+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1209,45325+10]..[1209,45325+37])
                                          expression (lib/sentenceParser.ml[1209,45325+40]..[1209,45325+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1209,45325+40]..[1209,45325+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1210,45376+10]..[1210,45376+36])
                                          expression (lib/sentenceParser.ml[1210,45376+39]..[1210,45376+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[1210,45376+39]..[1210,45376+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1210,45376+39]..[1210,45376+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[1210,45376+48]..[1210,45376+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[1210,45376+48]..[1210,45376+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1211,45428+10]..[1211,45428+38])
                                          expression (lib/sentenceParser.ml[1211,45428+41]..[1211,45428+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[1211,45428+41]..[1211,45428+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1212,45480+10]..[1212,45480+36])
                                          expression (lib/sentenceParser.ml[1212,45480+39]..[1212,45480+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[1212,45480+39]..[1212,45480+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1213,45528+10]..[1213,45528+36])
                                          expression (lib/sentenceParser.ml[1213,45528+39]..[1213,45528+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1213,45528+39]..[1213,45528+52])
                                      ]
                                      None
                    expression (lib/sentenceParser.ml[1215,45594+6]..[1257,47147+10])
                      Pexp_fun
                      Nolabel
                      None
                      pattern (lib/sentenceParser.ml[1215,45594+11]..[1215,45594+22])
                        Ppat_var "_menhir_env" (lib/sentenceParser.ml[1215,45594+11]..[1215,45594+22])
                      expression (lib/sentenceParser.ml[1216,45620+8]..[1257,47147+9])
                        Pexp_let Nonrec
                        [
                          <def>
                            pattern (lib/sentenceParser.ml[1216,45620+12]..[1216,45620+25])
                              Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1216,45620+12]..[1216,45620+25])
                            expression (lib/sentenceParser.ml[1216,45620+28]..[1216,45620+67])
                              Pexp_field
                              expression (lib/sentenceParser.ml[1216,45620+28]..[1216,45620+39])
                                Pexp_ident "_menhir_env" (lib/sentenceParser.ml[1216,45620+28]..[1216,45620+39])
                              "MenhirLib.EngineTypes.stack" (lib/sentenceParser.ml[1216,45620+40]..[1216,45620+67])
                        ]
                        expression (lib/sentenceParser.ml[1217,45691+8]..[1257,47147+9])
                          Pexp_let Nonrec
                          [
                            <def>
                              pattern (lib/sentenceParser.ml[1217,45691+12]..[1223,45961+9])
                                Ppat_record Closed
                                [
                                  "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1218,45705+10]..[1218,45705+37])
                                    pattern (lib/sentenceParser.ml[1218,45705+40]..[1218,45705+49])
                                      Ppat_var "_menhir_s" (lib/sentenceParser.ml[1218,45705+40]..[1218,45705+49])
                                  "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1219,45756+10]..[1219,45756+36])
                                    pattern (lib/sentenceParser.ml[1219,45756+39]..[1219,45756+41])
                                      Ppat_var "_1" (lib/sentenceParser.ml[1219,45756+39]..[1219,45756+41])
                                  "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1220,45799+10]..[1220,45799+38])
                                    pattern (lib/sentenceParser.ml[1220,45799+41]..[1220,45799+54])
                                      Ppat_var "_startpos__1_" (lib/sentenceParser.ml[1220,45799+41]..[1220,45799+54])
                                  "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1221,45855+10]..[1221,45855+36])
                                    pattern (lib/sentenceParser.ml[1221,45855+39]..[1221,45855+50])
                                      Ppat_var "_endpos__1_" (lib/sentenceParser.ml[1221,45855+39]..[1221,45855+50])
                                  "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1222,45907+10]..[1222,45907+36])
                                    pattern (lib/sentenceParser.ml[1222,45907+39]..[1222,45907+52])
                                      Ppat_var "_menhir_stack" (lib/sentenceParser.ml[1222,45907+39]..[1222,45907+52])
                                ]
                              expression (lib/sentenceParser.ml[1223,45961+12]..[1223,45961+25])
                                Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1223,45961+12]..[1223,45961+25])
                          ]
                          expression (lib/sentenceParser.ml[1224,45990+8]..[1257,47147+9])
                            Pexp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1224,45990+12]..[1224,45990+14])
                                  Ppat_var "_1" (lib/sentenceParser.ml[1224,45990+12]..[1224,45990+14])
                                core_type (lib/sentenceParser.mly[39,46039+8]..[39,46039+32])
                                  Ptyp_constr "Positions.located" (lib/sentenceParser.mly[39,46039+15]..[39,46039+32])
                                  [
                                    core_type (lib/sentenceParser.mly[39,46039+8]..[39,46039+14])
                                      Ptyp_constr "string" (lib/sentenceParser.mly[39,46039+8]..[39,46039+14])
                                      []
                                  ]
                                expression (lib/sentenceParser.ml[1228,46104+12]..[1228,46104+24])
                                  Pexp_apply
                                  expression (lib/sentenceParser.ml[1228,46104+12]..[1228,46104+21])
                                    Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1228,46104+12]..[1228,46104+21])
                                  [
                                    <arg>
                                    Nolabel
                                      expression (lib/sentenceParser.ml[1228,46104+22]..[1228,46104+24])
                                        Pexp_ident "_1" (lib/sentenceParser.ml[1228,46104+22]..[1228,46104+24])
                                  ]
                            ]
                            expression (lib/sentenceParser.ml[1229,46132+8]..[1257,47147+9])
                              Pexp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1229,46132+12]..[1229,46132+23])
                                    Ppat_var "_endpos__0_" (lib/sentenceParser.ml[1229,46132+12]..[1229,46132+23])
                                  expression (lib/sentenceParser.ml[1229,46132+26]..[1229,46132+66])
                                    Pexp_field
                                    expression (lib/sentenceParser.ml[1229,46132+26]..[1229,46132+39])
                                      Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1229,46132+26]..[1229,46132+39])
                                    "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1229,46132+40]..[1229,46132+66])
                              ]
                              expression (lib/sentenceParser.ml[1230,46202+8]..[1257,47147+9])
                                Pexp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1230,46202+12]..[1230,46202+21])
                                      Ppat_var "_startpos" (lib/sentenceParser.ml[1230,46202+12]..[1230,46202+21])
                                    expression (lib/sentenceParser.ml[1230,46202+24]..[1230,46202+37])
                                      Pexp_ident "_startpos__1_" (lib/sentenceParser.ml[1230,46202+24]..[1230,46202+37])
                                ]
                                expression (lib/sentenceParser.ml[1231,46243+8]..[1257,47147+9])
                                  Pexp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1231,46243+12]..[1231,46243+19])
                                        Ppat_var "_endpos" (lib/sentenceParser.ml[1231,46243+12]..[1231,46243+19])
                                      expression (lib/sentenceParser.ml[1231,46243+22]..[1231,46243+33])
                                        Pexp_ident "_endpos__1_" (lib/sentenceParser.ml[1231,46243+22]..[1231,46243+33])
                                  ]
                                  expression (lib/sentenceParser.ml[1232,46280+8]..[1257,47147+9])
                                    Pexp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1232,46280+12]..[1232,46280+14])
                                          Ppat_var "_v" (lib/sentenceParser.ml[1232,46280+12]..[1232,46280+14])
                                        expression (lib/sentenceParser.ml[1233,46297+10]..[1249,46837+31])
                                          Pexp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1233,46297+14]..[1233,46297+16])
                                                Ppat_var "_1" (lib/sentenceParser.ml[1233,46297+14]..[1233,46297+16])
                                              expression (lib/sentenceParser.ml[1234,46316+12]..lib/sentenceParser.mly[120,46533+84])
                                                Pexp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[1234,46316+16]..[1234,46316+18])
                                                      Ppat_var "_1" (lib/sentenceParser.ml[1234,46316+16]..[1234,46316+18])
                                                    expression (lib/sentenceParser.mly[116,46369+8]..[116,46369+72])
                                                      Pexp_sequence
                                                      expression (lib/sentenceParser.mly[116,46369+15]..[116,46369+65])
                                                        Pexp_apply
                                                        expression (lib/sentenceParser.mly[116,46369+16]..[116,46369+29])
                                                          Pexp_ident "print_endline" (lib/sentenceParser.mly[116,46369+16]..[116,46369+29])
                                                        [
                                                          <arg>
                                                          Nolabel
                                                            expression (lib/sentenceParser.mly[116,46369+30]..[116,46369+64])
                                                              Pexp_apply
                                                              expression (lib/sentenceParser.mly[116,46369+31]..[116,46369+45])
                                                                Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[116,46369+31]..[116,46369+45])
                                                              [
                                                                <arg>
                                                                Nolabel
                                                                  expression (lib/sentenceParser.mly[116,46369+46]..[116,46369+63])
                                                                    Pexp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[116,46369+47]..[116,46369+58])
Pexp_constant PConst_string("DEBUG:lid",(lib/sentenceParser.mly[116,46369+48]..[116,46369+57]),None)
                                                                      expression (lib/sentenceParser.mly[116,46369+60]..[116,46369+62])
Pexp_ident "_1" (lib/sentenceParser.mly[116,46369+60]..[116,46369+62])
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[116,46369+68]..[116,46369+70])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[116,46369+68]..[116,46369+70])
                                                ]
                                                expression (lib/sentenceParser.mly[120,46533+8]..[120,46533+84])
                                                  Pexp_sequence
                                                  expression (lib/sentenceParser.mly[120,46533+15]..[120,46533+71])
                                                    Pexp_apply
                                                    expression (lib/sentenceParser.mly[120,46533+16]..[120,46533+29])
                                                      Pexp_ident "print_endline" (lib/sentenceParser.mly[120,46533+16]..[120,46533+29])
                                                    [
                                                      <arg>
                                                      Nolabel
                                                        expression (lib/sentenceParser.mly[120,46533+30]..[120,46533+70])
                                                          Pexp_apply
                                                          expression (lib/sentenceParser.mly[120,46533+31]..[120,46533+45])
                                                            Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[120,46533+31]..[120,46533+45])
                                                          [
                                                            <arg>
                                                            Nolabel
                                                              expression (lib/sentenceParser.mly[120,46533+46]..[120,46533+69])
                                                                Pexp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[120,46533+47]..[120,46533+64])
                                                                    Pexp_constant PConst_string("DEBUG:sterm/lid",(lib/sentenceParser.mly[120,46533+48]..[120,46533+63]),None)
                                                                  expression (lib/sentenceParser.mly[120,46533+66]..[120,46533+68])
                                                                    Pexp_ident "_1" (lib/sentenceParser.mly[120,46533+66]..[120,46533+68])
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[120,46533+73]..[120,46533+83])
                                                    Pexp_construct "SFactor" (lib/sentenceParser.mly[120,46533+73]..[120,46533+80])
                                                    Some
                                                      expression (lib/sentenceParser.mly[120,46533+81]..[120,46533+83])
                                                        Pexp_ident "_1" (lib/sentenceParser.mly[120,46533+81]..[120,46533+83])
                                          ]
                                          expression (lib/sentenceParser.ml[1245,46675+10]..[1249,46837+31])
                                            Pexp_constraint
                                            expression (lib/sentenceParser.mly[124,46718+10]..[124,46718+87])
                                              Pexp_sequence
                                              expression (lib/sentenceParser.mly[124,46718+17]..[124,46718+74])
                                                Pexp_apply
                                                expression (lib/sentenceParser.mly[124,46718+18]..[124,46718+31])
                                                  Pexp_ident "print_endline" (lib/sentenceParser.mly[124,46718+18]..[124,46718+31])
                                                [
                                                  <arg>
                                                  Nolabel
                                                    expression (lib/sentenceParser.mly[124,46718+32]..[124,46718+73])
                                                      Pexp_apply
                                                      expression (lib/sentenceParser.mly[124,46718+33]..[124,46718+47])
                                                        Pexp_ident "Batteries.dump" (lib/sentenceParser.mly[124,46718+33]..[124,46718+47])
                                                      [
                                                        <arg>
                                                        Nolabel
                                                          expression (lib/sentenceParser.mly[124,46718+48]..[124,46718+72])
                                                            Pexp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[124,46718+49]..[124,46718+67])
                                                                Pexp_constant PConst_string("DEBUG:term/sterm",(lib/sentenceParser.mly[124,46718+50]..[124,46718+66]),None)
                                                              expression (lib/sentenceParser.mly[124,46718+69]..[124,46718+71])
                                                                Pexp_ident "_1" (lib/sentenceParser.mly[124,46718+69]..[124,46718+71])
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[124,46718+76]..[124,46718+86])
                                                Pexp_construct "NFactor" (lib/sentenceParser.mly[124,46718+76]..[124,46718+83])
                                                Some
                                                  expression (lib/sentenceParser.mly[124,46718+84]..[124,46718+86])
                                                    Pexp_ident "_1" (lib/sentenceParser.mly[124,46718+84]..[124,46718+86])
                                            core_type (lib/sentenceParser.ml[1249,46837+14]..[1249,46837+29])
                                              Ptyp_constr "Syntax.myfactor" (lib/sentenceParser.ml[1249,46837+14]..[1249,46837+29])
                                              []
                                    ]
                                    expression (lib/sentenceParser.ml[1251,46880+8]..[1257,47147+9])
                                      Pexp_record
                                      [
                                        "MenhirLib.EngineTypes.state" (lib/sentenceParser.ml[1252,46890+10]..[1252,46890+37])
                                          expression (lib/sentenceParser.ml[1252,46890+40]..[1252,46890+49])
                                            Pexp_ident "_menhir_s" (lib/sentenceParser.ml[1252,46890+40]..[1252,46890+49])
                                        "MenhirLib.EngineTypes.semv" (lib/sentenceParser.ml[1253,46941+10]..[1253,46941+36])
                                          expression (lib/sentenceParser.ml[1253,46941+39]..[1253,46941+50])
                                            Pexp_apply
                                            expression (lib/sentenceParser.ml[1253,46941+39]..[1253,46941+47])
                                              Pexp_ident "Obj.repr" (lib/sentenceParser.ml[1253,46941+39]..[1253,46941+47])
                                            [
                                              <arg>
                                              Nolabel
                                                expression (lib/sentenceParser.ml[1253,46941+48]..[1253,46941+50])
                                                  Pexp_ident "_v" (lib/sentenceParser.ml[1253,46941+48]..[1253,46941+50])
                                            ]
                                        "MenhirLib.EngineTypes.startp" (lib/sentenceParser.ml[1254,46993+10]..[1254,46993+38])
                                          expression (lib/sentenceParser.ml[1254,46993+41]..[1254,46993+50])
                                            Pexp_ident "_startpos" (lib/sentenceParser.ml[1254,46993+41]..[1254,46993+50])
                                        "MenhirLib.EngineTypes.endp" (lib/sentenceParser.ml[1255,47045+10]..[1255,47045+36])
                                          expression (lib/sentenceParser.ml[1255,47045+39]..[1255,47045+46])
                                            Pexp_ident "_endpos" (lib/sentenceParser.ml[1255,47045+39]..[1255,47045+46])
                                        "MenhirLib.EngineTypes.next" (lib/sentenceParser.ml[1256,47093+10]..[1256,47093+36])
                                          expression (lib/sentenceParser.ml[1256,47093+39]..[1256,47093+52])
                                            Pexp_ident "_menhir_stack" (lib/sentenceParser.ml[1256,47093+39]..[1256,47093+52])
                                      ]
                                      None
                  ]
              <def>
                pattern (lib/sentenceParser.ml[1260,47169+6]..[1260,47169+11])
                  Ppat_var "trace" (lib/sentenceParser.ml[1260,47169+6]..[1260,47169+11])
                expression (lib/sentenceParser.ml[1261,47183+4]..[1310,49142+7])
                  Pexp_construct "Some" (lib/sentenceParser.ml[1261,47183+4]..[1261,47183+8])
                  Some
                    expression (lib/sentenceParser.ml[1261,47183+9]..[1310,49142+7])
                      Pexp_tuple
                      [
                        expression (lib/sentenceParser.ml[1261,47183+10]..[1279,47453+6])
                          Pexp_array
                          [
                            expression (lib/sentenceParser.ml[1262,47196+6]..[1262,47196+13])
                              Pexp_constant PConst_string("error",(lib/sentenceParser.ml[1262,47196+7]..[1262,47196+12]),None)
                            expression (lib/sentenceParser.ml[1263,47211+6]..[1263,47211+13])
                              Pexp_constant PConst_string("Tchar",(lib/sentenceParser.ml[1263,47211+7]..[1263,47211+12]),None)
                            expression (lib/sentenceParser.ml[1264,47226+6]..[1264,47226+12])
                              Pexp_constant PConst_string("STAR",(lib/sentenceParser.ml[1264,47226+7]..[1264,47226+11]),None)
                            expression (lib/sentenceParser.ml[1265,47240+6]..[1265,47240+14])
                              Pexp_constant PConst_string("RPAREN",(lib/sentenceParser.ml[1265,47240+7]..[1265,47240+13]),None)
                            expression (lib/sentenceParser.ml[1266,47256+6]..[1266,47256+13])
                              Pexp_constant PConst_string("REGEX",(lib/sentenceParser.ml[1266,47256+7]..[1266,47256+12]),None)
                            expression (lib/sentenceParser.ml[1267,47271+6]..[1267,47271+16])
                              Pexp_constant PConst_string("QUESTION",(lib/sentenceParser.ml[1267,47271+7]..[1267,47271+15]),None)
                            expression (lib/sentenceParser.ml[1268,47289+6]..[1268,47289+11])
                              Pexp_constant PConst_string("QID",(lib/sentenceParser.ml[1268,47289+7]..[1268,47289+10]),None)
                            expression (lib/sentenceParser.ml[1269,47302+6]..[1269,47302+12])
                              Pexp_constant PConst_string("PLUS",(lib/sentenceParser.ml[1269,47302+7]..[1269,47302+11]),None)
                            expression (lib/sentenceParser.ml[1270,47316+6]..[1270,47316+15])
                              Pexp_constant PConst_string("NEWLINE",(lib/sentenceParser.ml[1270,47316+7]..[1270,47316+14]),None)
                            expression (lib/sentenceParser.ml[1271,47333+6]..[1271,47333+14])
                              Pexp_constant PConst_string("LPAREN",(lib/sentenceParser.ml[1271,47333+7]..[1271,47333+13]),None)
                            expression (lib/sentenceParser.ml[1272,47349+6]..[1272,47349+11])
                              Pexp_constant PConst_string("LID",(lib/sentenceParser.ml[1272,47349+7]..[1272,47349+10]),None)
                            expression (lib/sentenceParser.ml[1273,47362+6]..[1273,47362+11])
                              Pexp_constant PConst_string("EOF",(lib/sentenceParser.ml[1273,47362+7]..[1273,47362+10]),None)
                            expression (lib/sentenceParser.ml[1274,47375+6]..[1274,47375+12])
                              Pexp_constant PConst_string("DASH",(lib/sentenceParser.ml[1274,47375+7]..[1274,47375+11]),None)
                            expression (lib/sentenceParser.ml[1275,47389+6]..[1275,47389+23])
                              Pexp_constant PConst_string("COLONCOLONEQUAL",(lib/sentenceParser.ml[1275,47389+7]..[1275,47389+22]),None)
                            expression (lib/sentenceParser.ml[1276,47414+6]..[1276,47414+13])
                              Pexp_constant PConst_string("CARET",(lib/sentenceParser.ml[1276,47414+7]..[1276,47414+12]),None)
                            expression (lib/sentenceParser.ml[1277,47429+6]..[1277,47429+11])
                              Pexp_constant PConst_string("BAR",(lib/sentenceParser.ml[1277,47429+7]..[1277,47429+10]),None)
                            expression (lib/sentenceParser.ml[1278,47442+6]..[1278,47442+9])
                              Pexp_constant PConst_string("#",(lib/sentenceParser.ml[1278,47442+7]..[1278,47442+8]),None)
                          ]
                        expression (lib/sentenceParser.ml[1279,47453+8]..[1310,49142+6])
                          Pexp_array
                          [
                            expression (lib/sentenceParser.ml[1280,47464+6]..[1280,47464+17])
                              Pexp_constant PConst_string("Accepting",(lib/sentenceParser.ml[1280,47464+7]..[1280,47464+16]),None)
                            expression (lib/sentenceParser.ml[1281,47483+6]..[1281,47483+86])
                              Pexp_constant PConst_string("Reducing production alternation -> alternation BAR list(NEWLINE) concatenation",(lib/sentenceParser.ml[1281,47483+7]..[1281,47483+85]),None)
                            expression (lib/sentenceParser.ml[1282,47571+6]..[1282,47571+56])
                              Pexp_constant PConst_string("Reducing production alternation -> concatenation",(lib/sentenceParser.ml[1282,47571+7]..[1282,47571+55]),None)
                            expression (lib/sentenceParser.ml[1283,47629+6]..[1283,47629+59])
                              Pexp_constant PConst_string("Reducing production char_class -> CARET char_class1",(lib/sentenceParser.ml[1283,47629+7]..[1283,47629+58]),None)
                            expression (lib/sentenceParser.ml[1284,47690+6]..[1284,47690+53])
                              Pexp_constant PConst_string("Reducing production char_class -> char_class1",(lib/sentenceParser.ml[1284,47690+7]..[1284,47690+52]),None)
                            expression (lib/sentenceParser.ml[1285,47745+6]..[1285,47745+59])
                              Pexp_constant PConst_string("Reducing production char_class1 -> Tchar DASH Tchar",(lib/sentenceParser.ml[1285,47745+7]..[1285,47745+58]),None)
                            expression (lib/sentenceParser.ml[1286,47806+6]..[1286,47806+60])
                              Pexp_constant PConst_string("Reducing production char_class1 -> char_class1 Tchar",(lib/sentenceParser.ml[1286,47806+7]..[1286,47806+59]),None)
                            expression (lib/sentenceParser.ml[1287,47868+6]..[1287,47868+48])
                              Pexp_constant PConst_string("Reducing production char_class1 -> Tchar",(lib/sentenceParser.ml[1287,47868+7]..[1287,47868+47]),None)
                            expression (lib/sentenceParser.ml[1288,47918+6]..[1288,47918+65])
                              Pexp_constant PConst_string("Reducing production concatenation -> concatenation factor",(lib/sentenceParser.ml[1288,47918+7]..[1288,47918+64]),None)
                            expression (lib/sentenceParser.ml[1289,47985+6]..[1289,47985+51])
                              Pexp_constant PConst_string("Reducing production concatenation -> factor",(lib/sentenceParser.ml[1289,47985+7]..[1289,47985+50]),None)
                            expression (lib/sentenceParser.ml[1290,48038+6]..[1290,48038+47])
                              Pexp_constant PConst_string("Reducing production factor -> term PLUS",(lib/sentenceParser.ml[1290,48038+7]..[1290,48038+46]),None)
                            expression (lib/sentenceParser.ml[1291,48087+6]..[1291,48087+51])
                              Pexp_constant PConst_string("Reducing production factor -> term QUESTION",(lib/sentenceParser.ml[1291,48087+7]..[1291,48087+50]),None)
                            expression (lib/sentenceParser.ml[1292,48140+6]..[1292,48140+47])
                              Pexp_constant PConst_string("Reducing production factor -> term STAR",(lib/sentenceParser.ml[1292,48140+7]..[1292,48140+46]),None)
                            expression (lib/sentenceParser.ml[1293,48189+6]..[1293,48189+42])
                              Pexp_constant PConst_string("Reducing production factor -> term",(lib/sentenceParser.ml[1293,48189+7]..[1293,48189+41]),None)
                            expression (lib/sentenceParser.ml[1294,48233+6]..[1294,48233+53])
                              Pexp_constant PConst_string("Reducing production grammar -> rules postlude",(lib/sentenceParser.ml[1294,48233+7]..[1294,48233+52]),None)
                            expression (lib/sentenceParser.ml[1295,48288+6]..[1295,48288+44])
                              Pexp_constant PConst_string("Reducing production list(NEWLINE) ->",(lib/sentenceParser.ml[1295,48288+7]..[1295,48288+43]),None)
                            expression (lib/sentenceParser.ml[1296,48334+6]..[1296,48334+66])
                              Pexp_constant PConst_string("Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)",(lib/sentenceParser.ml[1296,48334+7]..[1296,48334+65]),None)
                            expression (lib/sentenceParser.ml[1297,48402+6]..[1297,48402+61])
                              Pexp_constant PConst_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE",(lib/sentenceParser.ml[1297,48402+7]..[1297,48402+60]),None)
                            expression (lib/sentenceParser.ml[1298,48465+6]..[1298,48465+84])
                              Pexp_constant PConst_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)",(lib/sentenceParser.ml[1298,48465+7]..[1298,48465+83]),None)
                            expression (lib/sentenceParser.ml[1299,48551+6]..[1299,48551+57])
                              Pexp_constant PConst_string("Reducing production postlude -> list(NEWLINE) EOF",(lib/sentenceParser.ml[1299,48551+7]..[1299,48551+56]),None)
                            expression (lib/sentenceParser.ml[1300,48610+6]..[1300,48610+46])
                              Pexp_constant PConst_string("Reducing production rhs -> alternation",(lib/sentenceParser.ml[1300,48610+7]..[1300,48610+45]),None)
                            expression (lib/sentenceParser.ml[1301,48658+6]..[1301,48658+59])
                              Pexp_constant PConst_string("Reducing production rule -> LID COLONCOLONEQUAL rhs",(lib/sentenceParser.ml[1301,48658+7]..[1301,48658+58]),None)
                            expression (lib/sentenceParser.ml[1302,48719+6]..[1302,48719+70])
                              Pexp_constant PConst_string("Reducing production rules -> rules nonempty_list(NEWLINE) rule",(lib/sentenceParser.ml[1302,48719+7]..[1302,48719+69]),None)
                            expression (lib/sentenceParser.ml[1303,48791+6]..[1303,48791+64])
                              Pexp_constant PConst_string("Reducing production rules -> nonempty_list(NEWLINE) rule",(lib/sentenceParser.ml[1303,48791+7]..[1303,48791+63]),None)
                            expression (lib/sentenceParser.ml[1304,48857+6]..[1304,48857+41])
                              Pexp_constant PConst_string("Reducing production rules -> rule",(lib/sentenceParser.ml[1304,48857+7]..[1304,48857+40]),None)
                            expression (lib/sentenceParser.ml[1305,48900+6]..[1305,48900+67])
                              Pexp_constant PConst_string("Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN",(lib/sentenceParser.ml[1305,48900+7]..[1305,48900+66]),None)
                            expression (lib/sentenceParser.ml[1306,48969+6]..[1306,48969+46])
                              Pexp_constant PConst_string("Reducing production term -> char_class",(lib/sentenceParser.ml[1306,48969+7]..[1306,48969+45]),None)
                            expression (lib/sentenceParser.ml[1307,49017+6]..[1307,49017+41])
                              Pexp_constant PConst_string("Reducing production term -> REGEX",(lib/sentenceParser.ml[1307,49017+7]..[1307,49017+40]),None)
                            expression (lib/sentenceParser.ml[1308,49060+6]..[1308,49060+39])
                              Pexp_constant PConst_string("Reducing production term -> QID",(lib/sentenceParser.ml[1308,49060+7]..[1308,49060+38]),None)
                            expression (lib/sentenceParser.ml[1309,49101+6]..[1309,49101+39])
                              Pexp_constant PConst_string("Reducing production term -> LID",(lib/sentenceParser.ml[1309,49101+7]..[1309,49101+38]),None)
                          ]
                      ]
            ]
        ]
  structure_item (lib/sentenceParser.ml[1314,49158+0]..[1322,49324+3])
    Pstr_module
    "MenhirInterpreter" (lib/sentenceParser.ml[1314,49158+7]..[1314,49158+24])
      module_expr (lib/sentenceParser.ml[1314,49158+27]..[1322,49324+3])
        Pmod_structure
        [
          structure_item (lib/sentenceParser.ml[1316,49195+2]..[1316,49195+65])
            Pstr_module
            "ET" (lib/sentenceParser.ml[1316,49195+9]..[1316,49195+11])
              module_expr (lib/sentenceParser.ml[1316,49195+14]..[1316,49195+65])
                Pmod_apply
                module_expr (lib/sentenceParser.ml[1316,49195+14]..[1316,49195+56])
                  Pmod_ident "MenhirLib.TableInterpreter.MakeEngineTable" (lib/sentenceParser.ml[1316,49195+14]..[1316,49195+56])
                module_expr (lib/sentenceParser.ml[1316,49195+58]..[1316,49195+64])
                  Pmod_ident "Tables" (lib/sentenceParser.ml[1316,49195+58]..[1316,49195+64])
          structure_item (lib/sentenceParser.ml[1318,49264+2]..[1318,49264+40])
            Pstr_module
            "TI" (lib/sentenceParser.ml[1318,49264+9]..[1318,49264+11])
              module_expr (lib/sentenceParser.ml[1318,49264+14]..[1318,49264+40])
                Pmod_apply
                module_expr (lib/sentenceParser.ml[1318,49264+14]..[1318,49264+35])
                  Pmod_ident "MenhirLib.Engine.Make" (lib/sentenceParser.ml[1318,49264+14]..[1318,49264+35])
                module_expr (lib/sentenceParser.ml[1318,49264+37]..[1318,49264+39])
                  Pmod_ident "ET" (lib/sentenceParser.ml[1318,49264+37]..[1318,49264+39])
          structure_item (lib/sentenceParser.ml[1320,49308+2]..[1320,49308+12])
            Pstr_include            module_expr (lib/sentenceParser.ml[1320,49308+10]..[1320,49308+12])
              Pmod_ident "TI" (lib/sentenceParser.ml[1320,49308+10]..[1320,49308+12])
        ]
  structure_item (lib/sentenceParser.ml[1324,49329+0]..[1326,49365+91])
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1324,49329+4]..[1324,49329+11])
          Ppat_var "grammar" (lib/sentenceParser.ml[1324,49329+4]..[1324,49329+11])
        expression (lib/sentenceParser.ml[1325,49343+2]..[1326,49365+91])
          Pexp_fun
          Nolabel
          None
          pattern (lib/sentenceParser.ml[1325,49343+6]..[1325,49343+11])
            Ppat_var "lexer" (lib/sentenceParser.ml[1325,49343+6]..[1325,49343+11])
          expression (lib/sentenceParser.ml[1325,49343+12]..[1326,49365+91]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (lib/sentenceParser.ml[1325,49343+12]..[1325,49343+18])
              Ppat_var "lexbuf" (lib/sentenceParser.ml[1325,49343+12]..[1325,49343+18])
            expression (lib/sentenceParser.ml[1326,49365+4]..[1326,49365+91])
              Pexp_constraint
              expression (lib/sentenceParser.ml[1326,49365+5]..[1326,49365+63])
                Pexp_apply
                expression (lib/sentenceParser.ml[1326,49365+5]..[1326,49365+14])
                  Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1326,49365+5]..[1326,49365+14])
                [
                  <arg>
                  Nolabel
                    expression (lib/sentenceParser.ml[1326,49365+15]..[1326,49365+63])
                      Pexp_apply
                      expression (lib/sentenceParser.ml[1326,49365+16]..[1326,49365+39])
                        Pexp_ident "MenhirInterpreter.entry" (lib/sentenceParser.ml[1326,49365+16]..[1326,49365+39])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser.ml[1326,49365+40]..[1326,49365+47])
                            Pexp_variant "Legacy"
                            None
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser.ml[1326,49365+48]..[1326,49365+49])
                            Pexp_constant PConst_int (0,None)
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser.ml[1326,49365+50]..[1326,49365+55])
                            Pexp_ident "lexer" (lib/sentenceParser.ml[1326,49365+50]..[1326,49365+55])
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser.ml[1326,49365+56]..[1326,49365+62])
                            Pexp_ident "lexbuf" (lib/sentenceParser.ml[1326,49365+56]..[1326,49365+62])
                      ]
                ]
              core_type (lib/sentenceParser.ml[1326,49365+67]..[1326,49365+89])
                Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser.ml[1326,49365+67]..[1326,49365+89])
                []
    ]
  structure_item (lib/sentenceParser.ml[1328,49458+0]..[1334,49655+3])
    Pstr_module
    "Incremental" (lib/sentenceParser.ml[1328,49458+7]..[1328,49458+18])
      module_expr (lib/sentenceParser.ml[1328,49458+21]..[1334,49655+3])
        Pmod_structure
        [
          structure_item (lib/sentenceParser.ml[1330,49489+2]..[1332,49533+118])
            Pstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[1330,49489+6]..[1330,49489+13])
                  Ppat_var "grammar" (lib/sentenceParser.ml[1330,49489+6]..[1330,49489+13])
                expression (lib/sentenceParser.ml[1331,49505+4]..[1332,49533+118])
                  Pexp_fun
                  Nolabel
                  None
                  pattern (lib/sentenceParser.ml[1331,49505+8]..[1331,49505+24])
                    Ppat_var "initial_position" (lib/sentenceParser.ml[1331,49505+8]..[1331,49505+24])
                  expression (lib/sentenceParser.ml[1332,49533+6]..[1332,49533+118])
                    Pexp_constraint
                    expression (lib/sentenceParser.ml[1332,49533+7]..[1332,49533+61])
                      Pexp_apply
                      expression (lib/sentenceParser.ml[1332,49533+7]..[1332,49533+16])
                        Pexp_ident "Obj.magic" (lib/sentenceParser.ml[1332,49533+7]..[1332,49533+16])
                      [
                        <arg>
                        Nolabel
                          expression (lib/sentenceParser.ml[1332,49533+17]..[1332,49533+61])
                            Pexp_apply
                            expression (lib/sentenceParser.ml[1332,49533+18]..[1332,49533+41])
                              Pexp_ident "MenhirInterpreter.start" (lib/sentenceParser.ml[1332,49533+18]..[1332,49533+41])
                            [
                              <arg>
                              Nolabel
                                expression (lib/sentenceParser.ml[1332,49533+42]..[1332,49533+43])
                                  Pexp_constant PConst_int (0,None)
                              <arg>
                              Nolabel
                                expression (lib/sentenceParser.ml[1332,49533+44]..[1332,49533+60])
                                  Pexp_ident "initial_position" (lib/sentenceParser.ml[1332,49533+44]..[1332,49533+60])
                            ]
                      ]
                    core_type (lib/sentenceParser.ml[1332,49533+64]..[1332,49533+117])
                      Ptyp_constr "MenhirInterpreter.checkpoint" (lib/sentenceParser.ml[1332,49533+89]..[1332,49533+117])
                      [
                        core_type (lib/sentenceParser.ml[1332,49533+65]..[1332,49533+87])
                          Ptyp_constr "Syntax.partial_grammar" (lib/sentenceParser.ml[1332,49533+65]..[1332,49533+87])
                          []
                      ]
            ]
        ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
            Pexp_ident "Ppx_inline_test_lib.unset_lib" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                Pexp_constant PConst_string("gbnf_parser",(lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
            Pexp_ident "Expect_test_collector.Current_file.unset" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                Pexp_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
            Pexp_ident "Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                Pexp_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                None
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
    Pstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Ppat_construct "()" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          Pexp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
            Pexp_ident "Ppx_module_timer_runtime.record_until" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          [
            <arg>
            Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
                Pexp_ident "Ppx_module_timer_runtime.__MODULE__" (lib/sentenceParser.ml[1334,49655+3]..[1334,49655+3]) ghost
          ]
    ]
]

[@@@ocaml.ppx.context
  {
    tool_name = "ppx_driver";
    include_dirs = [];
    load_path = [];
    open_modules = [];
    for_package = None;
    debug = false;
    use_threads = false;
    use_vmthreads = false;
    recursive_types = false;
    principal = false;
    transparent_modules = false;
    unboxed_types = false;
    unsafe_string = false;
    cookies = [("inline_tests", "enabled"); ("library-name", "gbnf_parser")]
  }]
let () =
  Ppx_module_timer_runtime.record_start Ppx_module_timer_runtime.__MODULE__
let () =
  Ppx_bench_lib.Benchmark_accumulator.Current_libname.set "gbnf_parser"
let () =
  Expect_test_collector.Current_file.set
    ~absolute_filename:"lib/sentenceParser.ml"
let () =
  Ppx_inline_test_lib.set_lib_and_partition "gbnf_parser" "sentenceParser.ml"
let () = MenhirLib.StaticVersion.require_20230608
module MenhirBasics =
  struct
    exception Error 
    let _eRR _s = raise Error
    type token =
      | Tchar of int 
      | STAR 
      | RPAREN 
      | REGEX of string Positions.located 
      | QUESTION 
      | QID of string Positions.located 
      | PLUS 
      | NEWLINE 
      | LPAREN 
      | LID of string Positions.located 
      | EOF 
      | DASH 
      | COLONCOLONEQUAL 
      | CARET 
      | BAR 
  end
include MenhirBasics
open Syntax
module Tables =
  struct
    include MenhirBasics
    let token2terminal : token -> int =
      fun _tok ->
        match _tok with
        | BAR -> 15
        | CARET -> 14
        | COLONCOLONEQUAL -> 13
        | DASH -> 12
        | EOF -> 11
        | LID _ -> 10
        | LPAREN -> 9
        | NEWLINE -> 8
        | PLUS -> 7
        | QID _ -> 6
        | QUESTION -> 5
        | REGEX _ -> 4
        | RPAREN -> 3
        | STAR -> 2
        | Tchar _ -> 1
    and error_terminal = 0
    and token2value : token -> Obj.t =
      fun _tok ->
        match _tok with
        | BAR -> Obj.repr ()
        | CARET -> Obj.repr ()
        | COLONCOLONEQUAL -> Obj.repr ()
        | DASH -> Obj.repr ()
        | EOF -> Obj.repr ()
        | LID _v -> Obj.repr _v
        | LPAREN -> Obj.repr ()
        | NEWLINE -> Obj.repr ()
        | PLUS -> Obj.repr ()
        | QID _v -> Obj.repr _v
        | QUESTION -> Obj.repr ()
        | REGEX _v -> Obj.repr _v
        | RPAREN -> Obj.repr ()
        | STAR -> Obj.repr ()
        | Tchar _v -> Obj.repr _v
    and default_reduction =
      (8,
        "\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001")
    and error =
      (16,
        "\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000")
    and start = 1
    and action =
      ((8,
         "p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000"),
        (8,
          "\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z"))
    and lhs = (4, "\r\220\203\187\170\153\153\135veC\"!\017\017")
    and goto =
      ((8,
         "\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000"),
        (8,
          "\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029"))
    and semantic_action =
      [|((fun _menhir_env ->
            let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
            let { MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    { MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        { MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            { MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack }
                          }
                      }
                  }
              = _menhir_stack in
            let _4 : Syntax.myfactor = Obj.magic _4 in
            let _3 : unit list = Obj.magic _3 in
            let _2 : unit = Obj.magic _2 in
            let _1 : Syntax.myfactor = Obj.magic _1 in
            let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
            let _startpos = _startpos__1_ in
            let _endpos = _endpos__4_ in
            let _v : Syntax.myfactor = NFactor _1 in
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = (Obj.repr _v);
              MenhirLib.EngineTypes.startp = _startpos;
              MenhirLib.EngineTypes.endp = _endpos;
              MenhirLib.EngineTypes.next = _menhir_stack
            }));((fun _menhir_env ->
                    let _menhir_stack =
                      _menhir_env.MenhirLib.EngineTypes.stack in
                    let { MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack }
                      = _menhir_stack in
                    let _1 : Syntax.myfactor = Obj.magic _1 in
                    let _endpos__0_ =
                      _menhir_stack.MenhirLib.EngineTypes.endp in
                    let _startpos = _startpos__1_ in
                    let _endpos = _endpos__1_ in
                    let _v : Syntax.myfactor =
                      print_endline (Batteries.dump ("DEBUG:alt", _1));
                      NFactor _1 in
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = (Obj.repr _v);
                      MenhirLib.EngineTypes.startp = _startpos;
                      MenhirLib.EngineTypes.endp = _endpos;
                      MenhirLib.EngineTypes.next = _menhir_stack
                    }));((fun _menhir_env ->
                            let _menhir_stack =
                              _menhir_env.MenhirLib.EngineTypes.stack in
                            let { MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_;
                                      MenhirLib.EngineTypes.next =
                                        _menhir_stack
                                      }
                                  }
                              = _menhir_stack in
                            let _2 : Syntax.myfactor = Obj.magic _2 in
                            let _1 : unit = Obj.magic _1 in
                            let _endpos__0_ =
                              _menhir_stack.MenhirLib.EngineTypes.endp in
                            let _startpos = _startpos__1_ in
                            let _endpos = _endpos__2_ in
                            let _v : Syntax.myfactor =
                              print_endline
                                (Batteries.dump ("DEBUG:ccrs", _2));
                              NFactor _2 in
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = (Obj.repr _v);
                              MenhirLib.EngineTypes.startp = _startpos;
                              MenhirLib.EngineTypes.endp = _endpos;
                              MenhirLib.EngineTypes.next = _menhir_stack
                            }));((fun _menhir_env ->
                                    let _menhir_stack =
                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                    let {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack
                                          }
                                      = _menhir_stack in
                                    let _1 : Syntax.myfactor = Obj.magic _1 in
                                    let _endpos__0_ =
                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                    let _startpos = _startpos__1_ in
                                    let _endpos = _endpos__1_ in
                                    let _v : Syntax.myfactor =
                                      print_endline
                                        (Batteries.dump ("DEBUG:cc2rs", _1));
                                      CharClass in
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv =
                                        (Obj.repr _v);
                                      MenhirLib.EngineTypes.startp =
                                        _startpos;
                                      MenhirLib.EngineTypes.endp = _endpos;
                                      MenhirLib.EngineTypes.next =
                                        _menhir_stack
                                    }));((fun _menhir_env ->
                                            let _menhir_stack =
                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                            let {
                                                  MenhirLib.EngineTypes.state
                                                    = _;
                                                  MenhirLib.EngineTypes.semv
                                                    = _3;
                                                  MenhirLib.EngineTypes.startp
                                                    = _startpos__3_;
                                                  MenhirLib.EngineTypes.endp
                                                    = _endpos__3_;
                                                  MenhirLib.EngineTypes.next
                                                    =
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _;
                                                      MenhirLib.EngineTypes.semv
                                                        = _2;
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos__2_;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos__2_;
                                                      MenhirLib.EngineTypes.next
                                                        =
                                                        {
                                                          MenhirLib.EngineTypes.state
                                                            = _menhir_s;
                                                          MenhirLib.EngineTypes.semv
                                                            = _1;
                                                          MenhirLib.EngineTypes.startp
                                                            = _startpos__1_;
                                                          MenhirLib.EngineTypes.endp
                                                            = _endpos__1_;
                                                          MenhirLib.EngineTypes.next
                                                            = _menhir_stack
                                                          }
                                                      }
                                                  }
                                              = _menhir_stack in
                                            let _3 : int = Obj.magic _3 in
                                            let _2 : unit = Obj.magic _2 in
                                            let _1 : int = Obj.magic _1 in
                                            let _endpos__0_ =
                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                            let _startpos = _startpos__1_ in
                                            let _endpos = _endpos__3_ in
                                            let _v : Syntax.myfactor =
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:cc3rs", _1, _2));
                                              CharInt _1 in
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv =
                                                (Obj.repr _v);
                                              MenhirLib.EngineTypes.startp =
                                                _startpos;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack
                                            }));((fun _menhir_env ->
                                                    let _menhir_stack =
                                                      _menhir_env.MenhirLib.EngineTypes.stack in
                                                    let {
                                                          MenhirLib.EngineTypes.state
                                                            = _;
                                                          MenhirLib.EngineTypes.semv
                                                            = _2;
                                                          MenhirLib.EngineTypes.startp
                                                            = _startpos__2_;
                                                          MenhirLib.EngineTypes.endp
                                                            = _endpos__2_;
                                                          MenhirLib.EngineTypes.next
                                                            =
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                = _1;
                                                              MenhirLib.EngineTypes.startp
                                                                =
                                                                _startpos__1_;
                                                              MenhirLib.EngineTypes.endp
                                                                = _endpos__1_;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                              }
                                                          }
                                                      = _menhir_stack in
                                                    let _2 : int =
                                                      Obj.magic _2 in
                                                    let _1 : Syntax.myfactor
                                                      = Obj.magic _1 in
                                                    let _endpos__0_ =
                                                      _menhir_stack.MenhirLib.EngineTypes.endp in
                                                    let _startpos =
                                                      _startpos__1_ in
                                                    let _endpos = _endpos__2_ in
                                                    let _v : Syntax.myfactor
                                                      =
                                                      print_endline
                                                        (Batteries.dump
                                                           ("DEBUG:cc4rs",
                                                             _1));
                                                      NFactor _1 in
                                                    {
                                                      MenhirLib.EngineTypes.state
                                                        = _menhir_s;
                                                      MenhirLib.EngineTypes.semv
                                                        = (Obj.repr _v);
                                                      MenhirLib.EngineTypes.startp
                                                        = _startpos;
                                                      MenhirLib.EngineTypes.endp
                                                        = _endpos;
                                                      MenhirLib.EngineTypes.next
                                                        = _menhir_stack
                                                    }));((fun _menhir_env ->
                                                            let _menhir_stack
                                                              =
                                                              _menhir_env.MenhirLib.EngineTypes.stack in
                                                            let {
                                                                  MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                  MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                  MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                  MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                  MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }
                                                              = _menhir_stack in
                                                            let _1 : 
                                                              int =
                                                              Obj.magic _1 in
                                                            let _endpos__0_ =
                                                              _menhir_stack.MenhirLib.EngineTypes.endp in
                                                            let _startpos =
                                                              _startpos__1_ in
                                                            let _endpos =
                                                              _endpos__1_ in
                                                            let _v :
                                                              Syntax.myfactor
                                                              =
                                                              print_endline
                                                                (Batteries.dump
                                                                   ("DEBUG:cc5rs",
                                                                    _1));
                                                              CharInt _1 in
                                                            {
                                                              MenhirLib.EngineTypes.state
                                                                = _menhir_s;
                                                              MenhirLib.EngineTypes.semv
                                                                =
                                                                (Obj.repr _v);
                                                              MenhirLib.EngineTypes.startp
                                                                = _startpos;
                                                              MenhirLib.EngineTypes.endp
                                                                = _endpos;
                                                              MenhirLib.EngineTypes.next
                                                                =
                                                                _menhir_stack
                                                            }));((fun
                                                                    _menhir_env
                                                                    ->
                                                                    let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                    let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _2;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__2_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__2_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                    let _2 :
                                                                    Syntax.myfactor
                                                                    =
                                                                    Obj.magic
                                                                    _2 in
                                                                    let _1 :
                                                                    Syntax.myfactor
                                                                    =
                                                                    Obj.magic
                                                                    _1 in
                                                                    let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                    let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                    let _endpos
                                                                    =
                                                                    _endpos__2_ in
                                                                    let _v :
                                                                    Syntax.myfactor
                                                                    =
                                                                    print_endline
                                                                    (Batteries.dump
                                                                    ("DEBUG:concat1",
                                                                    _1));
                                                                    NFactor
                                                                    _1 in
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let _1 : Syntax.myfactor = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__1_ in
          let _v : Syntax.myfactor =
            print_endline (Batteries.dump ("DEBUG:concat2", _1)); NFactor _1 in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let _1_inlined1 : unit = Obj.magic _1_inlined1 in
                  let _1 : Syntax.myfactor = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_inlined1_ in
                  let _v =
                    let _2 =
                      let _1 = _1_inlined1 in
                      let _1 =
                        print_endline (Batteries.dump ("DEBUG:plus", _1));
                        Plus in
                      print_endline (Batteries.dump ("DEBUG:mod", _1));
                      NFactor _1 in
                    let _1 =
                      print_endline (Batteries.dump ("DEBUG:termfactor", _1));
                      NFactor _1 in
                    (NFactor _1 : Syntax.myfactor) in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = _1_inlined1;
                                MenhirLib.EngineTypes.startp =
                                  _startpos__1_inlined1_;
                                MenhirLib.EngineTypes.endp =
                                  _endpos__1_inlined1_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = _1;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos__1_;
                                    MenhirLib.EngineTypes.endp = _endpos__1_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let _1_inlined1 : unit = Obj.magic _1_inlined1 in
                          let _1 : Syntax.myfactor = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__1_inlined1_ in
                          let _v =
                            let _2 =
                              let _1 = _1_inlined1 in
                              let _1 =
                                print_endline
                                  (Batteries.dump ("DEBUG:quest", _1));
                                Question in
                              print_endline
                                (Batteries.dump ("DEBUG:quest", _1));
                              NFactor _1 in
                            let _1 =
                              print_endline
                                (Batteries.dump ("DEBUG:termfactor", _1));
                              NFactor _1 in
                            (NFactor _1 : Syntax.myfactor) in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let { MenhirLib.EngineTypes.state = _;
                                        MenhirLib.EngineTypes.semv =
                                          _1_inlined1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_inlined1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_inlined1_;
                                        MenhirLib.EngineTypes.next =
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv = _1;
                                            MenhirLib.EngineTypes.startp =
                                              _startpos__1_;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos__1_;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                            }
                                        }
                                    = _menhir_stack in
                                  let _1_inlined1 : unit =
                                    Obj.magic _1_inlined1 in
                                  let _1 : Syntax.myfactor = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_inlined1_ in
                                  let _v =
                                    let _2 =
                                      let _1 = Star in
                                      print_endline
                                        (Batteries.dump ("DEBUG:star", _1));
                                      NFactor _1 in
                                    let _1 =
                                      print_endline
                                        (Batteries.dump
                                           ("DEBUG:termfactor", _1));
                                      NFactor _1 in
                                    (NFactor _1 : Syntax.myfactor) in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : Syntax.myfactor =
                                            Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v =
                                            let _1 =
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:termfactor", _1));
                                              NFactor _1 in
                                            (NFactor _1 : Syntax.myfactor) in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _2;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__2_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__2_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = rs;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos_rs_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos_rs_;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let _2 : unit =
                                                    Obj.magic _2 in
                                                  let rs : Syntax.myfactor =
                                                    Obj.magic rs in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos_rs_ in
                                                  let _endpos = _endpos__2_ in
                                                  let _v :
                                                    Syntax.partial_grammar =
                                                    print_endline
                                                      (Batteries.dump
                                                         ("DEBUG:grammar",
                                                           rs, _2));
                                                    {
                                                      pg_filename = "";
                                                      pg_rules = []
                                                    } in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let _menhir_s =
                                                            _menhir_env.MenhirLib.EngineTypes.current in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _endpos =
                                                            _startpos in
                                                          let _v : unit list
                                                            = [] in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    = _;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = xs;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_xs_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_xs_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = x;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos_x_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos_x_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } } =
                                                                    _menhir_stack in
                                                                  let xs :
                                                                    unit list
                                                                    =
                                                                    Obj.magic
                                                                    xs in
                                                                  let x :
                                                                    unit =
                                                                    Obj.magic
                                                                    x in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos_x_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos_xs_ in
                                                                  let _v :
                                                                    unit list
                                                                    = x :: xs in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack }
            = _menhir_stack in
          let x : unit = Obj.magic x in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos_x_ in
          let _endpos = _endpos_x_ in
          let _v : unit list = [x] in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = xs;
                        MenhirLib.EngineTypes.startp = _startpos_xs_;
                        MenhirLib.EngineTypes.endp = _endpos_xs_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x;
                            MenhirLib.EngineTypes.startp = _startpos_x_;
                            MenhirLib.EngineTypes.endp = _endpos_x_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    = _menhir_stack in
                  let xs : unit list = Obj.magic xs in
                  let x : unit = Obj.magic x in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos_x_ in
                  let _endpos = _endpos_xs_ in
                  let _v : unit list = x :: xs in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _;
                                MenhirLib.EngineTypes.semv = _2;
                                MenhirLib.EngineTypes.startp = _startpos__2_;
                                MenhirLib.EngineTypes.endp = _endpos__2_;
                                MenhirLib.EngineTypes.next =
                                  { MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv = _1;
                                    MenhirLib.EngineTypes.startp =
                                      _startpos__1_;
                                    MenhirLib.EngineTypes.endp = _endpos__1_;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                    }
                                }
                            = _menhir_stack in
                          let _2 : unit = Obj.magic _2 in
                          let _1 : unit list = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__2_ in
                          let _v : unit =
                            print_endline (Batteries.dump "DEBUG:DONE") in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let _1 : Syntax.myfactor = Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_ in
                                  let _v : Syntax.myfactor =
                                    print_endline
                                      (Batteries.dump ("DEBUG:rhs", _1));
                                    NFactor _1 in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _;
                                                MenhirLib.EngineTypes.semv =
                                                  branches;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos_branches_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos_branches_;
                                                MenhirLib.EngineTypes.next =
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _;
                                                    MenhirLib.EngineTypes.semv
                                                      = _2;
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos__2_;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos__2_;
                                                    MenhirLib.EngineTypes.next
                                                      =
                                                      {
                                                        MenhirLib.EngineTypes.state
                                                          = _menhir_s;
                                                        MenhirLib.EngineTypes.semv
                                                          = symbol;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos_symbol_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos_symbol_;
                                                        MenhirLib.EngineTypes.next
                                                          = _menhir_stack
                                                        }
                                                    }
                                                }
                                            = _menhir_stack in
                                          let branches : Syntax.myfactor =
                                            Obj.magic branches in
                                          let _2 : unit = Obj.magic _2 in
                                          let symbol :
                                            string Positions.located =
                                            Obj.magic symbol in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos_symbol_ in
                                          let _endpos = _endpos_branches_ in
                                          let _v : Syntax.parameterized_rule
                                            =
                                            print_endline
                                              (Batteries.dump
                                                 ("DEBUG:rule", symbol,
                                                   branches));
                                            {
                                              pr_nt =
                                                (Positions.value symbol);
                                              pr_positions =
                                                [Positions.position symbol];
                                              pr_branches = []
                                            } in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }));((fun _menhir_env ->
                                                  let _menhir_stack =
                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                  let {
                                                        MenhirLib.EngineTypes.state
                                                          = _;
                                                        MenhirLib.EngineTypes.semv
                                                          = _3;
                                                        MenhirLib.EngineTypes.startp
                                                          = _startpos__3_;
                                                        MenhirLib.EngineTypes.endp
                                                          = _endpos__3_;
                                                        MenhirLib.EngineTypes.next
                                                          =
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _;
                                                            MenhirLib.EngineTypes.semv
                                                              = _2;
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos__2_;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos__2_;
                                                            MenhirLib.EngineTypes.next
                                                              =
                                                              {
                                                                MenhirLib.EngineTypes.state
                                                                  = _menhir_s;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _1;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__1_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__1_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  _menhir_stack
                                                                }
                                                            }
                                                        }
                                                    = _menhir_stack in
                                                  let _3 :
                                                    Syntax.parameterized_rule
                                                    = Obj.magic _3 in
                                                  let _2 : unit list =
                                                    Obj.magic _2 in
                                                  let _1 : Syntax.myfactor =
                                                    Obj.magic _1 in
                                                  let _endpos__0_ =
                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                  let _startpos =
                                                    _startpos__1_ in
                                                  let _endpos = _endpos__3_ in
                                                  let _v : Syntax.myfactor =
                                                    print_endline
                                                      (Batteries.dump
                                                         ("DEBUG:OLDRULE1",
                                                           _3));
                                                    Rule _3 in
                                                  {
                                                    MenhirLib.EngineTypes.state
                                                      = _menhir_s;
                                                    MenhirLib.EngineTypes.semv
                                                      = (Obj.repr _v);
                                                    MenhirLib.EngineTypes.startp
                                                      = _startpos;
                                                    MenhirLib.EngineTypes.endp
                                                      = _endpos;
                                                    MenhirLib.EngineTypes.next
                                                      = _menhir_stack
                                                  }));((fun _menhir_env ->
                                                          let _menhir_stack =
                                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                                          let {
                                                                MenhirLib.EngineTypes.state
                                                                  = _;
                                                                MenhirLib.EngineTypes.semv
                                                                  = _2;
                                                                MenhirLib.EngineTypes.startp
                                                                  =
                                                                  _startpos__2_;
                                                                MenhirLib.EngineTypes.endp
                                                                  =
                                                                  _endpos__2_;
                                                                MenhirLib.EngineTypes.next
                                                                  =
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    }
                                                                }
                                                            = _menhir_stack in
                                                          let _2 :
                                                            Syntax.parameterized_rule
                                                            = Obj.magic _2 in
                                                          let _1 : unit list
                                                            = Obj.magic _1 in
                                                          let _endpos__0_ =
                                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                                          let _startpos =
                                                            _startpos__1_ in
                                                          let _endpos =
                                                            _endpos__2_ in
                                                          let _v :
                                                            Syntax.myfactor =
                                                            print_endline
                                                              (Batteries.dump
                                                                 ("DEBUG:OLDRULE",
                                                                   _1));
                                                            Rule _2 in
                                                          {
                                                            MenhirLib.EngineTypes.state
                                                              = _menhir_s;
                                                            MenhirLib.EngineTypes.semv
                                                              = (Obj.repr _v);
                                                            MenhirLib.EngineTypes.startp
                                                              = _startpos;
                                                            MenhirLib.EngineTypes.endp
                                                              = _endpos;
                                                            MenhirLib.EngineTypes.next
                                                              = _menhir_stack
                                                          }));((fun
                                                                  _menhir_env
                                                                  ->
                                                                  let _menhir_stack
                                                                    =
                                                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                                                  let 
                                                                    {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    = _1;
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos__1_;
                                                                    MenhirLib.EngineTypes.endp
                                                                    =
                                                                    _endpos__1_;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                    } =
                                                                    _menhir_stack in
                                                                  let _1 :
                                                                    Syntax.parameterized_rule
                                                                    =
                                                                    Obj.magic
                                                                    _1 in
                                                                  let _endpos__0_
                                                                    =
                                                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                                                  let _startpos
                                                                    =
                                                                    _startpos__1_ in
                                                                  let _endpos
                                                                    =
                                                                    _endpos__1_ in
                                                                  let _v :
                                                                    Syntax.myfactor
                                                                    =
                                                                    print_endline
                                                                    (Batteries.dump
                                                                    ("DEBUG:OLDRULE",
                                                                    _1));
                                                                    Rule _1 in
                                                                  {
                                                                    MenhirLib.EngineTypes.state
                                                                    =
                                                                    _menhir_s;
                                                                    MenhirLib.EngineTypes.semv
                                                                    =
                                                                    (Obj.repr
                                                                    _v);
                                                                    MenhirLib.EngineTypes.startp
                                                                    =
                                                                    _startpos;
                                                                    MenhirLib.EngineTypes.endp
                                                                    = _endpos;
                                                                    MenhirLib.EngineTypes.next
                                                                    =
                                                                    _menhir_stack
                                                                  }));((
        fun _menhir_env ->
          let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
          let { MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next =
                  { MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next =
                      { MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next =
                          { MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack }
                        }
                    }
                }
            = _menhir_stack in
          let _4 : unit = Obj.magic _4 in
          let _3 : Syntax.myfactor = Obj.magic _3 in
          let _2 : unit list = Obj.magic _2 in
          let _1 : unit = Obj.magic _1 in
          let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
          let _startpos = _startpos__1_ in
          let _endpos = _endpos__4_ in
          let _v =
            let _1 =
              let _1 =
                print_endline (Batteries.dump ("DEBUG:rhs", _3)); NFactor _3 in
              print_endline (Batteries.dump ("DEBUG:cterm/group", _1));
              NFactor _1 in
            (print_endline (Batteries.dump ("DEBUG:term/cterms", _1));
             NFactor _1 : Syntax.myfactor) in
          {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = (Obj.repr _v);
            MenhirLib.EngineTypes.startp = _startpos;
            MenhirLib.EngineTypes.endp = _endpos;
            MenhirLib.EngineTypes.next = _menhir_stack
          }));((fun _menhir_env ->
                  let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
                  let { MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack }
                    = _menhir_stack in
                  let _1 : Syntax.myfactor = Obj.magic _1 in
                  let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
                  let _startpos = _startpos__1_ in
                  let _endpos = _endpos__1_ in
                  let _v =
                    let _1 =
                      let _1 =
                        print_endline (Batteries.dump ("DEBUG:class1a", _1));
                        NFactor _1 in
                      print_endline
                        (Batteries.dump ("DEBUG:cterm/class", _1));
                      NFactor _1 in
                    (print_endline (Batteries.dump ("DEBUG:term/cterms", _1));
                     NFactor _1 : Syntax.myfactor) in
                  {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = (Obj.repr _v);
                    MenhirLib.EngineTypes.startp = _startpos;
                    MenhirLib.EngineTypes.endp = _endpos;
                    MenhirLib.EngineTypes.next = _menhir_stack
                  }));((fun _menhir_env ->
                          let _menhir_stack =
                            _menhir_env.MenhirLib.EngineTypes.stack in
                          let { MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = _1;
                                MenhirLib.EngineTypes.startp = _startpos__1_;
                                MenhirLib.EngineTypes.endp = _endpos__1_;
                                MenhirLib.EngineTypes.next = _menhir_stack }
                            = _menhir_stack in
                          let _1 : string Positions.located = Obj.magic _1 in
                          let _endpos__0_ =
                            _menhir_stack.MenhirLib.EngineTypes.endp in
                          let _startpos = _startpos__1_ in
                          let _endpos = _endpos__1_ in
                          let _v =
                            let _1 =
                              let _1 =
                                print_endline
                                  (Batteries.dump ("DEBUG:class", _1));
                                SFactor _1 in
                              print_endline
                                (Batteries.dump ("DEBUG:cterm/class", _1));
                              NFactor _1 in
                            (print_endline
                               (Batteries.dump ("DEBUG:term/cterms", _1));
                             NFactor _1 : Syntax.myfactor) in
                          {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = (Obj.repr _v);
                            MenhirLib.EngineTypes.startp = _startpos;
                            MenhirLib.EngineTypes.endp = _endpos;
                            MenhirLib.EngineTypes.next = _menhir_stack
                          }));((fun _menhir_env ->
                                  let _menhir_stack =
                                    _menhir_env.MenhirLib.EngineTypes.stack in
                                  let {
                                        MenhirLib.EngineTypes.state =
                                          _menhir_s;
                                        MenhirLib.EngineTypes.semv = _1;
                                        MenhirLib.EngineTypes.startp =
                                          _startpos__1_;
                                        MenhirLib.EngineTypes.endp =
                                          _endpos__1_;
                                        MenhirLib.EngineTypes.next =
                                          _menhir_stack
                                        }
                                    = _menhir_stack in
                                  let _1 : string Positions.located =
                                    Obj.magic _1 in
                                  let _endpos__0_ =
                                    _menhir_stack.MenhirLib.EngineTypes.endp in
                                  let _startpos = _startpos__1_ in
                                  let _endpos = _endpos__1_ in
                                  let _v =
                                    let _1 =
                                      let _1 =
                                        print_endline
                                          (Batteries.dump ("DEBUG:quid", _1));
                                        _1 in
                                      print_endline
                                        (Batteries.dump
                                           ("DEBUG:sterm/quid", _1));
                                      SFactor _1 in
                                    (print_endline
                                       (Batteries.dump
                                          ("DEBUG:term/sterm", _1));
                                     NFactor _1 : Syntax.myfactor) in
                                  {
                                    MenhirLib.EngineTypes.state = _menhir_s;
                                    MenhirLib.EngineTypes.semv =
                                      (Obj.repr _v);
                                    MenhirLib.EngineTypes.startp = _startpos;
                                    MenhirLib.EngineTypes.endp = _endpos;
                                    MenhirLib.EngineTypes.next =
                                      _menhir_stack
                                  }));((fun _menhir_env ->
                                          let _menhir_stack =
                                            _menhir_env.MenhirLib.EngineTypes.stack in
                                          let {
                                                MenhirLib.EngineTypes.state =
                                                  _menhir_s;
                                                MenhirLib.EngineTypes.semv =
                                                  _1;
                                                MenhirLib.EngineTypes.startp
                                                  = _startpos__1_;
                                                MenhirLib.EngineTypes.endp =
                                                  _endpos__1_;
                                                MenhirLib.EngineTypes.next =
                                                  _menhir_stack
                                                }
                                            = _menhir_stack in
                                          let _1 : string Positions.located =
                                            Obj.magic _1 in
                                          let _endpos__0_ =
                                            _menhir_stack.MenhirLib.EngineTypes.endp in
                                          let _startpos = _startpos__1_ in
                                          let _endpos = _endpos__1_ in
                                          let _v =
                                            let _1 =
                                              let _1 =
                                                print_endline
                                                  (Batteries.dump
                                                     ("DEBUG:lid", _1));
                                                _1 in
                                              print_endline
                                                (Batteries.dump
                                                   ("DEBUG:sterm/lid", _1));
                                              SFactor _1 in
                                            (print_endline
                                               (Batteries.dump
                                                  ("DEBUG:term/sterm", _1));
                                             NFactor _1 : Syntax.myfactor) in
                                          {
                                            MenhirLib.EngineTypes.state =
                                              _menhir_s;
                                            MenhirLib.EngineTypes.semv =
                                              (Obj.repr _v);
                                            MenhirLib.EngineTypes.startp =
                                              _startpos;
                                            MenhirLib.EngineTypes.endp =
                                              _endpos;
                                            MenhirLib.EngineTypes.next =
                                              _menhir_stack
                                          }))|]
    and trace =
      Some
        ([|"error";"Tchar";"STAR";"RPAREN";"REGEX";"QUESTION";"QID";"PLUS";"NEWLINE";"LPAREN";"LID";"EOF";"DASH";"COLONCOLONEQUAL";"CARET";"BAR";"#"|],
          [|"Accepting";"Reducing production alternation -> alternation BAR list(NEWLINE) concatenation";"Reducing production alternation -> concatenation";"Reducing production char_class -> CARET char_class1";"Reducing production char_class -> char_class1";"Reducing production char_class1 -> Tchar DASH Tchar";"Reducing production char_class1 -> char_class1 Tchar";"Reducing production char_class1 -> Tchar";"Reducing production concatenation -> concatenation factor";"Reducing production concatenation -> factor";"Reducing production factor -> term PLUS";"Reducing production factor -> term QUESTION";"Reducing production factor -> term STAR";"Reducing production factor -> term";"Reducing production grammar -> rules postlude";"Reducing production list(NEWLINE) ->";"Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)";"Reducing production nonempty_list(NEWLINE) -> NEWLINE";"Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)";"Reducing production postlude -> list(NEWLINE) EOF";"Reducing production rhs -> alternation";"Reducing production rule -> LID COLONCOLONEQUAL rhs";"Reducing production rules -> rules nonempty_list(NEWLINE) rule";"Reducing production rules -> nonempty_list(NEWLINE) rule";"Reducing production rules -> rule";"Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN";"Reducing production term -> char_class";"Reducing production term -> REGEX";"Reducing production term -> QID";"Reducing production term -> LID"|])
  end
module MenhirInterpreter =
  struct
    module ET = (MenhirLib.TableInterpreter.MakeEngineTable)(Tables)
    module TI = (MenhirLib.Engine.Make)(ET)
    include TI
  end
let grammar lexer lexbuf =
  (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : Syntax.partial_grammar)
module Incremental =
  struct
    let grammar initial_position =
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : Syntax.partial_grammar
                                                                  MenhirInterpreter.checkpoint)
  end
let () = Ppx_inline_test_lib.unset_lib "gbnf_parser"
let () = Expect_test_collector.Current_file.unset ()
let () = Ppx_bench_lib.Benchmark_accumulator.Current_libname.unset ()
let () =
  Ppx_module_timer_runtime.record_until Ppx_module_timer_runtime.__MODULE__
[
  structure_item (_none_[0,0+-1].._none_[0,0+-1]) ghost
    Tstr_attribute "ocaml.ppx.context"
    [
      structure_item (_none_[0,0+-1]..[0,0+-1]) ghost
        Pstr_eval
        expression (_none_[0,0+-1]..[0,0+-1]) ghost
          Pexp_record
          [
            "tool_name" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_constant PConst_string("ppx_driver",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
            "include_dirs" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "load_path" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "open_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "for_package" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "None" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "debug" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_threads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "use_vmthreads" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "recursive_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "principal" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "transparent_modules" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unboxed_types" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "unsafe_string" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "false" (_none_[0,0+-1]..[0,0+-1]) ghost
                None
            "cookies" (_none_[0,0+-1]..[0,0+-1]) ghost
              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                Some
                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                    Pexp_tuple
                    [
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_tuple
                        [
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_constant PConst_string("inline_tests",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                          expression (<command-line>[1,0+0]..[1,0+9])
                            Pexp_constant PConst_string("enabled",(<command-line>[1,0+1]..[1,0+8]),None)
                        ]
                      expression (_none_[0,0+-1]..[0,0+-1]) ghost
                        Pexp_construct "::" (_none_[0,0+-1]..[0,0+-1]) ghost
                        Some
                          expression (_none_[0,0+-1]..[0,0+-1]) ghost
                            Pexp_tuple
                            [
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_tuple
                                [
                                  expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                    Pexp_constant PConst_string("library-name",(_none_[0,0+-1]..[0,0+-1]) ghost,None)
                                  expression (<command-line>[1,0+0]..[1,0+13])
                                    Pexp_constant PConst_string("gbnf_parser",(<command-line>[1,0+1]..[1,0+12]),None)
                                ]
                              expression (_none_[0,0+-1]..[0,0+-1]) ghost
                                Pexp_construct "[]" (_none_[0,0+-1]..[0,0+-1]) ghost
                                None
                            ]
                    ]
          ]
          None
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_start"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.set"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
            Texp_ident "Expect_test_collector!.Current_file.set"
          [
            <arg>
              Labelled "absolute_filename"
              expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
                Texp_constant Const_string("lib/sentenceParser.ml",(lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
            Texp_ident "Ppx_inline_test_lib!.set_lib_and_partition"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost,None)
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost
                Texp_constant Const_string("sentenceParser.ml",(lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[4,73+0]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[4,73+0]..lib/sentenceParser.ml[5,82+42])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[4,73+4]..lib/sentenceParser.ml[4,73+6])
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[5,82+2]..lib/sentenceParser.ml[5,82+42])
          Texp_ident "MenhirLib!.StaticVersion.require_20230608"
    ]
  structure_item (lib/sentenceParser.ml[7,126+0]..lib/sentenceParser.ml[48,819+3])
    Tstr_module
    MenhirBasics/1240
      module_expr (lib/sentenceParser.ml[7,126+22]..lib/sentenceParser.ml[48,819+3])
        Tmod_structure
        [
          structure_item (lib/sentenceParser.ml[9,158+2]..lib/sentenceParser.ml[9,158+17])
            Tstr_exception
            type_exception
              ptyext_constructor =
                extension_constructor (lib/sentenceParser.ml[9,158+2]..lib/sentenceParser.ml[9,158+17])
                  pext_name = "Error/1150"
                  pext_kind =
                    Text_decl
                      []
                      None
          structure_item (lib/sentenceParser.ml[11,179+2]..lib/sentenceParser.ml[13,206+17])
            Tstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[11,179+6]..lib/sentenceParser.ml[11,179+10])
                  Tpat_var "_eRR/1151"
                expression (lib/sentenceParser.ml[12,192+4]..lib/sentenceParser.ml[13,206+17])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (lib/sentenceParser.ml[12,192+8]..lib/sentenceParser.ml[12,192+10])
                        Tpat_var "_s/1153"
                      expression (lib/sentenceParser.ml[13,206+6]..lib/sentenceParser.ml[13,206+17])
                        Texp_apply
                        expression (lib/sentenceParser.ml[13,206+6]..lib/sentenceParser.ml[13,206+11])
                          Texp_ident "Stdlib!.raise"
                        [
                          <arg>
                            Nolabel
                            expression (lib/sentenceParser.ml[13,206+12]..lib/sentenceParser.ml[13,206+17])
                              Texp_construct "Error"
                              []
                        ]
                  ]
            ]
          structure_item (lib/sentenceParser.ml[15,227+2]..lib/sentenceParser.ml[46,806+9])
            Tstr_type Rec
            [
              type_declaration token/1154 (lib/sentenceParser.ml[15,227+2]..lib/sentenceParser.ml[46,806+9])
                ptype_params =
                  []
                ptype_cstrs =
                  []
                ptype_kind =
                  Ttype_variant
                    [
                      (lib/sentenceParser.ml[16,243+4]..lib/sentenceParser.ml[20,332+3])
                        Tchar/1155
                        [
                          core_type (lib/sentenceParser.mly[26,290+8]..lib/sentenceParser.mly[26,290+11])
                            Ttyp_constr "int/1!"
                            []
                        ]
                        None
                      (lib/sentenceParser.ml[21,336+4]..lib/sentenceParser.ml[21,336+10])
                        STAR/1156
                        []
                        None
                      (lib/sentenceParser.ml[22,347+4]..lib/sentenceParser.ml[22,347+12])
                        RPAREN/1157
                        []
                        None
                      (lib/sentenceParser.ml[23,360+4]..lib/sentenceParser.ml[27,470+3])
                        REGEX/1158
                        [
                          core_type (lib/sentenceParser.mly[39,407+8]..lib/sentenceParser.mly[39,407+32])
                            Ttyp_constr "Gbnf_parser!.Positions.located"
                            [
                              core_type (lib/sentenceParser.mly[39,407+8]..lib/sentenceParser.mly[39,407+14])
                                Ttyp_constr "string/15!"
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[28,474+4]..lib/sentenceParser.ml[28,474+14])
                        QUESTION/1194
                        []
                        None
                      (lib/sentenceParser.ml[29,489+4]..lib/sentenceParser.ml[33,597+3])
                        QID/1195
                        [
                          core_type (lib/sentenceParser.mly[39,534+8]..lib/sentenceParser.mly[39,534+32])
                            Ttyp_constr "Gbnf_parser!.Positions.located"
                            [
                              core_type (lib/sentenceParser.mly[39,534+8]..lib/sentenceParser.mly[39,534+14])
                                Ttyp_constr "string/15!"
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[34,601+4]..lib/sentenceParser.ml[34,601+10])
                        PLUS/1196
                        []
                        None
                      (lib/sentenceParser.ml[35,612+4]..lib/sentenceParser.ml[35,612+13])
                        NEWLINE/1197
                        []
                        None
                      (lib/sentenceParser.ml[36,626+4]..lib/sentenceParser.ml[36,626+12])
                        LPAREN/1198
                        []
                        None
                      (lib/sentenceParser.ml[37,639+4]..lib/sentenceParser.ml[41,747+3])
                        LID/1199
                        [
                          core_type (lib/sentenceParser.mly[39,684+8]..lib/sentenceParser.mly[39,684+32])
                            Ttyp_constr "Gbnf_parser!.Positions.located"
                            [
                              core_type (lib/sentenceParser.mly[39,684+8]..lib/sentenceParser.mly[39,684+14])
                                Ttyp_constr "string/15!"
                                []
                            ]
                        ]
                        None
                      (lib/sentenceParser.ml[42,751+4]..lib/sentenceParser.ml[42,751+9])
                        EOF/1200
                        []
                        None
                      (lib/sentenceParser.ml[43,761+4]..lib/sentenceParser.ml[43,761+10])
                        DASH/1201
                        []
                        None
                      (lib/sentenceParser.ml[44,772+4]..lib/sentenceParser.ml[44,772+21])
                        COLONCOLONEQUAL/1202
                        []
                        None
                      (lib/sentenceParser.ml[45,794+4]..lib/sentenceParser.ml[45,794+11])
                        CARET/1203
                        []
                        None
                      (lib/sentenceParser.ml[46,806+4]..lib/sentenceParser.ml[46,806+9])
                        BAR/1204
                        []
                        None
                    ]
                ptype_private = Public
                ptype_manifest =
                  None
            ]
        ]
  structure_item (lib/sentenceParser.ml[50,824+0]..lib/sentenceParser.ml[50,824+20])
    Tstr_include    module_expr (lib/sentenceParser.ml[50,824+8]..lib/sentenceParser.ml[50,824+20])
      Tmod_ident "MenhirBasics/1240"
  structure_item (lib/sentenceParser.mly[23,879+0]..lib/sentenceParser.mly[23,879+11])
    Tstr_open Fresh
    module_expr (lib/sentenceParser.mly[23,879+5]..lib/sentenceParser.mly[23,879+11])
      Tmod_ident "Gbnf_parser!.Syntax"
  structure_item (lib/sentenceParser.ml[58,922+0]..lib/sentenceParser.ml[1312,49153+3])
    Tstr_module
    Tables/2117
      module_expr (lib/sentenceParser.ml[58,922+16]..lib/sentenceParser.ml[1312,49153+3])
        Tmod_structure
        [
          structure_item (lib/sentenceParser.ml[60,948+2]..lib/sentenceParser.ml[60,948+22])
            Tstr_include            module_expr (lib/sentenceParser.ml[60,948+10]..lib/sentenceParser.ml[60,948+22])
              Tmod_ident "MenhirBasics/1240"
          structure_item (lib/sentenceParser.ml[62,974+2]..lib/sentenceParser.ml[1310,49142+7])
            Tstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[62,974+6]..lib/sentenceParser.ml[62,974+20])
                  extra
                    Tpat_extra_constraint
                    core_type (lib/sentenceParser.ml[62,974+23]..lib/sentenceParser.ml[62,974+35])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/sentenceParser.ml[62,974+23]..lib/sentenceParser.ml[62,974+28])
                        Ttyp_constr "token/1283"
                        []
                      core_type (lib/sentenceParser.ml[62,974+32]..lib/sentenceParser.ml[62,974+35])
                        Ttyp_constr "int/1!"
                        []
                  Tpat_alias "token2terminal/1284"
                  pattern (lib/sentenceParser.ml[62,974+6]..lib/sentenceParser.ml[62,974+20])
                    Tpat_any
                expression (lib/sentenceParser.ml[63,1012+4]..lib/sentenceParser.ml[94,1493+11])
                  extra
                    Texp_constraint
                    core_type (lib/sentenceParser.ml[62,974+23]..lib/sentenceParser.ml[62,974+35])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/sentenceParser.ml[62,974+23]..lib/sentenceParser.ml[62,974+28])
                        Ttyp_constr "token/1283"
                        []
                      core_type (lib/sentenceParser.ml[62,974+32]..lib/sentenceParser.ml[62,974+35])
                        Ttyp_constr "int/1!"
                        []
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (lib/sentenceParser.ml[63,1012+8]..lib/sentenceParser.ml[63,1012+12])
                        Tpat_var "_tok/1336"
                      expression (lib/sentenceParser.ml[64,1028+6]..lib/sentenceParser.ml[94,1493+11])
                        Texp_match
                        expression (lib/sentenceParser.ml[64,1028+12]..lib/sentenceParser.ml[64,1028+16])
                          Texp_ident "_tok/1336"
                        [
                          <case>
                            pattern (lib/sentenceParser.ml[65,1050+8]..lib/sentenceParser.ml[65,1050+11])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[65,1050+8]..lib/sentenceParser.ml[65,1050+11])
                                Tpat_construct "BAR"
                                []
                                None
                            expression (lib/sentenceParser.ml[66,1065+10]..lib/sentenceParser.ml[66,1065+12])
                              Texp_constant Const_int 15
                          <case>
                            pattern (lib/sentenceParser.ml[67,1078+8]..lib/sentenceParser.ml[67,1078+13])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[67,1078+8]..lib/sentenceParser.ml[67,1078+13])
                                Tpat_construct "CARET"
                                []
                                None
                            expression (lib/sentenceParser.ml[68,1095+10]..lib/sentenceParser.ml[68,1095+12])
                              Texp_constant Const_int 14
                          <case>
                            pattern (lib/sentenceParser.ml[69,1108+8]..lib/sentenceParser.ml[69,1108+23])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[69,1108+8]..lib/sentenceParser.ml[69,1108+23])
                                Tpat_construct "COLONCOLONEQUAL"
                                []
                                None
                            expression (lib/sentenceParser.ml[70,1135+10]..lib/sentenceParser.ml[70,1135+12])
                              Texp_constant Const_int 13
                          <case>
                            pattern (lib/sentenceParser.ml[71,1148+8]..lib/sentenceParser.ml[71,1148+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[71,1148+8]..lib/sentenceParser.ml[71,1148+12])
                                Tpat_construct "DASH"
                                []
                                None
                            expression (lib/sentenceParser.ml[72,1164+10]..lib/sentenceParser.ml[72,1164+12])
                              Texp_constant Const_int 12
                          <case>
                            pattern (lib/sentenceParser.ml[73,1177+8]..lib/sentenceParser.ml[73,1177+11])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[73,1177+8]..lib/sentenceParser.ml[73,1177+11])
                                Tpat_construct "EOF"
                                []
                                None
                            expression (lib/sentenceParser.ml[74,1192+10]..lib/sentenceParser.ml[74,1192+12])
                              Texp_constant Const_int 11
                          <case>
                            pattern (lib/sentenceParser.ml[75,1205+8]..lib/sentenceParser.ml[75,1205+13])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[75,1205+8]..lib/sentenceParser.ml[75,1205+13])
                                Tpat_construct "LID"
                                [
                                  pattern (lib/sentenceParser.ml[75,1205+12]..lib/sentenceParser.ml[75,1205+13])
                                    Tpat_any
                                ]
                                None
                            expression (lib/sentenceParser.ml[76,1222+10]..lib/sentenceParser.ml[76,1222+12])
                              Texp_constant Const_int 10
                          <case>
                            pattern (lib/sentenceParser.ml[77,1235+8]..lib/sentenceParser.ml[77,1235+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[77,1235+8]..lib/sentenceParser.ml[77,1235+14])
                                Tpat_construct "LPAREN"
                                []
                                None
                            expression (lib/sentenceParser.ml[78,1253+10]..lib/sentenceParser.ml[78,1253+11])
                              Texp_constant Const_int 9
                          <case>
                            pattern (lib/sentenceParser.ml[79,1265+8]..lib/sentenceParser.ml[79,1265+15])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[79,1265+8]..lib/sentenceParser.ml[79,1265+15])
                                Tpat_construct "NEWLINE"
                                []
                                None
                            expression (lib/sentenceParser.ml[80,1284+10]..lib/sentenceParser.ml[80,1284+11])
                              Texp_constant Const_int 8
                          <case>
                            pattern (lib/sentenceParser.ml[81,1296+8]..lib/sentenceParser.ml[81,1296+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[81,1296+8]..lib/sentenceParser.ml[81,1296+12])
                                Tpat_construct "PLUS"
                                []
                                None
                            expression (lib/sentenceParser.ml[82,1312+10]..lib/sentenceParser.ml[82,1312+11])
                              Texp_constant Const_int 7
                          <case>
                            pattern (lib/sentenceParser.ml[83,1324+8]..lib/sentenceParser.ml[83,1324+13])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[83,1324+8]..lib/sentenceParser.ml[83,1324+13])
                                Tpat_construct "QID"
                                [
                                  pattern (lib/sentenceParser.ml[83,1324+12]..lib/sentenceParser.ml[83,1324+13])
                                    Tpat_any
                                ]
                                None
                            expression (lib/sentenceParser.ml[84,1341+10]..lib/sentenceParser.ml[84,1341+11])
                              Texp_constant Const_int 6
                          <case>
                            pattern (lib/sentenceParser.ml[85,1353+8]..lib/sentenceParser.ml[85,1353+16])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[85,1353+8]..lib/sentenceParser.ml[85,1353+16])
                                Tpat_construct "QUESTION"
                                []
                                None
                            expression (lib/sentenceParser.ml[86,1373+10]..lib/sentenceParser.ml[86,1373+11])
                              Texp_constant Const_int 5
                          <case>
                            pattern (lib/sentenceParser.ml[87,1385+8]..lib/sentenceParser.ml[87,1385+15])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[87,1385+8]..lib/sentenceParser.ml[87,1385+15])
                                Tpat_construct "REGEX"
                                [
                                  pattern (lib/sentenceParser.ml[87,1385+14]..lib/sentenceParser.ml[87,1385+15])
                                    Tpat_any
                                ]
                                None
                            expression (lib/sentenceParser.ml[88,1404+10]..lib/sentenceParser.ml[88,1404+11])
                              Texp_constant Const_int 4
                          <case>
                            pattern (lib/sentenceParser.ml[89,1416+8]..lib/sentenceParser.ml[89,1416+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[89,1416+8]..lib/sentenceParser.ml[89,1416+14])
                                Tpat_construct "RPAREN"
                                []
                                None
                            expression (lib/sentenceParser.ml[90,1434+10]..lib/sentenceParser.ml[90,1434+11])
                              Texp_constant Const_int 3
                          <case>
                            pattern (lib/sentenceParser.ml[91,1446+8]..lib/sentenceParser.ml[91,1446+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[91,1446+8]..lib/sentenceParser.ml[91,1446+12])
                                Tpat_construct "STAR"
                                []
                                None
                            expression (lib/sentenceParser.ml[92,1462+10]..lib/sentenceParser.ml[92,1462+11])
                              Texp_constant Const_int 2
                          <case>
                            pattern (lib/sentenceParser.ml[93,1474+8]..lib/sentenceParser.ml[93,1474+15])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[93,1474+8]..lib/sentenceParser.ml[93,1474+15])
                                Tpat_construct "Tchar"
                                [
                                  pattern (lib/sentenceParser.ml[93,1474+14]..lib/sentenceParser.ml[93,1474+15])
                                    Tpat_any
                                ]
                                None
                            expression (lib/sentenceParser.ml[94,1493+10]..lib/sentenceParser.ml[94,1493+11])
                              Texp_constant Const_int 1
                        ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[96,1508+6]..lib/sentenceParser.ml[96,1508+20])
                  Tpat_var "error_terminal/1285"
                expression (lib/sentenceParser.ml[97,1531+4]..lib/sentenceParser.ml[97,1531+5])
                  Texp_constant Const_int 0
              <def>
                pattern (lib/sentenceParser.ml[99,1540+6]..lib/sentenceParser.ml[99,1540+17])
                  extra
                    Tpat_extra_constraint
                    core_type (lib/sentenceParser.ml[99,1540+20]..lib/sentenceParser.ml[99,1540+34])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/sentenceParser.ml[99,1540+20]..lib/sentenceParser.ml[99,1540+25])
                        Ttyp_constr "token/1283"
                        []
                      core_type (lib/sentenceParser.ml[99,1540+29]..lib/sentenceParser.ml[99,1540+34])
                        Ttyp_constr "Stdlib!.Obj.t"
                        []
                  Tpat_alias "token2value/1327"
                  pattern (lib/sentenceParser.ml[99,1540+6]..lib/sentenceParser.ml[99,1540+17])
                    Tpat_any
                expression (lib/sentenceParser.ml[100,1577+4]..lib/sentenceParser.ml[131,2196+21])
                  extra
                    Texp_constraint
                    core_type (lib/sentenceParser.ml[99,1540+20]..lib/sentenceParser.ml[99,1540+34])
                      Ttyp_arrow
                      Nolabel
                      core_type (lib/sentenceParser.ml[99,1540+20]..lib/sentenceParser.ml[99,1540+25])
                        Ttyp_constr "token/1283"
                        []
                      core_type (lib/sentenceParser.ml[99,1540+29]..lib/sentenceParser.ml[99,1540+34])
                        Ttyp_constr "Stdlib!.Obj.t"
                        []
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (lib/sentenceParser.ml[100,1577+8]..lib/sentenceParser.ml[100,1577+12])
                        Tpat_var "_tok/1361"
                      expression (lib/sentenceParser.ml[101,1593+6]..lib/sentenceParser.ml[131,2196+21])
                        Texp_match
                        expression (lib/sentenceParser.ml[101,1593+12]..lib/sentenceParser.ml[101,1593+16])
                          Texp_ident "_tok/1361"
                        [
                          <case>
                            pattern (lib/sentenceParser.ml[102,1615+8]..lib/sentenceParser.ml[102,1615+11])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[102,1615+8]..lib/sentenceParser.ml[102,1615+11])
                                Tpat_construct "BAR"
                                []
                                None
                            expression (lib/sentenceParser.ml[103,1630+10]..lib/sentenceParser.ml[103,1630+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[103,1630+10]..lib/sentenceParser.ml[103,1630+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[103,1630+19]..lib/sentenceParser.ml[103,1630+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[104,1652+8]..lib/sentenceParser.ml[104,1652+13])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[104,1652+8]..lib/sentenceParser.ml[104,1652+13])
                                Tpat_construct "CARET"
                                []
                                None
                            expression (lib/sentenceParser.ml[105,1669+10]..lib/sentenceParser.ml[105,1669+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[105,1669+10]..lib/sentenceParser.ml[105,1669+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[105,1669+19]..lib/sentenceParser.ml[105,1669+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[106,1691+8]..lib/sentenceParser.ml[106,1691+23])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[106,1691+8]..lib/sentenceParser.ml[106,1691+23])
                                Tpat_construct "COLONCOLONEQUAL"
                                []
                                None
                            expression (lib/sentenceParser.ml[107,1718+10]..lib/sentenceParser.ml[107,1718+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[107,1718+10]..lib/sentenceParser.ml[107,1718+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[107,1718+19]..lib/sentenceParser.ml[107,1718+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[108,1740+8]..lib/sentenceParser.ml[108,1740+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[108,1740+8]..lib/sentenceParser.ml[108,1740+12])
                                Tpat_construct "DASH"
                                []
                                None
                            expression (lib/sentenceParser.ml[109,1756+10]..lib/sentenceParser.ml[109,1756+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[109,1756+10]..lib/sentenceParser.ml[109,1756+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[109,1756+19]..lib/sentenceParser.ml[109,1756+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[110,1778+8]..lib/sentenceParser.ml[110,1778+11])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[110,1778+8]..lib/sentenceParser.ml[110,1778+11])
                                Tpat_construct "EOF"
                                []
                                None
                            expression (lib/sentenceParser.ml[111,1793+10]..lib/sentenceParser.ml[111,1793+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[111,1793+10]..lib/sentenceParser.ml[111,1793+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[111,1793+19]..lib/sentenceParser.ml[111,1793+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[112,1815+8]..lib/sentenceParser.ml[112,1815+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[112,1815+8]..lib/sentenceParser.ml[112,1815+14])
                                Tpat_construct "LID"
                                [
                                  pattern (lib/sentenceParser.ml[112,1815+12]..lib/sentenceParser.ml[112,1815+14])
                                    Tpat_var "_v/1362"
                                ]
                                None
                            expression (lib/sentenceParser.ml[113,1833+10]..lib/sentenceParser.ml[113,1833+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[113,1833+10]..lib/sentenceParser.ml[113,1833+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[113,1833+19]..lib/sentenceParser.ml[113,1833+21])
                                    Texp_ident "_v/1362"
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[114,1855+8]..lib/sentenceParser.ml[114,1855+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[114,1855+8]..lib/sentenceParser.ml[114,1855+14])
                                Tpat_construct "LPAREN"
                                []
                                None
                            expression (lib/sentenceParser.ml[115,1873+10]..lib/sentenceParser.ml[115,1873+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[115,1873+10]..lib/sentenceParser.ml[115,1873+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[115,1873+19]..lib/sentenceParser.ml[115,1873+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[116,1895+8]..lib/sentenceParser.ml[116,1895+15])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[116,1895+8]..lib/sentenceParser.ml[116,1895+15])
                                Tpat_construct "NEWLINE"
                                []
                                None
                            expression (lib/sentenceParser.ml[117,1914+10]..lib/sentenceParser.ml[117,1914+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[117,1914+10]..lib/sentenceParser.ml[117,1914+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[117,1914+19]..lib/sentenceParser.ml[117,1914+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[118,1936+8]..lib/sentenceParser.ml[118,1936+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[118,1936+8]..lib/sentenceParser.ml[118,1936+12])
                                Tpat_construct "PLUS"
                                []
                                None
                            expression (lib/sentenceParser.ml[119,1952+10]..lib/sentenceParser.ml[119,1952+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[119,1952+10]..lib/sentenceParser.ml[119,1952+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[119,1952+19]..lib/sentenceParser.ml[119,1952+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[120,1974+8]..lib/sentenceParser.ml[120,1974+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[120,1974+8]..lib/sentenceParser.ml[120,1974+14])
                                Tpat_construct "QID"
                                [
                                  pattern (lib/sentenceParser.ml[120,1974+12]..lib/sentenceParser.ml[120,1974+14])
                                    Tpat_var "_v/1363"
                                ]
                                None
                            expression (lib/sentenceParser.ml[121,1992+10]..lib/sentenceParser.ml[121,1992+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[121,1992+10]..lib/sentenceParser.ml[121,1992+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[121,1992+19]..lib/sentenceParser.ml[121,1992+21])
                                    Texp_ident "_v/1363"
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[122,2014+8]..lib/sentenceParser.ml[122,2014+16])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[122,2014+8]..lib/sentenceParser.ml[122,2014+16])
                                Tpat_construct "QUESTION"
                                []
                                None
                            expression (lib/sentenceParser.ml[123,2034+10]..lib/sentenceParser.ml[123,2034+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[123,2034+10]..lib/sentenceParser.ml[123,2034+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[123,2034+19]..lib/sentenceParser.ml[123,2034+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[124,2056+8]..lib/sentenceParser.ml[124,2056+16])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[124,2056+8]..lib/sentenceParser.ml[124,2056+16])
                                Tpat_construct "REGEX"
                                [
                                  pattern (lib/sentenceParser.ml[124,2056+14]..lib/sentenceParser.ml[124,2056+16])
                                    Tpat_var "_v/1364"
                                ]
                                None
                            expression (lib/sentenceParser.ml[125,2076+10]..lib/sentenceParser.ml[125,2076+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[125,2076+10]..lib/sentenceParser.ml[125,2076+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[125,2076+19]..lib/sentenceParser.ml[125,2076+21])
                                    Texp_ident "_v/1364"
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[126,2098+8]..lib/sentenceParser.ml[126,2098+14])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[126,2098+8]..lib/sentenceParser.ml[126,2098+14])
                                Tpat_construct "RPAREN"
                                []
                                None
                            expression (lib/sentenceParser.ml[127,2116+10]..lib/sentenceParser.ml[127,2116+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[127,2116+10]..lib/sentenceParser.ml[127,2116+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[127,2116+19]..lib/sentenceParser.ml[127,2116+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[128,2138+8]..lib/sentenceParser.ml[128,2138+12])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[128,2138+8]..lib/sentenceParser.ml[128,2138+12])
                                Tpat_construct "STAR"
                                []
                                None
                            expression (lib/sentenceParser.ml[129,2154+10]..lib/sentenceParser.ml[129,2154+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[129,2154+10]..lib/sentenceParser.ml[129,2154+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[129,2154+19]..lib/sentenceParser.ml[129,2154+21])
                                    Texp_construct "()"
                                    []
                              ]
                          <case>
                            pattern (lib/sentenceParser.ml[130,2176+8]..lib/sentenceParser.ml[130,2176+16])
                              Tpat_value
                              pattern (lib/sentenceParser.ml[130,2176+8]..lib/sentenceParser.ml[130,2176+16])
                                Tpat_construct "Tchar"
                                [
                                  pattern (lib/sentenceParser.ml[130,2176+14]..lib/sentenceParser.ml[130,2176+16])
                                    Tpat_var "_v/1365"
                                ]
                                None
                            expression (lib/sentenceParser.ml[131,2196+10]..lib/sentenceParser.ml[131,2196+21])
                              Texp_apply
                              expression (lib/sentenceParser.ml[131,2196+10]..lib/sentenceParser.ml[131,2196+18])
                                Texp_ident "Stdlib!.Obj.repr"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[131,2196+19]..lib/sentenceParser.ml[131,2196+21])
                                    Texp_ident "_v/1365"
                              ]
                        ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[133,2221+6]..lib/sentenceParser.ml[133,2221+23])
                  Tpat_var "default_reduction/1328"
                expression (lib/sentenceParser.ml[134,2247+4]..lib/sentenceParser.ml[134,2247+185])
                  Texp_tuple
                  [
                    expression (lib/sentenceParser.ml[134,2247+5]..lib/sentenceParser.ml[134,2247+6])
                      Texp_constant Const_int 8
                    expression (lib/sentenceParser.ml[134,2247+8]..lib/sentenceParser.ml[134,2247+184])
                      Texp_constant Const_string("\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001",(lib/sentenceParser.ml[134,2247+9]..lib/sentenceParser.ml[134,2247+183]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[136,2436+6]..lib/sentenceParser.ml[136,2436+11])
                  Tpat_var "error/1329"
                expression (lib/sentenceParser.ml[137,2450+4]..lib/sentenceParser.ml[137,2450+327])
                  Texp_tuple
                  [
                    expression (lib/sentenceParser.ml[137,2450+5]..lib/sentenceParser.ml[137,2450+7])
                      Texp_constant Const_int 16
                    expression (lib/sentenceParser.ml[137,2450+9]..lib/sentenceParser.ml[137,2450+326])
                      Texp_constant Const_string("\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000",(lib/sentenceParser.ml[137,2450+10]..lib/sentenceParser.ml[137,2450+325]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[139,2781+6]..lib/sentenceParser.ml[139,2781+11])
                  Tpat_var "start/1330"
                expression (lib/sentenceParser.ml[140,2795+4]..lib/sentenceParser.ml[140,2795+5])
                  Texp_constant Const_int 1
              <def>
                pattern (lib/sentenceParser.ml[142,2804+6]..lib/sentenceParser.ml[142,2804+12])
                  Tpat_var "action/1331"
                expression (lib/sentenceParser.ml[143,2819+4]..lib/sentenceParser.ml[143,2819+440])
                  Texp_tuple
                  [
                    expression (lib/sentenceParser.ml[143,2819+5]..lib/sentenceParser.ml[143,2819+153])
                      Texp_tuple
                      [
                        expression (lib/sentenceParser.ml[143,2819+6]..lib/sentenceParser.ml[143,2819+7])
                          Texp_constant Const_int 8
                        expression (lib/sentenceParser.ml[143,2819+9]..lib/sentenceParser.ml[143,2819+152])
                          Texp_constant Const_string("p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000",(lib/sentenceParser.ml[143,2819+10]..lib/sentenceParser.ml[143,2819+151]),None)
                      ]
                    expression (lib/sentenceParser.ml[143,2819+155]..lib/sentenceParser.ml[143,2819+439])
                      Texp_tuple
                      [
                        expression (lib/sentenceParser.ml[143,2819+156]..lib/sentenceParser.ml[143,2819+157])
                          Texp_constant Const_int 8
                        expression (lib/sentenceParser.ml[143,2819+159]..lib/sentenceParser.ml[143,2819+438])
                          Texp_constant Const_string("\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z",(lib/sentenceParser.ml[143,2819+160]..lib/sentenceParser.ml[143,2819+437]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[145,3263+6]..lib/sentenceParser.ml[145,3263+9])
                  Tpat_var "lhs/1332"
                expression (lib/sentenceParser.ml[146,3275+4]..lib/sentenceParser.ml[146,3275+55])
                  Texp_tuple
                  [
                    expression (lib/sentenceParser.ml[146,3275+5]..lib/sentenceParser.ml[146,3275+6])
                      Texp_constant Const_int 4
                    expression (lib/sentenceParser.ml[146,3275+8]..lib/sentenceParser.ml[146,3275+54])
                      Texp_constant Const_string("\r\220\203\187\170\153\153\135veC\"!\017\017",(lib/sentenceParser.ml[146,3275+9]..lib/sentenceParser.ml[146,3275+53]),None)
                  ]
              <def>
                pattern (lib/sentenceParser.ml[148,3334+6]..lib/sentenceParser.ml[148,3334+10])
                  Tpat_var "goto/1333"
                expression (lib/sentenceParser.ml[149,3347+4]..lib/sentenceParser.ml[149,3347+317])
                  Texp_tuple
                  [
                    expression (lib/sentenceParser.ml[149,3347+5]..lib/sentenceParser.ml[149,3347+176])
                      Texp_tuple
                      [
                        expression (lib/sentenceParser.ml[149,3347+6]..lib/sentenceParser.ml[149,3347+7])
                          Texp_constant Const_int 8
                        expression (lib/sentenceParser.ml[149,3347+9]..lib/sentenceParser.ml[149,3347+175])
                          Texp_constant Const_string("\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000",(lib/sentenceParser.ml[149,3347+10]..lib/sentenceParser.ml[149,3347+174]),None)
                      ]
                    expression (lib/sentenceParser.ml[149,3347+178]..lib/sentenceParser.ml[149,3347+316])
                      Texp_tuple
                      [
                        expression (lib/sentenceParser.ml[149,3347+179]..lib/sentenceParser.ml[149,3347+180])
                          Texp_constant Const_int 8
                        expression (lib/sentenceParser.ml[149,3347+182]..lib/sentenceParser.ml[149,3347+315])
                          Texp_constant Const_string("\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029",(lib/sentenceParser.ml[149,3347+183]..lib/sentenceParser.ml[149,3347+314]),None)
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[151,3668+6]..lib/sentenceParser.ml[151,3668+21])
                  Tpat_var "semantic_action/1334"
                expression (lib/sentenceParser.ml[152,3692+4]..lib/sentenceParser.ml[1258,47159+6])
                  Texp_array
                  [
                    expression (lib/sentenceParser.ml[153,3699+6]..lib/sentenceParser.ml[198,5683+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[153,3699+11]..lib/sentenceParser.ml[153,3699+22])
                            Tpat_var "_menhir_env/1407"
                          expression (lib/sentenceParser.ml[154,3725+8]..lib/sentenceParser.ml[198,5683+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[154,3725+12]..lib/sentenceParser.ml[154,3725+25])
                                  Tpat_var "_menhir_stack/1408"
                                expression (lib/sentenceParser.ml[154,3725+28]..lib/sentenceParser.ml[154,3725+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[154,3725+28]..lib/sentenceParser.ml[154,3725+39])
                                    Texp_ident "_menhir_env/1407"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[155,3796+8]..lib/sentenceParser.ml[198,5683+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[155,3796+12]..lib/sentenceParser.ml[179,4876+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[156,3810+40]..lib/sentenceParser.ml[156,3810+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[157,3853+39]..lib/sentenceParser.ml[157,3853+41])
                                          Tpat_var "_4/1416"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[158,3896+41]..lib/sentenceParser.ml[158,3896+54])
                                          Tpat_var "_startpos__4_/1417"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[159,3952+39]..lib/sentenceParser.ml[159,3952+50])
                                          Tpat_var "_endpos__4_/1418"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[160,4004+39]..lib/sentenceParser.ml[178,4863+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[161,4045+42]..lib/sentenceParser.ml[161,4045+43])
                                                Tpat_any
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[162,4090+41]..lib/sentenceParser.ml[162,4090+43])
                                                Tpat_var "_3/1419"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[163,4135+43]..lib/sentenceParser.ml[163,4135+56])
                                                Tpat_var "_startpos__3_/1420"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[164,4193+41]..lib/sentenceParser.ml[164,4193+52])
                                                Tpat_var "_endpos__3_/1421"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[165,4247+41]..lib/sentenceParser.ml[177,4848+13])
                                                Tpat_record
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    pattern (lib/sentenceParser.ml[166,4290+44]..lib/sentenceParser.ml[166,4290+45])
                                                      Tpat_any
                                                  "MenhirLib.EngineTypes.semv"
                                                    pattern (lib/sentenceParser.ml[167,4337+43]..lib/sentenceParser.ml[167,4337+45])
                                                      Tpat_var "_2/1422"
                                                  "MenhirLib.EngineTypes.startp"
                                                    pattern (lib/sentenceParser.ml[168,4384+45]..lib/sentenceParser.ml[168,4384+58])
                                                      Tpat_var "_startpos__2_/1423"
                                                  "MenhirLib.EngineTypes.endp"
                                                    pattern (lib/sentenceParser.ml[169,4444+43]..lib/sentenceParser.ml[169,4444+54])
                                                      Tpat_var "_endpos__2_/1424"
                                                  "MenhirLib.EngineTypes.next"
                                                    pattern (lib/sentenceParser.ml[170,4500+43]..lib/sentenceParser.ml[176,4831+15])
                                                      Tpat_record
                                                      [
                                                        "MenhirLib.EngineTypes.state"
                                                          pattern (lib/sentenceParser.ml[171,4545+46]..lib/sentenceParser.ml[171,4545+55])
                                                            Tpat_var "_menhir_s/1425"
                                                        "MenhirLib.EngineTypes.semv"
                                                          pattern (lib/sentenceParser.ml[172,4602+45]..lib/sentenceParser.ml[172,4602+47])
                                                            Tpat_var "_1/1426"
                                                        "MenhirLib.EngineTypes.startp"
                                                          pattern (lib/sentenceParser.ml[173,4651+47]..lib/sentenceParser.ml[173,4651+60])
                                                            Tpat_var "_startpos__1_/1427"
                                                        "MenhirLib.EngineTypes.endp"
                                                          pattern (lib/sentenceParser.ml[174,4713+45]..lib/sentenceParser.ml[174,4713+56])
                                                            Tpat_var "_endpos__1_/1428"
                                                        "MenhirLib.EngineTypes.next"
                                                          pattern (lib/sentenceParser.ml[175,4771+45]..lib/sentenceParser.ml[175,4771+58])
                                                            Tpat_var "_menhir_stack/1429"
                                                      ]
                                                ]
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[179,4876+12]..lib/sentenceParser.ml[179,4876+25])
                                    Texp_ident "_menhir_stack/1408"
                              ]
                              expression (lib/sentenceParser.ml[180,4905+8]..lib/sentenceParser.ml[198,5683+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[180,4905+12]..lib/sentenceParser.ml[180,4905+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[180,4905+18]..lib/sentenceParser.ml[180,4905+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_4/1430"
                                      pattern (lib/sentenceParser.ml[180,4905+12]..lib/sentenceParser.ml[180,4905+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[180,4905+37]..lib/sentenceParser.ml[180,4905+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[180,4905+18]..lib/sentenceParser.ml[180,4905+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[180,4905+37]..lib/sentenceParser.ml[180,4905+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[180,4905+47]..lib/sentenceParser.ml[180,4905+49])
                                            Texp_ident "_4/1416"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[181,4958+8]..lib/sentenceParser.ml[198,5683+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[181,4958+12]..lib/sentenceParser.ml[181,4958+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[181,4958+18]..lib/sentenceParser.ml[181,4958+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[181,4958+18]..lib/sentenceParser.ml[181,4958+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Tpat_alias "_3/1468"
                                        pattern (lib/sentenceParser.ml[181,4958+12]..lib/sentenceParser.ml[181,4958+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[181,4958+31]..lib/sentenceParser.ml[181,4958+43])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[181,4958+18]..lib/sentenceParser.ml[181,4958+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[181,4958+18]..lib/sentenceParser.ml[181,4958+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[181,4958+31]..lib/sentenceParser.ml[181,4958+40])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[181,4958+41]..lib/sentenceParser.ml[181,4958+43])
                                              Texp_ident "_3/1419"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[182,5005+8]..lib/sentenceParser.ml[198,5683+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[182,5005+12]..lib/sentenceParser.ml[182,5005+14])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (lib/sentenceParser.ml[182,5005+17]..lib/sentenceParser.ml[182,5005+21])
                                              Ttyp_constr "unit/6!"
                                              []
                                          Tpat_alias "_2/1469"
                                          pattern (lib/sentenceParser.ml[182,5005+12]..lib/sentenceParser.ml[182,5005+14])
                                            Tpat_any
                                        expression (lib/sentenceParser.ml[182,5005+24]..lib/sentenceParser.ml[182,5005+36])
                                          extra
                                            Texp_constraint
                                            core_type (lib/sentenceParser.ml[182,5005+17]..lib/sentenceParser.ml[182,5005+21])
                                              Ttyp_constr "unit/6!"
                                              []
                                          Texp_apply
                                          expression (lib/sentenceParser.ml[182,5005+24]..lib/sentenceParser.ml[182,5005+33])
                                            Texp_ident "Stdlib!.Obj.magic"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/sentenceParser.ml[182,5005+34]..lib/sentenceParser.ml[182,5005+36])
                                                Texp_ident "_2/1422"
                                          ]
                                    ]
                                    expression (lib/sentenceParser.ml[183,5045+8]..lib/sentenceParser.ml[198,5683+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[183,5045+12]..lib/sentenceParser.ml[183,5045+14])
                                            extra
                                              Tpat_extra_constraint
                                              core_type (lib/sentenceParser.ml[183,5045+18]..lib/sentenceParser.ml[183,5045+33])
                                                Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                []
                                            Tpat_alias "_1/1470"
                                            pattern (lib/sentenceParser.ml[183,5045+12]..lib/sentenceParser.ml[183,5045+14])
                                              Tpat_any
                                          expression (lib/sentenceParser.ml[183,5045+37]..lib/sentenceParser.ml[183,5045+49])
                                            extra
                                              Texp_constraint
                                              core_type (lib/sentenceParser.ml[183,5045+18]..lib/sentenceParser.ml[183,5045+33])
                                                Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                []
                                            Texp_apply
                                            expression (lib/sentenceParser.ml[183,5045+37]..lib/sentenceParser.ml[183,5045+46])
                                              Texp_ident "Stdlib!.Obj.magic"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/sentenceParser.ml[183,5045+47]..lib/sentenceParser.ml[183,5045+49])
                                                  Texp_ident "_1/1426"
                                            ]
                                      ]
                                      expression (lib/sentenceParser.ml[184,5098+8]..lib/sentenceParser.ml[198,5683+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[184,5098+12]..lib/sentenceParser.ml[184,5098+23])
                                              Tpat_var "_endpos__0_/1471"
                                            expression (lib/sentenceParser.ml[184,5098+26]..lib/sentenceParser.ml[184,5098+66])
                                              Texp_field
                                              expression (lib/sentenceParser.ml[184,5098+26]..lib/sentenceParser.ml[184,5098+39])
                                                Texp_ident "_menhir_stack/1429"
                                              "MenhirLib.EngineTypes.endp"
                                        ]
                                        expression (lib/sentenceParser.ml[185,5168+8]..lib/sentenceParser.ml[198,5683+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[185,5168+12]..lib/sentenceParser.ml[185,5168+21])
                                                Tpat_var "_startpos/1472"
                                              expression (lib/sentenceParser.ml[185,5168+24]..lib/sentenceParser.ml[185,5168+37])
                                                Texp_ident "_startpos__1_/1427"
                                          ]
                                          expression (lib/sentenceParser.ml[186,5209+8]..lib/sentenceParser.ml[198,5683+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[186,5209+12]..lib/sentenceParser.ml[186,5209+19])
                                                  Tpat_var "_endpos/1473"
                                                expression (lib/sentenceParser.ml[186,5209+22]..lib/sentenceParser.ml[186,5209+33])
                                                  Texp_ident "_endpos__4_/1418"
                                            ]
                                            expression (lib/sentenceParser.ml[187,5246+8]..lib/sentenceParser.ml[198,5683+9])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[187,5246+12]..lib/sentenceParser.ml[187,5246+14])
                                                    extra
                                                      Tpat_extra_constraint
                                                      core_type (lib/sentenceParser.ml[187,5246+18]..lib/sentenceParser.ml[187,5246+33])
                                                        Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                        []
                                                    Tpat_alias "_v/1474"
                                                    pattern (lib/sentenceParser.ml[187,5246+12]..lib/sentenceParser.ml[187,5246+14])
                                                      Tpat_any
                                                  expression (lib/sentenceParser.mly[179,5315+43]..lib/sentenceParser.mly[179,5315+58])
                                                    extra
                                                      Texp_constraint
                                                      core_type (lib/sentenceParser.ml[187,5246+18]..lib/sentenceParser.ml[187,5246+33])
                                                        Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                        []
                                                    Texp_construct "NFactor"
                                                    [
                                                      expression (lib/sentenceParser.mly[179,5315+54]..lib/sentenceParser.mly[179,5315+56])
                                                        Texp_ident "_1/1470"
                                                    ]
                                              ]
                                              expression (lib/sentenceParser.ml[192,5416+8]..lib/sentenceParser.ml[198,5683+9])
                                                Texp_record
                                                  fields =
                                                    [
                                                      "MenhirLib.EngineTypes.state"
                                                        expression (lib/sentenceParser.ml[193,5426+40]..lib/sentenceParser.ml[193,5426+49])
                                                          Texp_ident "_menhir_s/1425"
                                                      "MenhirLib.EngineTypes.semv"
                                                        expression (lib/sentenceParser.ml[194,5477+39]..lib/sentenceParser.ml[194,5477+50])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.ml[194,5477+39]..lib/sentenceParser.ml[194,5477+47])
                                                            Texp_ident "Stdlib!.Obj.repr"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.ml[194,5477+48]..lib/sentenceParser.ml[194,5477+50])
                                                                Texp_ident "_v/1474"
                                                          ]
                                                      "MenhirLib.EngineTypes.startp"
                                                        expression (lib/sentenceParser.ml[195,5529+41]..lib/sentenceParser.ml[195,5529+50])
                                                          Texp_ident "_startpos/1472"
                                                      "MenhirLib.EngineTypes.endp"
                                                        expression (lib/sentenceParser.ml[196,5581+39]..lib/sentenceParser.ml[196,5581+46])
                                                          Texp_ident "_endpos/1473"
                                                      "MenhirLib.EngineTypes.next"
                                                        expression (lib/sentenceParser.ml[197,5629+39]..lib/sentenceParser.ml[197,5629+52])
                                                          Texp_ident "_menhir_stack/1429"
                                                    ]
                                                  representation =
                                                    Record_regular
                                                  extended_expression =
                                                    None
                      ]
                    expression (lib/sentenceParser.ml[199,5695+6]..lib/sentenceParser.ml[223,6759+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[199,5695+11]..lib/sentenceParser.ml[199,5695+22])
                            Tpat_var "_menhir_env/1499"
                          expression (lib/sentenceParser.ml[200,5721+8]..lib/sentenceParser.ml[223,6759+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[200,5721+12]..lib/sentenceParser.ml[200,5721+25])
                                  Tpat_var "_menhir_stack/1500"
                                expression (lib/sentenceParser.ml[200,5721+28]..lib/sentenceParser.ml[200,5721+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[200,5721+28]..lib/sentenceParser.ml[200,5721+39])
                                    Texp_ident "_menhir_env/1499"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[201,5792+8]..lib/sentenceParser.ml[223,6759+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[201,5792+12]..lib/sentenceParser.ml[207,6062+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[202,5806+40]..lib/sentenceParser.ml[202,5806+49])
                                          Tpat_var "_menhir_s/1501"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[203,5857+39]..lib/sentenceParser.ml[203,5857+41])
                                          Tpat_var "_1/1502"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[204,5900+41]..lib/sentenceParser.ml[204,5900+54])
                                          Tpat_var "_startpos__1_/1503"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[205,5956+39]..lib/sentenceParser.ml[205,5956+50])
                                          Tpat_var "_endpos__1_/1504"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[206,6008+39]..lib/sentenceParser.ml[206,6008+52])
                                          Tpat_var "_menhir_stack/1505"
                                    ]
                                  expression (lib/sentenceParser.ml[207,6062+12]..lib/sentenceParser.ml[207,6062+25])
                                    Texp_ident "_menhir_stack/1500"
                              ]
                              expression (lib/sentenceParser.ml[208,6091+8]..lib/sentenceParser.ml[223,6759+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[208,6091+12]..lib/sentenceParser.ml[208,6091+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[208,6091+18]..lib/sentenceParser.ml[208,6091+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/1506"
                                      pattern (lib/sentenceParser.ml[208,6091+12]..lib/sentenceParser.ml[208,6091+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[208,6091+37]..lib/sentenceParser.ml[208,6091+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[208,6091+18]..lib/sentenceParser.ml[208,6091+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[208,6091+37]..lib/sentenceParser.ml[208,6091+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[208,6091+47]..lib/sentenceParser.ml[208,6091+49])
                                            Texp_ident "_1/1502"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[209,6144+8]..lib/sentenceParser.ml[223,6759+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[209,6144+12]..lib/sentenceParser.ml[209,6144+23])
                                        Tpat_var "_endpos__0_/1507"
                                      expression (lib/sentenceParser.ml[209,6144+26]..lib/sentenceParser.ml[209,6144+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[209,6144+26]..lib/sentenceParser.ml[209,6144+39])
                                          Texp_ident "_menhir_stack/1505"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[210,6214+8]..lib/sentenceParser.ml[223,6759+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[210,6214+12]..lib/sentenceParser.ml[210,6214+21])
                                          Tpat_var "_startpos/1508"
                                        expression (lib/sentenceParser.ml[210,6214+24]..lib/sentenceParser.ml[210,6214+37])
                                          Texp_ident "_startpos__1_/1503"
                                    ]
                                    expression (lib/sentenceParser.ml[211,6255+8]..lib/sentenceParser.ml[223,6759+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[211,6255+12]..lib/sentenceParser.ml[211,6255+19])
                                            Tpat_var "_endpos/1509"
                                          expression (lib/sentenceParser.ml[211,6255+22]..lib/sentenceParser.ml[211,6255+33])
                                            Texp_ident "_endpos__1_/1504"
                                      ]
                                      expression (lib/sentenceParser.ml[212,6292+8]..lib/sentenceParser.ml[223,6759+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[212,6292+12]..lib/sentenceParser.ml[212,6292+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[212,6292+18]..lib/sentenceParser.ml[212,6292+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/1510"
                                              pattern (lib/sentenceParser.ml[212,6292+12]..lib/sentenceParser.ml[212,6292+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[180,6361+18]..lib/sentenceParser.mly[180,6361+88])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[212,6292+18]..lib/sentenceParser.ml[212,6292+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[180,6361+25]..lib/sentenceParser.mly[180,6361+75])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[180,6361+26]..lib/sentenceParser.mly[180,6361+39])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[180,6361+40]..lib/sentenceParser.mly[180,6361+74])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[180,6361+41]..lib/sentenceParser.mly[180,6361+55])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[180,6361+56]..lib/sentenceParser.mly[180,6361+73])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[180,6361+57]..lib/sentenceParser.mly[180,6361+68])
                                                                Texp_constant Const_string("DEBUG:alt",(lib/sentenceParser.mly[180,6361+58]..lib/sentenceParser.mly[180,6361+67]),None)
                                                              expression (lib/sentenceParser.mly[180,6361+70]..lib/sentenceParser.mly[180,6361+72])
                                                                Texp_ident "_1/1506"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[180,6361+77]..lib/sentenceParser.mly[180,6361+87])
                                                Texp_construct "NFactor"
                                                [
                                                  expression (lib/sentenceParser.mly[180,6361+85]..lib/sentenceParser.mly[180,6361+87])
                                                    Texp_ident "_1/1506"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[217,6492+8]..lib/sentenceParser.ml[223,6759+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[218,6502+40]..lib/sentenceParser.ml[218,6502+49])
                                                    Texp_ident "_menhir_s/1501"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[219,6553+39]..lib/sentenceParser.ml[219,6553+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[219,6553+39]..lib/sentenceParser.ml[219,6553+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[219,6553+48]..lib/sentenceParser.ml[219,6553+50])
                                                          Texp_ident "_v/1510"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[220,6605+41]..lib/sentenceParser.ml[220,6605+50])
                                                    Texp_ident "_startpos/1508"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[221,6657+39]..lib/sentenceParser.ml[221,6657+46])
                                                    Texp_ident "_endpos/1509"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[222,6705+39]..lib/sentenceParser.ml[222,6705+52])
                                                    Texp_ident "_menhir_stack/1505"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[224,6771+6]..lib/sentenceParser.ml[255,8113+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[224,6771+11]..lib/sentenceParser.ml[224,6771+22])
                            Tpat_var "_menhir_env/1696"
                          expression (lib/sentenceParser.ml[225,6797+8]..lib/sentenceParser.ml[255,8113+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[225,6797+12]..lib/sentenceParser.ml[225,6797+25])
                                  Tpat_var "_menhir_stack/1697"
                                expression (lib/sentenceParser.ml[225,6797+28]..lib/sentenceParser.ml[225,6797+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[225,6797+28]..lib/sentenceParser.ml[225,6797+39])
                                    Texp_ident "_menhir_env/1696"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[226,6868+8]..lib/sentenceParser.ml[255,8113+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[226,6868+12]..lib/sentenceParser.ml[238,7396+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[227,6882+40]..lib/sentenceParser.ml[227,6882+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[228,6925+39]..lib/sentenceParser.ml[228,6925+41])
                                          Tpat_var "_2/1698"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[229,6968+41]..lib/sentenceParser.ml[229,6968+54])
                                          Tpat_var "_startpos__2_/1699"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[230,7024+39]..lib/sentenceParser.ml[230,7024+50])
                                          Tpat_var "_endpos__2_/1700"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[231,7076+39]..lib/sentenceParser.ml[237,7383+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[232,7117+42]..lib/sentenceParser.ml[232,7117+51])
                                                Tpat_var "_menhir_s/1701"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[233,7170+41]..lib/sentenceParser.ml[233,7170+43])
                                                Tpat_var "_1/1702"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[234,7215+43]..lib/sentenceParser.ml[234,7215+56])
                                                Tpat_var "_startpos__1_/1703"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[235,7273+41]..lib/sentenceParser.ml[235,7273+52])
                                                Tpat_var "_endpos__1_/1704"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[236,7327+41]..lib/sentenceParser.ml[236,7327+54])
                                                Tpat_var "_menhir_stack/1705"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[238,7396+12]..lib/sentenceParser.ml[238,7396+25])
                                    Texp_ident "_menhir_stack/1697"
                              ]
                              expression (lib/sentenceParser.ml[239,7425+8]..lib/sentenceParser.ml[255,8113+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[239,7425+12]..lib/sentenceParser.ml[239,7425+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[239,7425+18]..lib/sentenceParser.ml[239,7425+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_2/1706"
                                      pattern (lib/sentenceParser.ml[239,7425+12]..lib/sentenceParser.ml[239,7425+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[239,7425+37]..lib/sentenceParser.ml[239,7425+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[239,7425+18]..lib/sentenceParser.ml[239,7425+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[239,7425+37]..lib/sentenceParser.ml[239,7425+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[239,7425+47]..lib/sentenceParser.ml[239,7425+49])
                                            Texp_ident "_2/1698"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[240,7478+8]..lib/sentenceParser.ml[255,8113+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[240,7478+12]..lib/sentenceParser.ml[240,7478+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[240,7478+17]..lib/sentenceParser.ml[240,7478+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Tpat_alias "_1/1707"
                                        pattern (lib/sentenceParser.ml[240,7478+12]..lib/sentenceParser.ml[240,7478+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[240,7478+24]..lib/sentenceParser.ml[240,7478+36])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[240,7478+17]..lib/sentenceParser.ml[240,7478+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[240,7478+24]..lib/sentenceParser.ml[240,7478+33])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[240,7478+34]..lib/sentenceParser.ml[240,7478+36])
                                              Texp_ident "_1/1702"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[241,7518+8]..lib/sentenceParser.ml[255,8113+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[241,7518+12]..lib/sentenceParser.ml[241,7518+23])
                                          Tpat_var "_endpos__0_/1708"
                                        expression (lib/sentenceParser.ml[241,7518+26]..lib/sentenceParser.ml[241,7518+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[241,7518+26]..lib/sentenceParser.ml[241,7518+39])
                                            Texp_ident "_menhir_stack/1705"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[242,7588+8]..lib/sentenceParser.ml[255,8113+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[242,7588+12]..lib/sentenceParser.ml[242,7588+21])
                                            Tpat_var "_startpos/1709"
                                          expression (lib/sentenceParser.ml[242,7588+24]..lib/sentenceParser.ml[242,7588+37])
                                            Texp_ident "_startpos__1_/1703"
                                      ]
                                      expression (lib/sentenceParser.ml[243,7629+8]..lib/sentenceParser.ml[255,8113+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[243,7629+12]..lib/sentenceParser.ml[243,7629+19])
                                              Tpat_var "_endpos/1710"
                                            expression (lib/sentenceParser.ml[243,7629+22]..lib/sentenceParser.ml[243,7629+33])
                                              Texp_ident "_endpos__2_/1700"
                                        ]
                                        expression (lib/sentenceParser.ml[244,7666+8]..lib/sentenceParser.ml[255,8113+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[244,7666+12]..lib/sentenceParser.ml[244,7666+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[244,7666+18]..lib/sentenceParser.ml[244,7666+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Tpat_alias "_v/1711"
                                                pattern (lib/sentenceParser.ml[244,7666+12]..lib/sentenceParser.ml[244,7666+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[189,7735+0]..lib/sentenceParser.mly[189,7735+68])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[244,7666+18]..lib/sentenceParser.ml[244,7666+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[189,7735+4]..lib/sentenceParser.mly[189,7735+54])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[189,7735+5]..lib/sentenceParser.mly[189,7735+18])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[189,7735+19]..lib/sentenceParser.mly[189,7735+53])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[189,7735+20]..lib/sentenceParser.mly[189,7735+34])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[189,7735+35]..lib/sentenceParser.mly[189,7735+52])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[189,7735+36]..lib/sentenceParser.mly[189,7735+48])
                                                                  Texp_constant Const_string("DEBUG:ccrs",(lib/sentenceParser.mly[189,7735+37]..lib/sentenceParser.mly[189,7735+47]),None)
                                                                expression (lib/sentenceParser.mly[189,7735+49]..lib/sentenceParser.mly[189,7735+51])
                                                                  Texp_ident "_2/1706"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[189,7735+57]..lib/sentenceParser.mly[189,7735+67])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[189,7735+65]..lib/sentenceParser.mly[189,7735+67])
                                                      Texp_ident "_2/1706"
                                                  ]
                                          ]
                                          expression (lib/sentenceParser.ml[249,7846+8]..lib/sentenceParser.ml[255,8113+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[250,7856+40]..lib/sentenceParser.ml[250,7856+49])
                                                      Texp_ident "_menhir_s/1701"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[251,7907+39]..lib/sentenceParser.ml[251,7907+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[251,7907+39]..lib/sentenceParser.ml[251,7907+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[251,7907+48]..lib/sentenceParser.ml[251,7907+50])
                                                            Texp_ident "_v/1711"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[252,7959+41]..lib/sentenceParser.ml[252,7959+50])
                                                      Texp_ident "_startpos/1709"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[253,8011+39]..lib/sentenceParser.ml[253,8011+46])
                                                      Texp_ident "_endpos/1710"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[254,8059+39]..lib/sentenceParser.ml[254,8059+52])
                                                      Texp_ident "_menhir_stack/1705"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[256,8125+6]..lib/sentenceParser.ml[280,9173+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[256,8125+11]..lib/sentenceParser.ml[256,8125+22])
                            Tpat_var "_menhir_env/1712"
                          expression (lib/sentenceParser.ml[257,8151+8]..lib/sentenceParser.ml[280,9173+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[257,8151+12]..lib/sentenceParser.ml[257,8151+25])
                                  Tpat_var "_menhir_stack/1713"
                                expression (lib/sentenceParser.ml[257,8151+28]..lib/sentenceParser.ml[257,8151+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[257,8151+28]..lib/sentenceParser.ml[257,8151+39])
                                    Texp_ident "_menhir_env/1712"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[258,8222+8]..lib/sentenceParser.ml[280,9173+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[258,8222+12]..lib/sentenceParser.ml[264,8492+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[259,8236+40]..lib/sentenceParser.ml[259,8236+49])
                                          Tpat_var "_menhir_s/1714"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[260,8287+39]..lib/sentenceParser.ml[260,8287+41])
                                          Tpat_var "_1/1715"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[261,8330+41]..lib/sentenceParser.ml[261,8330+54])
                                          Tpat_var "_startpos__1_/1716"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[262,8386+39]..lib/sentenceParser.ml[262,8386+50])
                                          Tpat_var "_endpos__1_/1717"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[263,8438+39]..lib/sentenceParser.ml[263,8438+52])
                                          Tpat_var "_menhir_stack/1718"
                                    ]
                                  expression (lib/sentenceParser.ml[264,8492+12]..lib/sentenceParser.ml[264,8492+25])
                                    Texp_ident "_menhir_stack/1713"
                              ]
                              expression (lib/sentenceParser.ml[265,8521+8]..lib/sentenceParser.ml[280,9173+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[265,8521+12]..lib/sentenceParser.ml[265,8521+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[265,8521+18]..lib/sentenceParser.ml[265,8521+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/1719"
                                      pattern (lib/sentenceParser.ml[265,8521+12]..lib/sentenceParser.ml[265,8521+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[265,8521+37]..lib/sentenceParser.ml[265,8521+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[265,8521+18]..lib/sentenceParser.ml[265,8521+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[265,8521+37]..lib/sentenceParser.ml[265,8521+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[265,8521+47]..lib/sentenceParser.ml[265,8521+49])
                                            Texp_ident "_1/1715"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[266,8574+8]..lib/sentenceParser.ml[280,9173+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[266,8574+12]..lib/sentenceParser.ml[266,8574+23])
                                        Tpat_var "_endpos__0_/1720"
                                      expression (lib/sentenceParser.ml[266,8574+26]..lib/sentenceParser.ml[266,8574+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[266,8574+26]..lib/sentenceParser.ml[266,8574+39])
                                          Texp_ident "_menhir_stack/1718"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[267,8644+8]..lib/sentenceParser.ml[280,9173+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[267,8644+12]..lib/sentenceParser.ml[267,8644+21])
                                          Tpat_var "_startpos/1721"
                                        expression (lib/sentenceParser.ml[267,8644+24]..lib/sentenceParser.ml[267,8644+37])
                                          Texp_ident "_startpos__1_/1716"
                                    ]
                                    expression (lib/sentenceParser.ml[268,8685+8]..lib/sentenceParser.ml[280,9173+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[268,8685+12]..lib/sentenceParser.ml[268,8685+19])
                                            Tpat_var "_endpos/1722"
                                          expression (lib/sentenceParser.ml[268,8685+22]..lib/sentenceParser.ml[268,8685+33])
                                            Texp_ident "_endpos__1_/1717"
                                      ]
                                      expression (lib/sentenceParser.ml[269,8722+8]..lib/sentenceParser.ml[280,9173+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[269,8722+12]..lib/sentenceParser.ml[269,8722+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[269,8722+18]..lib/sentenceParser.ml[269,8722+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/1723"
                                              pattern (lib/sentenceParser.ml[269,8722+12]..lib/sentenceParser.ml[269,8722+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[192,8791+4]..lib/sentenceParser.mly[192,8791+72])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[269,8722+18]..lib/sentenceParser.ml[269,8722+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[192,8791+8]..lib/sentenceParser.mly[192,8791+59])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[192,8791+9]..lib/sentenceParser.mly[192,8791+22])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[192,8791+23]..lib/sentenceParser.mly[192,8791+58])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[192,8791+24]..lib/sentenceParser.mly[192,8791+38])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[192,8791+39]..lib/sentenceParser.mly[192,8791+57])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[192,8791+40]..lib/sentenceParser.mly[192,8791+53])
                                                                Texp_constant Const_string("DEBUG:cc2rs",(lib/sentenceParser.mly[192,8791+41]..lib/sentenceParser.mly[192,8791+52]),None)
                                                              expression (lib/sentenceParser.mly[192,8791+54]..lib/sentenceParser.mly[192,8791+56])
                                                                Texp_ident "_1/1719"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[192,8791+61]..lib/sentenceParser.mly[192,8791+70])
                                                Texp_construct "CharClass"
                                                []
                                        ]
                                        expression (lib/sentenceParser.ml[274,8906+8]..lib/sentenceParser.ml[280,9173+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[275,8916+40]..lib/sentenceParser.ml[275,8916+49])
                                                    Texp_ident "_menhir_s/1714"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[276,8967+39]..lib/sentenceParser.ml[276,8967+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[276,8967+39]..lib/sentenceParser.ml[276,8967+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[276,8967+48]..lib/sentenceParser.ml[276,8967+50])
                                                          Texp_ident "_v/1723"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[277,9019+41]..lib/sentenceParser.ml[277,9019+50])
                                                    Texp_ident "_startpos/1721"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[278,9071+39]..lib/sentenceParser.ml[278,9071+46])
                                                    Texp_ident "_endpos/1722"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[279,9119+39]..lib/sentenceParser.ml[279,9119+52])
                                                    Texp_ident "_menhir_stack/1718"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[281,9185+6]..lib/sentenceParser.ml[329,11098+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[281,9185+11]..lib/sentenceParser.ml[281,9185+22])
                            Tpat_var "_menhir_env/1724"
                          expression (lib/sentenceParser.ml[282,9211+8]..lib/sentenceParser.ml[329,11098+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[282,9211+12]..lib/sentenceParser.ml[282,9211+25])
                                  Tpat_var "_menhir_stack/1725"
                                expression (lib/sentenceParser.ml[282,9211+28]..lib/sentenceParser.ml[282,9211+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[282,9211+28]..lib/sentenceParser.ml[282,9211+39])
                                    Texp_ident "_menhir_env/1724"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[283,9282+8]..lib/sentenceParser.ml[329,11098+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[283,9282+12]..lib/sentenceParser.ml[301,10080+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[284,9296+40]..lib/sentenceParser.ml[284,9296+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[285,9339+39]..lib/sentenceParser.ml[285,9339+41])
                                          Tpat_var "_3/1726"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[286,9382+41]..lib/sentenceParser.ml[286,9382+54])
                                          Tpat_var "_startpos__3_/1727"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[287,9438+39]..lib/sentenceParser.ml[287,9438+50])
                                          Tpat_var "_endpos__3_/1728"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[288,9490+39]..lib/sentenceParser.ml[300,10067+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[289,9531+42]..lib/sentenceParser.ml[289,9531+43])
                                                Tpat_any
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[290,9576+41]..lib/sentenceParser.ml[290,9576+43])
                                                Tpat_var "_2/1729"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[291,9621+43]..lib/sentenceParser.ml[291,9621+56])
                                                Tpat_var "_startpos__2_/1730"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[292,9679+41]..lib/sentenceParser.ml[292,9679+52])
                                                Tpat_var "_endpos__2_/1731"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[293,9733+41]..lib/sentenceParser.ml[299,10052+13])
                                                Tpat_record
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    pattern (lib/sentenceParser.ml[294,9776+44]..lib/sentenceParser.ml[294,9776+53])
                                                      Tpat_var "_menhir_s/1732"
                                                  "MenhirLib.EngineTypes.semv"
                                                    pattern (lib/sentenceParser.ml[295,9831+43]..lib/sentenceParser.ml[295,9831+45])
                                                      Tpat_var "_1/1733"
                                                  "MenhirLib.EngineTypes.startp"
                                                    pattern (lib/sentenceParser.ml[296,9878+45]..lib/sentenceParser.ml[296,9878+58])
                                                      Tpat_var "_startpos__1_/1734"
                                                  "MenhirLib.EngineTypes.endp"
                                                    pattern (lib/sentenceParser.ml[297,9938+43]..lib/sentenceParser.ml[297,9938+54])
                                                      Tpat_var "_endpos__1_/1735"
                                                  "MenhirLib.EngineTypes.next"
                                                    pattern (lib/sentenceParser.ml[298,9994+43]..lib/sentenceParser.ml[298,9994+56])
                                                      Tpat_var "_menhir_stack/1736"
                                                ]
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[301,10080+12]..lib/sentenceParser.ml[301,10080+25])
                                    Texp_ident "_menhir_stack/1725"
                              ]
                              expression (lib/sentenceParser.ml[302,10109+8]..lib/sentenceParser.ml[329,11098+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[302,10109+12]..lib/sentenceParser.ml[302,10109+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[26,10158+8]..lib/sentenceParser.mly[26,10158+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "_3/1737"
                                      pattern (lib/sentenceParser.ml[302,10109+12]..lib/sentenceParser.ml[302,10109+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[306,10201+12]..lib/sentenceParser.ml[306,10201+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[26,10158+8]..lib/sentenceParser.mly[26,10158+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[306,10201+12]..lib/sentenceParser.ml[306,10201+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[306,10201+22]..lib/sentenceParser.ml[306,10201+24])
                                            Texp_ident "_3/1726"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[307,10229+8]..lib/sentenceParser.ml[329,11098+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[307,10229+12]..lib/sentenceParser.ml[307,10229+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[307,10229+17]..lib/sentenceParser.ml[307,10229+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Tpat_alias "_2/1738"
                                        pattern (lib/sentenceParser.ml[307,10229+12]..lib/sentenceParser.ml[307,10229+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[307,10229+24]..lib/sentenceParser.ml[307,10229+36])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[307,10229+17]..lib/sentenceParser.ml[307,10229+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[307,10229+24]..lib/sentenceParser.ml[307,10229+33])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[307,10229+34]..lib/sentenceParser.ml[307,10229+36])
                                              Texp_ident "_2/1729"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[308,10269+8]..lib/sentenceParser.ml[329,11098+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[308,10269+12]..lib/sentenceParser.ml[308,10269+14])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (lib/sentenceParser.mly[26,10318+8]..lib/sentenceParser.mly[26,10318+11])
                                              Ttyp_constr "int/1!"
                                              []
                                          Tpat_alias "_1/1739"
                                          pattern (lib/sentenceParser.ml[308,10269+12]..lib/sentenceParser.ml[308,10269+14])
                                            Tpat_any
                                        expression (lib/sentenceParser.ml[312,10361+12]..lib/sentenceParser.ml[312,10361+24])
                                          extra
                                            Texp_constraint
                                            core_type (lib/sentenceParser.mly[26,10318+8]..lib/sentenceParser.mly[26,10318+11])
                                              Ttyp_constr "int/1!"
                                              []
                                          Texp_apply
                                          expression (lib/sentenceParser.ml[312,10361+12]..lib/sentenceParser.ml[312,10361+21])
                                            Texp_ident "Stdlib!.Obj.magic"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/sentenceParser.ml[312,10361+22]..lib/sentenceParser.ml[312,10361+24])
                                                Texp_ident "_1/1733"
                                          ]
                                    ]
                                    expression (lib/sentenceParser.ml[313,10389+8]..lib/sentenceParser.ml[329,11098+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[313,10389+12]..lib/sentenceParser.ml[313,10389+23])
                                            Tpat_var "_endpos__0_/1740"
                                          expression (lib/sentenceParser.ml[313,10389+26]..lib/sentenceParser.ml[313,10389+66])
                                            Texp_field
                                            expression (lib/sentenceParser.ml[313,10389+26]..lib/sentenceParser.ml[313,10389+39])
                                              Texp_ident "_menhir_stack/1736"
                                            "MenhirLib.EngineTypes.endp"
                                      ]
                                      expression (lib/sentenceParser.ml[314,10459+8]..lib/sentenceParser.ml[329,11098+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[314,10459+12]..lib/sentenceParser.ml[314,10459+21])
                                              Tpat_var "_startpos/1741"
                                            expression (lib/sentenceParser.ml[314,10459+24]..lib/sentenceParser.ml[314,10459+37])
                                              Texp_ident "_startpos__1_/1734"
                                        ]
                                        expression (lib/sentenceParser.ml[315,10500+8]..lib/sentenceParser.ml[329,11098+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[315,10500+12]..lib/sentenceParser.ml[315,10500+19])
                                                Tpat_var "_endpos/1742"
                                              expression (lib/sentenceParser.ml[315,10500+22]..lib/sentenceParser.ml[315,10500+33])
                                                Texp_ident "_endpos__3_/1728"
                                          ]
                                          expression (lib/sentenceParser.ml[316,10537+8]..lib/sentenceParser.ml[329,11098+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[316,10537+12]..lib/sentenceParser.ml[316,10537+14])
                                                  extra
                                                    Tpat_extra_constraint
                                                    core_type (lib/sentenceParser.ml[316,10537+18]..lib/sentenceParser.ml[316,10537+33])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                      []
                                                  Tpat_alias "_v/1743"
                                                  pattern (lib/sentenceParser.ml[316,10537+12]..lib/sentenceParser.ml[316,10537+14])
                                                    Tpat_any
                                                expression (lib/sentenceParser.mly[197,10606+9]..lib/sentenceParser.mly[199,10778+10])
                                                  extra
                                                    Texp_constraint
                                                    core_type (lib/sentenceParser.ml[316,10537+18]..lib/sentenceParser.ml[316,10537+33])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                      []
                                                  Texp_sequence
                                                  expression (lib/sentenceParser.mly[197,10606+13]..lib/sentenceParser.mly[197,10606+67])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.mly[197,10606+14]..lib/sentenceParser.mly[197,10606+27])
                                                      Texp_ident "Stdlib!.print_endline"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.mly[197,10606+28]..lib/sentenceParser.mly[197,10606+66])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[197,10606+29]..lib/sentenceParser.mly[197,10606+43])
                                                            Texp_ident "Batteries!.dump"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[197,10606+44]..lib/sentenceParser.mly[197,10606+65])
                                                                Texp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[197,10606+45]..lib/sentenceParser.mly[197,10606+58])
                                                                    Texp_constant Const_string("DEBUG:cc3rs",(lib/sentenceParser.mly[197,10606+46]..lib/sentenceParser.mly[197,10606+57]),None)
                                                                  expression (lib/sentenceParser.mly[197,10606+59]..lib/sentenceParser.mly[197,10606+61])
                                                                    Texp_ident "_1/1739"
                                                                  expression (lib/sentenceParser.mly[197,10606+62]..lib/sentenceParser.mly[197,10606+64])
                                                                    Texp_ident "_2/1738"
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[197,10606+70]..lib/sentenceParser.mly[197,10606+80])
                                                    Texp_construct "CharInt"
                                                    [
                                                      expression (lib/sentenceParser.mly[197,10606+78]..lib/sentenceParser.mly[197,10606+80])
                                                        Texp_ident "_1/1739"
                                                    ]
                                            ]
                                            expression (lib/sentenceParser.ml[323,10831+8]..lib/sentenceParser.ml[329,11098+9])
                                              Texp_record
                                                fields =
                                                  [
                                                    "MenhirLib.EngineTypes.state"
                                                      expression (lib/sentenceParser.ml[324,10841+40]..lib/sentenceParser.ml[324,10841+49])
                                                        Texp_ident "_menhir_s/1732"
                                                    "MenhirLib.EngineTypes.semv"
                                                      expression (lib/sentenceParser.ml[325,10892+39]..lib/sentenceParser.ml[325,10892+50])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.ml[325,10892+39]..lib/sentenceParser.ml[325,10892+47])
                                                          Texp_ident "Stdlib!.Obj.repr"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.ml[325,10892+48]..lib/sentenceParser.ml[325,10892+50])
                                                              Texp_ident "_v/1743"
                                                        ]
                                                    "MenhirLib.EngineTypes.startp"
                                                      expression (lib/sentenceParser.ml[326,10944+41]..lib/sentenceParser.ml[326,10944+50])
                                                        Texp_ident "_startpos/1741"
                                                    "MenhirLib.EngineTypes.endp"
                                                      expression (lib/sentenceParser.ml[327,10996+39]..lib/sentenceParser.ml[327,10996+46])
                                                        Texp_ident "_endpos/1742"
                                                    "MenhirLib.EngineTypes.next"
                                                      expression (lib/sentenceParser.ml[328,11044+39]..lib/sentenceParser.ml[328,11044+52])
                                                        Texp_ident "_menhir_stack/1736"
                                                  ]
                                                representation =
                                                  Record_regular
                                                extended_expression =
                                                  None
                      ]
                    expression (lib/sentenceParser.ml[330,11110+6]..lib/sentenceParser.ml[365,12537+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[330,11110+11]..lib/sentenceParser.ml[330,11110+22])
                            Tpat_var "_menhir_env/1744"
                          expression (lib/sentenceParser.ml[331,11136+8]..lib/sentenceParser.ml[365,12537+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[331,11136+12]..lib/sentenceParser.ml[331,11136+25])
                                  Tpat_var "_menhir_stack/1745"
                                expression (lib/sentenceParser.ml[331,11136+28]..lib/sentenceParser.ml[331,11136+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[331,11136+28]..lib/sentenceParser.ml[331,11136+39])
                                    Texp_ident "_menhir_env/1744"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[332,11207+8]..lib/sentenceParser.ml[365,12537+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[332,11207+12]..lib/sentenceParser.ml[344,11735+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[333,11221+40]..lib/sentenceParser.ml[333,11221+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[334,11264+39]..lib/sentenceParser.ml[334,11264+41])
                                          Tpat_var "_2/1746"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[335,11307+41]..lib/sentenceParser.ml[335,11307+54])
                                          Tpat_var "_startpos__2_/1747"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[336,11363+39]..lib/sentenceParser.ml[336,11363+50])
                                          Tpat_var "_endpos__2_/1748"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[337,11415+39]..lib/sentenceParser.ml[343,11722+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[338,11456+42]..lib/sentenceParser.ml[338,11456+51])
                                                Tpat_var "_menhir_s/1749"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[339,11509+41]..lib/sentenceParser.ml[339,11509+43])
                                                Tpat_var "_1/1750"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[340,11554+43]..lib/sentenceParser.ml[340,11554+56])
                                                Tpat_var "_startpos__1_/1751"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[341,11612+41]..lib/sentenceParser.ml[341,11612+52])
                                                Tpat_var "_endpos__1_/1752"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[342,11666+41]..lib/sentenceParser.ml[342,11666+54])
                                                Tpat_var "_menhir_stack/1753"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[344,11735+12]..lib/sentenceParser.ml[344,11735+25])
                                    Texp_ident "_menhir_stack/1745"
                              ]
                              expression (lib/sentenceParser.ml[345,11764+8]..lib/sentenceParser.ml[365,12537+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[345,11764+12]..lib/sentenceParser.ml[345,11764+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[26,11813+8]..lib/sentenceParser.mly[26,11813+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "_2/1754"
                                      pattern (lib/sentenceParser.ml[345,11764+12]..lib/sentenceParser.ml[345,11764+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[349,11856+12]..lib/sentenceParser.ml[349,11856+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[26,11813+8]..lib/sentenceParser.mly[26,11813+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[349,11856+12]..lib/sentenceParser.ml[349,11856+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[349,11856+22]..lib/sentenceParser.ml[349,11856+24])
                                            Texp_ident "_2/1746"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[350,11884+8]..lib/sentenceParser.ml[365,12537+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[350,11884+12]..lib/sentenceParser.ml[350,11884+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[350,11884+18]..lib/sentenceParser.ml[350,11884+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_1/1755"
                                        pattern (lib/sentenceParser.ml[350,11884+12]..lib/sentenceParser.ml[350,11884+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[350,11884+37]..lib/sentenceParser.ml[350,11884+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[350,11884+18]..lib/sentenceParser.ml[350,11884+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[350,11884+37]..lib/sentenceParser.ml[350,11884+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[350,11884+47]..lib/sentenceParser.ml[350,11884+49])
                                              Texp_ident "_1/1750"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[351,11937+8]..lib/sentenceParser.ml[365,12537+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[351,11937+12]..lib/sentenceParser.ml[351,11937+23])
                                          Tpat_var "_endpos__0_/1756"
                                        expression (lib/sentenceParser.ml[351,11937+26]..lib/sentenceParser.ml[351,11937+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[351,11937+26]..lib/sentenceParser.ml[351,11937+39])
                                            Texp_ident "_menhir_stack/1753"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[352,12007+8]..lib/sentenceParser.ml[365,12537+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[352,12007+12]..lib/sentenceParser.ml[352,12007+21])
                                            Tpat_var "_startpos/1757"
                                          expression (lib/sentenceParser.ml[352,12007+24]..lib/sentenceParser.ml[352,12007+37])
                                            Texp_ident "_startpos__1_/1751"
                                      ]
                                      expression (lib/sentenceParser.ml[353,12048+8]..lib/sentenceParser.ml[365,12537+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[353,12048+12]..lib/sentenceParser.ml[353,12048+19])
                                              Tpat_var "_endpos/1758"
                                            expression (lib/sentenceParser.ml[353,12048+22]..lib/sentenceParser.ml[353,12048+33])
                                              Texp_ident "_endpos__2_/1748"
                                        ]
                                        expression (lib/sentenceParser.ml[354,12085+8]..lib/sentenceParser.ml[365,12537+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[354,12085+12]..lib/sentenceParser.ml[354,12085+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[354,12085+18]..lib/sentenceParser.ml[354,12085+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Tpat_alias "_v/1759"
                                                pattern (lib/sentenceParser.ml[354,12085+12]..lib/sentenceParser.ml[354,12085+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[202,12154+4]..lib/sentenceParser.mly[202,12154+73])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[354,12085+18]..lib/sentenceParser.ml[354,12085+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[202,12154+8]..lib/sentenceParser.mly[202,12154+59])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[202,12154+9]..lib/sentenceParser.mly[202,12154+22])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[202,12154+23]..lib/sentenceParser.mly[202,12154+58])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[202,12154+24]..lib/sentenceParser.mly[202,12154+38])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[202,12154+39]..lib/sentenceParser.mly[202,12154+57])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[202,12154+40]..lib/sentenceParser.mly[202,12154+53])
                                                                  Texp_constant Const_string("DEBUG:cc4rs",(lib/sentenceParser.mly[202,12154+41]..lib/sentenceParser.mly[202,12154+52]),None)
                                                                expression (lib/sentenceParser.mly[202,12154+54]..lib/sentenceParser.mly[202,12154+56])
                                                                  Texp_ident "_1/1755"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[202,12154+61]..lib/sentenceParser.mly[202,12154+71])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[202,12154+69]..lib/sentenceParser.mly[202,12154+71])
                                                      Texp_ident "_1/1755"
                                                  ]
                                          ]
                                          expression (lib/sentenceParser.ml[359,12270+8]..lib/sentenceParser.ml[365,12537+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[360,12280+40]..lib/sentenceParser.ml[360,12280+49])
                                                      Texp_ident "_menhir_s/1749"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[361,12331+39]..lib/sentenceParser.ml[361,12331+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[361,12331+39]..lib/sentenceParser.ml[361,12331+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[361,12331+48]..lib/sentenceParser.ml[361,12331+50])
                                                            Texp_ident "_v/1759"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[362,12383+41]..lib/sentenceParser.ml[362,12383+50])
                                                      Texp_ident "_startpos/1757"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[363,12435+39]..lib/sentenceParser.ml[363,12435+46])
                                                      Texp_ident "_endpos/1758"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[364,12483+39]..lib/sentenceParser.ml[364,12483+52])
                                                      Texp_ident "_menhir_stack/1753"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[366,12549+6]..lib/sentenceParser.ml[394,13665+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[366,12549+11]..lib/sentenceParser.ml[366,12549+22])
                            Tpat_var "_menhir_env/1760"
                          expression (lib/sentenceParser.ml[367,12575+8]..lib/sentenceParser.ml[394,13665+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[367,12575+12]..lib/sentenceParser.ml[367,12575+25])
                                  Tpat_var "_menhir_stack/1761"
                                expression (lib/sentenceParser.ml[367,12575+28]..lib/sentenceParser.ml[367,12575+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[367,12575+28]..lib/sentenceParser.ml[367,12575+39])
                                    Texp_ident "_menhir_env/1760"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[368,12646+8]..lib/sentenceParser.ml[394,13665+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[368,12646+12]..lib/sentenceParser.ml[374,12916+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[369,12660+40]..lib/sentenceParser.ml[369,12660+49])
                                          Tpat_var "_menhir_s/1762"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[370,12711+39]..lib/sentenceParser.ml[370,12711+41])
                                          Tpat_var "_1/1763"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[371,12754+41]..lib/sentenceParser.ml[371,12754+54])
                                          Tpat_var "_startpos__1_/1764"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[372,12810+39]..lib/sentenceParser.ml[372,12810+50])
                                          Tpat_var "_endpos__1_/1765"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[373,12862+39]..lib/sentenceParser.ml[373,12862+52])
                                          Tpat_var "_menhir_stack/1766"
                                    ]
                                  expression (lib/sentenceParser.ml[374,12916+12]..lib/sentenceParser.ml[374,12916+25])
                                    Texp_ident "_menhir_stack/1761"
                              ]
                              expression (lib/sentenceParser.ml[375,12945+8]..lib/sentenceParser.ml[394,13665+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[375,12945+12]..lib/sentenceParser.ml[375,12945+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[26,12994+8]..lib/sentenceParser.mly[26,12994+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Tpat_alias "_1/1767"
                                      pattern (lib/sentenceParser.ml[375,12945+12]..lib/sentenceParser.ml[375,12945+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[379,13037+12]..lib/sentenceParser.ml[379,13037+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[26,12994+8]..lib/sentenceParser.mly[26,12994+11])
                                          Ttyp_constr "int/1!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[379,13037+12]..lib/sentenceParser.ml[379,13037+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[379,13037+22]..lib/sentenceParser.ml[379,13037+24])
                                            Texp_ident "_1/1763"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[380,13065+8]..lib/sentenceParser.ml[394,13665+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[380,13065+12]..lib/sentenceParser.ml[380,13065+23])
                                        Tpat_var "_endpos__0_/1768"
                                      expression (lib/sentenceParser.ml[380,13065+26]..lib/sentenceParser.ml[380,13065+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[380,13065+26]..lib/sentenceParser.ml[380,13065+39])
                                          Texp_ident "_menhir_stack/1766"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[381,13135+8]..lib/sentenceParser.ml[394,13665+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[381,13135+12]..lib/sentenceParser.ml[381,13135+21])
                                          Tpat_var "_startpos/1769"
                                        expression (lib/sentenceParser.ml[381,13135+24]..lib/sentenceParser.ml[381,13135+37])
                                          Texp_ident "_startpos__1_/1764"
                                    ]
                                    expression (lib/sentenceParser.ml[382,13176+8]..lib/sentenceParser.ml[394,13665+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[382,13176+12]..lib/sentenceParser.ml[382,13176+19])
                                            Tpat_var "_endpos/1770"
                                          expression (lib/sentenceParser.ml[382,13176+22]..lib/sentenceParser.ml[382,13176+33])
                                            Texp_ident "_endpos__1_/1765"
                                      ]
                                      expression (lib/sentenceParser.ml[383,13213+8]..lib/sentenceParser.ml[394,13665+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[383,13213+12]..lib/sentenceParser.ml[383,13213+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[383,13213+18]..lib/sentenceParser.ml[383,13213+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/1771"
                                              pattern (lib/sentenceParser.ml[383,13213+12]..lib/sentenceParser.ml[383,13213+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[205,13282+4]..lib/sentenceParser.mly[205,13282+73])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[383,13213+18]..lib/sentenceParser.ml[383,13213+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[205,13282+8]..lib/sentenceParser.mly[205,13282+59])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[205,13282+9]..lib/sentenceParser.mly[205,13282+22])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[205,13282+23]..lib/sentenceParser.mly[205,13282+58])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[205,13282+24]..lib/sentenceParser.mly[205,13282+38])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[205,13282+39]..lib/sentenceParser.mly[205,13282+57])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[205,13282+40]..lib/sentenceParser.mly[205,13282+53])
                                                                Texp_constant Const_string("DEBUG:cc5rs",(lib/sentenceParser.mly[205,13282+41]..lib/sentenceParser.mly[205,13282+52]),None)
                                                              expression (lib/sentenceParser.mly[205,13282+54]..lib/sentenceParser.mly[205,13282+56])
                                                                Texp_ident "_1/1767"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[205,13282+61]..lib/sentenceParser.mly[205,13282+71])
                                                Texp_construct "CharInt"
                                                [
                                                  expression (lib/sentenceParser.mly[205,13282+69]..lib/sentenceParser.mly[205,13282+71])
                                                    Texp_ident "_1/1767"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[388,13398+8]..lib/sentenceParser.ml[394,13665+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[389,13408+40]..lib/sentenceParser.ml[389,13408+49])
                                                    Texp_ident "_menhir_s/1762"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[390,13459+39]..lib/sentenceParser.ml[390,13459+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[390,13459+39]..lib/sentenceParser.ml[390,13459+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[390,13459+48]..lib/sentenceParser.ml[390,13459+50])
                                                          Texp_ident "_v/1771"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[391,13511+41]..lib/sentenceParser.ml[391,13511+50])
                                                    Texp_ident "_startpos/1769"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[392,13563+39]..lib/sentenceParser.ml[392,13563+46])
                                                    Texp_ident "_endpos/1770"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[393,13611+39]..lib/sentenceParser.ml[393,13611+52])
                                                    Texp_ident "_menhir_stack/1766"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[395,13677+6]..lib/sentenceParser.ml[426,15064+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[395,13677+11]..lib/sentenceParser.ml[395,13677+22])
                            Tpat_var "_menhir_env/1772"
                          expression (lib/sentenceParser.ml[396,13703+8]..lib/sentenceParser.ml[426,15064+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[396,13703+12]..lib/sentenceParser.ml[396,13703+25])
                                  Tpat_var "_menhir_stack/1773"
                                expression (lib/sentenceParser.ml[396,13703+28]..lib/sentenceParser.ml[396,13703+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[396,13703+28]..lib/sentenceParser.ml[396,13703+39])
                                    Texp_ident "_menhir_env/1772"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[397,13774+8]..lib/sentenceParser.ml[426,15064+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[397,13774+12]..lib/sentenceParser.ml[409,14302+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[398,13788+40]..lib/sentenceParser.ml[398,13788+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[399,13831+39]..lib/sentenceParser.ml[399,13831+41])
                                          Tpat_var "_2/1774"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[400,13874+41]..lib/sentenceParser.ml[400,13874+54])
                                          Tpat_var "_startpos__2_/1775"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[401,13930+39]..lib/sentenceParser.ml[401,13930+50])
                                          Tpat_var "_endpos__2_/1776"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[402,13982+39]..lib/sentenceParser.ml[408,14289+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[403,14023+42]..lib/sentenceParser.ml[403,14023+51])
                                                Tpat_var "_menhir_s/1777"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[404,14076+41]..lib/sentenceParser.ml[404,14076+43])
                                                Tpat_var "_1/1778"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[405,14121+43]..lib/sentenceParser.ml[405,14121+56])
                                                Tpat_var "_startpos__1_/1779"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[406,14179+41]..lib/sentenceParser.ml[406,14179+52])
                                                Tpat_var "_endpos__1_/1780"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[407,14233+41]..lib/sentenceParser.ml[407,14233+54])
                                                Tpat_var "_menhir_stack/1781"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[409,14302+12]..lib/sentenceParser.ml[409,14302+25])
                                    Texp_ident "_menhir_stack/1773"
                              ]
                              expression (lib/sentenceParser.ml[410,14331+8]..lib/sentenceParser.ml[426,15064+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[410,14331+12]..lib/sentenceParser.ml[410,14331+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[410,14331+18]..lib/sentenceParser.ml[410,14331+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_2/1782"
                                      pattern (lib/sentenceParser.ml[410,14331+12]..lib/sentenceParser.ml[410,14331+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[410,14331+37]..lib/sentenceParser.ml[410,14331+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[410,14331+18]..lib/sentenceParser.ml[410,14331+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[410,14331+37]..lib/sentenceParser.ml[410,14331+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[410,14331+47]..lib/sentenceParser.ml[410,14331+49])
                                            Texp_ident "_2/1774"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[411,14384+8]..lib/sentenceParser.ml[426,15064+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[411,14384+12]..lib/sentenceParser.ml[411,14384+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[411,14384+18]..lib/sentenceParser.ml[411,14384+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_1/1783"
                                        pattern (lib/sentenceParser.ml[411,14384+12]..lib/sentenceParser.ml[411,14384+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[411,14384+37]..lib/sentenceParser.ml[411,14384+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[411,14384+18]..lib/sentenceParser.ml[411,14384+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[411,14384+37]..lib/sentenceParser.ml[411,14384+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[411,14384+47]..lib/sentenceParser.ml[411,14384+49])
                                              Texp_ident "_1/1778"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[412,14437+8]..lib/sentenceParser.ml[426,15064+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[412,14437+12]..lib/sentenceParser.ml[412,14437+23])
                                          Tpat_var "_endpos__0_/1784"
                                        expression (lib/sentenceParser.ml[412,14437+26]..lib/sentenceParser.ml[412,14437+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[412,14437+26]..lib/sentenceParser.ml[412,14437+39])
                                            Texp_ident "_menhir_stack/1781"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[413,14507+8]..lib/sentenceParser.ml[426,15064+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[413,14507+12]..lib/sentenceParser.ml[413,14507+21])
                                            Tpat_var "_startpos/1785"
                                          expression (lib/sentenceParser.ml[413,14507+24]..lib/sentenceParser.ml[413,14507+37])
                                            Texp_ident "_startpos__1_/1779"
                                      ]
                                      expression (lib/sentenceParser.ml[414,14548+8]..lib/sentenceParser.ml[426,15064+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[414,14548+12]..lib/sentenceParser.ml[414,14548+19])
                                              Tpat_var "_endpos/1786"
                                            expression (lib/sentenceParser.ml[414,14548+22]..lib/sentenceParser.ml[414,14548+33])
                                              Texp_ident "_endpos__2_/1776"
                                        ]
                                        expression (lib/sentenceParser.ml[415,14585+8]..lib/sentenceParser.ml[426,15064+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[415,14585+12]..lib/sentenceParser.ml[415,14585+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[415,14585+18]..lib/sentenceParser.ml[415,14585+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Tpat_alias "_v/1787"
                                                pattern (lib/sentenceParser.ml[415,14585+12]..lib/sentenceParser.ml[415,14585+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[175,14654+26]..lib/sentenceParser.mly[175,14654+100])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[415,14585+18]..lib/sentenceParser.ml[415,14585+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[175,14654+33]..lib/sentenceParser.mly[175,14654+87])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[175,14654+34]..lib/sentenceParser.mly[175,14654+47])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[175,14654+48]..lib/sentenceParser.mly[175,14654+86])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[175,14654+49]..lib/sentenceParser.mly[175,14654+63])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[175,14654+64]..lib/sentenceParser.mly[175,14654+85])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[175,14654+65]..lib/sentenceParser.mly[175,14654+80])
                                                                  Texp_constant Const_string("DEBUG:concat1",(lib/sentenceParser.mly[175,14654+66]..lib/sentenceParser.mly[175,14654+79]),None)
                                                                expression (lib/sentenceParser.mly[175,14654+82]..lib/sentenceParser.mly[175,14654+84])
                                                                  Texp_ident "_1/1783"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[175,14654+89]..lib/sentenceParser.mly[175,14654+99])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[175,14654+97]..lib/sentenceParser.mly[175,14654+99])
                                                      Texp_ident "_1/1783"
                                                  ]
                                          ]
                                          expression (lib/sentenceParser.ml[420,14797+8]..lib/sentenceParser.ml[426,15064+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[421,14807+40]..lib/sentenceParser.ml[421,14807+49])
                                                      Texp_ident "_menhir_s/1777"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[422,14858+39]..lib/sentenceParser.ml[422,14858+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[422,14858+39]..lib/sentenceParser.ml[422,14858+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[422,14858+48]..lib/sentenceParser.ml[422,14858+50])
                                                            Texp_ident "_v/1787"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[423,14910+41]..lib/sentenceParser.ml[423,14910+50])
                                                      Texp_ident "_startpos/1785"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[424,14962+39]..lib/sentenceParser.ml[424,14962+46])
                                                      Texp_ident "_endpos/1786"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[425,15010+39]..lib/sentenceParser.ml[425,15010+52])
                                                      Texp_ident "_menhir_stack/1781"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[427,15076+6]..lib/sentenceParser.ml[451,16137+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[427,15076+11]..lib/sentenceParser.ml[427,15076+22])
                            Tpat_var "_menhir_env/1788"
                          expression (lib/sentenceParser.ml[428,15102+8]..lib/sentenceParser.ml[451,16137+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[428,15102+12]..lib/sentenceParser.ml[428,15102+25])
                                  Tpat_var "_menhir_stack/1789"
                                expression (lib/sentenceParser.ml[428,15102+28]..lib/sentenceParser.ml[428,15102+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[428,15102+28]..lib/sentenceParser.ml[428,15102+39])
                                    Texp_ident "_menhir_env/1788"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[429,15173+8]..lib/sentenceParser.ml[451,16137+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[429,15173+12]..lib/sentenceParser.ml[435,15443+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[430,15187+40]..lib/sentenceParser.ml[430,15187+49])
                                          Tpat_var "_menhir_s/1790"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[431,15238+39]..lib/sentenceParser.ml[431,15238+41])
                                          Tpat_var "_1/1791"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[432,15281+41]..lib/sentenceParser.ml[432,15281+54])
                                          Tpat_var "_startpos__1_/1792"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[433,15337+39]..lib/sentenceParser.ml[433,15337+50])
                                          Tpat_var "_endpos__1_/1793"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[434,15389+39]..lib/sentenceParser.ml[434,15389+52])
                                          Tpat_var "_menhir_stack/1794"
                                    ]
                                  expression (lib/sentenceParser.ml[435,15443+12]..lib/sentenceParser.ml[435,15443+25])
                                    Texp_ident "_menhir_stack/1789"
                              ]
                              expression (lib/sentenceParser.ml[436,15472+8]..lib/sentenceParser.ml[451,16137+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[436,15472+12]..lib/sentenceParser.ml[436,15472+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[436,15472+18]..lib/sentenceParser.ml[436,15472+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/1795"
                                      pattern (lib/sentenceParser.ml[436,15472+12]..lib/sentenceParser.ml[436,15472+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[436,15472+37]..lib/sentenceParser.ml[436,15472+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[436,15472+18]..lib/sentenceParser.ml[436,15472+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[436,15472+37]..lib/sentenceParser.ml[436,15472+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[436,15472+47]..lib/sentenceParser.ml[436,15472+49])
                                            Texp_ident "_1/1791"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[437,15525+8]..lib/sentenceParser.ml[451,16137+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[437,15525+12]..lib/sentenceParser.ml[437,15525+23])
                                        Tpat_var "_endpos__0_/1796"
                                      expression (lib/sentenceParser.ml[437,15525+26]..lib/sentenceParser.ml[437,15525+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[437,15525+26]..lib/sentenceParser.ml[437,15525+39])
                                          Texp_ident "_menhir_stack/1794"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[438,15595+8]..lib/sentenceParser.ml[451,16137+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[438,15595+12]..lib/sentenceParser.ml[438,15595+21])
                                          Tpat_var "_startpos/1797"
                                        expression (lib/sentenceParser.ml[438,15595+24]..lib/sentenceParser.ml[438,15595+37])
                                          Texp_ident "_startpos__1_/1792"
                                    ]
                                    expression (lib/sentenceParser.ml[439,15636+8]..lib/sentenceParser.ml[451,16137+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[439,15636+12]..lib/sentenceParser.ml[439,15636+19])
                                            Tpat_var "_endpos/1798"
                                          expression (lib/sentenceParser.ml[439,15636+22]..lib/sentenceParser.ml[439,15636+33])
                                            Texp_ident "_endpos__1_/1793"
                                      ]
                                      expression (lib/sentenceParser.ml[440,15673+8]..lib/sentenceParser.ml[451,16137+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[440,15673+12]..lib/sentenceParser.ml[440,15673+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[440,15673+18]..lib/sentenceParser.ml[440,15673+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/1799"
                                              pattern (lib/sentenceParser.ml[440,15673+12]..lib/sentenceParser.ml[440,15673+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[176,15742+11]..lib/sentenceParser.mly[176,15742+85])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[440,15673+18]..lib/sentenceParser.ml[440,15673+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[176,15742+18]..lib/sentenceParser.mly[176,15742+72])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[176,15742+19]..lib/sentenceParser.mly[176,15742+32])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[176,15742+33]..lib/sentenceParser.mly[176,15742+71])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[176,15742+34]..lib/sentenceParser.mly[176,15742+48])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[176,15742+49]..lib/sentenceParser.mly[176,15742+70])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[176,15742+50]..lib/sentenceParser.mly[176,15742+65])
                                                                Texp_constant Const_string("DEBUG:concat2",(lib/sentenceParser.mly[176,15742+51]..lib/sentenceParser.mly[176,15742+64]),None)
                                                              expression (lib/sentenceParser.mly[176,15742+67]..lib/sentenceParser.mly[176,15742+69])
                                                                Texp_ident "_1/1795"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[176,15742+74]..lib/sentenceParser.mly[176,15742+84])
                                                Texp_construct "NFactor"
                                                [
                                                  expression (lib/sentenceParser.mly[176,15742+82]..lib/sentenceParser.mly[176,15742+84])
                                                    Texp_ident "_1/1795"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[445,15870+8]..lib/sentenceParser.ml[451,16137+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[446,15880+40]..lib/sentenceParser.ml[446,15880+49])
                                                    Texp_ident "_menhir_s/1790"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[447,15931+39]..lib/sentenceParser.ml[447,15931+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[447,15931+39]..lib/sentenceParser.ml[447,15931+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[447,15931+48]..lib/sentenceParser.ml[447,15931+50])
                                                          Texp_ident "_v/1799"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[448,15983+41]..lib/sentenceParser.ml[448,15983+50])
                                                    Texp_ident "_startpos/1797"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[449,16035+39]..lib/sentenceParser.ml[449,16035+46])
                                                    Texp_ident "_endpos/1798"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[450,16083+39]..lib/sentenceParser.ml[450,16083+52])
                                                    Texp_ident "_menhir_stack/1794"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[452,16149+6]..lib/sentenceParser.ml[511,18309+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[452,16149+11]..lib/sentenceParser.ml[452,16149+22])
                            Tpat_var "_menhir_env/1800"
                          expression (lib/sentenceParser.ml[453,16175+8]..lib/sentenceParser.ml[511,18309+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[453,16175+12]..lib/sentenceParser.ml[453,16175+25])
                                  Tpat_var "_menhir_stack/1801"
                                expression (lib/sentenceParser.ml[453,16175+28]..lib/sentenceParser.ml[453,16175+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[453,16175+28]..lib/sentenceParser.ml[453,16175+39])
                                    Texp_ident "_menhir_env/1800"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[454,16246+8]..lib/sentenceParser.ml[511,18309+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[454,16246+12]..lib/sentenceParser.ml[466,16801+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[455,16260+40]..lib/sentenceParser.ml[455,16260+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[456,16303+39]..lib/sentenceParser.ml[456,16303+50])
                                          Tpat_var "_1_inlined1/1802"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[457,16355+41]..lib/sentenceParser.ml[457,16355+63])
                                          Tpat_var "_startpos__1_inlined1_/1803"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[458,16420+39]..lib/sentenceParser.ml[458,16420+59])
                                          Tpat_var "_endpos__1_inlined1_/1804"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[459,16481+39]..lib/sentenceParser.ml[465,16788+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[460,16522+42]..lib/sentenceParser.ml[460,16522+51])
                                                Tpat_var "_menhir_s/1805"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[461,16575+41]..lib/sentenceParser.ml[461,16575+43])
                                                Tpat_var "_1/1806"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[462,16620+43]..lib/sentenceParser.ml[462,16620+56])
                                                Tpat_var "_startpos__1_/1807"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[463,16678+41]..lib/sentenceParser.ml[463,16678+52])
                                                Tpat_var "_endpos__1_/1808"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[464,16732+41]..lib/sentenceParser.ml[464,16732+54])
                                                Tpat_var "_menhir_stack/1809"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[466,16801+12]..lib/sentenceParser.ml[466,16801+25])
                                    Texp_ident "_menhir_stack/1801"
                              ]
                              expression (lib/sentenceParser.ml[467,16830+8]..lib/sentenceParser.ml[511,18309+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[467,16830+12]..lib/sentenceParser.ml[467,16830+23])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[467,16830+26]..lib/sentenceParser.ml[467,16830+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_1_inlined1/1810"
                                      pattern (lib/sentenceParser.ml[467,16830+12]..lib/sentenceParser.ml[467,16830+23])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[467,16830+33]..lib/sentenceParser.ml[467,16830+54])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[467,16830+26]..lib/sentenceParser.ml[467,16830+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[467,16830+33]..lib/sentenceParser.ml[467,16830+42])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[467,16830+43]..lib/sentenceParser.ml[467,16830+54])
                                            Texp_ident "_1_inlined1/1802"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[468,16888+8]..lib/sentenceParser.ml[511,18309+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[468,16888+12]..lib/sentenceParser.ml[468,16888+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[468,16888+18]..lib/sentenceParser.ml[468,16888+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_1/1811"
                                        pattern (lib/sentenceParser.ml[468,16888+12]..lib/sentenceParser.ml[468,16888+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[468,16888+37]..lib/sentenceParser.ml[468,16888+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[468,16888+18]..lib/sentenceParser.ml[468,16888+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[468,16888+37]..lib/sentenceParser.ml[468,16888+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[468,16888+47]..lib/sentenceParser.ml[468,16888+49])
                                              Texp_ident "_1/1806"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[469,16941+8]..lib/sentenceParser.ml[511,18309+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[469,16941+12]..lib/sentenceParser.ml[469,16941+23])
                                          Tpat_var "_endpos__0_/1812"
                                        expression (lib/sentenceParser.ml[469,16941+26]..lib/sentenceParser.ml[469,16941+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[469,16941+26]..lib/sentenceParser.ml[469,16941+39])
                                            Texp_ident "_menhir_stack/1809"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[470,17011+8]..lib/sentenceParser.ml[511,18309+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[470,17011+12]..lib/sentenceParser.ml[470,17011+21])
                                            Tpat_var "_startpos/1813"
                                          expression (lib/sentenceParser.ml[470,17011+24]..lib/sentenceParser.ml[470,17011+37])
                                            Texp_ident "_startpos__1_/1807"
                                      ]
                                      expression (lib/sentenceParser.ml[471,17052+8]..lib/sentenceParser.ml[511,18309+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[471,17052+12]..lib/sentenceParser.ml[471,17052+19])
                                              Tpat_var "_endpos/1814"
                                            expression (lib/sentenceParser.ml[471,17052+22]..lib/sentenceParser.ml[471,17052+42])
                                              Texp_ident "_endpos__1_inlined1_/1804"
                                        ]
                                        expression (lib/sentenceParser.ml[472,17098+8]..lib/sentenceParser.ml[511,18309+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[472,17098+12]..lib/sentenceParser.ml[472,17098+14])
                                                Tpat_var "_v/1815"
                                              expression (lib/sentenceParser.ml[473,17115+10]..lib/sentenceParser.ml[503,17999+31])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[473,17115+14]..lib/sentenceParser.ml[473,17115+16])
                                                      Tpat_var "_2/1816"
                                                    expression (lib/sentenceParser.ml[474,17134+12]..lib/sentenceParser.mly[160,17388+80])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lib/sentenceParser.ml[474,17134+16]..lib/sentenceParser.ml[474,17134+18])
                                                            Tpat_var "_1/1817"
                                                          expression (lib/sentenceParser.ml[474,17134+21]..lib/sentenceParser.ml[474,17134+32])
                                                            Texp_ident "_1_inlined1/1810"
                                                      ]
                                                      expression (lib/sentenceParser.ml[475,17170+12]..lib/sentenceParser.mly[160,17388+80])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (lib/sentenceParser.ml[475,17170+16]..lib/sentenceParser.ml[475,17170+18])
                                                              Tpat_var "_1/1818"
                                                            expression (lib/sentenceParser.mly[172,17223+9]..lib/sentenceParser.mly[172,17223+74])
                                                              Texp_sequence
                                                              expression (lib/sentenceParser.mly[172,17223+16]..lib/sentenceParser.mly[172,17223+67])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[172,17223+17]..lib/sentenceParser.mly[172,17223+30])
                                                                  Texp_ident "Stdlib!.print_endline"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[172,17223+31]..lib/sentenceParser.mly[172,17223+66])
                                                                      Texp_apply
                                                                      expression (lib/sentenceParser.mly[172,17223+32]..lib/sentenceParser.mly[172,17223+46])
                                                                        Texp_ident "Batteries!.dump"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (lib/sentenceParser.mly[172,17223+47]..lib/sentenceParser.mly[172,17223+65])
                                                                            Texp_tuple
                                                                            [
                                                                              expression (lib/sentenceParser.mly[172,17223+48]..lib/sentenceParser.mly[172,17223+60])
                                                                                Texp_constant Const_string("DEBUG:plus",(lib/sentenceParser.mly[172,17223+49]..lib/sentenceParser.mly[172,17223+59]),None)
                                                                              expression (lib/sentenceParser.mly[172,17223+62]..lib/sentenceParser.mly[172,17223+64])
                                                                                Texp_ident "_1/1817"
                                                                            ]
                                                                      ]
                                                                ]
                                                              expression (lib/sentenceParser.mly[172,17223+69]..lib/sentenceParser.mly[172,17223+73])
                                                                Texp_construct "Plus"
                                                                []
                                                        ]
                                                        expression (lib/sentenceParser.mly[160,17388+10]..lib/sentenceParser.mly[160,17388+80])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[160,17388+17]..lib/sentenceParser.mly[160,17388+67])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[160,17388+18]..lib/sentenceParser.mly[160,17388+31])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[160,17388+32]..lib/sentenceParser.mly[160,17388+66])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[160,17388+33]..lib/sentenceParser.mly[160,17388+47])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[160,17388+48]..lib/sentenceParser.mly[160,17388+65])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[160,17388+49]..lib/sentenceParser.mly[160,17388+60])
                                                                            Texp_constant Const_string("DEBUG:mod",(lib/sentenceParser.mly[160,17388+50]..lib/sentenceParser.mly[160,17388+59]),None)
                                                                          expression (lib/sentenceParser.mly[160,17388+62]..lib/sentenceParser.mly[160,17388+64])
                                                                            Texp_ident "_1/1818"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[160,17388+69]..lib/sentenceParser.mly[160,17388+79])
                                                            Texp_construct "NFactor"
                                                            [
                                                              expression (lib/sentenceParser.mly[160,17388+77]..lib/sentenceParser.mly[160,17388+79])
                                                                Texp_ident "_1/1818"
                                                            ]
                                                ]
                                                expression (lib/sentenceParser.ml[486,17525+10]..lib/sentenceParser.ml[503,17999+31])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[486,17525+14]..lib/sentenceParser.ml[486,17525+16])
                                                        Tpat_var "_1/1819"
                                                      expression (lib/sentenceParser.mly[139,17576+11]..lib/sentenceParser.mly[139,17576+88])
                                                        Texp_sequence
                                                        expression (lib/sentenceParser.mly[139,17576+18]..lib/sentenceParser.mly[139,17576+75])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[139,17576+19]..lib/sentenceParser.mly[139,17576+32])
                                                            Texp_ident "Stdlib!.print_endline"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[139,17576+33]..lib/sentenceParser.mly[139,17576+74])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[139,17576+34]..lib/sentenceParser.mly[139,17576+48])
                                                                  Texp_ident "Batteries!.dump"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[139,17576+49]..lib/sentenceParser.mly[139,17576+73])
                                                                      Texp_tuple
                                                                      [
                                                                        expression (lib/sentenceParser.mly[139,17576+50]..lib/sentenceParser.mly[139,17576+68])
                                                                          Texp_constant Const_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,17576+51]..lib/sentenceParser.mly[139,17576+67]),None)
                                                                        expression (lib/sentenceParser.mly[139,17576+70]..lib/sentenceParser.mly[139,17576+72])
                                                                          Texp_ident "_1/1811"
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser.mly[139,17576+77]..lib/sentenceParser.mly[139,17576+87])
                                                          Texp_construct "NFactor"
                                                          [
                                                            expression (lib/sentenceParser.mly[139,17576+85]..lib/sentenceParser.mly[139,17576+87])
                                                              Texp_ident "_1/1811"
                                                          ]
                                                  ]
                                                  expression (lib/sentenceParser.mly[142,17752+24]..lib/sentenceParser.mly[150,17961+7])
                                                    extra
                                                      Texp_constraint
                                                      core_type (lib/sentenceParser.ml[503,17999+14]..lib/sentenceParser.ml[503,17999+29])
                                                        Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                        []
                                                    Texp_construct "NFactor"
                                                    [
                                                      expression (lib/sentenceParser.mly[149,17942+16]..lib/sentenceParser.mly[149,17942+18])
                                                        Texp_ident "_1/1819"
                                                    ]
                                          ]
                                          expression (lib/sentenceParser.ml[505,18042+8]..lib/sentenceParser.ml[511,18309+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[506,18052+40]..lib/sentenceParser.ml[506,18052+49])
                                                      Texp_ident "_menhir_s/1805"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[507,18103+39]..lib/sentenceParser.ml[507,18103+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[507,18103+39]..lib/sentenceParser.ml[507,18103+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[507,18103+48]..lib/sentenceParser.ml[507,18103+50])
                                                            Texp_ident "_v/1815"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[508,18155+41]..lib/sentenceParser.ml[508,18155+50])
                                                      Texp_ident "_startpos/1813"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[509,18207+39]..lib/sentenceParser.ml[509,18207+46])
                                                      Texp_ident "_endpos/1814"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[510,18255+39]..lib/sentenceParser.ml[510,18255+52])
                                                      Texp_ident "_menhir_stack/1809"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[512,18321+6]..lib/sentenceParser.ml[571,20494+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[512,18321+11]..lib/sentenceParser.ml[512,18321+22])
                            Tpat_var "_menhir_env/1820"
                          expression (lib/sentenceParser.ml[513,18347+8]..lib/sentenceParser.ml[571,20494+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[513,18347+12]..lib/sentenceParser.ml[513,18347+25])
                                  Tpat_var "_menhir_stack/1821"
                                expression (lib/sentenceParser.ml[513,18347+28]..lib/sentenceParser.ml[513,18347+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[513,18347+28]..lib/sentenceParser.ml[513,18347+39])
                                    Texp_ident "_menhir_env/1820"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[514,18418+8]..lib/sentenceParser.ml[571,20494+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[514,18418+12]..lib/sentenceParser.ml[526,18973+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[515,18432+40]..lib/sentenceParser.ml[515,18432+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[516,18475+39]..lib/sentenceParser.ml[516,18475+50])
                                          Tpat_var "_1_inlined1/1822"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[517,18527+41]..lib/sentenceParser.ml[517,18527+63])
                                          Tpat_var "_startpos__1_inlined1_/1823"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[518,18592+39]..lib/sentenceParser.ml[518,18592+59])
                                          Tpat_var "_endpos__1_inlined1_/1824"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[519,18653+39]..lib/sentenceParser.ml[525,18960+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[520,18694+42]..lib/sentenceParser.ml[520,18694+51])
                                                Tpat_var "_menhir_s/1825"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[521,18747+41]..lib/sentenceParser.ml[521,18747+43])
                                                Tpat_var "_1/1826"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[522,18792+43]..lib/sentenceParser.ml[522,18792+56])
                                                Tpat_var "_startpos__1_/1827"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[523,18850+41]..lib/sentenceParser.ml[523,18850+52])
                                                Tpat_var "_endpos__1_/1828"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[524,18904+41]..lib/sentenceParser.ml[524,18904+54])
                                                Tpat_var "_menhir_stack/1829"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[526,18973+12]..lib/sentenceParser.ml[526,18973+25])
                                    Texp_ident "_menhir_stack/1821"
                              ]
                              expression (lib/sentenceParser.ml[527,19002+8]..lib/sentenceParser.ml[571,20494+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[527,19002+12]..lib/sentenceParser.ml[527,19002+23])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[527,19002+26]..lib/sentenceParser.ml[527,19002+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_1_inlined1/1830"
                                      pattern (lib/sentenceParser.ml[527,19002+12]..lib/sentenceParser.ml[527,19002+23])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[527,19002+33]..lib/sentenceParser.ml[527,19002+54])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[527,19002+26]..lib/sentenceParser.ml[527,19002+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[527,19002+33]..lib/sentenceParser.ml[527,19002+42])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[527,19002+43]..lib/sentenceParser.ml[527,19002+54])
                                            Texp_ident "_1_inlined1/1822"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[528,19060+8]..lib/sentenceParser.ml[571,20494+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[528,19060+12]..lib/sentenceParser.ml[528,19060+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[528,19060+18]..lib/sentenceParser.ml[528,19060+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_1/1831"
                                        pattern (lib/sentenceParser.ml[528,19060+12]..lib/sentenceParser.ml[528,19060+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[528,19060+37]..lib/sentenceParser.ml[528,19060+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[528,19060+18]..lib/sentenceParser.ml[528,19060+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[528,19060+37]..lib/sentenceParser.ml[528,19060+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[528,19060+47]..lib/sentenceParser.ml[528,19060+49])
                                              Texp_ident "_1/1826"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[529,19113+8]..lib/sentenceParser.ml[571,20494+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[529,19113+12]..lib/sentenceParser.ml[529,19113+23])
                                          Tpat_var "_endpos__0_/1832"
                                        expression (lib/sentenceParser.ml[529,19113+26]..lib/sentenceParser.ml[529,19113+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[529,19113+26]..lib/sentenceParser.ml[529,19113+39])
                                            Texp_ident "_menhir_stack/1829"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[530,19183+8]..lib/sentenceParser.ml[571,20494+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[530,19183+12]..lib/sentenceParser.ml[530,19183+21])
                                            Tpat_var "_startpos/1833"
                                          expression (lib/sentenceParser.ml[530,19183+24]..lib/sentenceParser.ml[530,19183+37])
                                            Texp_ident "_startpos__1_/1827"
                                      ]
                                      expression (lib/sentenceParser.ml[531,19224+8]..lib/sentenceParser.ml[571,20494+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[531,19224+12]..lib/sentenceParser.ml[531,19224+19])
                                              Tpat_var "_endpos/1834"
                                            expression (lib/sentenceParser.ml[531,19224+22]..lib/sentenceParser.ml[531,19224+42])
                                              Texp_ident "_endpos__1_inlined1_/1824"
                                        ]
                                        expression (lib/sentenceParser.ml[532,19270+8]..lib/sentenceParser.ml[571,20494+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[532,19270+12]..lib/sentenceParser.ml[532,19270+14])
                                                Tpat_var "_v/1835"
                                              expression (lib/sentenceParser.ml[533,19287+10]..lib/sentenceParser.ml[563,20184+31])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[533,19287+14]..lib/sentenceParser.ml[533,19287+16])
                                                      Tpat_var "_2/1836"
                                                    expression (lib/sentenceParser.ml[534,19306+12]..lib/sentenceParser.mly[161,19570+83])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lib/sentenceParser.ml[534,19306+16]..lib/sentenceParser.ml[534,19306+18])
                                                            Tpat_var "_1/1837"
                                                          expression (lib/sentenceParser.ml[534,19306+21]..lib/sentenceParser.ml[534,19306+32])
                                                            Texp_ident "_1_inlined1/1830"
                                                      ]
                                                      expression (lib/sentenceParser.ml[535,19342+12]..lib/sentenceParser.mly[161,19570+83])
                                                        Texp_let Nonrec
                                                        [
                                                          <def>
                                                            pattern (lib/sentenceParser.ml[535,19342+16]..lib/sentenceParser.ml[535,19342+18])
                                                              Tpat_var "_1/1838"
                                                            expression (lib/sentenceParser.mly[170,19395+14]..lib/sentenceParser.mly[170,19395+84])
                                                              Texp_sequence
                                                              expression (lib/sentenceParser.mly[170,19395+21]..lib/sentenceParser.mly[170,19395+73])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[170,19395+22]..lib/sentenceParser.mly[170,19395+35])
                                                                  Texp_ident "Stdlib!.print_endline"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[170,19395+36]..lib/sentenceParser.mly[170,19395+72])
                                                                      Texp_apply
                                                                      expression (lib/sentenceParser.mly[170,19395+37]..lib/sentenceParser.mly[170,19395+51])
                                                                        Texp_ident "Batteries!.dump"
                                                                      [
                                                                        <arg>
                                                                          Nolabel
                                                                          expression (lib/sentenceParser.mly[170,19395+52]..lib/sentenceParser.mly[170,19395+71])
                                                                            Texp_tuple
                                                                            [
                                                                              expression (lib/sentenceParser.mly[170,19395+53]..lib/sentenceParser.mly[170,19395+66])
                                                                                Texp_constant Const_string("DEBUG:quest",(lib/sentenceParser.mly[170,19395+54]..lib/sentenceParser.mly[170,19395+65]),None)
                                                                              expression (lib/sentenceParser.mly[170,19395+68]..lib/sentenceParser.mly[170,19395+70])
                                                                                Texp_ident "_1/1837"
                                                                            ]
                                                                      ]
                                                                ]
                                                              expression (lib/sentenceParser.mly[170,19395+75]..lib/sentenceParser.mly[170,19395+83])
                                                                Texp_construct "Question"
                                                                []
                                                        ]
                                                        expression (lib/sentenceParser.mly[161,19570+11]..lib/sentenceParser.mly[161,19570+83])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[161,19570+18]..lib/sentenceParser.mly[161,19570+70])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[161,19570+19]..lib/sentenceParser.mly[161,19570+32])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[161,19570+33]..lib/sentenceParser.mly[161,19570+69])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[161,19570+34]..lib/sentenceParser.mly[161,19570+48])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[161,19570+49]..lib/sentenceParser.mly[161,19570+68])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[161,19570+50]..lib/sentenceParser.mly[161,19570+63])
                                                                            Texp_constant Const_string("DEBUG:quest",(lib/sentenceParser.mly[161,19570+51]..lib/sentenceParser.mly[161,19570+62]),None)
                                                                          expression (lib/sentenceParser.mly[161,19570+65]..lib/sentenceParser.mly[161,19570+67])
                                                                            Texp_ident "_1/1838"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[161,19570+72]..lib/sentenceParser.mly[161,19570+82])
                                                            Texp_construct "NFactor"
                                                            [
                                                              expression (lib/sentenceParser.mly[161,19570+80]..lib/sentenceParser.mly[161,19570+82])
                                                                Texp_ident "_1/1838"
                                                            ]
                                                ]
                                                expression (lib/sentenceParser.ml[546,19710+10]..lib/sentenceParser.ml[563,20184+31])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[546,19710+14]..lib/sentenceParser.ml[546,19710+16])
                                                        Tpat_var "_1/1839"
                                                      expression (lib/sentenceParser.mly[139,19761+11]..lib/sentenceParser.mly[139,19761+88])
                                                        Texp_sequence
                                                        expression (lib/sentenceParser.mly[139,19761+18]..lib/sentenceParser.mly[139,19761+75])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[139,19761+19]..lib/sentenceParser.mly[139,19761+32])
                                                            Texp_ident "Stdlib!.print_endline"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[139,19761+33]..lib/sentenceParser.mly[139,19761+74])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[139,19761+34]..lib/sentenceParser.mly[139,19761+48])
                                                                  Texp_ident "Batteries!.dump"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[139,19761+49]..lib/sentenceParser.mly[139,19761+73])
                                                                      Texp_tuple
                                                                      [
                                                                        expression (lib/sentenceParser.mly[139,19761+50]..lib/sentenceParser.mly[139,19761+68])
                                                                          Texp_constant Const_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,19761+51]..lib/sentenceParser.mly[139,19761+67]),None)
                                                                        expression (lib/sentenceParser.mly[139,19761+70]..lib/sentenceParser.mly[139,19761+72])
                                                                          Texp_ident "_1/1831"
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser.mly[139,19761+77]..lib/sentenceParser.mly[139,19761+87])
                                                          Texp_construct "NFactor"
                                                          [
                                                            expression (lib/sentenceParser.mly[139,19761+85]..lib/sentenceParser.mly[139,19761+87])
                                                              Texp_ident "_1/1831"
                                                          ]
                                                  ]
                                                  expression (lib/sentenceParser.mly[142,19937+24]..lib/sentenceParser.mly[150,20146+7])
                                                    extra
                                                      Texp_constraint
                                                      core_type (lib/sentenceParser.ml[563,20184+14]..lib/sentenceParser.ml[563,20184+29])
                                                        Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                        []
                                                    Texp_construct "NFactor"
                                                    [
                                                      expression (lib/sentenceParser.mly[149,20127+16]..lib/sentenceParser.mly[149,20127+18])
                                                        Texp_ident "_1/1839"
                                                    ]
                                          ]
                                          expression (lib/sentenceParser.ml[565,20227+8]..lib/sentenceParser.ml[571,20494+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[566,20237+40]..lib/sentenceParser.ml[566,20237+49])
                                                      Texp_ident "_menhir_s/1825"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[567,20288+39]..lib/sentenceParser.ml[567,20288+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[567,20288+39]..lib/sentenceParser.ml[567,20288+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[567,20288+48]..lib/sentenceParser.ml[567,20288+50])
                                                            Texp_ident "_v/1835"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[568,20340+41]..lib/sentenceParser.ml[568,20340+50])
                                                      Texp_ident "_startpos/1833"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[569,20392+39]..lib/sentenceParser.ml[569,20392+46])
                                                      Texp_ident "_endpos/1834"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[570,20440+39]..lib/sentenceParser.ml[570,20440+52])
                                                      Texp_ident "_menhir_stack/1829"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[572,20506+6]..lib/sentenceParser.ml[633,22663+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[572,20506+11]..lib/sentenceParser.ml[572,20506+22])
                            Tpat_var "_menhir_env/1840"
                          expression (lib/sentenceParser.ml[573,20532+8]..lib/sentenceParser.ml[633,22663+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[573,20532+12]..lib/sentenceParser.ml[573,20532+25])
                                  Tpat_var "_menhir_stack/1841"
                                expression (lib/sentenceParser.ml[573,20532+28]..lib/sentenceParser.ml[573,20532+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[573,20532+28]..lib/sentenceParser.ml[573,20532+39])
                                    Texp_ident "_menhir_env/1840"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[574,20603+8]..lib/sentenceParser.ml[633,22663+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[574,20603+12]..lib/sentenceParser.ml[586,21158+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[575,20617+40]..lib/sentenceParser.ml[575,20617+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[576,20660+39]..lib/sentenceParser.ml[576,20660+50])
                                          Tpat_var "_1_inlined1/1842"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[577,20712+41]..lib/sentenceParser.ml[577,20712+63])
                                          Tpat_var "_startpos__1_inlined1_/1843"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[578,20777+39]..lib/sentenceParser.ml[578,20777+59])
                                          Tpat_var "_endpos__1_inlined1_/1844"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[579,20838+39]..lib/sentenceParser.ml[585,21145+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[580,20879+42]..lib/sentenceParser.ml[580,20879+51])
                                                Tpat_var "_menhir_s/1845"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[581,20932+41]..lib/sentenceParser.ml[581,20932+43])
                                                Tpat_var "_1/1846"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[582,20977+43]..lib/sentenceParser.ml[582,20977+56])
                                                Tpat_var "_startpos__1_/1847"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[583,21035+41]..lib/sentenceParser.ml[583,21035+52])
                                                Tpat_var "_endpos__1_/1848"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[584,21089+41]..lib/sentenceParser.ml[584,21089+54])
                                                Tpat_var "_menhir_stack/1849"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[586,21158+12]..lib/sentenceParser.ml[586,21158+25])
                                    Texp_ident "_menhir_stack/1841"
                              ]
                              expression (lib/sentenceParser.ml[587,21187+8]..lib/sentenceParser.ml[633,22663+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[587,21187+12]..lib/sentenceParser.ml[587,21187+23])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[587,21187+26]..lib/sentenceParser.ml[587,21187+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_1_inlined1/1850"
                                      pattern (lib/sentenceParser.ml[587,21187+12]..lib/sentenceParser.ml[587,21187+23])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[587,21187+33]..lib/sentenceParser.ml[587,21187+54])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[587,21187+26]..lib/sentenceParser.ml[587,21187+30])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[587,21187+33]..lib/sentenceParser.ml[587,21187+42])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[587,21187+43]..lib/sentenceParser.ml[587,21187+54])
                                            Texp_ident "_1_inlined1/1842"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[588,21245+8]..lib/sentenceParser.ml[633,22663+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[588,21245+12]..lib/sentenceParser.ml[588,21245+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[588,21245+18]..lib/sentenceParser.ml[588,21245+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_1/1851"
                                        pattern (lib/sentenceParser.ml[588,21245+12]..lib/sentenceParser.ml[588,21245+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[588,21245+37]..lib/sentenceParser.ml[588,21245+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[588,21245+18]..lib/sentenceParser.ml[588,21245+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[588,21245+37]..lib/sentenceParser.ml[588,21245+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[588,21245+47]..lib/sentenceParser.ml[588,21245+49])
                                              Texp_ident "_1/1846"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[589,21298+8]..lib/sentenceParser.ml[633,22663+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[589,21298+12]..lib/sentenceParser.ml[589,21298+23])
                                          Tpat_var "_endpos__0_/1852"
                                        expression (lib/sentenceParser.ml[589,21298+26]..lib/sentenceParser.ml[589,21298+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[589,21298+26]..lib/sentenceParser.ml[589,21298+39])
                                            Texp_ident "_menhir_stack/1849"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[590,21368+8]..lib/sentenceParser.ml[633,22663+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[590,21368+12]..lib/sentenceParser.ml[590,21368+21])
                                            Tpat_var "_startpos/1853"
                                          expression (lib/sentenceParser.ml[590,21368+24]..lib/sentenceParser.ml[590,21368+37])
                                            Texp_ident "_startpos__1_/1847"
                                      ]
                                      expression (lib/sentenceParser.ml[591,21409+8]..lib/sentenceParser.ml[633,22663+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[591,21409+12]..lib/sentenceParser.ml[591,21409+19])
                                              Tpat_var "_endpos/1854"
                                            expression (lib/sentenceParser.ml[591,21409+22]..lib/sentenceParser.ml[591,21409+42])
                                              Texp_ident "_endpos__1_inlined1_/1844"
                                        ]
                                        expression (lib/sentenceParser.ml[592,21455+8]..lib/sentenceParser.ml[633,22663+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[592,21455+12]..lib/sentenceParser.ml[592,21455+14])
                                                Tpat_var "_v/1855"
                                              expression (lib/sentenceParser.ml[593,21472+10]..lib/sentenceParser.ml[625,22353+31])
                                                Texp_let Nonrec
                                                [
                                                  <def>
                                                    pattern (lib/sentenceParser.ml[593,21472+14]..lib/sentenceParser.ml[593,21472+16])
                                                      Tpat_var "_2/1856"
                                                    expression (lib/sentenceParser.ml[594,21491+12]..lib/sentenceParser.mly[162,21741+81])
                                                      Texp_let Nonrec
                                                      [
                                                        <def>
                                                          pattern (lib/sentenceParser.ml[594,21491+16]..lib/sentenceParser.ml[594,21491+18])
                                                            Tpat_var "_1/1857"
                                                          expression (lib/sentenceParser.mly[165,21544+11]..lib/sentenceParser.mly[168,21641+9])
                                                            Texp_construct "Star"
                                                            []
                                                      ]
                                                      expression (lib/sentenceParser.mly[162,21741+10]..lib/sentenceParser.mly[162,21741+81])
                                                        Texp_sequence
                                                        expression (lib/sentenceParser.mly[162,21741+17]..lib/sentenceParser.mly[162,21741+68])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[162,21741+18]..lib/sentenceParser.mly[162,21741+31])
                                                            Texp_ident "Stdlib!.print_endline"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[162,21741+32]..lib/sentenceParser.mly[162,21741+67])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[162,21741+33]..lib/sentenceParser.mly[162,21741+47])
                                                                  Texp_ident "Batteries!.dump"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[162,21741+48]..lib/sentenceParser.mly[162,21741+66])
                                                                      Texp_tuple
                                                                      [
                                                                        expression (lib/sentenceParser.mly[162,21741+49]..lib/sentenceParser.mly[162,21741+61])
                                                                          Texp_constant Const_string("DEBUG:star",(lib/sentenceParser.mly[162,21741+50]..lib/sentenceParser.mly[162,21741+60]),None)
                                                                        expression (lib/sentenceParser.mly[162,21741+63]..lib/sentenceParser.mly[162,21741+65])
                                                                          Texp_ident "_1/1857"
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser.mly[162,21741+70]..lib/sentenceParser.mly[162,21741+80])
                                                          Texp_construct "NFactor"
                                                          [
                                                            expression (lib/sentenceParser.mly[162,21741+78]..lib/sentenceParser.mly[162,21741+80])
                                                              Texp_ident "_1/1857"
                                                          ]
                                                ]
                                                expression (lib/sentenceParser.ml[608,21879+10]..lib/sentenceParser.ml[625,22353+31])
                                                  Texp_let Nonrec
                                                  [
                                                    <def>
                                                      pattern (lib/sentenceParser.ml[608,21879+14]..lib/sentenceParser.ml[608,21879+16])
                                                        Tpat_var "_1/1858"
                                                      expression (lib/sentenceParser.mly[139,21930+11]..lib/sentenceParser.mly[139,21930+88])
                                                        Texp_sequence
                                                        expression (lib/sentenceParser.mly[139,21930+18]..lib/sentenceParser.mly[139,21930+75])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[139,21930+19]..lib/sentenceParser.mly[139,21930+32])
                                                            Texp_ident "Stdlib!.print_endline"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[139,21930+33]..lib/sentenceParser.mly[139,21930+74])
                                                                Texp_apply
                                                                expression (lib/sentenceParser.mly[139,21930+34]..lib/sentenceParser.mly[139,21930+48])
                                                                  Texp_ident "Batteries!.dump"
                                                                [
                                                                  <arg>
                                                                    Nolabel
                                                                    expression (lib/sentenceParser.mly[139,21930+49]..lib/sentenceParser.mly[139,21930+73])
                                                                      Texp_tuple
                                                                      [
                                                                        expression (lib/sentenceParser.mly[139,21930+50]..lib/sentenceParser.mly[139,21930+68])
                                                                          Texp_constant Const_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,21930+51]..lib/sentenceParser.mly[139,21930+67]),None)
                                                                        expression (lib/sentenceParser.mly[139,21930+70]..lib/sentenceParser.mly[139,21930+72])
                                                                          Texp_ident "_1/1851"
                                                                      ]
                                                                ]
                                                          ]
                                                        expression (lib/sentenceParser.mly[139,21930+77]..lib/sentenceParser.mly[139,21930+87])
                                                          Texp_construct "NFactor"
                                                          [
                                                            expression (lib/sentenceParser.mly[139,21930+85]..lib/sentenceParser.mly[139,21930+87])
                                                              Texp_ident "_1/1851"
                                                          ]
                                                  ]
                                                  expression (lib/sentenceParser.mly[142,22106+24]..lib/sentenceParser.mly[150,22315+7])
                                                    extra
                                                      Texp_constraint
                                                      core_type (lib/sentenceParser.ml[625,22353+14]..lib/sentenceParser.ml[625,22353+29])
                                                        Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                        []
                                                    Texp_construct "NFactor"
                                                    [
                                                      expression (lib/sentenceParser.mly[149,22296+16]..lib/sentenceParser.mly[149,22296+18])
                                                        Texp_ident "_1/1858"
                                                    ]
                                          ]
                                          expression (lib/sentenceParser.ml[627,22396+8]..lib/sentenceParser.ml[633,22663+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[628,22406+40]..lib/sentenceParser.ml[628,22406+49])
                                                      Texp_ident "_menhir_s/1845"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[629,22457+39]..lib/sentenceParser.ml[629,22457+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[629,22457+39]..lib/sentenceParser.ml[629,22457+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[629,22457+48]..lib/sentenceParser.ml[629,22457+50])
                                                            Texp_ident "_v/1855"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[630,22509+41]..lib/sentenceParser.ml[630,22509+50])
                                                      Texp_ident "_startpos/1853"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[631,22561+39]..lib/sentenceParser.ml[631,22561+46])
                                                      Texp_ident "_endpos/1854"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[632,22609+39]..lib/sentenceParser.ml[632,22609+52])
                                                      Texp_ident "_menhir_stack/1849"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[634,22675+6]..lib/sentenceParser.ml[670,24005+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[634,22675+11]..lib/sentenceParser.ml[634,22675+22])
                            Tpat_var "_menhir_env/1859"
                          expression (lib/sentenceParser.ml[635,22701+8]..lib/sentenceParser.ml[670,24005+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[635,22701+12]..lib/sentenceParser.ml[635,22701+25])
                                  Tpat_var "_menhir_stack/1860"
                                expression (lib/sentenceParser.ml[635,22701+28]..lib/sentenceParser.ml[635,22701+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[635,22701+28]..lib/sentenceParser.ml[635,22701+39])
                                    Texp_ident "_menhir_env/1859"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[636,22772+8]..lib/sentenceParser.ml[670,24005+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[636,22772+12]..lib/sentenceParser.ml[642,23042+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[637,22786+40]..lib/sentenceParser.ml[637,22786+49])
                                          Tpat_var "_menhir_s/1861"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[638,22837+39]..lib/sentenceParser.ml[638,22837+41])
                                          Tpat_var "_1/1862"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[639,22880+41]..lib/sentenceParser.ml[639,22880+54])
                                          Tpat_var "_startpos__1_/1863"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[640,22936+39]..lib/sentenceParser.ml[640,22936+50])
                                          Tpat_var "_endpos__1_/1864"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[641,22988+39]..lib/sentenceParser.ml[641,22988+52])
                                          Tpat_var "_menhir_stack/1865"
                                    ]
                                  expression (lib/sentenceParser.ml[642,23042+12]..lib/sentenceParser.ml[642,23042+25])
                                    Texp_ident "_menhir_stack/1860"
                              ]
                              expression (lib/sentenceParser.ml[643,23071+8]..lib/sentenceParser.ml[670,24005+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[643,23071+12]..lib/sentenceParser.ml[643,23071+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[643,23071+18]..lib/sentenceParser.ml[643,23071+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/1866"
                                      pattern (lib/sentenceParser.ml[643,23071+12]..lib/sentenceParser.ml[643,23071+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[643,23071+37]..lib/sentenceParser.ml[643,23071+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[643,23071+18]..lib/sentenceParser.ml[643,23071+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[643,23071+37]..lib/sentenceParser.ml[643,23071+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[643,23071+47]..lib/sentenceParser.ml[643,23071+49])
                                            Texp_ident "_1/1862"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[644,23124+8]..lib/sentenceParser.ml[670,24005+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[644,23124+12]..lib/sentenceParser.ml[644,23124+23])
                                        Tpat_var "_endpos__0_/1867"
                                      expression (lib/sentenceParser.ml[644,23124+26]..lib/sentenceParser.ml[644,23124+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[644,23124+26]..lib/sentenceParser.ml[644,23124+39])
                                          Texp_ident "_menhir_stack/1865"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[645,23194+8]..lib/sentenceParser.ml[670,24005+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[645,23194+12]..lib/sentenceParser.ml[645,23194+21])
                                          Tpat_var "_startpos/1868"
                                        expression (lib/sentenceParser.ml[645,23194+24]..lib/sentenceParser.ml[645,23194+37])
                                          Texp_ident "_startpos__1_/1863"
                                    ]
                                    expression (lib/sentenceParser.ml[646,23235+8]..lib/sentenceParser.ml[670,24005+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[646,23235+12]..lib/sentenceParser.ml[646,23235+19])
                                            Tpat_var "_endpos/1869"
                                          expression (lib/sentenceParser.ml[646,23235+22]..lib/sentenceParser.ml[646,23235+33])
                                            Texp_ident "_endpos__1_/1864"
                                      ]
                                      expression (lib/sentenceParser.ml[647,23272+8]..lib/sentenceParser.ml[670,24005+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[647,23272+12]..lib/sentenceParser.ml[647,23272+14])
                                              Tpat_var "_v/1870"
                                            expression (lib/sentenceParser.ml[648,23289+10]..lib/sentenceParser.ml[662,23695+31])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[648,23289+14]..lib/sentenceParser.ml[648,23289+16])
                                                    Tpat_var "_1/1871"
                                                  expression (lib/sentenceParser.mly[139,23340+11]..lib/sentenceParser.mly[139,23340+88])
                                                    Texp_sequence
                                                    expression (lib/sentenceParser.mly[139,23340+18]..lib/sentenceParser.mly[139,23340+75])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[139,23340+19]..lib/sentenceParser.mly[139,23340+32])
                                                        Texp_ident "Stdlib!.print_endline"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[139,23340+33]..lib/sentenceParser.mly[139,23340+74])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[139,23340+34]..lib/sentenceParser.mly[139,23340+48])
                                                              Texp_ident "Batteries!.dump"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[139,23340+49]..lib/sentenceParser.mly[139,23340+73])
                                                                  Texp_tuple
                                                                  [
                                                                    expression (lib/sentenceParser.mly[139,23340+50]..lib/sentenceParser.mly[139,23340+68])
                                                                      Texp_constant Const_string("DEBUG:termfactor",(lib/sentenceParser.mly[139,23340+51]..lib/sentenceParser.mly[139,23340+67]),None)
                                                                    expression (lib/sentenceParser.mly[139,23340+70]..lib/sentenceParser.mly[139,23340+72])
                                                                      Texp_ident "_1/1866"
                                                                  ]
                                                            ]
                                                      ]
                                                    expression (lib/sentenceParser.mly[139,23340+77]..lib/sentenceParser.mly[139,23340+87])
                                                      Texp_construct "NFactor"
                                                      [
                                                        expression (lib/sentenceParser.mly[139,23340+85]..lib/sentenceParser.mly[139,23340+87])
                                                          Texp_ident "_1/1866"
                                                      ]
                                              ]
                                              expression (lib/sentenceParser.mly[152,23516+16]..lib/sentenceParser.mly[157,23657+7])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[662,23695+14]..lib/sentenceParser.ml[662,23695+29])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_construct "NFactor"
                                                [
                                                  expression (lib/sentenceParser.mly[156,23638+16]..lib/sentenceParser.mly[156,23638+18])
                                                    Texp_ident "_1/1871"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[664,23738+8]..lib/sentenceParser.ml[670,24005+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[665,23748+40]..lib/sentenceParser.ml[665,23748+49])
                                                    Texp_ident "_menhir_s/1861"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[666,23799+39]..lib/sentenceParser.ml[666,23799+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[666,23799+39]..lib/sentenceParser.ml[666,23799+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[666,23799+48]..lib/sentenceParser.ml[666,23799+50])
                                                          Texp_ident "_v/1870"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[667,23851+41]..lib/sentenceParser.ml[667,23851+50])
                                                    Texp_ident "_startpos/1868"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[668,23903+39]..lib/sentenceParser.ml[668,23903+46])
                                                    Texp_ident "_endpos/1869"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[669,23951+39]..lib/sentenceParser.ml[669,23951+52])
                                                    Texp_ident "_menhir_stack/1865"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[671,24017+6]..lib/sentenceParser.ml[708,25491+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[671,24017+11]..lib/sentenceParser.ml[671,24017+22])
                            Tpat_var "_menhir_env/1872"
                          expression (lib/sentenceParser.ml[672,24043+8]..lib/sentenceParser.ml[708,25491+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[672,24043+12]..lib/sentenceParser.ml[672,24043+25])
                                  Tpat_var "_menhir_stack/1873"
                                expression (lib/sentenceParser.ml[672,24043+28]..lib/sentenceParser.ml[672,24043+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[672,24043+28]..lib/sentenceParser.ml[672,24043+39])
                                    Texp_ident "_menhir_env/1872"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[673,24114+8]..lib/sentenceParser.ml[708,25491+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[673,24114+12]..lib/sentenceParser.ml[685,24642+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[674,24128+40]..lib/sentenceParser.ml[674,24128+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[675,24171+39]..lib/sentenceParser.ml[675,24171+41])
                                          Tpat_var "_2/1874"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[676,24214+41]..lib/sentenceParser.ml[676,24214+54])
                                          Tpat_var "_startpos__2_/1875"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[677,24270+39]..lib/sentenceParser.ml[677,24270+50])
                                          Tpat_var "_endpos__2_/1876"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[678,24322+39]..lib/sentenceParser.ml[684,24629+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[679,24363+42]..lib/sentenceParser.ml[679,24363+51])
                                                Tpat_var "_menhir_s/1877"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[680,24416+41]..lib/sentenceParser.ml[680,24416+43])
                                                Tpat_var "rs/1878"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[681,24461+43]..lib/sentenceParser.ml[681,24461+56])
                                                Tpat_var "_startpos_rs_/1879"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[682,24519+41]..lib/sentenceParser.ml[682,24519+52])
                                                Tpat_var "_endpos_rs_/1880"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[683,24573+41]..lib/sentenceParser.ml[683,24573+54])
                                                Tpat_var "_menhir_stack/1881"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[685,24642+12]..lib/sentenceParser.ml[685,24642+25])
                                    Texp_ident "_menhir_stack/1873"
                              ]
                              expression (lib/sentenceParser.ml[686,24671+8]..lib/sentenceParser.ml[708,25491+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[686,24671+12]..lib/sentenceParser.ml[686,24671+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[686,24671+18]..lib/sentenceParser.ml[686,24671+22])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_2/1882"
                                      pattern (lib/sentenceParser.ml[686,24671+12]..lib/sentenceParser.ml[686,24671+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[686,24671+26]..lib/sentenceParser.ml[686,24671+38])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[686,24671+18]..lib/sentenceParser.ml[686,24671+22])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[686,24671+26]..lib/sentenceParser.ml[686,24671+35])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[686,24671+36]..lib/sentenceParser.ml[686,24671+38])
                                            Texp_ident "_2/1874"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[687,24713+8]..lib/sentenceParser.ml[708,25491+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[687,24713+12]..lib/sentenceParser.ml[687,24713+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[687,24713+18]..lib/sentenceParser.ml[687,24713+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "rs/1883"
                                        pattern (lib/sentenceParser.ml[687,24713+12]..lib/sentenceParser.ml[687,24713+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[687,24713+37]..lib/sentenceParser.ml[687,24713+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[687,24713+18]..lib/sentenceParser.ml[687,24713+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[687,24713+37]..lib/sentenceParser.ml[687,24713+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[687,24713+47]..lib/sentenceParser.ml[687,24713+49])
                                              Texp_ident "rs/1878"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[688,24766+8]..lib/sentenceParser.ml[708,25491+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[688,24766+12]..lib/sentenceParser.ml[688,24766+23])
                                          Tpat_var "_endpos__0_/1884"
                                        expression (lib/sentenceParser.ml[688,24766+26]..lib/sentenceParser.ml[688,24766+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[688,24766+26]..lib/sentenceParser.ml[688,24766+39])
                                            Texp_ident "_menhir_stack/1881"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[689,24836+8]..lib/sentenceParser.ml[708,25491+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[689,24836+12]..lib/sentenceParser.ml[689,24836+21])
                                            Tpat_var "_startpos/1885"
                                          expression (lib/sentenceParser.ml[689,24836+24]..lib/sentenceParser.ml[689,24836+37])
                                            Texp_ident "_startpos_rs_/1879"
                                      ]
                                      expression (lib/sentenceParser.ml[690,24877+8]..lib/sentenceParser.ml[708,25491+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[690,24877+12]..lib/sentenceParser.ml[690,24877+19])
                                              Tpat_var "_endpos/1886"
                                            expression (lib/sentenceParser.ml[690,24877+22]..lib/sentenceParser.ml[690,24877+33])
                                              Texp_ident "_endpos__2_/1876"
                                        ]
                                        expression (lib/sentenceParser.ml[691,24914+8]..lib/sentenceParser.ml[708,25491+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[691,24914+12]..lib/sentenceParser.ml[691,24914+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[691,24914+18]..lib/sentenceParser.ml[691,24914+40])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.partial_grammar"
                                                    []
                                                Tpat_alias "_v/1887"
                                                pattern (lib/sentenceParser.ml[691,24914+12]..lib/sentenceParser.ml[691,24914+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[80,24989+4]..lib/sentenceParser.mly[86,25176+5])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[691,24914+18]..lib/sentenceParser.ml[691,24914+40])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.partial_grammar"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[81,24995+6]..lib/sentenceParser.mly[81,24995+63])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[81,24995+7]..lib/sentenceParser.mly[81,24995+20])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[81,24995+21]..lib/sentenceParser.mly[81,24995+62])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[81,24995+22]..lib/sentenceParser.mly[81,24995+36])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[81,24995+37]..lib/sentenceParser.mly[81,24995+61])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[81,24995+38]..lib/sentenceParser.mly[81,24995+53])
                                                                  Texp_constant Const_string("DEBUG:grammar",(lib/sentenceParser.mly[81,24995+39]..lib/sentenceParser.mly[81,24995+52]),None)
                                                                expression (lib/sentenceParser.mly[81,24995+54]..lib/sentenceParser.mly[81,24995+56])
                                                                  Texp_ident "rs/1883"
                                                                expression (lib/sentenceParser.mly[81,24995+58]..lib/sentenceParser.mly[81,24995+60])
                                                                  Texp_ident "_2/1882"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[82,25060+6]..lib/sentenceParser.mly[85,25168+7])
                                                  Texp_record
                                                    fields =
                                                      [
                                                        "pg_filename"
                                                          expression (lib/sentenceParser.mly[83,25068+31]..lib/sentenceParser.mly[83,25068+33])
                                                            Texp_constant Const_string("",(lib/sentenceParser.mly[83,25068+32]..lib/sentenceParser.mly[83,25068+32]),None)
                                                        "pg_rules"
                                                          expression (lib/sentenceParser.mly[84,25133+31]..lib/sentenceParser.mly[84,25133+33])
                                                            Texp_construct "[]"
                                                            []
                                                      ]
                                                    representation =
                                                      Record_regular
                                                    extended_expression =
                                                      None
                                          ]
                                          expression (lib/sentenceParser.ml[702,25224+8]..lib/sentenceParser.ml[708,25491+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[703,25234+40]..lib/sentenceParser.ml[703,25234+49])
                                                      Texp_ident "_menhir_s/1877"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[704,25285+39]..lib/sentenceParser.ml[704,25285+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[704,25285+39]..lib/sentenceParser.ml[704,25285+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[704,25285+48]..lib/sentenceParser.ml[704,25285+50])
                                                            Texp_ident "_v/1887"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[705,25337+41]..lib/sentenceParser.ml[705,25337+50])
                                                      Texp_ident "_startpos/1885"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[706,25389+39]..lib/sentenceParser.ml[706,25389+46])
                                                      Texp_ident "_endpos/1886"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[707,25437+39]..lib/sentenceParser.ml[707,25437+52])
                                                      Texp_ident "_menhir_stack/1881"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[709,25503+6]..lib/sentenceParser.ml[726,26217+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[709,25503+11]..lib/sentenceParser.ml[709,25503+22])
                            Tpat_var "_menhir_env/1888"
                          expression (lib/sentenceParser.ml[710,25529+8]..lib/sentenceParser.ml[726,26217+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[710,25529+12]..lib/sentenceParser.ml[710,25529+25])
                                  Tpat_var "_menhir_stack/1889"
                                expression (lib/sentenceParser.ml[710,25529+28]..lib/sentenceParser.ml[710,25529+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[710,25529+28]..lib/sentenceParser.ml[710,25529+39])
                                    Texp_ident "_menhir_env/1888"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[711,25600+8]..lib/sentenceParser.ml[726,26217+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[711,25600+12]..lib/sentenceParser.ml[711,25600+21])
                                    Tpat_var "_menhir_s/1890"
                                  expression (lib/sentenceParser.ml[711,25600+24]..lib/sentenceParser.ml[711,25600+65])
                                    Texp_field
                                    expression (lib/sentenceParser.ml[711,25600+24]..lib/sentenceParser.ml[711,25600+35])
                                      Texp_ident "_menhir_env/1888"
                                    "MenhirLib.EngineTypes.current"
                              ]
                              expression (lib/sentenceParser.ml[712,25669+8]..lib/sentenceParser.ml[726,26217+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[712,25669+12]..lib/sentenceParser.ml[712,25669+23])
                                      Tpat_var "_endpos__0_/1891"
                                    expression (lib/sentenceParser.ml[712,25669+26]..lib/sentenceParser.ml[712,25669+66])
                                      Texp_field
                                      expression (lib/sentenceParser.ml[712,25669+26]..lib/sentenceParser.ml[712,25669+39])
                                        Texp_ident "_menhir_stack/1889"
                                      "MenhirLib.EngineTypes.endp"
                                ]
                                expression (lib/sentenceParser.ml[713,25739+8]..lib/sentenceParser.ml[726,26217+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[713,25739+12]..lib/sentenceParser.ml[713,25739+21])
                                        Tpat_var "_startpos/1892"
                                      expression (lib/sentenceParser.ml[713,25739+24]..lib/sentenceParser.ml[713,25739+64])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[713,25739+24]..lib/sentenceParser.ml[713,25739+37])
                                          Texp_ident "_menhir_stack/1889"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[714,25807+8]..lib/sentenceParser.ml[726,26217+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[714,25807+12]..lib/sentenceParser.ml[714,25807+19])
                                          Tpat_var "_endpos/1893"
                                        expression (lib/sentenceParser.ml[714,25807+22]..lib/sentenceParser.ml[714,25807+31])
                                          Texp_ident "_startpos/1892"
                                    ]
                                    expression (lib/sentenceParser.ml[715,25842+8]..lib/sentenceParser.ml[726,26217+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[715,25842+12]..lib/sentenceParser.ml[715,25842+14])
                                            extra
                                              Tpat_extra_constraint
                                              core_type (lib/sentenceParser.ml[715,25842+18]..lib/sentenceParser.ml[715,25842+27])
                                                Ttyp_constr "list/9!"
                                                [
                                                  core_type (lib/sentenceParser.ml[715,25842+18]..lib/sentenceParser.ml[715,25842+22])
                                                    Ttyp_constr "unit/6!"
                                                    []
                                                ]
                                            Tpat_alias "_v/1894"
                                            pattern (lib/sentenceParser.ml[715,25842+12]..lib/sentenceParser.ml[715,25842+14])
                                              Tpat_any
                                          expression (<standard.mly>[208,25897+4]..<standard.mly>[208,25897+10])
                                            extra
                                              Texp_constraint
                                              core_type (lib/sentenceParser.ml[715,25842+18]..lib/sentenceParser.ml[715,25842+27])
                                                Ttyp_constr "list/9!"
                                                [
                                                  core_type (lib/sentenceParser.ml[715,25842+18]..lib/sentenceParser.ml[715,25842+22])
                                                    Ttyp_constr "unit/6!"
                                                    []
                                                ]
                                            Texp_construct "[]"
                                            []
                                      ]
                                      expression (lib/sentenceParser.ml[720,25950+8]..lib/sentenceParser.ml[726,26217+9])
                                        Texp_record
                                          fields =
                                            [
                                              "MenhirLib.EngineTypes.state"
                                                expression (lib/sentenceParser.ml[721,25960+40]..lib/sentenceParser.ml[721,25960+49])
                                                  Texp_ident "_menhir_s/1890"
                                              "MenhirLib.EngineTypes.semv"
                                                expression (lib/sentenceParser.ml[722,26011+39]..lib/sentenceParser.ml[722,26011+50])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.ml[722,26011+39]..lib/sentenceParser.ml[722,26011+47])
                                                    Texp_ident "Stdlib!.Obj.repr"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.ml[722,26011+48]..lib/sentenceParser.ml[722,26011+50])
                                                        Texp_ident "_v/1894"
                                                  ]
                                              "MenhirLib.EngineTypes.startp"
                                                expression (lib/sentenceParser.ml[723,26063+41]..lib/sentenceParser.ml[723,26063+50])
                                                  Texp_ident "_startpos/1892"
                                              "MenhirLib.EngineTypes.endp"
                                                expression (lib/sentenceParser.ml[724,26115+39]..lib/sentenceParser.ml[724,26115+46])
                                                  Texp_ident "_endpos/1893"
                                              "MenhirLib.EngineTypes.next"
                                                expression (lib/sentenceParser.ml[725,26163+39]..lib/sentenceParser.ml[725,26163+52])
                                                  Texp_ident "_menhir_stack/1889"
                                            ]
                                          representation =
                                            Record_regular
                                          extended_expression =
                                            None
                      ]
                    expression (lib/sentenceParser.ml[727,26229+6]..lib/sentenceParser.ml[758,27492+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[727,26229+11]..lib/sentenceParser.ml[727,26229+22])
                            Tpat_var "_menhir_env/1895"
                          expression (lib/sentenceParser.ml[728,26255+8]..lib/sentenceParser.ml[758,27492+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[728,26255+12]..lib/sentenceParser.ml[728,26255+25])
                                  Tpat_var "_menhir_stack/1896"
                                expression (lib/sentenceParser.ml[728,26255+28]..lib/sentenceParser.ml[728,26255+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[728,26255+28]..lib/sentenceParser.ml[728,26255+39])
                                    Texp_ident "_menhir_env/1895"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[729,26326+8]..lib/sentenceParser.ml[758,27492+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[729,26326+12]..lib/sentenceParser.ml[741,26851+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[730,26340+40]..lib/sentenceParser.ml[730,26340+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[731,26383+39]..lib/sentenceParser.ml[731,26383+41])
                                          Tpat_var "xs/1897"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[732,26426+41]..lib/sentenceParser.ml[732,26426+54])
                                          Tpat_var "_startpos_xs_/1898"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[733,26482+39]..lib/sentenceParser.ml[733,26482+50])
                                          Tpat_var "_endpos_xs_/1899"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[734,26534+39]..lib/sentenceParser.ml[740,26838+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[735,26575+42]..lib/sentenceParser.ml[735,26575+51])
                                                Tpat_var "_menhir_s/1900"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[736,26628+41]..lib/sentenceParser.ml[736,26628+42])
                                                Tpat_var "x/1901"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[737,26672+43]..lib/sentenceParser.ml[737,26672+55])
                                                Tpat_var "_startpos_x_/1902"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[738,26729+41]..lib/sentenceParser.ml[738,26729+51])
                                                Tpat_var "_endpos_x_/1903"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[739,26782+41]..lib/sentenceParser.ml[739,26782+54])
                                                Tpat_var "_menhir_stack/1904"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[741,26851+12]..lib/sentenceParser.ml[741,26851+25])
                                    Texp_ident "_menhir_stack/1896"
                              ]
                              expression (lib/sentenceParser.ml[742,26880+8]..lib/sentenceParser.ml[758,27492+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[742,26880+12]..lib/sentenceParser.ml[742,26880+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[742,26880+18]..lib/sentenceParser.ml[742,26880+27])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (lib/sentenceParser.ml[742,26880+18]..lib/sentenceParser.ml[742,26880+22])
                                              Ttyp_constr "unit/6!"
                                              []
                                          ]
                                      Tpat_alias "xs/1905"
                                      pattern (lib/sentenceParser.ml[742,26880+12]..lib/sentenceParser.ml[742,26880+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[742,26880+31]..lib/sentenceParser.ml[742,26880+43])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[742,26880+18]..lib/sentenceParser.ml[742,26880+27])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (lib/sentenceParser.ml[742,26880+18]..lib/sentenceParser.ml[742,26880+22])
                                              Ttyp_constr "unit/6!"
                                              []
                                          ]
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[742,26880+31]..lib/sentenceParser.ml[742,26880+40])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[742,26880+41]..lib/sentenceParser.ml[742,26880+43])
                                            Texp_ident "xs/1897"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[743,26927+8]..lib/sentenceParser.ml[758,27492+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[743,26927+12]..lib/sentenceParser.ml[743,26927+13])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[743,26927+16]..lib/sentenceParser.ml[743,26927+20])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Tpat_alias "x/1906"
                                        pattern (lib/sentenceParser.ml[743,26927+12]..lib/sentenceParser.ml[743,26927+13])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[743,26927+23]..lib/sentenceParser.ml[743,26927+34])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[743,26927+16]..lib/sentenceParser.ml[743,26927+20])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[743,26927+23]..lib/sentenceParser.ml[743,26927+32])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[743,26927+33]..lib/sentenceParser.ml[743,26927+34])
                                              Texp_ident "x/1901"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[744,26965+8]..lib/sentenceParser.ml[758,27492+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[744,26965+12]..lib/sentenceParser.ml[744,26965+23])
                                          Tpat_var "_endpos__0_/1907"
                                        expression (lib/sentenceParser.ml[744,26965+26]..lib/sentenceParser.ml[744,26965+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[744,26965+26]..lib/sentenceParser.ml[744,26965+39])
                                            Texp_ident "_menhir_stack/1904"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[745,27035+8]..lib/sentenceParser.ml[758,27492+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[745,27035+12]..lib/sentenceParser.ml[745,27035+21])
                                            Tpat_var "_startpos/1908"
                                          expression (lib/sentenceParser.ml[745,27035+24]..lib/sentenceParser.ml[745,27035+36])
                                            Texp_ident "_startpos_x_/1902"
                                      ]
                                      expression (lib/sentenceParser.ml[746,27075+8]..lib/sentenceParser.ml[758,27492+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[746,27075+12]..lib/sentenceParser.ml[746,27075+19])
                                              Tpat_var "_endpos/1909"
                                            expression (lib/sentenceParser.ml[746,27075+22]..lib/sentenceParser.ml[746,27075+33])
                                              Texp_ident "_endpos_xs_/1899"
                                        ]
                                        expression (lib/sentenceParser.ml[747,27112+8]..lib/sentenceParser.ml[758,27492+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[747,27112+12]..lib/sentenceParser.ml[747,27112+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[747,27112+18]..lib/sentenceParser.ml[747,27112+27])
                                                    Ttyp_constr "list/9!"
                                                    [
                                                      core_type (lib/sentenceParser.ml[747,27112+18]..lib/sentenceParser.ml[747,27112+22])
                                                        Ttyp_constr "unit/6!"
                                                        []
                                                    ]
                                                Tpat_alias "_v/1910"
                                                pattern (lib/sentenceParser.ml[747,27112+12]..lib/sentenceParser.ml[747,27112+14])
                                                  Tpat_any
                                              expression (<standard.mly>[210,27167+4]..<standard.mly>[210,27167+15])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[747,27112+18]..lib/sentenceParser.ml[747,27112+27])
                                                    Ttyp_constr "list/9!"
                                                    [
                                                      core_type (lib/sentenceParser.ml[747,27112+18]..lib/sentenceParser.ml[747,27112+22])
                                                        Ttyp_constr "unit/6!"
                                                        []
                                                    ]
                                                Texp_construct "::"
                                                [
                                                  expression (<standard.mly>[210,27167+6]..<standard.mly>[210,27167+7])
                                                    Texp_ident "x/1906"
                                                  expression (<standard.mly>[210,27167+11]..<standard.mly>[210,27167+13])
                                                    Texp_ident "xs/1905"
                                                ]
                                          ]
                                          expression (lib/sentenceParser.ml[752,27225+8]..lib/sentenceParser.ml[758,27492+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[753,27235+40]..lib/sentenceParser.ml[753,27235+49])
                                                      Texp_ident "_menhir_s/1900"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[754,27286+39]..lib/sentenceParser.ml[754,27286+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[754,27286+39]..lib/sentenceParser.ml[754,27286+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[754,27286+48]..lib/sentenceParser.ml[754,27286+50])
                                                            Texp_ident "_v/1910"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[755,27338+41]..lib/sentenceParser.ml[755,27338+50])
                                                      Texp_ident "_startpos/1908"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[756,27390+39]..lib/sentenceParser.ml[756,27390+46])
                                                      Texp_ident "_endpos/1909"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[757,27438+39]..lib/sentenceParser.ml[757,27438+52])
                                                      Texp_ident "_menhir_stack/1904"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[759,27504+6]..lib/sentenceParser.ml[783,28459+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[759,27504+11]..lib/sentenceParser.ml[759,27504+22])
                            Tpat_var "_menhir_env/1911"
                          expression (lib/sentenceParser.ml[760,27530+8]..lib/sentenceParser.ml[783,28459+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[760,27530+12]..lib/sentenceParser.ml[760,27530+25])
                                  Tpat_var "_menhir_stack/1912"
                                expression (lib/sentenceParser.ml[760,27530+28]..lib/sentenceParser.ml[760,27530+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[760,27530+28]..lib/sentenceParser.ml[760,27530+39])
                                    Texp_ident "_menhir_env/1911"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[761,27601+8]..lib/sentenceParser.ml[783,28459+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[761,27601+12]..lib/sentenceParser.ml[767,27868+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[762,27615+40]..lib/sentenceParser.ml[762,27615+49])
                                          Tpat_var "_menhir_s/1913"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[763,27666+39]..lib/sentenceParser.ml[763,27666+40])
                                          Tpat_var "x/1914"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[764,27708+41]..lib/sentenceParser.ml[764,27708+53])
                                          Tpat_var "_startpos_x_/1915"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[765,27763+39]..lib/sentenceParser.ml[765,27763+49])
                                          Tpat_var "_endpos_x_/1916"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[766,27814+39]..lib/sentenceParser.ml[766,27814+52])
                                          Tpat_var "_menhir_stack/1917"
                                    ]
                                  expression (lib/sentenceParser.ml[767,27868+12]..lib/sentenceParser.ml[767,27868+25])
                                    Texp_ident "_menhir_stack/1912"
                              ]
                              expression (lib/sentenceParser.ml[768,27897+8]..lib/sentenceParser.ml[783,28459+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[768,27897+12]..lib/sentenceParser.ml[768,27897+13])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[768,27897+16]..lib/sentenceParser.ml[768,27897+20])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "x/1918"
                                      pattern (lib/sentenceParser.ml[768,27897+12]..lib/sentenceParser.ml[768,27897+13])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[768,27897+23]..lib/sentenceParser.ml[768,27897+34])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[768,27897+16]..lib/sentenceParser.ml[768,27897+20])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[768,27897+23]..lib/sentenceParser.ml[768,27897+32])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[768,27897+33]..lib/sentenceParser.ml[768,27897+34])
                                            Texp_ident "x/1914"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[769,27935+8]..lib/sentenceParser.ml[783,28459+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[769,27935+12]..lib/sentenceParser.ml[769,27935+23])
                                        Tpat_var "_endpos__0_/1919"
                                      expression (lib/sentenceParser.ml[769,27935+26]..lib/sentenceParser.ml[769,27935+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[769,27935+26]..lib/sentenceParser.ml[769,27935+39])
                                          Texp_ident "_menhir_stack/1917"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[770,28005+8]..lib/sentenceParser.ml[783,28459+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[770,28005+12]..lib/sentenceParser.ml[770,28005+21])
                                          Tpat_var "_startpos/1920"
                                        expression (lib/sentenceParser.ml[770,28005+24]..lib/sentenceParser.ml[770,28005+36])
                                          Texp_ident "_startpos_x_/1915"
                                    ]
                                    expression (lib/sentenceParser.ml[771,28045+8]..lib/sentenceParser.ml[783,28459+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[771,28045+12]..lib/sentenceParser.ml[771,28045+19])
                                            Tpat_var "_endpos/1921"
                                          expression (lib/sentenceParser.ml[771,28045+22]..lib/sentenceParser.ml[771,28045+32])
                                            Texp_ident "_endpos_x_/1916"
                                      ]
                                      expression (lib/sentenceParser.ml[772,28081+8]..lib/sentenceParser.ml[783,28459+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[772,28081+12]..lib/sentenceParser.ml[772,28081+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[772,28081+18]..lib/sentenceParser.ml[772,28081+27])
                                                  Ttyp_constr "list/9!"
                                                  [
                                                    core_type (lib/sentenceParser.ml[772,28081+18]..lib/sentenceParser.ml[772,28081+22])
                                                      Ttyp_constr "unit/6!"
                                                      []
                                                  ]
                                              Tpat_alias "_v/1922"
                                              pattern (lib/sentenceParser.ml[772,28081+12]..lib/sentenceParser.ml[772,28081+14])
                                                Tpat_any
                                            expression (<standard.mly>[218,28136+4]..<standard.mly>[218,28136+13])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[772,28081+18]..lib/sentenceParser.ml[772,28081+27])
                                                  Ttyp_constr "list/9!"
                                                  [
                                                    core_type (lib/sentenceParser.ml[772,28081+18]..lib/sentenceParser.ml[772,28081+22])
                                                      Ttyp_constr "unit/6!"
                                                      []
                                                  ]
                                              Texp_construct "::"
                                              [
                                                expression (<standard.mly>[218,28136+8]..<standard.mly>[218,28136+9])
                                                  Texp_ident "x/1918"
                                                expression (<standard.mly>[218,28136+10]..<standard.mly>[218,28136+11]) ghost
                                                  Texp_construct "[]"
                                                  []
                                              ]
                                        ]
                                        expression (lib/sentenceParser.ml[777,28192+8]..lib/sentenceParser.ml[783,28459+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[778,28202+40]..lib/sentenceParser.ml[778,28202+49])
                                                    Texp_ident "_menhir_s/1913"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[779,28253+39]..lib/sentenceParser.ml[779,28253+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[779,28253+39]..lib/sentenceParser.ml[779,28253+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[779,28253+48]..lib/sentenceParser.ml[779,28253+50])
                                                          Texp_ident "_v/1922"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[780,28305+41]..lib/sentenceParser.ml[780,28305+50])
                                                    Texp_ident "_startpos/1920"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[781,28357+39]..lib/sentenceParser.ml[781,28357+46])
                                                    Texp_ident "_endpos/1921"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[782,28405+39]..lib/sentenceParser.ml[782,28405+52])
                                                    Texp_ident "_menhir_stack/1917"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[784,28471+6]..lib/sentenceParser.ml[815,29734+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[784,28471+11]..lib/sentenceParser.ml[784,28471+22])
                            Tpat_var "_menhir_env/1923"
                          expression (lib/sentenceParser.ml[785,28497+8]..lib/sentenceParser.ml[815,29734+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[785,28497+12]..lib/sentenceParser.ml[785,28497+25])
                                  Tpat_var "_menhir_stack/1924"
                                expression (lib/sentenceParser.ml[785,28497+28]..lib/sentenceParser.ml[785,28497+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[785,28497+28]..lib/sentenceParser.ml[785,28497+39])
                                    Texp_ident "_menhir_env/1923"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[786,28568+8]..lib/sentenceParser.ml[815,29734+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[786,28568+12]..lib/sentenceParser.ml[798,29093+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[787,28582+40]..lib/sentenceParser.ml[787,28582+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[788,28625+39]..lib/sentenceParser.ml[788,28625+41])
                                          Tpat_var "xs/1925"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[789,28668+41]..lib/sentenceParser.ml[789,28668+54])
                                          Tpat_var "_startpos_xs_/1926"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[790,28724+39]..lib/sentenceParser.ml[790,28724+50])
                                          Tpat_var "_endpos_xs_/1927"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[791,28776+39]..lib/sentenceParser.ml[797,29080+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[792,28817+42]..lib/sentenceParser.ml[792,28817+51])
                                                Tpat_var "_menhir_s/1928"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[793,28870+41]..lib/sentenceParser.ml[793,28870+42])
                                                Tpat_var "x/1929"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[794,28914+43]..lib/sentenceParser.ml[794,28914+55])
                                                Tpat_var "_startpos_x_/1930"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[795,28971+41]..lib/sentenceParser.ml[795,28971+51])
                                                Tpat_var "_endpos_x_/1931"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[796,29024+41]..lib/sentenceParser.ml[796,29024+54])
                                                Tpat_var "_menhir_stack/1932"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[798,29093+12]..lib/sentenceParser.ml[798,29093+25])
                                    Texp_ident "_menhir_stack/1924"
                              ]
                              expression (lib/sentenceParser.ml[799,29122+8]..lib/sentenceParser.ml[815,29734+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[799,29122+12]..lib/sentenceParser.ml[799,29122+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[799,29122+18]..lib/sentenceParser.ml[799,29122+27])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (lib/sentenceParser.ml[799,29122+18]..lib/sentenceParser.ml[799,29122+22])
                                              Ttyp_constr "unit/6!"
                                              []
                                          ]
                                      Tpat_alias "xs/1933"
                                      pattern (lib/sentenceParser.ml[799,29122+12]..lib/sentenceParser.ml[799,29122+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[799,29122+31]..lib/sentenceParser.ml[799,29122+43])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[799,29122+18]..lib/sentenceParser.ml[799,29122+27])
                                          Ttyp_constr "list/9!"
                                          [
                                            core_type (lib/sentenceParser.ml[799,29122+18]..lib/sentenceParser.ml[799,29122+22])
                                              Ttyp_constr "unit/6!"
                                              []
                                          ]
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[799,29122+31]..lib/sentenceParser.ml[799,29122+40])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[799,29122+41]..lib/sentenceParser.ml[799,29122+43])
                                            Texp_ident "xs/1925"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[800,29169+8]..lib/sentenceParser.ml[815,29734+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[800,29169+12]..lib/sentenceParser.ml[800,29169+13])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[800,29169+16]..lib/sentenceParser.ml[800,29169+20])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Tpat_alias "x/1934"
                                        pattern (lib/sentenceParser.ml[800,29169+12]..lib/sentenceParser.ml[800,29169+13])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[800,29169+23]..lib/sentenceParser.ml[800,29169+34])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[800,29169+16]..lib/sentenceParser.ml[800,29169+20])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[800,29169+23]..lib/sentenceParser.ml[800,29169+32])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[800,29169+33]..lib/sentenceParser.ml[800,29169+34])
                                              Texp_ident "x/1929"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[801,29207+8]..lib/sentenceParser.ml[815,29734+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[801,29207+12]..lib/sentenceParser.ml[801,29207+23])
                                          Tpat_var "_endpos__0_/1935"
                                        expression (lib/sentenceParser.ml[801,29207+26]..lib/sentenceParser.ml[801,29207+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[801,29207+26]..lib/sentenceParser.ml[801,29207+39])
                                            Texp_ident "_menhir_stack/1932"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[802,29277+8]..lib/sentenceParser.ml[815,29734+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[802,29277+12]..lib/sentenceParser.ml[802,29277+21])
                                            Tpat_var "_startpos/1936"
                                          expression (lib/sentenceParser.ml[802,29277+24]..lib/sentenceParser.ml[802,29277+36])
                                            Texp_ident "_startpos_x_/1930"
                                      ]
                                      expression (lib/sentenceParser.ml[803,29317+8]..lib/sentenceParser.ml[815,29734+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[803,29317+12]..lib/sentenceParser.ml[803,29317+19])
                                              Tpat_var "_endpos/1937"
                                            expression (lib/sentenceParser.ml[803,29317+22]..lib/sentenceParser.ml[803,29317+33])
                                              Texp_ident "_endpos_xs_/1927"
                                        ]
                                        expression (lib/sentenceParser.ml[804,29354+8]..lib/sentenceParser.ml[815,29734+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[804,29354+12]..lib/sentenceParser.ml[804,29354+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[804,29354+18]..lib/sentenceParser.ml[804,29354+27])
                                                    Ttyp_constr "list/9!"
                                                    [
                                                      core_type (lib/sentenceParser.ml[804,29354+18]..lib/sentenceParser.ml[804,29354+22])
                                                        Ttyp_constr "unit/6!"
                                                        []
                                                    ]
                                                Tpat_alias "_v/1938"
                                                pattern (lib/sentenceParser.ml[804,29354+12]..lib/sentenceParser.ml[804,29354+14])
                                                  Tpat_any
                                              expression (<standard.mly>[220,29409+4]..<standard.mly>[220,29409+15])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[804,29354+18]..lib/sentenceParser.ml[804,29354+27])
                                                    Ttyp_constr "list/9!"
                                                    [
                                                      core_type (lib/sentenceParser.ml[804,29354+18]..lib/sentenceParser.ml[804,29354+22])
                                                        Ttyp_constr "unit/6!"
                                                        []
                                                    ]
                                                Texp_construct "::"
                                                [
                                                  expression (<standard.mly>[220,29409+6]..<standard.mly>[220,29409+7])
                                                    Texp_ident "x/1934"
                                                  expression (<standard.mly>[220,29409+11]..<standard.mly>[220,29409+13])
                                                    Texp_ident "xs/1933"
                                                ]
                                          ]
                                          expression (lib/sentenceParser.ml[809,29467+8]..lib/sentenceParser.ml[815,29734+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[810,29477+40]..lib/sentenceParser.ml[810,29477+49])
                                                      Texp_ident "_menhir_s/1928"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[811,29528+39]..lib/sentenceParser.ml[811,29528+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[811,29528+39]..lib/sentenceParser.ml[811,29528+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[811,29528+48]..lib/sentenceParser.ml[811,29528+50])
                                                            Texp_ident "_v/1938"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[812,29580+41]..lib/sentenceParser.ml[812,29580+50])
                                                      Texp_ident "_startpos/1936"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[813,29632+39]..lib/sentenceParser.ml[813,29632+46])
                                                      Texp_ident "_endpos/1937"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[814,29680+39]..lib/sentenceParser.ml[814,29680+52])
                                                      Texp_ident "_menhir_stack/1932"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[816,29746+6]..lib/sentenceParser.ml[849,31086+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[816,29746+11]..lib/sentenceParser.ml[816,29746+22])
                            Tpat_var "_menhir_env/1939"
                          expression (lib/sentenceParser.ml[817,29772+8]..lib/sentenceParser.ml[849,31086+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[817,29772+12]..lib/sentenceParser.ml[817,29772+25])
                                  Tpat_var "_menhir_stack/1940"
                                expression (lib/sentenceParser.ml[817,29772+28]..lib/sentenceParser.ml[817,29772+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[817,29772+28]..lib/sentenceParser.ml[817,29772+39])
                                    Texp_ident "_menhir_env/1939"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[818,29843+8]..lib/sentenceParser.ml[849,31086+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[818,29843+12]..lib/sentenceParser.ml[830,30371+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[819,29857+40]..lib/sentenceParser.ml[819,29857+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[820,29900+39]..lib/sentenceParser.ml[820,29900+41])
                                          Tpat_var "_2/1941"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[821,29943+41]..lib/sentenceParser.ml[821,29943+54])
                                          Tpat_var "_startpos__2_/1942"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[822,29999+39]..lib/sentenceParser.ml[822,29999+50])
                                          Tpat_var "_endpos__2_/1943"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[823,30051+39]..lib/sentenceParser.ml[829,30358+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[824,30092+42]..lib/sentenceParser.ml[824,30092+51])
                                                Tpat_var "_menhir_s/1944"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[825,30145+41]..lib/sentenceParser.ml[825,30145+43])
                                                Tpat_var "_1/1945"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[826,30190+43]..lib/sentenceParser.ml[826,30190+56])
                                                Tpat_var "_startpos__1_/1946"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[827,30248+41]..lib/sentenceParser.ml[827,30248+52])
                                                Tpat_var "_endpos__1_/1947"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[828,30302+41]..lib/sentenceParser.ml[828,30302+54])
                                                Tpat_var "_menhir_stack/1948"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[830,30371+12]..lib/sentenceParser.ml[830,30371+25])
                                    Texp_ident "_menhir_stack/1940"
                              ]
                              expression (lib/sentenceParser.ml[831,30400+8]..lib/sentenceParser.ml[849,31086+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[831,30400+12]..lib/sentenceParser.ml[831,30400+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[831,30400+17]..lib/sentenceParser.ml[831,30400+21])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_2/1949"
                                      pattern (lib/sentenceParser.ml[831,30400+12]..lib/sentenceParser.ml[831,30400+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[831,30400+24]..lib/sentenceParser.ml[831,30400+36])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[831,30400+17]..lib/sentenceParser.ml[831,30400+21])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[831,30400+24]..lib/sentenceParser.ml[831,30400+33])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[831,30400+34]..lib/sentenceParser.ml[831,30400+36])
                                            Texp_ident "_2/1941"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[832,30440+8]..lib/sentenceParser.ml[849,31086+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[832,30440+12]..lib/sentenceParser.ml[832,30440+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[832,30440+18]..lib/sentenceParser.ml[832,30440+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[832,30440+18]..lib/sentenceParser.ml[832,30440+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Tpat_alias "_1/1950"
                                        pattern (lib/sentenceParser.ml[832,30440+12]..lib/sentenceParser.ml[832,30440+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[832,30440+31]..lib/sentenceParser.ml[832,30440+43])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[832,30440+18]..lib/sentenceParser.ml[832,30440+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[832,30440+18]..lib/sentenceParser.ml[832,30440+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[832,30440+31]..lib/sentenceParser.ml[832,30440+40])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[832,30440+41]..lib/sentenceParser.ml[832,30440+43])
                                              Texp_ident "_1/1945"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[833,30487+8]..lib/sentenceParser.ml[849,31086+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[833,30487+12]..lib/sentenceParser.ml[833,30487+23])
                                          Tpat_var "_endpos__0_/1951"
                                        expression (lib/sentenceParser.ml[833,30487+26]..lib/sentenceParser.ml[833,30487+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[833,30487+26]..lib/sentenceParser.ml[833,30487+39])
                                            Texp_ident "_menhir_stack/1948"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[834,30557+8]..lib/sentenceParser.ml[849,31086+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[834,30557+12]..lib/sentenceParser.ml[834,30557+21])
                                            Tpat_var "_startpos/1952"
                                          expression (lib/sentenceParser.ml[834,30557+24]..lib/sentenceParser.ml[834,30557+37])
                                            Texp_ident "_startpos__1_/1946"
                                      ]
                                      expression (lib/sentenceParser.ml[835,30598+8]..lib/sentenceParser.ml[849,31086+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[835,30598+12]..lib/sentenceParser.ml[835,30598+19])
                                              Tpat_var "_endpos/1953"
                                            expression (lib/sentenceParser.ml[835,30598+22]..lib/sentenceParser.ml[835,30598+33])
                                              Texp_ident "_endpos__2_/1943"
                                        ]
                                        expression (lib/sentenceParser.ml[836,30635+8]..lib/sentenceParser.ml[849,31086+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[836,30635+12]..lib/sentenceParser.ml[836,30635+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[836,30635+18]..lib/sentenceParser.ml[836,30635+22])
                                                    Ttyp_constr "unit/6!"
                                                    []
                                                Tpat_alias "_v/1954"
                                                pattern (lib/sentenceParser.ml[836,30635+12]..lib/sentenceParser.ml[836,30635+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[105,30693+15]..lib/sentenceParser.mly[107,30760+16])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[836,30635+18]..lib/sentenceParser.ml[836,30635+22])
                                                    Ttyp_constr "unit/6!"
                                                    []
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[106,30711+1]..lib/sentenceParser.mly[106,30711+14])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[106,30711+15]..lib/sentenceParser.mly[106,30711+46])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[106,30711+16]..lib/sentenceParser.mly[106,30711+30])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[106,30711+31]..lib/sentenceParser.mly[106,30711+45])
                                                            Texp_constant Const_string("DEBUG:DONE",(lib/sentenceParser.mly[106,30711+33]..lib/sentenceParser.mly[106,30711+43]),None)
                                                      ]
                                                ]
                                          ]
                                          expression (lib/sentenceParser.ml[843,30819+8]..lib/sentenceParser.ml[849,31086+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[844,30829+40]..lib/sentenceParser.ml[844,30829+49])
                                                      Texp_ident "_menhir_s/1944"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[845,30880+39]..lib/sentenceParser.ml[845,30880+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[845,30880+39]..lib/sentenceParser.ml[845,30880+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[845,30880+48]..lib/sentenceParser.ml[845,30880+50])
                                                            Texp_ident "_v/1954"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[846,30932+41]..lib/sentenceParser.ml[846,30932+50])
                                                      Texp_ident "_startpos/1952"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[847,30984+39]..lib/sentenceParser.ml[847,30984+46])
                                                      Texp_ident "_endpos/1953"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[848,31032+39]..lib/sentenceParser.ml[848,31032+52])
                                                      Texp_ident "_menhir_stack/1948"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[850,31098+6]..lib/sentenceParser.ml[874,32160+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[850,31098+11]..lib/sentenceParser.ml[850,31098+22])
                            Tpat_var "_menhir_env/1955"
                          expression (lib/sentenceParser.ml[851,31124+8]..lib/sentenceParser.ml[874,32160+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[851,31124+12]..lib/sentenceParser.ml[851,31124+25])
                                  Tpat_var "_menhir_stack/1956"
                                expression (lib/sentenceParser.ml[851,31124+28]..lib/sentenceParser.ml[851,31124+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[851,31124+28]..lib/sentenceParser.ml[851,31124+39])
                                    Texp_ident "_menhir_env/1955"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[852,31195+8]..lib/sentenceParser.ml[874,32160+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[852,31195+12]..lib/sentenceParser.ml[858,31465+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[853,31209+40]..lib/sentenceParser.ml[853,31209+49])
                                          Tpat_var "_menhir_s/1957"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[854,31260+39]..lib/sentenceParser.ml[854,31260+41])
                                          Tpat_var "_1/1958"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[855,31303+41]..lib/sentenceParser.ml[855,31303+54])
                                          Tpat_var "_startpos__1_/1959"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[856,31359+39]..lib/sentenceParser.ml[856,31359+50])
                                          Tpat_var "_endpos__1_/1960"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[857,31411+39]..lib/sentenceParser.ml[857,31411+52])
                                          Tpat_var "_menhir_stack/1961"
                                    ]
                                  expression (lib/sentenceParser.ml[858,31465+12]..lib/sentenceParser.ml[858,31465+25])
                                    Texp_ident "_menhir_stack/1956"
                              ]
                              expression (lib/sentenceParser.ml[859,31494+8]..lib/sentenceParser.ml[874,32160+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[859,31494+12]..lib/sentenceParser.ml[859,31494+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[859,31494+18]..lib/sentenceParser.ml[859,31494+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/1962"
                                      pattern (lib/sentenceParser.ml[859,31494+12]..lib/sentenceParser.ml[859,31494+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[859,31494+37]..lib/sentenceParser.ml[859,31494+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[859,31494+18]..lib/sentenceParser.ml[859,31494+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[859,31494+37]..lib/sentenceParser.ml[859,31494+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[859,31494+47]..lib/sentenceParser.ml[859,31494+49])
                                            Texp_ident "_1/1958"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[860,31547+8]..lib/sentenceParser.ml[874,32160+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[860,31547+12]..lib/sentenceParser.ml[860,31547+23])
                                        Tpat_var "_endpos__0_/1963"
                                      expression (lib/sentenceParser.ml[860,31547+26]..lib/sentenceParser.ml[860,31547+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[860,31547+26]..lib/sentenceParser.ml[860,31547+39])
                                          Texp_ident "_menhir_stack/1961"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[861,31617+8]..lib/sentenceParser.ml[874,32160+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[861,31617+12]..lib/sentenceParser.ml[861,31617+21])
                                          Tpat_var "_startpos/1964"
                                        expression (lib/sentenceParser.ml[861,31617+24]..lib/sentenceParser.ml[861,31617+37])
                                          Texp_ident "_startpos__1_/1959"
                                    ]
                                    expression (lib/sentenceParser.ml[862,31658+8]..lib/sentenceParser.ml[874,32160+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[862,31658+12]..lib/sentenceParser.ml[862,31658+19])
                                            Tpat_var "_endpos/1965"
                                          expression (lib/sentenceParser.ml[862,31658+22]..lib/sentenceParser.ml[862,31658+33])
                                            Texp_ident "_endpos__1_/1960"
                                      ]
                                      expression (lib/sentenceParser.ml[863,31695+8]..lib/sentenceParser.ml[874,32160+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[863,31695+12]..lib/sentenceParser.ml[863,31695+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[863,31695+18]..lib/sentenceParser.ml[863,31695+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/1966"
                                              pattern (lib/sentenceParser.ml[863,31695+12]..lib/sentenceParser.ml[863,31695+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[183,31764+16]..lib/sentenceParser.mly[183,31764+86])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[863,31695+18]..lib/sentenceParser.ml[863,31695+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[183,31764+23]..lib/sentenceParser.mly[183,31764+73])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[183,31764+24]..lib/sentenceParser.mly[183,31764+37])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[183,31764+38]..lib/sentenceParser.mly[183,31764+72])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[183,31764+39]..lib/sentenceParser.mly[183,31764+53])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[183,31764+54]..lib/sentenceParser.mly[183,31764+71])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[183,31764+55]..lib/sentenceParser.mly[183,31764+66])
                                                                Texp_constant Const_string("DEBUG:rhs",(lib/sentenceParser.mly[183,31764+56]..lib/sentenceParser.mly[183,31764+65]),None)
                                                              expression (lib/sentenceParser.mly[183,31764+68]..lib/sentenceParser.mly[183,31764+70])
                                                                Texp_ident "_1/1962"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[183,31764+75]..lib/sentenceParser.mly[183,31764+85])
                                                Texp_construct "NFactor"
                                                [
                                                  expression (lib/sentenceParser.mly[183,31764+83]..lib/sentenceParser.mly[183,31764+85])
                                                    Texp_ident "_1/1962"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[868,31893+8]..lib/sentenceParser.ml[874,32160+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[869,31903+40]..lib/sentenceParser.ml[869,31903+49])
                                                    Texp_ident "_menhir_s/1957"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[870,31954+39]..lib/sentenceParser.ml[870,31954+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[870,31954+39]..lib/sentenceParser.ml[870,31954+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[870,31954+48]..lib/sentenceParser.ml[870,31954+50])
                                                          Texp_ident "_v/1966"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[871,32006+41]..lib/sentenceParser.ml[871,32006+50])
                                                    Texp_ident "_startpos/1964"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[872,32058+39]..lib/sentenceParser.ml[872,32058+46])
                                                    Texp_ident "_endpos/1965"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[873,32106+39]..lib/sentenceParser.ml[873,32106+52])
                                                    Texp_ident "_menhir_stack/1961"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[875,32172+6]..lib/sentenceParser.ml[924,34189+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[875,32172+11]..lib/sentenceParser.ml[875,32172+22])
                            Tpat_var "_menhir_env/1967"
                          expression (lib/sentenceParser.ml[876,32198+8]..lib/sentenceParser.ml[924,34189+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[876,32198+12]..lib/sentenceParser.ml[876,32198+25])
                                  Tpat_var "_menhir_stack/1968"
                                expression (lib/sentenceParser.ml[876,32198+28]..lib/sentenceParser.ml[876,32198+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[876,32198+28]..lib/sentenceParser.ml[876,32198+39])
                                    Texp_ident "_menhir_env/1967"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[877,32269+8]..lib/sentenceParser.ml[924,34189+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[877,32269+12]..lib/sentenceParser.ml[895,33097+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[878,32283+40]..lib/sentenceParser.ml[878,32283+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[879,32326+39]..lib/sentenceParser.ml[879,32326+47])
                                          Tpat_var "branches/1969"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[880,32375+41]..lib/sentenceParser.ml[880,32375+60])
                                          Tpat_var "_startpos_branches_/1970"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[881,32437+39]..lib/sentenceParser.ml[881,32437+56])
                                          Tpat_var "_endpos_branches_/1971"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[882,32495+39]..lib/sentenceParser.ml[894,33084+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[883,32536+42]..lib/sentenceParser.ml[883,32536+43])
                                                Tpat_any
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[884,32581+41]..lib/sentenceParser.ml[884,32581+43])
                                                Tpat_var "_2/1972"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[885,32626+43]..lib/sentenceParser.ml[885,32626+56])
                                                Tpat_var "_startpos__2_/1973"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[886,32684+41]..lib/sentenceParser.ml[886,32684+52])
                                                Tpat_var "_endpos__2_/1974"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[887,32738+41]..lib/sentenceParser.ml[893,33069+13])
                                                Tpat_record
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    pattern (lib/sentenceParser.ml[888,32781+44]..lib/sentenceParser.ml[888,32781+53])
                                                      Tpat_var "_menhir_s/1975"
                                                  "MenhirLib.EngineTypes.semv"
                                                    pattern (lib/sentenceParser.ml[889,32836+43]..lib/sentenceParser.ml[889,32836+49])
                                                      Tpat_var "symbol/1976"
                                                  "MenhirLib.EngineTypes.startp"
                                                    pattern (lib/sentenceParser.ml[890,32887+45]..lib/sentenceParser.ml[890,32887+62])
                                                      Tpat_var "_startpos_symbol_/1977"
                                                  "MenhirLib.EngineTypes.endp"
                                                    pattern (lib/sentenceParser.ml[891,32951+43]..lib/sentenceParser.ml[891,32951+58])
                                                      Tpat_var "_endpos_symbol_/1978"
                                                  "MenhirLib.EngineTypes.next"
                                                    pattern (lib/sentenceParser.ml[892,33011+43]..lib/sentenceParser.ml[892,33011+56])
                                                      Tpat_var "_menhir_stack/1979"
                                                ]
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[895,33097+12]..lib/sentenceParser.ml[895,33097+25])
                                    Texp_ident "_menhir_stack/1968"
                              ]
                              expression (lib/sentenceParser.ml[896,33126+8]..lib/sentenceParser.ml[924,34189+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[896,33126+12]..lib/sentenceParser.ml[896,33126+20])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[896,33126+24]..lib/sentenceParser.ml[896,33126+39])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "branches/1980"
                                      pattern (lib/sentenceParser.ml[896,33126+12]..lib/sentenceParser.ml[896,33126+20])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[896,33126+43]..lib/sentenceParser.ml[896,33126+61])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[896,33126+24]..lib/sentenceParser.ml[896,33126+39])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[896,33126+43]..lib/sentenceParser.ml[896,33126+52])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[896,33126+53]..lib/sentenceParser.ml[896,33126+61])
                                            Texp_ident "branches/1969"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[897,33191+8]..lib/sentenceParser.ml[924,34189+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[897,33191+12]..lib/sentenceParser.ml[897,33191+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[897,33191+17]..lib/sentenceParser.ml[897,33191+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Tpat_alias "_2/1981"
                                        pattern (lib/sentenceParser.ml[897,33191+12]..lib/sentenceParser.ml[897,33191+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[897,33191+24]..lib/sentenceParser.ml[897,33191+36])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[897,33191+17]..lib/sentenceParser.ml[897,33191+21])
                                            Ttyp_constr "unit/6!"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[897,33191+24]..lib/sentenceParser.ml[897,33191+33])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[897,33191+34]..lib/sentenceParser.ml[897,33191+36])
                                              Texp_ident "_2/1972"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[898,33231+8]..lib/sentenceParser.ml[924,34189+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[898,33231+12]..lib/sentenceParser.ml[898,33231+18])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (lib/sentenceParser.mly[39,33284+8]..lib/sentenceParser.mly[39,33284+32])
                                              Ttyp_constr "Gbnf_parser!.Positions.located"
                                              [
                                                core_type (lib/sentenceParser.mly[39,33284+8]..lib/sentenceParser.mly[39,33284+14])
                                                  Ttyp_constr "string/15!"
                                                  []
                                              ]
                                          Tpat_alias "symbol/1982"
                                          pattern (lib/sentenceParser.ml[898,33231+12]..lib/sentenceParser.ml[898,33231+18])
                                            Tpat_any
                                        expression (lib/sentenceParser.ml[902,33348+12]..lib/sentenceParser.ml[902,33348+28])
                                          extra
                                            Texp_constraint
                                            core_type (lib/sentenceParser.mly[39,33284+8]..lib/sentenceParser.mly[39,33284+32])
                                              Ttyp_constr "Gbnf_parser!.Positions.located"
                                              [
                                                core_type (lib/sentenceParser.mly[39,33284+8]..lib/sentenceParser.mly[39,33284+14])
                                                  Ttyp_constr "string/15!"
                                                  []
                                              ]
                                          Texp_apply
                                          expression (lib/sentenceParser.ml[902,33348+12]..lib/sentenceParser.ml[902,33348+21])
                                            Texp_ident "Stdlib!.Obj.magic"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/sentenceParser.ml[902,33348+22]..lib/sentenceParser.ml[902,33348+28])
                                                Texp_ident "symbol/1976"
                                          ]
                                    ]
                                    expression (lib/sentenceParser.ml[903,33380+8]..lib/sentenceParser.ml[924,34189+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[903,33380+12]..lib/sentenceParser.ml[903,33380+23])
                                            Tpat_var "_endpos__0_/1983"
                                          expression (lib/sentenceParser.ml[903,33380+26]..lib/sentenceParser.ml[903,33380+66])
                                            Texp_field
                                            expression (lib/sentenceParser.ml[903,33380+26]..lib/sentenceParser.ml[903,33380+39])
                                              Texp_ident "_menhir_stack/1979"
                                            "MenhirLib.EngineTypes.endp"
                                      ]
                                      expression (lib/sentenceParser.ml[904,33450+8]..lib/sentenceParser.ml[924,34189+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[904,33450+12]..lib/sentenceParser.ml[904,33450+21])
                                              Tpat_var "_startpos/1984"
                                            expression (lib/sentenceParser.ml[904,33450+24]..lib/sentenceParser.ml[904,33450+41])
                                              Texp_ident "_startpos_symbol_/1977"
                                        ]
                                        expression (lib/sentenceParser.ml[905,33495+8]..lib/sentenceParser.ml[924,34189+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[905,33495+12]..lib/sentenceParser.ml[905,33495+19])
                                                Tpat_var "_endpos/1985"
                                              expression (lib/sentenceParser.ml[905,33495+22]..lib/sentenceParser.ml[905,33495+39])
                                                Texp_ident "_endpos_branches_/1971"
                                          ]
                                          expression (lib/sentenceParser.ml[906,33538+8]..lib/sentenceParser.ml[924,34189+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[906,33538+12]..lib/sentenceParser.ml[906,33538+14])
                                                  extra
                                                    Tpat_extra_constraint
                                                    core_type (lib/sentenceParser.ml[906,33538+18]..lib/sentenceParser.ml[906,33538+43])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                                      []
                                                  Tpat_alias "_v/1986"
                                                  pattern (lib/sentenceParser.ml[906,33538+12]..lib/sentenceParser.ml[906,33538+14])
                                                    Tpat_any
                                                expression (lib/sentenceParser.mly[93,33616+4]..lib/sentenceParser.mly[100,33874+5])
                                                  extra
                                                    Texp_constraint
                                                    core_type (lib/sentenceParser.ml[906,33538+18]..lib/sentenceParser.ml[906,33538+43])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                                      []
                                                  Texp_sequence
                                                  expression (lib/sentenceParser.mly[94,33622+6]..lib/sentenceParser.mly[94,33622+71])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.mly[94,33622+7]..lib/sentenceParser.mly[94,33622+20])
                                                      Texp_ident "Stdlib!.print_endline"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.mly[94,33622+21]..lib/sentenceParser.mly[94,33622+70])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[94,33622+22]..lib/sentenceParser.mly[94,33622+36])
                                                            Texp_ident "Batteries!.dump"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[94,33622+37]..lib/sentenceParser.mly[94,33622+69])
                                                                Texp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[94,33622+38]..lib/sentenceParser.mly[94,33622+50])
                                                                    Texp_constant Const_string("DEBUG:rule",(lib/sentenceParser.mly[94,33622+39]..lib/sentenceParser.mly[94,33622+49]),None)
                                                                  expression (lib/sentenceParser.mly[94,33622+52]..lib/sentenceParser.mly[94,33622+58])
                                                                    Texp_ident "symbol/1982"
                                                                  expression (lib/sentenceParser.mly[94,33622+60]..lib/sentenceParser.mly[94,33622+68])
                                                                    Texp_ident "branches/1980"
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[95,33695+6]..lib/sentenceParser.mly[99,33866+7])
                                                    Texp_record
                                                      fields =
                                                        [
                                                          "pr_nt"
                                                            expression (lib/sentenceParser.mly[96,33703+25]..lib/sentenceParser.mly[96,33703+47])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[96,33703+25]..lib/sentenceParser.mly[96,33703+40])
                                                                Texp_ident "Gbnf_parser!.Positions.value"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[96,33703+41]..lib/sentenceParser.mly[96,33703+47])
                                                                    Texp_ident "symbol/1982"
                                                              ]
                                                          "pr_positions"
                                                            expression (lib/sentenceParser.mly[97,33752+25]..lib/sentenceParser.mly[97,33752+54])
                                                              Texp_construct "::"
                                                              [
                                                                expression (lib/sentenceParser.mly[97,33752+27]..lib/sentenceParser.mly[97,33752+52])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[97,33752+27]..lib/sentenceParser.mly[97,33752+45])
                                                                    Texp_ident "Gbnf_parser!.Positions.position"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[97,33752+46]..lib/sentenceParser.mly[97,33752+52])
                                                                        Texp_ident "symbol/1982"
                                                                  ]
                                                                expression (lib/sentenceParser.mly[97,33752+53]..lib/sentenceParser.mly[97,33752+54]) ghost
                                                                  Texp_construct "[]"
                                                                  []
                                                              ]
                                                          "pr_branches"
                                                            expression (lib/sentenceParser.mly[98,33808+26]..lib/sentenceParser.mly[98,33808+28])
                                                              Texp_construct "[]"
                                                              []
                                                        ]
                                                      representation =
                                                        Record_regular
                                                      extended_expression =
                                                        None
                                            ]
                                            expression (lib/sentenceParser.ml[918,33922+8]..lib/sentenceParser.ml[924,34189+9])
                                              Texp_record
                                                fields =
                                                  [
                                                    "MenhirLib.EngineTypes.state"
                                                      expression (lib/sentenceParser.ml[919,33932+40]..lib/sentenceParser.ml[919,33932+49])
                                                        Texp_ident "_menhir_s/1975"
                                                    "MenhirLib.EngineTypes.semv"
                                                      expression (lib/sentenceParser.ml[920,33983+39]..lib/sentenceParser.ml[920,33983+50])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.ml[920,33983+39]..lib/sentenceParser.ml[920,33983+47])
                                                          Texp_ident "Stdlib!.Obj.repr"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.ml[920,33983+48]..lib/sentenceParser.ml[920,33983+50])
                                                              Texp_ident "_v/1986"
                                                        ]
                                                    "MenhirLib.EngineTypes.startp"
                                                      expression (lib/sentenceParser.ml[921,34035+41]..lib/sentenceParser.ml[921,34035+50])
                                                        Texp_ident "_startpos/1984"
                                                    "MenhirLib.EngineTypes.endp"
                                                      expression (lib/sentenceParser.ml[922,34087+39]..lib/sentenceParser.ml[922,34087+46])
                                                        Texp_ident "_endpos/1985"
                                                    "MenhirLib.EngineTypes.next"
                                                      expression (lib/sentenceParser.ml[923,34135+39]..lib/sentenceParser.ml[923,34135+52])
                                                        Texp_ident "_menhir_stack/1979"
                                                  ]
                                                representation =
                                                  Record_regular
                                                extended_expression =
                                                  None
                      ]
                    expression (lib/sentenceParser.ml[925,34201+6]..lib/sentenceParser.ml[966,35949+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[925,34201+11]..lib/sentenceParser.ml[925,34201+22])
                            Tpat_var "_menhir_env/1987"
                          expression (lib/sentenceParser.ml[926,34227+8]..lib/sentenceParser.ml[966,35949+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[926,34227+12]..lib/sentenceParser.ml[926,34227+25])
                                  Tpat_var "_menhir_stack/1988"
                                expression (lib/sentenceParser.ml[926,34227+28]..lib/sentenceParser.ml[926,34227+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[926,34227+28]..lib/sentenceParser.ml[926,34227+39])
                                    Texp_ident "_menhir_env/1987"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[927,34298+8]..lib/sentenceParser.ml[966,35949+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[927,34298+12]..lib/sentenceParser.ml[945,35096+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[928,34312+40]..lib/sentenceParser.ml[928,34312+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[929,34355+39]..lib/sentenceParser.ml[929,34355+41])
                                          Tpat_var "_3/1989"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[930,34398+41]..lib/sentenceParser.ml[930,34398+54])
                                          Tpat_var "_startpos__3_/1990"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[931,34454+39]..lib/sentenceParser.ml[931,34454+50])
                                          Tpat_var "_endpos__3_/1991"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[932,34506+39]..lib/sentenceParser.ml[944,35083+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[933,34547+42]..lib/sentenceParser.ml[933,34547+43])
                                                Tpat_any
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[934,34592+41]..lib/sentenceParser.ml[934,34592+43])
                                                Tpat_var "_2/1992"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[935,34637+43]..lib/sentenceParser.ml[935,34637+56])
                                                Tpat_var "_startpos__2_/1993"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[936,34695+41]..lib/sentenceParser.ml[936,34695+52])
                                                Tpat_var "_endpos__2_/1994"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[937,34749+41]..lib/sentenceParser.ml[943,35068+13])
                                                Tpat_record
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    pattern (lib/sentenceParser.ml[938,34792+44]..lib/sentenceParser.ml[938,34792+53])
                                                      Tpat_var "_menhir_s/1995"
                                                  "MenhirLib.EngineTypes.semv"
                                                    pattern (lib/sentenceParser.ml[939,34847+43]..lib/sentenceParser.ml[939,34847+45])
                                                      Tpat_var "_1/1996"
                                                  "MenhirLib.EngineTypes.startp"
                                                    pattern (lib/sentenceParser.ml[940,34894+45]..lib/sentenceParser.ml[940,34894+58])
                                                      Tpat_var "_startpos__1_/1997"
                                                  "MenhirLib.EngineTypes.endp"
                                                    pattern (lib/sentenceParser.ml[941,34954+43]..lib/sentenceParser.ml[941,34954+54])
                                                      Tpat_var "_endpos__1_/1998"
                                                  "MenhirLib.EngineTypes.next"
                                                    pattern (lib/sentenceParser.ml[942,35010+43]..lib/sentenceParser.ml[942,35010+56])
                                                      Tpat_var "_menhir_stack/1999"
                                                ]
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[945,35096+12]..lib/sentenceParser.ml[945,35096+25])
                                    Texp_ident "_menhir_stack/1988"
                              ]
                              expression (lib/sentenceParser.ml[946,35125+8]..lib/sentenceParser.ml[966,35949+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[946,35125+12]..lib/sentenceParser.ml[946,35125+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[946,35125+18]..lib/sentenceParser.ml[946,35125+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Tpat_alias "_3/2000"
                                      pattern (lib/sentenceParser.ml[946,35125+12]..lib/sentenceParser.ml[946,35125+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[946,35125+47]..lib/sentenceParser.ml[946,35125+59])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[946,35125+18]..lib/sentenceParser.ml[946,35125+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[946,35125+47]..lib/sentenceParser.ml[946,35125+56])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[946,35125+57]..lib/sentenceParser.ml[946,35125+59])
                                            Texp_ident "_3/1989"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[947,35188+8]..lib/sentenceParser.ml[966,35949+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[947,35188+12]..lib/sentenceParser.ml[947,35188+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[947,35188+18]..lib/sentenceParser.ml[947,35188+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[947,35188+18]..lib/sentenceParser.ml[947,35188+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Tpat_alias "_2/2001"
                                        pattern (lib/sentenceParser.ml[947,35188+12]..lib/sentenceParser.ml[947,35188+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[947,35188+31]..lib/sentenceParser.ml[947,35188+43])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[947,35188+18]..lib/sentenceParser.ml[947,35188+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[947,35188+18]..lib/sentenceParser.ml[947,35188+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[947,35188+31]..lib/sentenceParser.ml[947,35188+40])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[947,35188+41]..lib/sentenceParser.ml[947,35188+43])
                                              Texp_ident "_2/1992"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[948,35235+8]..lib/sentenceParser.ml[966,35949+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[948,35235+12]..lib/sentenceParser.ml[948,35235+14])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (lib/sentenceParser.ml[948,35235+18]..lib/sentenceParser.ml[948,35235+33])
                                              Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                              []
                                          Tpat_alias "_1/2002"
                                          pattern (lib/sentenceParser.ml[948,35235+12]..lib/sentenceParser.ml[948,35235+14])
                                            Tpat_any
                                        expression (lib/sentenceParser.ml[948,35235+37]..lib/sentenceParser.ml[948,35235+49])
                                          extra
                                            Texp_constraint
                                            core_type (lib/sentenceParser.ml[948,35235+18]..lib/sentenceParser.ml[948,35235+33])
                                              Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                              []
                                          Texp_apply
                                          expression (lib/sentenceParser.ml[948,35235+37]..lib/sentenceParser.ml[948,35235+46])
                                            Texp_ident "Stdlib!.Obj.magic"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/sentenceParser.ml[948,35235+47]..lib/sentenceParser.ml[948,35235+49])
                                                Texp_ident "_1/1996"
                                          ]
                                    ]
                                    expression (lib/sentenceParser.ml[949,35288+8]..lib/sentenceParser.ml[966,35949+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[949,35288+12]..lib/sentenceParser.ml[949,35288+23])
                                            Tpat_var "_endpos__0_/2003"
                                          expression (lib/sentenceParser.ml[949,35288+26]..lib/sentenceParser.ml[949,35288+66])
                                            Texp_field
                                            expression (lib/sentenceParser.ml[949,35288+26]..lib/sentenceParser.ml[949,35288+39])
                                              Texp_ident "_menhir_stack/1999"
                                            "MenhirLib.EngineTypes.endp"
                                      ]
                                      expression (lib/sentenceParser.ml[950,35358+8]..lib/sentenceParser.ml[966,35949+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[950,35358+12]..lib/sentenceParser.ml[950,35358+21])
                                              Tpat_var "_startpos/2004"
                                            expression (lib/sentenceParser.ml[950,35358+24]..lib/sentenceParser.ml[950,35358+37])
                                              Texp_ident "_startpos__1_/1997"
                                        ]
                                        expression (lib/sentenceParser.ml[951,35399+8]..lib/sentenceParser.ml[966,35949+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[951,35399+12]..lib/sentenceParser.ml[951,35399+19])
                                                Tpat_var "_endpos/2005"
                                              expression (lib/sentenceParser.ml[951,35399+22]..lib/sentenceParser.ml[951,35399+33])
                                                Texp_ident "_endpos__3_/1991"
                                          ]
                                          expression (lib/sentenceParser.ml[952,35436+8]..lib/sentenceParser.ml[966,35949+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[952,35436+12]..lib/sentenceParser.ml[952,35436+14])
                                                  extra
                                                    Tpat_extra_constraint
                                                    core_type (lib/sentenceParser.ml[952,35436+18]..lib/sentenceParser.ml[952,35436+33])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                      []
                                                  Tpat_alias "_v/2006"
                                                  pattern (lib/sentenceParser.ml[952,35436+12]..lib/sentenceParser.ml[952,35436+14])
                                                    Tpat_any
                                                expression (lib/sentenceParser.mly[64,35504+23]..lib/sentenceParser.mly[67,35629+10])
                                                  extra
                                                    Texp_constraint
                                                    core_type (lib/sentenceParser.ml[952,35436+18]..lib/sentenceParser.ml[952,35436+33])
                                                      Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                      []
                                                  Texp_sequence
                                                  expression (lib/sentenceParser.mly[65,35529+11]..lib/sentenceParser.mly[65,35529+65])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.mly[65,35529+12]..lib/sentenceParser.mly[65,35529+25])
                                                      Texp_ident "Stdlib!.print_endline"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.mly[65,35529+26]..lib/sentenceParser.mly[65,35529+64])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.mly[65,35529+27]..lib/sentenceParser.mly[65,35529+41])
                                                            Texp_ident "Batteries!.dump"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.mly[65,35529+42]..lib/sentenceParser.mly[65,35529+63])
                                                                Texp_tuple
                                                                [
                                                                  expression (lib/sentenceParser.mly[65,35529+43]..lib/sentenceParser.mly[65,35529+59])
                                                                    Texp_constant Const_string("DEBUG:OLDRULE1",(lib/sentenceParser.mly[65,35529+44]..lib/sentenceParser.mly[65,35529+58]),None)
                                                                  expression (lib/sentenceParser.mly[65,35529+60]..lib/sentenceParser.mly[65,35529+62])
                                                                    Texp_ident "_3/2000"
                                                                ]
                                                          ]
                                                    ]
                                                  expression (lib/sentenceParser.mly[66,35596+25]..lib/sentenceParser.mly[66,35596+32])
                                                    Texp_construct "Rule"
                                                    [
                                                      expression (lib/sentenceParser.mly[66,35596+30]..lib/sentenceParser.mly[66,35596+32])
                                                        Texp_ident "_3/2000"
                                                    ]
                                            ]
                                            expression (lib/sentenceParser.ml[960,35682+8]..lib/sentenceParser.ml[966,35949+9])
                                              Texp_record
                                                fields =
                                                  [
                                                    "MenhirLib.EngineTypes.state"
                                                      expression (lib/sentenceParser.ml[961,35692+40]..lib/sentenceParser.ml[961,35692+49])
                                                        Texp_ident "_menhir_s/1995"
                                                    "MenhirLib.EngineTypes.semv"
                                                      expression (lib/sentenceParser.ml[962,35743+39]..lib/sentenceParser.ml[962,35743+50])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.ml[962,35743+39]..lib/sentenceParser.ml[962,35743+47])
                                                          Texp_ident "Stdlib!.Obj.repr"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.ml[962,35743+48]..lib/sentenceParser.ml[962,35743+50])
                                                              Texp_ident "_v/2006"
                                                        ]
                                                    "MenhirLib.EngineTypes.startp"
                                                      expression (lib/sentenceParser.ml[963,35795+41]..lib/sentenceParser.ml[963,35795+50])
                                                        Texp_ident "_startpos/2004"
                                                    "MenhirLib.EngineTypes.endp"
                                                      expression (lib/sentenceParser.ml[964,35847+39]..lib/sentenceParser.ml[964,35847+46])
                                                        Texp_ident "_endpos/2005"
                                                    "MenhirLib.EngineTypes.next"
                                                      expression (lib/sentenceParser.ml[965,35895+39]..lib/sentenceParser.ml[965,35895+52])
                                                        Texp_ident "_menhir_stack/1999"
                                                  ]
                                                representation =
                                                  Record_regular
                                                extended_expression =
                                                  None
                      ]
                    expression (lib/sentenceParser.ml[967,35961+6]..lib/sentenceParser.ml[1001,37384+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[967,35961+11]..lib/sentenceParser.ml[967,35961+22])
                            Tpat_var "_menhir_env/2007"
                          expression (lib/sentenceParser.ml[968,35987+8]..lib/sentenceParser.ml[1001,37384+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[968,35987+12]..lib/sentenceParser.ml[968,35987+25])
                                  Tpat_var "_menhir_stack/2008"
                                expression (lib/sentenceParser.ml[968,35987+28]..lib/sentenceParser.ml[968,35987+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[968,35987+28]..lib/sentenceParser.ml[968,35987+39])
                                    Texp_ident "_menhir_env/2007"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[969,36058+8]..lib/sentenceParser.ml[1001,37384+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[969,36058+12]..lib/sentenceParser.ml[981,36586+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[970,36072+40]..lib/sentenceParser.ml[970,36072+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[971,36115+39]..lib/sentenceParser.ml[971,36115+41])
                                          Tpat_var "_2/2009"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[972,36158+41]..lib/sentenceParser.ml[972,36158+54])
                                          Tpat_var "_startpos__2_/2010"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[973,36214+39]..lib/sentenceParser.ml[973,36214+50])
                                          Tpat_var "_endpos__2_/2011"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[974,36266+39]..lib/sentenceParser.ml[980,36573+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[975,36307+42]..lib/sentenceParser.ml[975,36307+51])
                                                Tpat_var "_menhir_s/2012"
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[976,36360+41]..lib/sentenceParser.ml[976,36360+43])
                                                Tpat_var "_1/2013"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[977,36405+43]..lib/sentenceParser.ml[977,36405+56])
                                                Tpat_var "_startpos__1_/2014"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[978,36463+41]..lib/sentenceParser.ml[978,36463+52])
                                                Tpat_var "_endpos__1_/2015"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[979,36517+41]..lib/sentenceParser.ml[979,36517+54])
                                                Tpat_var "_menhir_stack/2016"
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[981,36586+12]..lib/sentenceParser.ml[981,36586+25])
                                    Texp_ident "_menhir_stack/2008"
                              ]
                              expression (lib/sentenceParser.ml[982,36615+8]..lib/sentenceParser.ml[1001,37384+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[982,36615+12]..lib/sentenceParser.ml[982,36615+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[982,36615+18]..lib/sentenceParser.ml[982,36615+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Tpat_alias "_2/2017"
                                      pattern (lib/sentenceParser.ml[982,36615+12]..lib/sentenceParser.ml[982,36615+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[982,36615+47]..lib/sentenceParser.ml[982,36615+59])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[982,36615+18]..lib/sentenceParser.ml[982,36615+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[982,36615+47]..lib/sentenceParser.ml[982,36615+56])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[982,36615+57]..lib/sentenceParser.ml[982,36615+59])
                                            Texp_ident "_2/2009"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[983,36678+8]..lib/sentenceParser.ml[1001,37384+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[983,36678+12]..lib/sentenceParser.ml[983,36678+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[983,36678+18]..lib/sentenceParser.ml[983,36678+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[983,36678+18]..lib/sentenceParser.ml[983,36678+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Tpat_alias "_1/2018"
                                        pattern (lib/sentenceParser.ml[983,36678+12]..lib/sentenceParser.ml[983,36678+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[983,36678+31]..lib/sentenceParser.ml[983,36678+43])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[983,36678+18]..lib/sentenceParser.ml[983,36678+27])
                                            Ttyp_constr "list/9!"
                                            [
                                              core_type (lib/sentenceParser.ml[983,36678+18]..lib/sentenceParser.ml[983,36678+22])
                                                Ttyp_constr "unit/6!"
                                                []
                                            ]
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[983,36678+31]..lib/sentenceParser.ml[983,36678+40])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[983,36678+41]..lib/sentenceParser.ml[983,36678+43])
                                              Texp_ident "_1/2013"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[984,36725+8]..lib/sentenceParser.ml[1001,37384+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[984,36725+12]..lib/sentenceParser.ml[984,36725+23])
                                          Tpat_var "_endpos__0_/2019"
                                        expression (lib/sentenceParser.ml[984,36725+26]..lib/sentenceParser.ml[984,36725+66])
                                          Texp_field
                                          expression (lib/sentenceParser.ml[984,36725+26]..lib/sentenceParser.ml[984,36725+39])
                                            Texp_ident "_menhir_stack/2016"
                                          "MenhirLib.EngineTypes.endp"
                                    ]
                                    expression (lib/sentenceParser.ml[985,36795+8]..lib/sentenceParser.ml[1001,37384+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[985,36795+12]..lib/sentenceParser.ml[985,36795+21])
                                            Tpat_var "_startpos/2020"
                                          expression (lib/sentenceParser.ml[985,36795+24]..lib/sentenceParser.ml[985,36795+37])
                                            Texp_ident "_startpos__1_/2014"
                                      ]
                                      expression (lib/sentenceParser.ml[986,36836+8]..lib/sentenceParser.ml[1001,37384+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[986,36836+12]..lib/sentenceParser.ml[986,36836+19])
                                              Tpat_var "_endpos/2021"
                                            expression (lib/sentenceParser.ml[986,36836+22]..lib/sentenceParser.ml[986,36836+33])
                                              Texp_ident "_endpos__2_/2011"
                                        ]
                                        expression (lib/sentenceParser.ml[987,36873+8]..lib/sentenceParser.ml[1001,37384+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[987,36873+12]..lib/sentenceParser.ml[987,36873+14])
                                                extra
                                                  Tpat_extra_constraint
                                                  core_type (lib/sentenceParser.ml[987,36873+18]..lib/sentenceParser.ml[987,36873+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Tpat_alias "_v/2022"
                                                pattern (lib/sentenceParser.ml[987,36873+12]..lib/sentenceParser.ml[987,36873+14])
                                                  Tpat_any
                                              expression (lib/sentenceParser.mly[69,36941+25]..lib/sentenceParser.mly[72,37073+1])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[987,36873+18]..lib/sentenceParser.ml[987,36873+33])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[70,36968+21]..lib/sentenceParser.mly[70,36968+74])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[70,36968+22]..lib/sentenceParser.mly[70,36968+35])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[70,36968+36]..lib/sentenceParser.mly[70,36968+73])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[70,36968+37]..lib/sentenceParser.mly[70,36968+51])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[70,36968+52]..lib/sentenceParser.mly[70,36968+72])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[70,36968+53]..lib/sentenceParser.mly[70,36968+68])
                                                                  Texp_constant Const_string("DEBUG:OLDRULE",(lib/sentenceParser.mly[70,36968+54]..lib/sentenceParser.mly[70,36968+67]),None)
                                                                expression (lib/sentenceParser.mly[70,36968+69]..lib/sentenceParser.mly[70,36968+71])
                                                                  Texp_ident "_1/2018"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[71,37044+21]..lib/sentenceParser.mly[71,37044+28])
                                                  Texp_construct "Rule"
                                                  [
                                                    expression (lib/sentenceParser.mly[71,37044+26]..lib/sentenceParser.mly[71,37044+28])
                                                      Texp_ident "_2/2017"
                                                  ]
                                          ]
                                          expression (lib/sentenceParser.ml[995,37117+8]..lib/sentenceParser.ml[1001,37384+9])
                                            Texp_record
                                              fields =
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    expression (lib/sentenceParser.ml[996,37127+40]..lib/sentenceParser.ml[996,37127+49])
                                                      Texp_ident "_menhir_s/2012"
                                                  "MenhirLib.EngineTypes.semv"
                                                    expression (lib/sentenceParser.ml[997,37178+39]..lib/sentenceParser.ml[997,37178+50])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.ml[997,37178+39]..lib/sentenceParser.ml[997,37178+47])
                                                        Texp_ident "Stdlib!.Obj.repr"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.ml[997,37178+48]..lib/sentenceParser.ml[997,37178+50])
                                                            Texp_ident "_v/2022"
                                                      ]
                                                  "MenhirLib.EngineTypes.startp"
                                                    expression (lib/sentenceParser.ml[998,37230+41]..lib/sentenceParser.ml[998,37230+50])
                                                      Texp_ident "_startpos/2020"
                                                  "MenhirLib.EngineTypes.endp"
                                                    expression (lib/sentenceParser.ml[999,37282+39]..lib/sentenceParser.ml[999,37282+46])
                                                      Texp_ident "_endpos/2021"
                                                  "MenhirLib.EngineTypes.next"
                                                    expression (lib/sentenceParser.ml[1000,37330+39]..lib/sentenceParser.ml[1000,37330+52])
                                                      Texp_ident "_menhir_stack/2016"
                                                ]
                                              representation =
                                                Record_regular
                                              extended_expression =
                                                None
                      ]
                    expression (lib/sentenceParser.ml[1002,37396+6]..lib/sentenceParser.ml[1029,38460+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1002,37396+11]..lib/sentenceParser.ml[1002,37396+22])
                            Tpat_var "_menhir_env/2023"
                          expression (lib/sentenceParser.ml[1003,37422+8]..lib/sentenceParser.ml[1029,38460+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1003,37422+12]..lib/sentenceParser.ml[1003,37422+25])
                                  Tpat_var "_menhir_stack/2024"
                                expression (lib/sentenceParser.ml[1003,37422+28]..lib/sentenceParser.ml[1003,37422+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1003,37422+28]..lib/sentenceParser.ml[1003,37422+39])
                                    Texp_ident "_menhir_env/2023"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1004,37493+8]..lib/sentenceParser.ml[1029,38460+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1004,37493+12]..lib/sentenceParser.ml[1010,37763+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1005,37507+40]..lib/sentenceParser.ml[1005,37507+49])
                                          Tpat_var "_menhir_s/2025"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1006,37558+39]..lib/sentenceParser.ml[1006,37558+41])
                                          Tpat_var "_1/2026"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1007,37601+41]..lib/sentenceParser.ml[1007,37601+54])
                                          Tpat_var "_startpos__1_/2027"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1008,37657+39]..lib/sentenceParser.ml[1008,37657+50])
                                          Tpat_var "_endpos__1_/2028"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1009,37709+39]..lib/sentenceParser.ml[1009,37709+52])
                                          Tpat_var "_menhir_stack/2029"
                                    ]
                                  expression (lib/sentenceParser.ml[1010,37763+12]..lib/sentenceParser.ml[1010,37763+25])
                                    Texp_ident "_menhir_stack/2024"
                              ]
                              expression (lib/sentenceParser.ml[1011,37792+8]..lib/sentenceParser.ml[1029,38460+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1011,37792+12]..lib/sentenceParser.ml[1011,37792+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[1011,37792+18]..lib/sentenceParser.ml[1011,37792+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Tpat_alias "_1/2030"
                                      pattern (lib/sentenceParser.ml[1011,37792+12]..lib/sentenceParser.ml[1011,37792+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1011,37792+47]..lib/sentenceParser.ml[1011,37792+59])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[1011,37792+18]..lib/sentenceParser.ml[1011,37792+43])
                                          Ttyp_constr "Gbnf_parser!.Syntax.parameterized_rule"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1011,37792+47]..lib/sentenceParser.ml[1011,37792+56])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1011,37792+57]..lib/sentenceParser.ml[1011,37792+59])
                                            Texp_ident "_1/2026"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1012,37855+8]..lib/sentenceParser.ml[1029,38460+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1012,37855+12]..lib/sentenceParser.ml[1012,37855+23])
                                        Tpat_var "_endpos__0_/2031"
                                      expression (lib/sentenceParser.ml[1012,37855+26]..lib/sentenceParser.ml[1012,37855+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[1012,37855+26]..lib/sentenceParser.ml[1012,37855+39])
                                          Texp_ident "_menhir_stack/2029"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[1013,37925+8]..lib/sentenceParser.ml[1029,38460+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1013,37925+12]..lib/sentenceParser.ml[1013,37925+21])
                                          Tpat_var "_startpos/2032"
                                        expression (lib/sentenceParser.ml[1013,37925+24]..lib/sentenceParser.ml[1013,37925+37])
                                          Texp_ident "_startpos__1_/2027"
                                    ]
                                    expression (lib/sentenceParser.ml[1014,37966+8]..lib/sentenceParser.ml[1029,38460+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1014,37966+12]..lib/sentenceParser.ml[1014,37966+19])
                                            Tpat_var "_endpos/2033"
                                          expression (lib/sentenceParser.ml[1014,37966+22]..lib/sentenceParser.ml[1014,37966+33])
                                            Texp_ident "_endpos__1_/2028"
                                      ]
                                      expression (lib/sentenceParser.ml[1015,38003+8]..lib/sentenceParser.ml[1029,38460+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1015,38003+12]..lib/sentenceParser.ml[1015,38003+14])
                                              extra
                                                Tpat_extra_constraint
                                                core_type (lib/sentenceParser.ml[1015,38003+18]..lib/sentenceParser.ml[1015,38003+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Tpat_alias "_v/2034"
                                              pattern (lib/sentenceParser.ml[1015,38003+12]..lib/sentenceParser.ml[1015,38003+14])
                                                Tpat_any
                                            expression (lib/sentenceParser.mly[73,38071+12]..lib/sentenceParser.mly[76,38148+1])
                                              extra
                                                Texp_constraint
                                                core_type (lib/sentenceParser.ml[1015,38003+18]..lib/sentenceParser.ml[1015,38003+33])
                                                  Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                  []
                                              Texp_sequence
                                              expression (lib/sentenceParser.mly[74,38085+0]..lib/sentenceParser.mly[74,38085+53])
                                                Texp_apply
                                                expression (lib/sentenceParser.mly[74,38085+1]..lib/sentenceParser.mly[74,38085+14])
                                                  Texp_ident "Stdlib!.print_endline"
                                                [
                                                  <arg>
                                                    Nolabel
                                                    expression (lib/sentenceParser.mly[74,38085+15]..lib/sentenceParser.mly[74,38085+52])
                                                      Texp_apply
                                                      expression (lib/sentenceParser.mly[74,38085+16]..lib/sentenceParser.mly[74,38085+30])
                                                        Texp_ident "Batteries!.dump"
                                                      [
                                                        <arg>
                                                          Nolabel
                                                          expression (lib/sentenceParser.mly[74,38085+31]..lib/sentenceParser.mly[74,38085+51])
                                                            Texp_tuple
                                                            [
                                                              expression (lib/sentenceParser.mly[74,38085+32]..lib/sentenceParser.mly[74,38085+47])
                                                                Texp_constant Const_string("DEBUG:OLDRULE",(lib/sentenceParser.mly[74,38085+33]..lib/sentenceParser.mly[74,38085+46]),None)
                                                              expression (lib/sentenceParser.mly[74,38085+48]..lib/sentenceParser.mly[74,38085+50])
                                                                Texp_ident "_1/2030"
                                                            ]
                                                      ]
                                                ]
                                              expression (lib/sentenceParser.mly[75,38140+0]..lib/sentenceParser.mly[75,38140+7])
                                                Texp_construct "Rule"
                                                [
                                                  expression (lib/sentenceParser.mly[75,38140+5]..lib/sentenceParser.mly[75,38140+7])
                                                    Texp_ident "_1/2030"
                                                ]
                                        ]
                                        expression (lib/sentenceParser.ml[1023,38193+8]..lib/sentenceParser.ml[1029,38460+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[1024,38203+40]..lib/sentenceParser.ml[1024,38203+49])
                                                    Texp_ident "_menhir_s/2025"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[1025,38254+39]..lib/sentenceParser.ml[1025,38254+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[1025,38254+39]..lib/sentenceParser.ml[1025,38254+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[1025,38254+48]..lib/sentenceParser.ml[1025,38254+50])
                                                          Texp_ident "_v/2034"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[1026,38306+41]..lib/sentenceParser.ml[1026,38306+50])
                                                    Texp_ident "_startpos/2032"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[1027,38358+39]..lib/sentenceParser.ml[1027,38358+46])
                                                    Texp_ident "_endpos/2033"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[1028,38406+39]..lib/sentenceParser.ml[1028,38406+52])
                                                    Texp_ident "_menhir_stack/2029"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[1030,38472+6]..lib/sentenceParser.ml[1089,40915+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1030,38472+11]..lib/sentenceParser.ml[1030,38472+22])
                            Tpat_var "_menhir_env/2035"
                          expression (lib/sentenceParser.ml[1031,38498+8]..lib/sentenceParser.ml[1089,40915+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1031,38498+12]..lib/sentenceParser.ml[1031,38498+25])
                                  Tpat_var "_menhir_stack/2036"
                                expression (lib/sentenceParser.ml[1031,38498+28]..lib/sentenceParser.ml[1031,38498+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1031,38498+28]..lib/sentenceParser.ml[1031,38498+39])
                                    Texp_ident "_menhir_env/2035"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1032,38569+8]..lib/sentenceParser.ml[1089,40915+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1032,38569+12]..lib/sentenceParser.ml[1056,39649+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1033,38583+40]..lib/sentenceParser.ml[1033,38583+41])
                                          Tpat_any
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1034,38626+39]..lib/sentenceParser.ml[1034,38626+41])
                                          Tpat_var "_4/2037"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1035,38669+41]..lib/sentenceParser.ml[1035,38669+54])
                                          Tpat_var "_startpos__4_/2038"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1036,38725+39]..lib/sentenceParser.ml[1036,38725+50])
                                          Tpat_var "_endpos__4_/2039"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1037,38777+39]..lib/sentenceParser.ml[1055,39636+11])
                                          Tpat_record
                                          [
                                            "MenhirLib.EngineTypes.state"
                                              pattern (lib/sentenceParser.ml[1038,38818+42]..lib/sentenceParser.ml[1038,38818+43])
                                                Tpat_any
                                            "MenhirLib.EngineTypes.semv"
                                              pattern (lib/sentenceParser.ml[1039,38863+41]..lib/sentenceParser.ml[1039,38863+43])
                                                Tpat_var "_3/2040"
                                            "MenhirLib.EngineTypes.startp"
                                              pattern (lib/sentenceParser.ml[1040,38908+43]..lib/sentenceParser.ml[1040,38908+56])
                                                Tpat_var "_startpos__3_/2041"
                                            "MenhirLib.EngineTypes.endp"
                                              pattern (lib/sentenceParser.ml[1041,38966+41]..lib/sentenceParser.ml[1041,38966+52])
                                                Tpat_var "_endpos__3_/2042"
                                            "MenhirLib.EngineTypes.next"
                                              pattern (lib/sentenceParser.ml[1042,39020+41]..lib/sentenceParser.ml[1054,39621+13])
                                                Tpat_record
                                                [
                                                  "MenhirLib.EngineTypes.state"
                                                    pattern (lib/sentenceParser.ml[1043,39063+44]..lib/sentenceParser.ml[1043,39063+45])
                                                      Tpat_any
                                                  "MenhirLib.EngineTypes.semv"
                                                    pattern (lib/sentenceParser.ml[1044,39110+43]..lib/sentenceParser.ml[1044,39110+45])
                                                      Tpat_var "_2/2043"
                                                  "MenhirLib.EngineTypes.startp"
                                                    pattern (lib/sentenceParser.ml[1045,39157+45]..lib/sentenceParser.ml[1045,39157+58])
                                                      Tpat_var "_startpos__2_/2044"
                                                  "MenhirLib.EngineTypes.endp"
                                                    pattern (lib/sentenceParser.ml[1046,39217+43]..lib/sentenceParser.ml[1046,39217+54])
                                                      Tpat_var "_endpos__2_/2045"
                                                  "MenhirLib.EngineTypes.next"
                                                    pattern (lib/sentenceParser.ml[1047,39273+43]..lib/sentenceParser.ml[1053,39604+15])
                                                      Tpat_record
                                                      [
                                                        "MenhirLib.EngineTypes.state"
                                                          pattern (lib/sentenceParser.ml[1048,39318+46]..lib/sentenceParser.ml[1048,39318+55])
                                                            Tpat_var "_menhir_s/2046"
                                                        "MenhirLib.EngineTypes.semv"
                                                          pattern (lib/sentenceParser.ml[1049,39375+45]..lib/sentenceParser.ml[1049,39375+47])
                                                            Tpat_var "_1/2047"
                                                        "MenhirLib.EngineTypes.startp"
                                                          pattern (lib/sentenceParser.ml[1050,39424+47]..lib/sentenceParser.ml[1050,39424+60])
                                                            Tpat_var "_startpos__1_/2048"
                                                        "MenhirLib.EngineTypes.endp"
                                                          pattern (lib/sentenceParser.ml[1051,39486+45]..lib/sentenceParser.ml[1051,39486+56])
                                                            Tpat_var "_endpos__1_/2049"
                                                        "MenhirLib.EngineTypes.next"
                                                          pattern (lib/sentenceParser.ml[1052,39544+45]..lib/sentenceParser.ml[1052,39544+58])
                                                            Tpat_var "_menhir_stack/2050"
                                                      ]
                                                ]
                                          ]
                                    ]
                                  expression (lib/sentenceParser.ml[1056,39649+12]..lib/sentenceParser.ml[1056,39649+25])
                                    Texp_ident "_menhir_stack/2036"
                              ]
                              expression (lib/sentenceParser.ml[1057,39678+8]..lib/sentenceParser.ml[1089,40915+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1057,39678+12]..lib/sentenceParser.ml[1057,39678+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[1057,39678+17]..lib/sentenceParser.ml[1057,39678+21])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Tpat_alias "_4/2051"
                                      pattern (lib/sentenceParser.ml[1057,39678+12]..lib/sentenceParser.ml[1057,39678+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1057,39678+24]..lib/sentenceParser.ml[1057,39678+36])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[1057,39678+17]..lib/sentenceParser.ml[1057,39678+21])
                                          Ttyp_constr "unit/6!"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1057,39678+24]..lib/sentenceParser.ml[1057,39678+33])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1057,39678+34]..lib/sentenceParser.ml[1057,39678+36])
                                            Texp_ident "_4/2037"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1058,39718+8]..lib/sentenceParser.ml[1089,40915+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1058,39718+12]..lib/sentenceParser.ml[1058,39718+14])
                                        extra
                                          Tpat_extra_constraint
                                          core_type (lib/sentenceParser.ml[1058,39718+18]..lib/sentenceParser.ml[1058,39718+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Tpat_alias "_3/2052"
                                        pattern (lib/sentenceParser.ml[1058,39718+12]..lib/sentenceParser.ml[1058,39718+14])
                                          Tpat_any
                                      expression (lib/sentenceParser.ml[1058,39718+37]..lib/sentenceParser.ml[1058,39718+49])
                                        extra
                                          Texp_constraint
                                          core_type (lib/sentenceParser.ml[1058,39718+18]..lib/sentenceParser.ml[1058,39718+33])
                                            Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                            []
                                        Texp_apply
                                        expression (lib/sentenceParser.ml[1058,39718+37]..lib/sentenceParser.ml[1058,39718+46])
                                          Texp_ident "Stdlib!.Obj.magic"
                                        [
                                          <arg>
                                            Nolabel
                                            expression (lib/sentenceParser.ml[1058,39718+47]..lib/sentenceParser.ml[1058,39718+49])
                                              Texp_ident "_3/2040"
                                        ]
                                  ]
                                  expression (lib/sentenceParser.ml[1059,39771+8]..lib/sentenceParser.ml[1089,40915+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1059,39771+12]..lib/sentenceParser.ml[1059,39771+14])
                                          extra
                                            Tpat_extra_constraint
                                            core_type (lib/sentenceParser.ml[1059,39771+18]..lib/sentenceParser.ml[1059,39771+27])
                                              Ttyp_constr "list/9!"
                                              [
                                                core_type (lib/sentenceParser.ml[1059,39771+18]..lib/sentenceParser.ml[1059,39771+22])
                                                  Ttyp_constr "unit/6!"
                                                  []
                                              ]
                                          Tpat_alias "_2/2053"
                                          pattern (lib/sentenceParser.ml[1059,39771+12]..lib/sentenceParser.ml[1059,39771+14])
                                            Tpat_any
                                        expression (lib/sentenceParser.ml[1059,39771+31]..lib/sentenceParser.ml[1059,39771+43])
                                          extra
                                            Texp_constraint
                                            core_type (lib/sentenceParser.ml[1059,39771+18]..lib/sentenceParser.ml[1059,39771+27])
                                              Ttyp_constr "list/9!"
                                              [
                                                core_type (lib/sentenceParser.ml[1059,39771+18]..lib/sentenceParser.ml[1059,39771+22])
                                                  Ttyp_constr "unit/6!"
                                                  []
                                              ]
                                          Texp_apply
                                          expression (lib/sentenceParser.ml[1059,39771+31]..lib/sentenceParser.ml[1059,39771+40])
                                            Texp_ident "Stdlib!.Obj.magic"
                                          [
                                            <arg>
                                              Nolabel
                                              expression (lib/sentenceParser.ml[1059,39771+41]..lib/sentenceParser.ml[1059,39771+43])
                                                Texp_ident "_2/2043"
                                          ]
                                    ]
                                    expression (lib/sentenceParser.ml[1060,39818+8]..lib/sentenceParser.ml[1089,40915+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1060,39818+12]..lib/sentenceParser.ml[1060,39818+14])
                                            extra
                                              Tpat_extra_constraint
                                              core_type (lib/sentenceParser.ml[1060,39818+17]..lib/sentenceParser.ml[1060,39818+21])
                                                Ttyp_constr "unit/6!"
                                                []
                                            Tpat_alias "_1/2054"
                                            pattern (lib/sentenceParser.ml[1060,39818+12]..lib/sentenceParser.ml[1060,39818+14])
                                              Tpat_any
                                          expression (lib/sentenceParser.ml[1060,39818+24]..lib/sentenceParser.ml[1060,39818+36])
                                            extra
                                              Texp_constraint
                                              core_type (lib/sentenceParser.ml[1060,39818+17]..lib/sentenceParser.ml[1060,39818+21])
                                                Ttyp_constr "unit/6!"
                                                []
                                            Texp_apply
                                            expression (lib/sentenceParser.ml[1060,39818+24]..lib/sentenceParser.ml[1060,39818+33])
                                              Texp_ident "Stdlib!.Obj.magic"
                                            [
                                              <arg>
                                                Nolabel
                                                expression (lib/sentenceParser.ml[1060,39818+34]..lib/sentenceParser.ml[1060,39818+36])
                                                  Texp_ident "_1/2047"
                                            ]
                                      ]
                                      expression (lib/sentenceParser.ml[1061,39858+8]..lib/sentenceParser.ml[1089,40915+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1061,39858+12]..lib/sentenceParser.ml[1061,39858+23])
                                              Tpat_var "_endpos__0_/2055"
                                            expression (lib/sentenceParser.ml[1061,39858+26]..lib/sentenceParser.ml[1061,39858+66])
                                              Texp_field
                                              expression (lib/sentenceParser.ml[1061,39858+26]..lib/sentenceParser.ml[1061,39858+39])
                                                Texp_ident "_menhir_stack/2050"
                                              "MenhirLib.EngineTypes.endp"
                                        ]
                                        expression (lib/sentenceParser.ml[1062,39928+8]..lib/sentenceParser.ml[1089,40915+9])
                                          Texp_let Nonrec
                                          [
                                            <def>
                                              pattern (lib/sentenceParser.ml[1062,39928+12]..lib/sentenceParser.ml[1062,39928+21])
                                                Tpat_var "_startpos/2056"
                                              expression (lib/sentenceParser.ml[1062,39928+24]..lib/sentenceParser.ml[1062,39928+37])
                                                Texp_ident "_startpos__1_/2048"
                                          ]
                                          expression (lib/sentenceParser.ml[1063,39969+8]..lib/sentenceParser.ml[1089,40915+9])
                                            Texp_let Nonrec
                                            [
                                              <def>
                                                pattern (lib/sentenceParser.ml[1063,39969+12]..lib/sentenceParser.ml[1063,39969+19])
                                                  Tpat_var "_endpos/2057"
                                                expression (lib/sentenceParser.ml[1063,39969+22]..lib/sentenceParser.ml[1063,39969+33])
                                                  Texp_ident "_endpos__4_/2039"
                                            ]
                                            expression (lib/sentenceParser.ml[1064,40006+8]..lib/sentenceParser.ml[1089,40915+9])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[1064,40006+12]..lib/sentenceParser.ml[1064,40006+14])
                                                    Tpat_var "_v/2058"
                                                  expression (lib/sentenceParser.ml[1065,40023+10]..lib/sentenceParser.ml[1081,40605+31])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[1065,40023+14]..lib/sentenceParser.ml[1065,40023+16])
                                                          Tpat_var "_1/2059"
                                                        expression (lib/sentenceParser.ml[1066,40042+12]..lib/sentenceParser.mly[127,40288+89])
                                                          Texp_let Nonrec
                                                          [
                                                            <def>
                                                              pattern (lib/sentenceParser.ml[1066,40042+16]..lib/sentenceParser.ml[1066,40042+18])
                                                                Tpat_var "_1/2060"
                                                              expression (lib/sentenceParser.mly[131,40095+31]..lib/sentenceParser.mly[131,40095+101])
                                                                Texp_sequence
                                                                expression (lib/sentenceParser.mly[131,40095+38]..lib/sentenceParser.mly[131,40095+88])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[131,40095+39]..lib/sentenceParser.mly[131,40095+52])
                                                                    Texp_ident "Stdlib!.print_endline"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[131,40095+53]..lib/sentenceParser.mly[131,40095+87])
                                                                        Texp_apply
                                                                        expression (lib/sentenceParser.mly[131,40095+54]..lib/sentenceParser.mly[131,40095+68])
                                                                          Texp_ident "Batteries!.dump"
                                                                        [
                                                                          <arg>
                                                                            Nolabel
                                                                            expression (lib/sentenceParser.mly[131,40095+69]..lib/sentenceParser.mly[131,40095+86])
                                                                              Texp_tuple
                                                                              [
                                                                                expression (lib/sentenceParser.mly[131,40095+70]..lib/sentenceParser.mly[131,40095+81])
                                                                                  Texp_constant Const_string("DEBUG:rhs",(lib/sentenceParser.mly[131,40095+71]..lib/sentenceParser.mly[131,40095+80]),None)
                                                                                expression (lib/sentenceParser.mly[131,40095+83]..lib/sentenceParser.mly[131,40095+85])
                                                                                  Texp_ident "_3/2052"
                                                                              ]
                                                                        ]
                                                                  ]
                                                                expression (lib/sentenceParser.mly[131,40095+90]..lib/sentenceParser.mly[131,40095+100])
                                                                  Texp_construct "NFactor"
                                                                  [
                                                                    expression (lib/sentenceParser.mly[131,40095+98]..lib/sentenceParser.mly[131,40095+100])
                                                                      Texp_ident "_3/2052"
                                                                  ]
                                                          ]
                                                          expression (lib/sentenceParser.mly[127,40288+11]..lib/sentenceParser.mly[127,40288+89])
                                                            Texp_sequence
                                                            expression (lib/sentenceParser.mly[127,40288+18]..lib/sentenceParser.mly[127,40288+76])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[127,40288+19]..lib/sentenceParser.mly[127,40288+32])
                                                                Texp_ident "Stdlib!.print_endline"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[127,40288+33]..lib/sentenceParser.mly[127,40288+75])
                                                                    Texp_apply
                                                                    expression (lib/sentenceParser.mly[127,40288+34]..lib/sentenceParser.mly[127,40288+48])
                                                                      Texp_ident "Batteries!.dump"
                                                                    [
                                                                      <arg>
                                                                        Nolabel
                                                                        expression (lib/sentenceParser.mly[127,40288+49]..lib/sentenceParser.mly[127,40288+74])
                                                                          Texp_tuple
                                                                          [
                                                                            expression (lib/sentenceParser.mly[127,40288+50]..lib/sentenceParser.mly[127,40288+69])
                                                                              Texp_constant Const_string("DEBUG:cterm/group",(lib/sentenceParser.mly[127,40288+51]..lib/sentenceParser.mly[127,40288+68]),None)
                                                                            expression (lib/sentenceParser.mly[127,40288+71]..lib/sentenceParser.mly[127,40288+73])
                                                                              Texp_ident "_1/2060"
                                                                          ]
                                                                    ]
                                                              ]
                                                            expression (lib/sentenceParser.mly[127,40288+78]..lib/sentenceParser.mly[127,40288+88])
                                                              Texp_construct "NFactor"
                                                              [
                                                                expression (lib/sentenceParser.mly[127,40288+86]..lib/sentenceParser.mly[127,40288+88])
                                                                  Texp_ident "_1/2060"
                                                              ]
                                                    ]
                                                    expression (lib/sentenceParser.mly[123,40478+17]..lib/sentenceParser.mly[123,40478+95])
                                                      extra
                                                        Texp_constraint
                                                        core_type (lib/sentenceParser.ml[1081,40605+14]..lib/sentenceParser.ml[1081,40605+29])
                                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                          []
                                                      Texp_sequence
                                                      expression (lib/sentenceParser.mly[123,40478+24]..lib/sentenceParser.mly[123,40478+82])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[123,40478+25]..lib/sentenceParser.mly[123,40478+38])
                                                          Texp_ident "Stdlib!.print_endline"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[123,40478+39]..lib/sentenceParser.mly[123,40478+81])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[123,40478+40]..lib/sentenceParser.mly[123,40478+54])
                                                                Texp_ident "Batteries!.dump"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[123,40478+55]..lib/sentenceParser.mly[123,40478+80])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[123,40478+56]..lib/sentenceParser.mly[123,40478+75])
                                                                        Texp_constant Const_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,40478+57]..lib/sentenceParser.mly[123,40478+74]),None)
                                                                      expression (lib/sentenceParser.mly[123,40478+77]..lib/sentenceParser.mly[123,40478+79])
                                                                        Texp_ident "_1/2059"
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[123,40478+84]..lib/sentenceParser.mly[123,40478+94])
                                                        Texp_construct "NFactor"
                                                        [
                                                          expression (lib/sentenceParser.mly[123,40478+92]..lib/sentenceParser.mly[123,40478+94])
                                                            Texp_ident "_1/2059"
                                                        ]
                                              ]
                                              expression (lib/sentenceParser.ml[1083,40648+8]..lib/sentenceParser.ml[1089,40915+9])
                                                Texp_record
                                                  fields =
                                                    [
                                                      "MenhirLib.EngineTypes.state"
                                                        expression (lib/sentenceParser.ml[1084,40658+40]..lib/sentenceParser.ml[1084,40658+49])
                                                          Texp_ident "_menhir_s/2046"
                                                      "MenhirLib.EngineTypes.semv"
                                                        expression (lib/sentenceParser.ml[1085,40709+39]..lib/sentenceParser.ml[1085,40709+50])
                                                          Texp_apply
                                                          expression (lib/sentenceParser.ml[1085,40709+39]..lib/sentenceParser.ml[1085,40709+47])
                                                            Texp_ident "Stdlib!.Obj.repr"
                                                          [
                                                            <arg>
                                                              Nolabel
                                                              expression (lib/sentenceParser.ml[1085,40709+48]..lib/sentenceParser.ml[1085,40709+50])
                                                                Texp_ident "_v/2058"
                                                          ]
                                                      "MenhirLib.EngineTypes.startp"
                                                        expression (lib/sentenceParser.ml[1086,40761+41]..lib/sentenceParser.ml[1086,40761+50])
                                                          Texp_ident "_startpos/2056"
                                                      "MenhirLib.EngineTypes.endp"
                                                        expression (lib/sentenceParser.ml[1087,40813+39]..lib/sentenceParser.ml[1087,40813+46])
                                                          Texp_ident "_endpos/2057"
                                                      "MenhirLib.EngineTypes.next"
                                                        expression (lib/sentenceParser.ml[1088,40861+39]..lib/sentenceParser.ml[1088,40861+52])
                                                          Texp_ident "_menhir_stack/2050"
                                                    ]
                                                  representation =
                                                    Record_regular
                                                  extended_expression =
                                                    None
                      ]
                    expression (lib/sentenceParser.ml[1090,40927+6]..lib/sentenceParser.ml[1128,42425+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1090,40927+11]..lib/sentenceParser.ml[1090,40927+22])
                            Tpat_var "_menhir_env/2061"
                          expression (lib/sentenceParser.ml[1091,40953+8]..lib/sentenceParser.ml[1128,42425+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1091,40953+12]..lib/sentenceParser.ml[1091,40953+25])
                                  Tpat_var "_menhir_stack/2062"
                                expression (lib/sentenceParser.ml[1091,40953+28]..lib/sentenceParser.ml[1091,40953+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1091,40953+28]..lib/sentenceParser.ml[1091,40953+39])
                                    Texp_ident "_menhir_env/2061"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1092,41024+8]..lib/sentenceParser.ml[1128,42425+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1092,41024+12]..lib/sentenceParser.ml[1098,41294+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1093,41038+40]..lib/sentenceParser.ml[1093,41038+49])
                                          Tpat_var "_menhir_s/2063"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1094,41089+39]..lib/sentenceParser.ml[1094,41089+41])
                                          Tpat_var "_1/2064"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1095,41132+41]..lib/sentenceParser.ml[1095,41132+54])
                                          Tpat_var "_startpos__1_/2065"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1096,41188+39]..lib/sentenceParser.ml[1096,41188+50])
                                          Tpat_var "_endpos__1_/2066"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1097,41240+39]..lib/sentenceParser.ml[1097,41240+52])
                                          Tpat_var "_menhir_stack/2067"
                                    ]
                                  expression (lib/sentenceParser.ml[1098,41294+12]..lib/sentenceParser.ml[1098,41294+25])
                                    Texp_ident "_menhir_stack/2062"
                              ]
                              expression (lib/sentenceParser.ml[1099,41323+8]..lib/sentenceParser.ml[1128,42425+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1099,41323+12]..lib/sentenceParser.ml[1099,41323+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.ml[1099,41323+18]..lib/sentenceParser.ml[1099,41323+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Tpat_alias "_1/2068"
                                      pattern (lib/sentenceParser.ml[1099,41323+12]..lib/sentenceParser.ml[1099,41323+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1099,41323+37]..lib/sentenceParser.ml[1099,41323+49])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.ml[1099,41323+18]..lib/sentenceParser.ml[1099,41323+33])
                                          Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                          []
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1099,41323+37]..lib/sentenceParser.ml[1099,41323+46])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1099,41323+47]..lib/sentenceParser.ml[1099,41323+49])
                                            Texp_ident "_1/2064"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1100,41376+8]..lib/sentenceParser.ml[1128,42425+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1100,41376+12]..lib/sentenceParser.ml[1100,41376+23])
                                        Tpat_var "_endpos__0_/2069"
                                      expression (lib/sentenceParser.ml[1100,41376+26]..lib/sentenceParser.ml[1100,41376+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[1100,41376+26]..lib/sentenceParser.ml[1100,41376+39])
                                          Texp_ident "_menhir_stack/2067"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[1101,41446+8]..lib/sentenceParser.ml[1128,42425+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1101,41446+12]..lib/sentenceParser.ml[1101,41446+21])
                                          Tpat_var "_startpos/2070"
                                        expression (lib/sentenceParser.ml[1101,41446+24]..lib/sentenceParser.ml[1101,41446+37])
                                          Texp_ident "_startpos__1_/2065"
                                    ]
                                    expression (lib/sentenceParser.ml[1102,41487+8]..lib/sentenceParser.ml[1128,42425+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1102,41487+12]..lib/sentenceParser.ml[1102,41487+19])
                                            Tpat_var "_endpos/2071"
                                          expression (lib/sentenceParser.ml[1102,41487+22]..lib/sentenceParser.ml[1102,41487+33])
                                            Texp_ident "_endpos__1_/2066"
                                      ]
                                      expression (lib/sentenceParser.ml[1103,41524+8]..lib/sentenceParser.ml[1128,42425+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1103,41524+12]..lib/sentenceParser.ml[1103,41524+14])
                                              Tpat_var "_v/2072"
                                            expression (lib/sentenceParser.ml[1104,41541+10]..lib/sentenceParser.ml[1120,42115+31])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[1104,41541+14]..lib/sentenceParser.ml[1104,41541+16])
                                                    Tpat_var "_1/2073"
                                                  expression (lib/sentenceParser.ml[1105,41560+12]..lib/sentenceParser.mly[128,41797+90])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[1105,41560+16]..lib/sentenceParser.ml[1105,41560+18])
                                                          Tpat_var "_1/2074"
                                                        expression (lib/sentenceParser.mly[135,41613+18]..lib/sentenceParser.mly[135,41613+92])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[135,41613+25]..lib/sentenceParser.mly[135,41613+79])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[135,41613+26]..lib/sentenceParser.mly[135,41613+39])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[135,41613+40]..lib/sentenceParser.mly[135,41613+78])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[135,41613+41]..lib/sentenceParser.mly[135,41613+55])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[135,41613+56]..lib/sentenceParser.mly[135,41613+77])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[135,41613+57]..lib/sentenceParser.mly[135,41613+72])
                                                                            Texp_constant Const_string("DEBUG:class1a",(lib/sentenceParser.mly[135,41613+58]..lib/sentenceParser.mly[135,41613+71]),None)
                                                                          expression (lib/sentenceParser.mly[135,41613+74]..lib/sentenceParser.mly[135,41613+76])
                                                                            Texp_ident "_1/2068"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[135,41613+81]..lib/sentenceParser.mly[135,41613+91])
                                                            Texp_construct "NFactor"
                                                            [
                                                              expression (lib/sentenceParser.mly[135,41613+89]..lib/sentenceParser.mly[135,41613+91])
                                                                Texp_ident "_1/2068"
                                                            ]
                                                    ]
                                                    expression (lib/sentenceParser.mly[128,41797+12]..lib/sentenceParser.mly[128,41797+90])
                                                      Texp_sequence
                                                      expression (lib/sentenceParser.mly[128,41797+19]..lib/sentenceParser.mly[128,41797+77])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[128,41797+20]..lib/sentenceParser.mly[128,41797+33])
                                                          Texp_ident "Stdlib!.print_endline"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[128,41797+34]..lib/sentenceParser.mly[128,41797+76])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[128,41797+35]..lib/sentenceParser.mly[128,41797+49])
                                                                Texp_ident "Batteries!.dump"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[128,41797+50]..lib/sentenceParser.mly[128,41797+75])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[128,41797+51]..lib/sentenceParser.mly[128,41797+70])
                                                                        Texp_constant Const_string("DEBUG:cterm/class",(lib/sentenceParser.mly[128,41797+52]..lib/sentenceParser.mly[128,41797+69]),None)
                                                                      expression (lib/sentenceParser.mly[128,41797+72]..lib/sentenceParser.mly[128,41797+74])
                                                                        Texp_ident "_1/2074"
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[128,41797+79]..lib/sentenceParser.mly[128,41797+89])
                                                        Texp_construct "NFactor"
                                                        [
                                                          expression (lib/sentenceParser.mly[128,41797+87]..lib/sentenceParser.mly[128,41797+89])
                                                            Texp_ident "_1/2074"
                                                        ]
                                              ]
                                              expression (lib/sentenceParser.mly[123,41988+17]..lib/sentenceParser.mly[123,41988+95])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[1120,42115+14]..lib/sentenceParser.ml[1120,42115+29])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[123,41988+24]..lib/sentenceParser.mly[123,41988+82])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[123,41988+25]..lib/sentenceParser.mly[123,41988+38])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[123,41988+39]..lib/sentenceParser.mly[123,41988+81])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[123,41988+40]..lib/sentenceParser.mly[123,41988+54])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[123,41988+55]..lib/sentenceParser.mly[123,41988+80])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[123,41988+56]..lib/sentenceParser.mly[123,41988+75])
                                                                  Texp_constant Const_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,41988+57]..lib/sentenceParser.mly[123,41988+74]),None)
                                                                expression (lib/sentenceParser.mly[123,41988+77]..lib/sentenceParser.mly[123,41988+79])
                                                                  Texp_ident "_1/2073"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[123,41988+84]..lib/sentenceParser.mly[123,41988+94])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[123,41988+92]..lib/sentenceParser.mly[123,41988+94])
                                                      Texp_ident "_1/2073"
                                                  ]
                                        ]
                                        expression (lib/sentenceParser.ml[1122,42158+8]..lib/sentenceParser.ml[1128,42425+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[1123,42168+40]..lib/sentenceParser.ml[1123,42168+49])
                                                    Texp_ident "_menhir_s/2063"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[1124,42219+39]..lib/sentenceParser.ml[1124,42219+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[1124,42219+39]..lib/sentenceParser.ml[1124,42219+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[1124,42219+48]..lib/sentenceParser.ml[1124,42219+50])
                                                          Texp_ident "_v/2072"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[1125,42271+41]..lib/sentenceParser.ml[1125,42271+50])
                                                    Texp_ident "_startpos/2070"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[1126,42323+39]..lib/sentenceParser.ml[1126,42323+46])
                                                    Texp_ident "_endpos/2071"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[1127,42371+39]..lib/sentenceParser.ml[1127,42371+52])
                                                    Texp_ident "_menhir_stack/2067"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[1129,42437+6]..lib/sentenceParser.ml[1171,44015+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1129,42437+11]..lib/sentenceParser.ml[1129,42437+22])
                            Tpat_var "_menhir_env/2075"
                          expression (lib/sentenceParser.ml[1130,42463+8]..lib/sentenceParser.ml[1171,44015+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1130,42463+12]..lib/sentenceParser.ml[1130,42463+25])
                                  Tpat_var "_menhir_stack/2076"
                                expression (lib/sentenceParser.ml[1130,42463+28]..lib/sentenceParser.ml[1130,42463+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1130,42463+28]..lib/sentenceParser.ml[1130,42463+39])
                                    Texp_ident "_menhir_env/2075"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1131,42534+8]..lib/sentenceParser.ml[1171,44015+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1131,42534+12]..lib/sentenceParser.ml[1137,42804+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1132,42548+40]..lib/sentenceParser.ml[1132,42548+49])
                                          Tpat_var "_menhir_s/2077"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1133,42599+39]..lib/sentenceParser.ml[1133,42599+41])
                                          Tpat_var "_1/2078"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1134,42642+41]..lib/sentenceParser.ml[1134,42642+54])
                                          Tpat_var "_startpos__1_/2079"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1135,42698+39]..lib/sentenceParser.ml[1135,42698+50])
                                          Tpat_var "_endpos__1_/2080"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1136,42750+39]..lib/sentenceParser.ml[1136,42750+52])
                                          Tpat_var "_menhir_stack/2081"
                                    ]
                                  expression (lib/sentenceParser.ml[1137,42804+12]..lib/sentenceParser.ml[1137,42804+25])
                                    Texp_ident "_menhir_stack/2076"
                              ]
                              expression (lib/sentenceParser.ml[1138,42833+8]..lib/sentenceParser.ml[1171,44015+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1138,42833+12]..lib/sentenceParser.ml[1138,42833+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[39,42882+8]..lib/sentenceParser.mly[39,42882+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,42882+8]..lib/sentenceParser.mly[39,42882+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Tpat_alias "_1/2082"
                                      pattern (lib/sentenceParser.ml[1138,42833+12]..lib/sentenceParser.ml[1138,42833+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1142,42947+12]..lib/sentenceParser.ml[1142,42947+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[39,42882+8]..lib/sentenceParser.mly[39,42882+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,42882+8]..lib/sentenceParser.mly[39,42882+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1142,42947+12]..lib/sentenceParser.ml[1142,42947+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1142,42947+22]..lib/sentenceParser.ml[1142,42947+24])
                                            Texp_ident "_1/2078"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1143,42975+8]..lib/sentenceParser.ml[1171,44015+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1143,42975+12]..lib/sentenceParser.ml[1143,42975+23])
                                        Tpat_var "_endpos__0_/2083"
                                      expression (lib/sentenceParser.ml[1143,42975+26]..lib/sentenceParser.ml[1143,42975+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[1143,42975+26]..lib/sentenceParser.ml[1143,42975+39])
                                          Texp_ident "_menhir_stack/2081"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[1144,43045+8]..lib/sentenceParser.ml[1171,44015+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1144,43045+12]..lib/sentenceParser.ml[1144,43045+21])
                                          Tpat_var "_startpos/2084"
                                        expression (lib/sentenceParser.ml[1144,43045+24]..lib/sentenceParser.ml[1144,43045+37])
                                          Texp_ident "_startpos__1_/2079"
                                    ]
                                    expression (lib/sentenceParser.ml[1145,43086+8]..lib/sentenceParser.ml[1171,44015+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1145,43086+12]..lib/sentenceParser.ml[1145,43086+19])
                                            Tpat_var "_endpos/2085"
                                          expression (lib/sentenceParser.ml[1145,43086+22]..lib/sentenceParser.ml[1145,43086+33])
                                            Texp_ident "_endpos__1_/2080"
                                      ]
                                      expression (lib/sentenceParser.ml[1146,43123+8]..lib/sentenceParser.ml[1171,44015+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1146,43123+12]..lib/sentenceParser.ml[1146,43123+14])
                                              Tpat_var "_v/2086"
                                            expression (lib/sentenceParser.ml[1147,43140+10]..lib/sentenceParser.ml[1163,43705+31])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[1147,43140+14]..lib/sentenceParser.ml[1147,43140+16])
                                                    Tpat_var "_1/2087"
                                                  expression (lib/sentenceParser.ml[1148,43159+12]..lib/sentenceParser.mly[128,43387+90])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[1148,43159+16]..lib/sentenceParser.ml[1148,43159+18])
                                                          Tpat_var "_1/2088"
                                                        expression (lib/sentenceParser.mly[136,43212+11]..lib/sentenceParser.mly[136,43212+83])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[136,43212+18]..lib/sentenceParser.mly[136,43212+70])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[136,43212+19]..lib/sentenceParser.mly[136,43212+32])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[136,43212+33]..lib/sentenceParser.mly[136,43212+69])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[136,43212+34]..lib/sentenceParser.mly[136,43212+48])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[136,43212+49]..lib/sentenceParser.mly[136,43212+68])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[136,43212+50]..lib/sentenceParser.mly[136,43212+63])
                                                                            Texp_constant Const_string("DEBUG:class",(lib/sentenceParser.mly[136,43212+51]..lib/sentenceParser.mly[136,43212+62]),None)
                                                                          expression (lib/sentenceParser.mly[136,43212+65]..lib/sentenceParser.mly[136,43212+67])
                                                                            Texp_ident "_1/2082"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[136,43212+72]..lib/sentenceParser.mly[136,43212+82])
                                                            Texp_construct "SFactor"
                                                            [
                                                              expression (lib/sentenceParser.mly[136,43212+80]..lib/sentenceParser.mly[136,43212+82])
                                                                Texp_ident "_1/2082"
                                                            ]
                                                    ]
                                                    expression (lib/sentenceParser.mly[128,43387+12]..lib/sentenceParser.mly[128,43387+90])
                                                      Texp_sequence
                                                      expression (lib/sentenceParser.mly[128,43387+19]..lib/sentenceParser.mly[128,43387+77])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[128,43387+20]..lib/sentenceParser.mly[128,43387+33])
                                                          Texp_ident "Stdlib!.print_endline"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[128,43387+34]..lib/sentenceParser.mly[128,43387+76])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[128,43387+35]..lib/sentenceParser.mly[128,43387+49])
                                                                Texp_ident "Batteries!.dump"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[128,43387+50]..lib/sentenceParser.mly[128,43387+75])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[128,43387+51]..lib/sentenceParser.mly[128,43387+70])
                                                                        Texp_constant Const_string("DEBUG:cterm/class",(lib/sentenceParser.mly[128,43387+52]..lib/sentenceParser.mly[128,43387+69]),None)
                                                                      expression (lib/sentenceParser.mly[128,43387+72]..lib/sentenceParser.mly[128,43387+74])
                                                                        Texp_ident "_1/2088"
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[128,43387+79]..lib/sentenceParser.mly[128,43387+89])
                                                        Texp_construct "NFactor"
                                                        [
                                                          expression (lib/sentenceParser.mly[128,43387+87]..lib/sentenceParser.mly[128,43387+89])
                                                            Texp_ident "_1/2088"
                                                        ]
                                              ]
                                              expression (lib/sentenceParser.mly[123,43578+17]..lib/sentenceParser.mly[123,43578+95])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[1163,43705+14]..lib/sentenceParser.ml[1163,43705+29])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[123,43578+24]..lib/sentenceParser.mly[123,43578+82])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[123,43578+25]..lib/sentenceParser.mly[123,43578+38])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[123,43578+39]..lib/sentenceParser.mly[123,43578+81])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[123,43578+40]..lib/sentenceParser.mly[123,43578+54])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[123,43578+55]..lib/sentenceParser.mly[123,43578+80])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[123,43578+56]..lib/sentenceParser.mly[123,43578+75])
                                                                  Texp_constant Const_string("DEBUG:term/cterms",(lib/sentenceParser.mly[123,43578+57]..lib/sentenceParser.mly[123,43578+74]),None)
                                                                expression (lib/sentenceParser.mly[123,43578+77]..lib/sentenceParser.mly[123,43578+79])
                                                                  Texp_ident "_1/2087"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[123,43578+84]..lib/sentenceParser.mly[123,43578+94])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[123,43578+92]..lib/sentenceParser.mly[123,43578+94])
                                                      Texp_ident "_1/2087"
                                                  ]
                                        ]
                                        expression (lib/sentenceParser.ml[1165,43748+8]..lib/sentenceParser.ml[1171,44015+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[1166,43758+40]..lib/sentenceParser.ml[1166,43758+49])
                                                    Texp_ident "_menhir_s/2077"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[1167,43809+39]..lib/sentenceParser.ml[1167,43809+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[1167,43809+39]..lib/sentenceParser.ml[1167,43809+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[1167,43809+48]..lib/sentenceParser.ml[1167,43809+50])
                                                          Texp_ident "_v/2086"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[1168,43861+41]..lib/sentenceParser.ml[1168,43861+50])
                                                    Texp_ident "_startpos/2084"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[1169,43913+39]..lib/sentenceParser.ml[1169,43913+46])
                                                    Texp_ident "_endpos/2085"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[1170,43961+39]..lib/sentenceParser.ml[1170,43961+52])
                                                    Texp_ident "_menhir_stack/2081"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[1172,44027+6]..lib/sentenceParser.ml[1214,45582+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1172,44027+11]..lib/sentenceParser.ml[1172,44027+22])
                            Tpat_var "_menhir_env/2089"
                          expression (lib/sentenceParser.ml[1173,44053+8]..lib/sentenceParser.ml[1214,45582+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1173,44053+12]..lib/sentenceParser.ml[1173,44053+25])
                                  Tpat_var "_menhir_stack/2090"
                                expression (lib/sentenceParser.ml[1173,44053+28]..lib/sentenceParser.ml[1173,44053+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1173,44053+28]..lib/sentenceParser.ml[1173,44053+39])
                                    Texp_ident "_menhir_env/2089"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1174,44124+8]..lib/sentenceParser.ml[1214,45582+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1174,44124+12]..lib/sentenceParser.ml[1180,44394+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1175,44138+40]..lib/sentenceParser.ml[1175,44138+49])
                                          Tpat_var "_menhir_s/2091"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1176,44189+39]..lib/sentenceParser.ml[1176,44189+41])
                                          Tpat_var "_1/2092"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1177,44232+41]..lib/sentenceParser.ml[1177,44232+54])
                                          Tpat_var "_startpos__1_/2093"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1178,44288+39]..lib/sentenceParser.ml[1178,44288+50])
                                          Tpat_var "_endpos__1_/2094"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1179,44340+39]..lib/sentenceParser.ml[1179,44340+52])
                                          Tpat_var "_menhir_stack/2095"
                                    ]
                                  expression (lib/sentenceParser.ml[1180,44394+12]..lib/sentenceParser.ml[1180,44394+25])
                                    Texp_ident "_menhir_stack/2090"
                              ]
                              expression (lib/sentenceParser.ml[1181,44423+8]..lib/sentenceParser.ml[1214,45582+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1181,44423+12]..lib/sentenceParser.ml[1181,44423+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[39,44472+8]..lib/sentenceParser.mly[39,44472+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,44472+8]..lib/sentenceParser.mly[39,44472+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Tpat_alias "_1/2096"
                                      pattern (lib/sentenceParser.ml[1181,44423+12]..lib/sentenceParser.ml[1181,44423+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1185,44537+12]..lib/sentenceParser.ml[1185,44537+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[39,44472+8]..lib/sentenceParser.mly[39,44472+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,44472+8]..lib/sentenceParser.mly[39,44472+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1185,44537+12]..lib/sentenceParser.ml[1185,44537+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1185,44537+22]..lib/sentenceParser.ml[1185,44537+24])
                                            Texp_ident "_1/2092"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1186,44565+8]..lib/sentenceParser.ml[1214,45582+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1186,44565+12]..lib/sentenceParser.ml[1186,44565+23])
                                        Tpat_var "_endpos__0_/2097"
                                      expression (lib/sentenceParser.ml[1186,44565+26]..lib/sentenceParser.ml[1186,44565+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[1186,44565+26]..lib/sentenceParser.ml[1186,44565+39])
                                          Texp_ident "_menhir_stack/2095"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[1187,44635+8]..lib/sentenceParser.ml[1214,45582+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1187,44635+12]..lib/sentenceParser.ml[1187,44635+21])
                                          Tpat_var "_startpos/2098"
                                        expression (lib/sentenceParser.ml[1187,44635+24]..lib/sentenceParser.ml[1187,44635+37])
                                          Texp_ident "_startpos__1_/2093"
                                    ]
                                    expression (lib/sentenceParser.ml[1188,44676+8]..lib/sentenceParser.ml[1214,45582+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1188,44676+12]..lib/sentenceParser.ml[1188,44676+19])
                                            Tpat_var "_endpos/2099"
                                          expression (lib/sentenceParser.ml[1188,44676+22]..lib/sentenceParser.ml[1188,44676+33])
                                            Texp_ident "_endpos__1_/2094"
                                      ]
                                      expression (lib/sentenceParser.ml[1189,44713+8]..lib/sentenceParser.ml[1214,45582+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1189,44713+12]..lib/sentenceParser.ml[1189,44713+14])
                                              Tpat_var "_v/2100"
                                            expression (lib/sentenceParser.ml[1190,44730+10]..lib/sentenceParser.ml[1206,45272+31])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[1190,44730+14]..lib/sentenceParser.ml[1190,44730+16])
                                                    Tpat_var "_1/2101"
                                                  expression (lib/sentenceParser.ml[1191,44749+12]..lib/sentenceParser.mly[119,44967+85])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[1191,44749+16]..lib/sentenceParser.ml[1191,44749+18])
                                                          Tpat_var "_1/2102"
                                                        expression (lib/sentenceParser.mly[114,44802+8]..lib/sentenceParser.mly[114,44802+73])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[114,44802+15]..lib/sentenceParser.mly[114,44802+66])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[114,44802+16]..lib/sentenceParser.mly[114,44802+29])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[114,44802+30]..lib/sentenceParser.mly[114,44802+65])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[114,44802+31]..lib/sentenceParser.mly[114,44802+45])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[114,44802+46]..lib/sentenceParser.mly[114,44802+64])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[114,44802+47]..lib/sentenceParser.mly[114,44802+59])
                                                                            Texp_constant Const_string("DEBUG:quid",(lib/sentenceParser.mly[114,44802+48]..lib/sentenceParser.mly[114,44802+58]),None)
                                                                          expression (lib/sentenceParser.mly[114,44802+61]..lib/sentenceParser.mly[114,44802+63])
                                                                            Texp_ident "_1/2096"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[114,44802+69]..lib/sentenceParser.mly[114,44802+71])
                                                            Texp_ident "_1/2096"
                                                    ]
                                                    expression (lib/sentenceParser.mly[119,44967+8]..lib/sentenceParser.mly[119,44967+85])
                                                      Texp_sequence
                                                      expression (lib/sentenceParser.mly[119,44967+15]..lib/sentenceParser.mly[119,44967+72])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[119,44967+16]..lib/sentenceParser.mly[119,44967+29])
                                                          Texp_ident "Stdlib!.print_endline"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[119,44967+30]..lib/sentenceParser.mly[119,44967+71])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[119,44967+31]..lib/sentenceParser.mly[119,44967+45])
                                                                Texp_ident "Batteries!.dump"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[119,44967+46]..lib/sentenceParser.mly[119,44967+70])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[119,44967+47]..lib/sentenceParser.mly[119,44967+65])
                                                                        Texp_constant Const_string("DEBUG:sterm/quid",(lib/sentenceParser.mly[119,44967+48]..lib/sentenceParser.mly[119,44967+64]),None)
                                                                      expression (lib/sentenceParser.mly[119,44967+67]..lib/sentenceParser.mly[119,44967+69])
                                                                        Texp_ident "_1/2102"
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[119,44967+74]..lib/sentenceParser.mly[119,44967+84])
                                                        Texp_construct "SFactor"
                                                        [
                                                          expression (lib/sentenceParser.mly[119,44967+82]..lib/sentenceParser.mly[119,44967+84])
                                                            Texp_ident "_1/2102"
                                                        ]
                                              ]
                                              expression (lib/sentenceParser.mly[124,45153+10]..lib/sentenceParser.mly[124,45153+87])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[1206,45272+14]..lib/sentenceParser.ml[1206,45272+29])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[124,45153+17]..lib/sentenceParser.mly[124,45153+74])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[124,45153+18]..lib/sentenceParser.mly[124,45153+31])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[124,45153+32]..lib/sentenceParser.mly[124,45153+73])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[124,45153+33]..lib/sentenceParser.mly[124,45153+47])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[124,45153+48]..lib/sentenceParser.mly[124,45153+72])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[124,45153+49]..lib/sentenceParser.mly[124,45153+67])
                                                                  Texp_constant Const_string("DEBUG:term/sterm",(lib/sentenceParser.mly[124,45153+50]..lib/sentenceParser.mly[124,45153+66]),None)
                                                                expression (lib/sentenceParser.mly[124,45153+69]..lib/sentenceParser.mly[124,45153+71])
                                                                  Texp_ident "_1/2101"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[124,45153+76]..lib/sentenceParser.mly[124,45153+86])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[124,45153+84]..lib/sentenceParser.mly[124,45153+86])
                                                      Texp_ident "_1/2101"
                                                  ]
                                        ]
                                        expression (lib/sentenceParser.ml[1208,45315+8]..lib/sentenceParser.ml[1214,45582+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[1209,45325+40]..lib/sentenceParser.ml[1209,45325+49])
                                                    Texp_ident "_menhir_s/2091"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[1210,45376+39]..lib/sentenceParser.ml[1210,45376+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[1210,45376+39]..lib/sentenceParser.ml[1210,45376+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[1210,45376+48]..lib/sentenceParser.ml[1210,45376+50])
                                                          Texp_ident "_v/2100"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[1211,45428+41]..lib/sentenceParser.ml[1211,45428+50])
                                                    Texp_ident "_startpos/2098"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[1212,45480+39]..lib/sentenceParser.ml[1212,45480+46])
                                                    Texp_ident "_endpos/2099"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[1213,45528+39]..lib/sentenceParser.ml[1213,45528+52])
                                                    Texp_ident "_menhir_stack/2095"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                    expression (lib/sentenceParser.ml[1215,45594+6]..lib/sentenceParser.ml[1257,47147+10])
                      Texp_function
                      Nolabel
                      [
                        <case>
                          pattern (lib/sentenceParser.ml[1215,45594+11]..lib/sentenceParser.ml[1215,45594+22])
                            Tpat_var "_menhir_env/2103"
                          expression (lib/sentenceParser.ml[1216,45620+8]..lib/sentenceParser.ml[1257,47147+9])
                            Texp_let Nonrec
                            [
                              <def>
                                pattern (lib/sentenceParser.ml[1216,45620+12]..lib/sentenceParser.ml[1216,45620+25])
                                  Tpat_var "_menhir_stack/2104"
                                expression (lib/sentenceParser.ml[1216,45620+28]..lib/sentenceParser.ml[1216,45620+67])
                                  Texp_field
                                  expression (lib/sentenceParser.ml[1216,45620+28]..lib/sentenceParser.ml[1216,45620+39])
                                    Texp_ident "_menhir_env/2103"
                                  "MenhirLib.EngineTypes.stack"
                            ]
                            expression (lib/sentenceParser.ml[1217,45691+8]..lib/sentenceParser.ml[1257,47147+9])
                              Texp_let Nonrec
                              [
                                <def>
                                  pattern (lib/sentenceParser.ml[1217,45691+12]..lib/sentenceParser.ml[1223,45961+9])
                                    Tpat_record
                                    [
                                      "MenhirLib.EngineTypes.state"
                                        pattern (lib/sentenceParser.ml[1218,45705+40]..lib/sentenceParser.ml[1218,45705+49])
                                          Tpat_var "_menhir_s/2105"
                                      "MenhirLib.EngineTypes.semv"
                                        pattern (lib/sentenceParser.ml[1219,45756+39]..lib/sentenceParser.ml[1219,45756+41])
                                          Tpat_var "_1/2106"
                                      "MenhirLib.EngineTypes.startp"
                                        pattern (lib/sentenceParser.ml[1220,45799+41]..lib/sentenceParser.ml[1220,45799+54])
                                          Tpat_var "_startpos__1_/2107"
                                      "MenhirLib.EngineTypes.endp"
                                        pattern (lib/sentenceParser.ml[1221,45855+39]..lib/sentenceParser.ml[1221,45855+50])
                                          Tpat_var "_endpos__1_/2108"
                                      "MenhirLib.EngineTypes.next"
                                        pattern (lib/sentenceParser.ml[1222,45907+39]..lib/sentenceParser.ml[1222,45907+52])
                                          Tpat_var "_menhir_stack/2109"
                                    ]
                                  expression (lib/sentenceParser.ml[1223,45961+12]..lib/sentenceParser.ml[1223,45961+25])
                                    Texp_ident "_menhir_stack/2104"
                              ]
                              expression (lib/sentenceParser.ml[1224,45990+8]..lib/sentenceParser.ml[1257,47147+9])
                                Texp_let Nonrec
                                [
                                  <def>
                                    pattern (lib/sentenceParser.ml[1224,45990+12]..lib/sentenceParser.ml[1224,45990+14])
                                      extra
                                        Tpat_extra_constraint
                                        core_type (lib/sentenceParser.mly[39,46039+8]..lib/sentenceParser.mly[39,46039+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,46039+8]..lib/sentenceParser.mly[39,46039+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Tpat_alias "_1/2110"
                                      pattern (lib/sentenceParser.ml[1224,45990+12]..lib/sentenceParser.ml[1224,45990+14])
                                        Tpat_any
                                    expression (lib/sentenceParser.ml[1228,46104+12]..lib/sentenceParser.ml[1228,46104+24])
                                      extra
                                        Texp_constraint
                                        core_type (lib/sentenceParser.mly[39,46039+8]..lib/sentenceParser.mly[39,46039+32])
                                          Ttyp_constr "Gbnf_parser!.Positions.located"
                                          [
                                            core_type (lib/sentenceParser.mly[39,46039+8]..lib/sentenceParser.mly[39,46039+14])
                                              Ttyp_constr "string/15!"
                                              []
                                          ]
                                      Texp_apply
                                      expression (lib/sentenceParser.ml[1228,46104+12]..lib/sentenceParser.ml[1228,46104+21])
                                        Texp_ident "Stdlib!.Obj.magic"
                                      [
                                        <arg>
                                          Nolabel
                                          expression (lib/sentenceParser.ml[1228,46104+22]..lib/sentenceParser.ml[1228,46104+24])
                                            Texp_ident "_1/2106"
                                      ]
                                ]
                                expression (lib/sentenceParser.ml[1229,46132+8]..lib/sentenceParser.ml[1257,47147+9])
                                  Texp_let Nonrec
                                  [
                                    <def>
                                      pattern (lib/sentenceParser.ml[1229,46132+12]..lib/sentenceParser.ml[1229,46132+23])
                                        Tpat_var "_endpos__0_/2111"
                                      expression (lib/sentenceParser.ml[1229,46132+26]..lib/sentenceParser.ml[1229,46132+66])
                                        Texp_field
                                        expression (lib/sentenceParser.ml[1229,46132+26]..lib/sentenceParser.ml[1229,46132+39])
                                          Texp_ident "_menhir_stack/2109"
                                        "MenhirLib.EngineTypes.endp"
                                  ]
                                  expression (lib/sentenceParser.ml[1230,46202+8]..lib/sentenceParser.ml[1257,47147+9])
                                    Texp_let Nonrec
                                    [
                                      <def>
                                        pattern (lib/sentenceParser.ml[1230,46202+12]..lib/sentenceParser.ml[1230,46202+21])
                                          Tpat_var "_startpos/2112"
                                        expression (lib/sentenceParser.ml[1230,46202+24]..lib/sentenceParser.ml[1230,46202+37])
                                          Texp_ident "_startpos__1_/2107"
                                    ]
                                    expression (lib/sentenceParser.ml[1231,46243+8]..lib/sentenceParser.ml[1257,47147+9])
                                      Texp_let Nonrec
                                      [
                                        <def>
                                          pattern (lib/sentenceParser.ml[1231,46243+12]..lib/sentenceParser.ml[1231,46243+19])
                                            Tpat_var "_endpos/2113"
                                          expression (lib/sentenceParser.ml[1231,46243+22]..lib/sentenceParser.ml[1231,46243+33])
                                            Texp_ident "_endpos__1_/2108"
                                      ]
                                      expression (lib/sentenceParser.ml[1232,46280+8]..lib/sentenceParser.ml[1257,47147+9])
                                        Texp_let Nonrec
                                        [
                                          <def>
                                            pattern (lib/sentenceParser.ml[1232,46280+12]..lib/sentenceParser.ml[1232,46280+14])
                                              Tpat_var "_v/2114"
                                            expression (lib/sentenceParser.ml[1233,46297+10]..lib/sentenceParser.ml[1249,46837+31])
                                              Texp_let Nonrec
                                              [
                                                <def>
                                                  pattern (lib/sentenceParser.ml[1233,46297+14]..lib/sentenceParser.ml[1233,46297+16])
                                                    Tpat_var "_1/2115"
                                                  expression (lib/sentenceParser.ml[1234,46316+12]..lib/sentenceParser.mly[120,46533+84])
                                                    Texp_let Nonrec
                                                    [
                                                      <def>
                                                        pattern (lib/sentenceParser.ml[1234,46316+16]..lib/sentenceParser.ml[1234,46316+18])
                                                          Tpat_var "_1/2116"
                                                        expression (lib/sentenceParser.mly[116,46369+8]..lib/sentenceParser.mly[116,46369+72])
                                                          Texp_sequence
                                                          expression (lib/sentenceParser.mly[116,46369+15]..lib/sentenceParser.mly[116,46369+65])
                                                            Texp_apply
                                                            expression (lib/sentenceParser.mly[116,46369+16]..lib/sentenceParser.mly[116,46369+29])
                                                              Texp_ident "Stdlib!.print_endline"
                                                            [
                                                              <arg>
                                                                Nolabel
                                                                expression (lib/sentenceParser.mly[116,46369+30]..lib/sentenceParser.mly[116,46369+64])
                                                                  Texp_apply
                                                                  expression (lib/sentenceParser.mly[116,46369+31]..lib/sentenceParser.mly[116,46369+45])
                                                                    Texp_ident "Batteries!.dump"
                                                                  [
                                                                    <arg>
                                                                      Nolabel
                                                                      expression (lib/sentenceParser.mly[116,46369+46]..lib/sentenceParser.mly[116,46369+63])
                                                                        Texp_tuple
                                                                        [
                                                                          expression (lib/sentenceParser.mly[116,46369+47]..lib/sentenceParser.mly[116,46369+58])
                                                                            Texp_constant Const_string("DEBUG:lid",(lib/sentenceParser.mly[116,46369+48]..lib/sentenceParser.mly[116,46369+57]),None)
                                                                          expression (lib/sentenceParser.mly[116,46369+60]..lib/sentenceParser.mly[116,46369+62])
                                                                            Texp_ident "_1/2110"
                                                                        ]
                                                                  ]
                                                            ]
                                                          expression (lib/sentenceParser.mly[116,46369+68]..lib/sentenceParser.mly[116,46369+70])
                                                            Texp_ident "_1/2110"
                                                    ]
                                                    expression (lib/sentenceParser.mly[120,46533+8]..lib/sentenceParser.mly[120,46533+84])
                                                      Texp_sequence
                                                      expression (lib/sentenceParser.mly[120,46533+15]..lib/sentenceParser.mly[120,46533+71])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[120,46533+16]..lib/sentenceParser.mly[120,46533+29])
                                                          Texp_ident "Stdlib!.print_endline"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[120,46533+30]..lib/sentenceParser.mly[120,46533+70])
                                                              Texp_apply
                                                              expression (lib/sentenceParser.mly[120,46533+31]..lib/sentenceParser.mly[120,46533+45])
                                                                Texp_ident "Batteries!.dump"
                                                              [
                                                                <arg>
                                                                  Nolabel
                                                                  expression (lib/sentenceParser.mly[120,46533+46]..lib/sentenceParser.mly[120,46533+69])
                                                                    Texp_tuple
                                                                    [
                                                                      expression (lib/sentenceParser.mly[120,46533+47]..lib/sentenceParser.mly[120,46533+64])
                                                                        Texp_constant Const_string("DEBUG:sterm/lid",(lib/sentenceParser.mly[120,46533+48]..lib/sentenceParser.mly[120,46533+63]),None)
                                                                      expression (lib/sentenceParser.mly[120,46533+66]..lib/sentenceParser.mly[120,46533+68])
                                                                        Texp_ident "_1/2116"
                                                                    ]
                                                              ]
                                                        ]
                                                      expression (lib/sentenceParser.mly[120,46533+73]..lib/sentenceParser.mly[120,46533+83])
                                                        Texp_construct "SFactor"
                                                        [
                                                          expression (lib/sentenceParser.mly[120,46533+81]..lib/sentenceParser.mly[120,46533+83])
                                                            Texp_ident "_1/2116"
                                                        ]
                                              ]
                                              expression (lib/sentenceParser.mly[124,46718+10]..lib/sentenceParser.mly[124,46718+87])
                                                extra
                                                  Texp_constraint
                                                  core_type (lib/sentenceParser.ml[1249,46837+14]..lib/sentenceParser.ml[1249,46837+29])
                                                    Ttyp_constr "Gbnf_parser!.Syntax.myfactor"
                                                    []
                                                Texp_sequence
                                                expression (lib/sentenceParser.mly[124,46718+17]..lib/sentenceParser.mly[124,46718+74])
                                                  Texp_apply
                                                  expression (lib/sentenceParser.mly[124,46718+18]..lib/sentenceParser.mly[124,46718+31])
                                                    Texp_ident "Stdlib!.print_endline"
                                                  [
                                                    <arg>
                                                      Nolabel
                                                      expression (lib/sentenceParser.mly[124,46718+32]..lib/sentenceParser.mly[124,46718+73])
                                                        Texp_apply
                                                        expression (lib/sentenceParser.mly[124,46718+33]..lib/sentenceParser.mly[124,46718+47])
                                                          Texp_ident "Batteries!.dump"
                                                        [
                                                          <arg>
                                                            Nolabel
                                                            expression (lib/sentenceParser.mly[124,46718+48]..lib/sentenceParser.mly[124,46718+72])
                                                              Texp_tuple
                                                              [
                                                                expression (lib/sentenceParser.mly[124,46718+49]..lib/sentenceParser.mly[124,46718+67])
                                                                  Texp_constant Const_string("DEBUG:term/sterm",(lib/sentenceParser.mly[124,46718+50]..lib/sentenceParser.mly[124,46718+66]),None)
                                                                expression (lib/sentenceParser.mly[124,46718+69]..lib/sentenceParser.mly[124,46718+71])
                                                                  Texp_ident "_1/2115"
                                                              ]
                                                        ]
                                                  ]
                                                expression (lib/sentenceParser.mly[124,46718+76]..lib/sentenceParser.mly[124,46718+86])
                                                  Texp_construct "NFactor"
                                                  [
                                                    expression (lib/sentenceParser.mly[124,46718+84]..lib/sentenceParser.mly[124,46718+86])
                                                      Texp_ident "_1/2115"
                                                  ]
                                        ]
                                        expression (lib/sentenceParser.ml[1251,46880+8]..lib/sentenceParser.ml[1257,47147+9])
                                          Texp_record
                                            fields =
                                              [
                                                "MenhirLib.EngineTypes.state"
                                                  expression (lib/sentenceParser.ml[1252,46890+40]..lib/sentenceParser.ml[1252,46890+49])
                                                    Texp_ident "_menhir_s/2105"
                                                "MenhirLib.EngineTypes.semv"
                                                  expression (lib/sentenceParser.ml[1253,46941+39]..lib/sentenceParser.ml[1253,46941+50])
                                                    Texp_apply
                                                    expression (lib/sentenceParser.ml[1253,46941+39]..lib/sentenceParser.ml[1253,46941+47])
                                                      Texp_ident "Stdlib!.Obj.repr"
                                                    [
                                                      <arg>
                                                        Nolabel
                                                        expression (lib/sentenceParser.ml[1253,46941+48]..lib/sentenceParser.ml[1253,46941+50])
                                                          Texp_ident "_v/2114"
                                                    ]
                                                "MenhirLib.EngineTypes.startp"
                                                  expression (lib/sentenceParser.ml[1254,46993+41]..lib/sentenceParser.ml[1254,46993+50])
                                                    Texp_ident "_startpos/2112"
                                                "MenhirLib.EngineTypes.endp"
                                                  expression (lib/sentenceParser.ml[1255,47045+39]..lib/sentenceParser.ml[1255,47045+46])
                                                    Texp_ident "_endpos/2113"
                                                "MenhirLib.EngineTypes.next"
                                                  expression (lib/sentenceParser.ml[1256,47093+39]..lib/sentenceParser.ml[1256,47093+52])
                                                    Texp_ident "_menhir_stack/2109"
                                              ]
                                            representation =
                                              Record_regular
                                            extended_expression =
                                              None
                      ]
                  ]
              <def>
                pattern (lib/sentenceParser.ml[1260,47169+6]..lib/sentenceParser.ml[1260,47169+11])
                  Tpat_var "trace/1335"
                expression (lib/sentenceParser.ml[1261,47183+4]..lib/sentenceParser.ml[1310,49142+7])
                  Texp_construct "Some"
                  [
                    expression (lib/sentenceParser.ml[1261,47183+9]..lib/sentenceParser.ml[1310,49142+7])
                      Texp_tuple
                      [
                        expression (lib/sentenceParser.ml[1261,47183+10]..lib/sentenceParser.ml[1279,47453+6])
                          Texp_array
                          [
                            expression (lib/sentenceParser.ml[1262,47196+6]..lib/sentenceParser.ml[1262,47196+13])
                              Texp_constant Const_string("error",(lib/sentenceParser.ml[1262,47196+7]..lib/sentenceParser.ml[1262,47196+12]),None)
                            expression (lib/sentenceParser.ml[1263,47211+6]..lib/sentenceParser.ml[1263,47211+13])
                              Texp_constant Const_string("Tchar",(lib/sentenceParser.ml[1263,47211+7]..lib/sentenceParser.ml[1263,47211+12]),None)
                            expression (lib/sentenceParser.ml[1264,47226+6]..lib/sentenceParser.ml[1264,47226+12])
                              Texp_constant Const_string("STAR",(lib/sentenceParser.ml[1264,47226+7]..lib/sentenceParser.ml[1264,47226+11]),None)
                            expression (lib/sentenceParser.ml[1265,47240+6]..lib/sentenceParser.ml[1265,47240+14])
                              Texp_constant Const_string("RPAREN",(lib/sentenceParser.ml[1265,47240+7]..lib/sentenceParser.ml[1265,47240+13]),None)
                            expression (lib/sentenceParser.ml[1266,47256+6]..lib/sentenceParser.ml[1266,47256+13])
                              Texp_constant Const_string("REGEX",(lib/sentenceParser.ml[1266,47256+7]..lib/sentenceParser.ml[1266,47256+12]),None)
                            expression (lib/sentenceParser.ml[1267,47271+6]..lib/sentenceParser.ml[1267,47271+16])
                              Texp_constant Const_string("QUESTION",(lib/sentenceParser.ml[1267,47271+7]..lib/sentenceParser.ml[1267,47271+15]),None)
                            expression (lib/sentenceParser.ml[1268,47289+6]..lib/sentenceParser.ml[1268,47289+11])
                              Texp_constant Const_string("QID",(lib/sentenceParser.ml[1268,47289+7]..lib/sentenceParser.ml[1268,47289+10]),None)
                            expression (lib/sentenceParser.ml[1269,47302+6]..lib/sentenceParser.ml[1269,47302+12])
                              Texp_constant Const_string("PLUS",(lib/sentenceParser.ml[1269,47302+7]..lib/sentenceParser.ml[1269,47302+11]),None)
                            expression (lib/sentenceParser.ml[1270,47316+6]..lib/sentenceParser.ml[1270,47316+15])
                              Texp_constant Const_string("NEWLINE",(lib/sentenceParser.ml[1270,47316+7]..lib/sentenceParser.ml[1270,47316+14]),None)
                            expression (lib/sentenceParser.ml[1271,47333+6]..lib/sentenceParser.ml[1271,47333+14])
                              Texp_constant Const_string("LPAREN",(lib/sentenceParser.ml[1271,47333+7]..lib/sentenceParser.ml[1271,47333+13]),None)
                            expression (lib/sentenceParser.ml[1272,47349+6]..lib/sentenceParser.ml[1272,47349+11])
                              Texp_constant Const_string("LID",(lib/sentenceParser.ml[1272,47349+7]..lib/sentenceParser.ml[1272,47349+10]),None)
                            expression (lib/sentenceParser.ml[1273,47362+6]..lib/sentenceParser.ml[1273,47362+11])
                              Texp_constant Const_string("EOF",(lib/sentenceParser.ml[1273,47362+7]..lib/sentenceParser.ml[1273,47362+10]),None)
                            expression (lib/sentenceParser.ml[1274,47375+6]..lib/sentenceParser.ml[1274,47375+12])
                              Texp_constant Const_string("DASH",(lib/sentenceParser.ml[1274,47375+7]..lib/sentenceParser.ml[1274,47375+11]),None)
                            expression (lib/sentenceParser.ml[1275,47389+6]..lib/sentenceParser.ml[1275,47389+23])
                              Texp_constant Const_string("COLONCOLONEQUAL",(lib/sentenceParser.ml[1275,47389+7]..lib/sentenceParser.ml[1275,47389+22]),None)
                            expression (lib/sentenceParser.ml[1276,47414+6]..lib/sentenceParser.ml[1276,47414+13])
                              Texp_constant Const_string("CARET",(lib/sentenceParser.ml[1276,47414+7]..lib/sentenceParser.ml[1276,47414+12]),None)
                            expression (lib/sentenceParser.ml[1277,47429+6]..lib/sentenceParser.ml[1277,47429+11])
                              Texp_constant Const_string("BAR",(lib/sentenceParser.ml[1277,47429+7]..lib/sentenceParser.ml[1277,47429+10]),None)
                            expression (lib/sentenceParser.ml[1278,47442+6]..lib/sentenceParser.ml[1278,47442+9])
                              Texp_constant Const_string("#",(lib/sentenceParser.ml[1278,47442+7]..lib/sentenceParser.ml[1278,47442+8]),None)
                          ]
                        expression (lib/sentenceParser.ml[1279,47453+8]..lib/sentenceParser.ml[1310,49142+6])
                          Texp_array
                          [
                            expression (lib/sentenceParser.ml[1280,47464+6]..lib/sentenceParser.ml[1280,47464+17])
                              Texp_constant Const_string("Accepting",(lib/sentenceParser.ml[1280,47464+7]..lib/sentenceParser.ml[1280,47464+16]),None)
                            expression (lib/sentenceParser.ml[1281,47483+6]..lib/sentenceParser.ml[1281,47483+86])
                              Texp_constant Const_string("Reducing production alternation -> alternation BAR list(NEWLINE) concatenation",(lib/sentenceParser.ml[1281,47483+7]..lib/sentenceParser.ml[1281,47483+85]),None)
                            expression (lib/sentenceParser.ml[1282,47571+6]..lib/sentenceParser.ml[1282,47571+56])
                              Texp_constant Const_string("Reducing production alternation -> concatenation",(lib/sentenceParser.ml[1282,47571+7]..lib/sentenceParser.ml[1282,47571+55]),None)
                            expression (lib/sentenceParser.ml[1283,47629+6]..lib/sentenceParser.ml[1283,47629+59])
                              Texp_constant Const_string("Reducing production char_class -> CARET char_class1",(lib/sentenceParser.ml[1283,47629+7]..lib/sentenceParser.ml[1283,47629+58]),None)
                            expression (lib/sentenceParser.ml[1284,47690+6]..lib/sentenceParser.ml[1284,47690+53])
                              Texp_constant Const_string("Reducing production char_class -> char_class1",(lib/sentenceParser.ml[1284,47690+7]..lib/sentenceParser.ml[1284,47690+52]),None)
                            expression (lib/sentenceParser.ml[1285,47745+6]..lib/sentenceParser.ml[1285,47745+59])
                              Texp_constant Const_string("Reducing production char_class1 -> Tchar DASH Tchar",(lib/sentenceParser.ml[1285,47745+7]..lib/sentenceParser.ml[1285,47745+58]),None)
                            expression (lib/sentenceParser.ml[1286,47806+6]..lib/sentenceParser.ml[1286,47806+60])
                              Texp_constant Const_string("Reducing production char_class1 -> char_class1 Tchar",(lib/sentenceParser.ml[1286,47806+7]..lib/sentenceParser.ml[1286,47806+59]),None)
                            expression (lib/sentenceParser.ml[1287,47868+6]..lib/sentenceParser.ml[1287,47868+48])
                              Texp_constant Const_string("Reducing production char_class1 -> Tchar",(lib/sentenceParser.ml[1287,47868+7]..lib/sentenceParser.ml[1287,47868+47]),None)
                            expression (lib/sentenceParser.ml[1288,47918+6]..lib/sentenceParser.ml[1288,47918+65])
                              Texp_constant Const_string("Reducing production concatenation -> concatenation factor",(lib/sentenceParser.ml[1288,47918+7]..lib/sentenceParser.ml[1288,47918+64]),None)
                            expression (lib/sentenceParser.ml[1289,47985+6]..lib/sentenceParser.ml[1289,47985+51])
                              Texp_constant Const_string("Reducing production concatenation -> factor",(lib/sentenceParser.ml[1289,47985+7]..lib/sentenceParser.ml[1289,47985+50]),None)
                            expression (lib/sentenceParser.ml[1290,48038+6]..lib/sentenceParser.ml[1290,48038+47])
                              Texp_constant Const_string("Reducing production factor -> term PLUS",(lib/sentenceParser.ml[1290,48038+7]..lib/sentenceParser.ml[1290,48038+46]),None)
                            expression (lib/sentenceParser.ml[1291,48087+6]..lib/sentenceParser.ml[1291,48087+51])
                              Texp_constant Const_string("Reducing production factor -> term QUESTION",(lib/sentenceParser.ml[1291,48087+7]..lib/sentenceParser.ml[1291,48087+50]),None)
                            expression (lib/sentenceParser.ml[1292,48140+6]..lib/sentenceParser.ml[1292,48140+47])
                              Texp_constant Const_string("Reducing production factor -> term STAR",(lib/sentenceParser.ml[1292,48140+7]..lib/sentenceParser.ml[1292,48140+46]),None)
                            expression (lib/sentenceParser.ml[1293,48189+6]..lib/sentenceParser.ml[1293,48189+42])
                              Texp_constant Const_string("Reducing production factor -> term",(lib/sentenceParser.ml[1293,48189+7]..lib/sentenceParser.ml[1293,48189+41]),None)
                            expression (lib/sentenceParser.ml[1294,48233+6]..lib/sentenceParser.ml[1294,48233+53])
                              Texp_constant Const_string("Reducing production grammar -> rules postlude",(lib/sentenceParser.ml[1294,48233+7]..lib/sentenceParser.ml[1294,48233+52]),None)
                            expression (lib/sentenceParser.ml[1295,48288+6]..lib/sentenceParser.ml[1295,48288+44])
                              Texp_constant Const_string("Reducing production list(NEWLINE) ->",(lib/sentenceParser.ml[1295,48288+7]..lib/sentenceParser.ml[1295,48288+43]),None)
                            expression (lib/sentenceParser.ml[1296,48334+6]..lib/sentenceParser.ml[1296,48334+66])
                              Texp_constant Const_string("Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)",(lib/sentenceParser.ml[1296,48334+7]..lib/sentenceParser.ml[1296,48334+65]),None)
                            expression (lib/sentenceParser.ml[1297,48402+6]..lib/sentenceParser.ml[1297,48402+61])
                              Texp_constant Const_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE",(lib/sentenceParser.ml[1297,48402+7]..lib/sentenceParser.ml[1297,48402+60]),None)
                            expression (lib/sentenceParser.ml[1298,48465+6]..lib/sentenceParser.ml[1298,48465+84])
                              Texp_constant Const_string("Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)",(lib/sentenceParser.ml[1298,48465+7]..lib/sentenceParser.ml[1298,48465+83]),None)
                            expression (lib/sentenceParser.ml[1299,48551+6]..lib/sentenceParser.ml[1299,48551+57])
                              Texp_constant Const_string("Reducing production postlude -> list(NEWLINE) EOF",(lib/sentenceParser.ml[1299,48551+7]..lib/sentenceParser.ml[1299,48551+56]),None)
                            expression (lib/sentenceParser.ml[1300,48610+6]..lib/sentenceParser.ml[1300,48610+46])
                              Texp_constant Const_string("Reducing production rhs -> alternation",(lib/sentenceParser.ml[1300,48610+7]..lib/sentenceParser.ml[1300,48610+45]),None)
                            expression (lib/sentenceParser.ml[1301,48658+6]..lib/sentenceParser.ml[1301,48658+59])
                              Texp_constant Const_string("Reducing production rule -> LID COLONCOLONEQUAL rhs",(lib/sentenceParser.ml[1301,48658+7]..lib/sentenceParser.ml[1301,48658+58]),None)
                            expression (lib/sentenceParser.ml[1302,48719+6]..lib/sentenceParser.ml[1302,48719+70])
                              Texp_constant Const_string("Reducing production rules -> rules nonempty_list(NEWLINE) rule",(lib/sentenceParser.ml[1302,48719+7]..lib/sentenceParser.ml[1302,48719+69]),None)
                            expression (lib/sentenceParser.ml[1303,48791+6]..lib/sentenceParser.ml[1303,48791+64])
                              Texp_constant Const_string("Reducing production rules -> nonempty_list(NEWLINE) rule",(lib/sentenceParser.ml[1303,48791+7]..lib/sentenceParser.ml[1303,48791+63]),None)
                            expression (lib/sentenceParser.ml[1304,48857+6]..lib/sentenceParser.ml[1304,48857+41])
                              Texp_constant Const_string("Reducing production rules -> rule",(lib/sentenceParser.ml[1304,48857+7]..lib/sentenceParser.ml[1304,48857+40]),None)
                            expression (lib/sentenceParser.ml[1305,48900+6]..lib/sentenceParser.ml[1305,48900+67])
                              Texp_constant Const_string("Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN",(lib/sentenceParser.ml[1305,48900+7]..lib/sentenceParser.ml[1305,48900+66]),None)
                            expression (lib/sentenceParser.ml[1306,48969+6]..lib/sentenceParser.ml[1306,48969+46])
                              Texp_constant Const_string("Reducing production term -> char_class",(lib/sentenceParser.ml[1306,48969+7]..lib/sentenceParser.ml[1306,48969+45]),None)
                            expression (lib/sentenceParser.ml[1307,49017+6]..lib/sentenceParser.ml[1307,49017+41])
                              Texp_constant Const_string("Reducing production term -> REGEX",(lib/sentenceParser.ml[1307,49017+7]..lib/sentenceParser.ml[1307,49017+40]),None)
                            expression (lib/sentenceParser.ml[1308,49060+6]..lib/sentenceParser.ml[1308,49060+39])
                              Texp_constant Const_string("Reducing production term -> QID",(lib/sentenceParser.ml[1308,49060+7]..lib/sentenceParser.ml[1308,49060+38]),None)
                            expression (lib/sentenceParser.ml[1309,49101+6]..lib/sentenceParser.ml[1309,49101+39])
                              Texp_constant Const_string("Reducing production term -> LID",(lib/sentenceParser.ml[1309,49101+7]..lib/sentenceParser.ml[1309,49101+38]),None)
                          ]
                      ]
                  ]
            ]
        ]
  structure_item (lib/sentenceParser.ml[1314,49158+0]..lib/sentenceParser.ml[1322,49324+3])
    Tstr_module
    MenhirInterpreter/2362
      module_expr (lib/sentenceParser.ml[1314,49158+27]..lib/sentenceParser.ml[1322,49324+3])
        Tmod_structure
        [
          structure_item (lib/sentenceParser.ml[1316,49195+2]..lib/sentenceParser.ml[1316,49195+65])
            Tstr_module
            ET/2206
              module_expr (lib/sentenceParser.ml[1316,49195+14]..lib/sentenceParser.ml[1316,49195+65])
                Tmod_apply
                module_expr (lib/sentenceParser.ml[1316,49195+14]..lib/sentenceParser.ml[1316,49195+56])
                  Tmod_ident "MenhirLib!.TableInterpreter.MakeEngineTable"
                module_expr (lib/sentenceParser.ml[1316,49195+58]..lib/sentenceParser.ml[1316,49195+64])
                  Tmod_ident "Tables/2117"
          structure_item (lib/sentenceParser.ml[1318,49264+2]..lib/sentenceParser.ml[1318,49264+40])
            Tstr_module
            TI/2324
              module_expr (lib/sentenceParser.ml[1318,49264+14]..lib/sentenceParser.ml[1318,49264+40])
                Tmod_apply
                module_expr (lib/sentenceParser.ml[1318,49264+14]..lib/sentenceParser.ml[1318,49264+35])
                  Tmod_ident "MenhirLib!.Engine.Make"
                module_expr (lib/sentenceParser.ml[1318,49264+37]..lib/sentenceParser.ml[1318,49264+39])
                  Tmod_ident "ET/2206"
          structure_item (lib/sentenceParser.ml[1320,49308+2]..lib/sentenceParser.ml[1320,49308+12])
            Tstr_include            module_expr (lib/sentenceParser.ml[1320,49308+10]..lib/sentenceParser.ml[1320,49308+12])
              Tmod_ident "TI/2324"
        ]
  structure_item (lib/sentenceParser.ml[1324,49329+0]..lib/sentenceParser.ml[1326,49365+91])
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1324,49329+4]..lib/sentenceParser.ml[1324,49329+11])
          Tpat_var "grammar/2363"
        expression (lib/sentenceParser.ml[1325,49343+2]..lib/sentenceParser.ml[1326,49365+91])
          Texp_function
          Nolabel
          [
            <case>
              pattern (lib/sentenceParser.ml[1325,49343+6]..lib/sentenceParser.ml[1325,49343+11])
                Tpat_var "lexer/2365"
              expression (lib/sentenceParser.ml[1325,49343+12]..lib/sentenceParser.ml[1326,49365+91]) ghost
                Texp_function
                Nolabel
                [
                  <case>
                    pattern (lib/sentenceParser.ml[1325,49343+12]..lib/sentenceParser.ml[1325,49343+18])
                      Tpat_var "lexbuf/2366"
                    expression (lib/sentenceParser.ml[1326,49365+5]..lib/sentenceParser.ml[1326,49365+63])
                      extra
                        Texp_constraint
                        core_type (lib/sentenceParser.ml[1326,49365+67]..lib/sentenceParser.ml[1326,49365+89])
                          Ttyp_constr "Gbnf_parser!.Syntax.partial_grammar"
                          []
                      Texp_apply
                      expression (lib/sentenceParser.ml[1326,49365+5]..lib/sentenceParser.ml[1326,49365+14])
                        Texp_ident "Stdlib!.Obj.magic"
                      [
                        <arg>
                          Nolabel
                          expression (lib/sentenceParser.ml[1326,49365+15]..lib/sentenceParser.ml[1326,49365+63])
                            Texp_apply
                            expression (lib/sentenceParser.ml[1326,49365+16]..lib/sentenceParser.ml[1326,49365+39])
                              Texp_ident "MenhirInterpreter/2362.entry"
                            [
                              <arg>
                                Nolabel
                                expression (lib/sentenceParser.ml[1326,49365+40]..lib/sentenceParser.ml[1326,49365+47])
                                  Texp_variant "Legacy"
                                  None
                              <arg>
                                Nolabel
                                expression (lib/sentenceParser.ml[1326,49365+48]..lib/sentenceParser.ml[1326,49365+49])
                                  Texp_constant Const_int 0
                              <arg>
                                Nolabel
                                expression (lib/sentenceParser.ml[1326,49365+50]..lib/sentenceParser.ml[1326,49365+55])
                                  Texp_ident "lexer/2365"
                              <arg>
                                Nolabel
                                expression (lib/sentenceParser.ml[1326,49365+56]..lib/sentenceParser.ml[1326,49365+62])
                                  Texp_ident "lexbuf/2366"
                            ]
                      ]
                ]
          ]
    ]
  structure_item (lib/sentenceParser.ml[1328,49458+0]..lib/sentenceParser.ml[1334,49655+3])
    Tstr_module
    Incremental/2443
      module_expr (lib/sentenceParser.ml[1328,49458+21]..lib/sentenceParser.ml[1334,49655+3])
        Tmod_structure
        [
          structure_item (lib/sentenceParser.ml[1330,49489+2]..lib/sentenceParser.ml[1332,49533+118])
            Tstr_value Nonrec
            [
              <def>
                pattern (lib/sentenceParser.ml[1330,49489+6]..lib/sentenceParser.ml[1330,49489+13])
                  Tpat_var "grammar/2367"
                expression (lib/sentenceParser.ml[1331,49505+4]..lib/sentenceParser.ml[1332,49533+118])
                  Texp_function
                  Nolabel
                  [
                    <case>
                      pattern (lib/sentenceParser.ml[1331,49505+8]..lib/sentenceParser.ml[1331,49505+24])
                        Tpat_var "initial_position/2368"
                      expression (lib/sentenceParser.ml[1332,49533+7]..lib/sentenceParser.ml[1332,49533+61])
                        extra
                          Texp_constraint
                          core_type (lib/sentenceParser.ml[1332,49533+64]..lib/sentenceParser.ml[1332,49533+117])
                            Ttyp_constr "MenhirInterpreter/2362.checkpoint"
                            [
                              core_type (lib/sentenceParser.ml[1332,49533+65]..lib/sentenceParser.ml[1332,49533+87])
                                Ttyp_constr "Gbnf_parser!.Syntax.partial_grammar"
                                []
                            ]
                        Texp_apply
                        expression (lib/sentenceParser.ml[1332,49533+7]..lib/sentenceParser.ml[1332,49533+16])
                          Texp_ident "Stdlib!.Obj.magic"
                        [
                          <arg>
                            Nolabel
                            expression (lib/sentenceParser.ml[1332,49533+17]..lib/sentenceParser.ml[1332,49533+61])
                              Texp_apply
                              expression (lib/sentenceParser.ml[1332,49533+18]..lib/sentenceParser.ml[1332,49533+41])
                                Texp_ident "MenhirInterpreter/2362.start"
                              [
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[1332,49533+42]..lib/sentenceParser.ml[1332,49533+43])
                                    Texp_constant Const_int 0
                                <arg>
                                  Nolabel
                                  expression (lib/sentenceParser.ml[1332,49533+44]..lib/sentenceParser.ml[1332,49533+60])
                                    Texp_ident "initial_position/2368"
                              ]
                        ]
                  ]
            ]
        ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
            Texp_ident "Ppx_inline_test_lib!.unset_lib"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
                Texp_constant Const_string("gbnf_parser",(lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost,None)
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
            Texp_ident "Expect_test_collector!.Current_file.unset"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
            Texp_ident "Ppx_bench_lib!.Benchmark_accumulator.Current_libname.unset"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
                Texp_construct "()"
                []
          ]
    ]
  structure_item (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
    Tstr_value Nonrec
    [
      <def>
        pattern (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Tpat_construct "()"
          []
          None
        expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
          Texp_apply
          expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
            Texp_ident "Ppx_module_timer_runtime!.record_until"
          [
            <arg>
              Nolabel
              expression (lib/sentenceParser.ml[1334,49655+3]..lib/sentenceParser.ml[1334,49655+3]) ghost
                Texp_ident "Ppx_module_timer_runtime!.__MODULE__"
          ]
    ]
]

{<Gbnf_parser__SentenceParser>
 "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
 "Incremental"[module] ->
   {<Gbnf_parser__SentenceParser.503>
    "grammar"[value] -> <Gbnf_parser__SentenceParser.501>;
    };
 "MenhirInterpreter"[module] ->
   {<Gbnf_parser__SentenceParser.497>
    "acceptable"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "acceptable"[value];
    "checkpoint"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "checkpoint"[type];
    "current_state_number"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "current_state_number"[value];
    "element"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "element"[type];
    "env"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "env"[type];
    "env_has_default_reduction"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "env_has_default_reduction"[value];
    "equal"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "equal"[value];
    "find_production"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "find_production"[value];
    "force_reduction"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "force_reduction"[value];
    "get"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "get"[value];
    "input_needed"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "input_needed"[value];
    "lexer_lexbuf_to_supplier"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "lexer_lexbuf_to_supplier"[value];
    "loop"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "loop"[value];
    "loop_handle"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "loop_handle"[value];
    "loop_handle_undo"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "loop_handle_undo"[value];
    "lr1state"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "lr1state"[type];
    "number"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "number"[value];
    "offer"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "offer"[value];
    "pop"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "pop"[value];
    "pop_many"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "pop_many"[value];
    "positions"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "positions"[value];
    "production"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "production"[type];
    "production_index"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "production_index"[value];
    "resume"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "resume"[value];
    "shifts"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "shifts"[value];
    "stack"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "stack"[value];
    "stack"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "stack"[type];
    "state_has_default_reduction"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "state_has_default_reduction"[value];
    "strategy"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "strategy"[type];
    "supplier"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "supplier"[type];
    "token"[type] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "token"[type];
    "top"[value] ->
      CU MenhirLib . "Engine"[module] . "Make"[module](
      CU MenhirLib . "TableInterpreter"[module] . "MakeEngineTable"[module](
      {<Gbnf_parser__SentenceParser.494>
       "Error"[extension constructor] -> <Gbnf_parser__SentenceParser.0>;
       "_eRR"[value] -> <Gbnf_parser__SentenceParser.1>;
       "action"[value] -> <Gbnf_parser__SentenceParser.26>;
       "default_reduction"[value] -> <Gbnf_parser__SentenceParser.23>;
       "error"[value] -> <Gbnf_parser__SentenceParser.24>;
       "error_terminal"[value] -> <Gbnf_parser__SentenceParser.21>;
       "goto"[value] -> <Gbnf_parser__SentenceParser.28>;
       "lhs"[value] -> <Gbnf_parser__SentenceParser.27>;
       "semantic_action"[value] -> <Gbnf_parser__SentenceParser.29>;
       "start"[value] -> <Gbnf_parser__SentenceParser.25>;
       "token"[type] -> <Gbnf_parser__SentenceParser.3>;
       "token2terminal"[value] -> <Gbnf_parser__SentenceParser.20>;
       "token2value"[value] -> <Gbnf_parser__SentenceParser.22>;
       "trace"[value] -> <Gbnf_parser__SentenceParser.30>;
       })<Gbnf_parser__SentenceParser.495>)<Gbnf_parser__SentenceParser.496>
      . "top"[value];
    };
 "grammar"[value] -> <Gbnf_parser__SentenceParser.498>;
 "token"[type] -> <Gbnf_parser__SentenceParser.3>;
 }

(seq
  (let
    (*match*/3462 =
       (apply (field_imm 3 (global Ppx_module_timer_runtime!))
         #"Gbnf_parser__SentenceParser"))
    0)
  (let
    (*match*/3464 =
       (apply
         (field_imm 0
           (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
         "gbnf_parser"))
    0)
  (let
    (*match*/3466 =
       (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
         "lib/sentenceParser.ml"))
    0)
  (let
    (*match*/3468 =
       (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
         "sentenceParser.ml"))
    0)
  (let (*match*/3470 = (field_imm 0 (field_imm 16 (global MenhirLib!)))) 0)
  (let
    (Error/1150 =
       (makeblock 248 "Gbnf_parser.SentenceParser.MenhirBasics.Error"
         (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 7 (global Gbnf_parser__SentenceParser!)
      Error/1150))
  (let
    (_eRR/1151 =
       (function _s/1153
         (raise (field_imm 7 (global Gbnf_parser__SentenceParser!)))))
    (setfield_ptr(root-init) 8 (global Gbnf_parser__SentenceParser!)
      _eRR/1151))
  0
  (let
    (MenhirBasics/1240 =
       (makeblock 0 (field_imm 7 (global Gbnf_parser__SentenceParser!))
         (field_imm 8 (global Gbnf_parser__SentenceParser!))))
    (seq
      (setfield_ptr(root-init) 4 (global Gbnf_parser__SentenceParser!)
        MenhirBasics/1240)
      (let
        (include/3471 = (field_imm 4 (global Gbnf_parser__SentenceParser!))
         Error/1241 =a (field_mut 0 include/3471))
        (seq
          (setfield_ptr(root-init) 0 (global Gbnf_parser__SentenceParser!)
            Error/1241)
          (let (_eRR/1242 =a (field_mut 1 include/3471))
            (seq
              (setfield_ptr(root-init) 5
                (global Gbnf_parser__SentenceParser!) _eRR/1242)
              (let
                (include/3472 =
                   (field_imm 4 (global Gbnf_parser__SentenceParser!))
                 Error/1281 =a (field_mut 0 include/3472))
                (seq
                  (setfield_ptr(root-init) 9
                    (global Gbnf_parser__SentenceParser!) Error/1281)
                  (let (_eRR/1282 =a (field_mut 1 include/3472))
                    (seq
                      (setfield_ptr(root-init) 10
                        (global Gbnf_parser__SentenceParser!) _eRR/1282)
                      (let
                        (token2terminal/1284 =
                           (function _tok/1336 : int
                             (switch* _tok/1336
                              case int 0: 2
                              case int 1: 3
                              case int 2: 5
                              case int 3: 7
                              case int 4: 8
                              case int 5: 9
                              case int 6: 11
                              case int 7: 12
                              case int 8: 13
                              case int 9: 14
                              case int 10: 15
                              case tag 0:
                               (let (*match*/3476 =a (field_imm 0 _tok/1336))
                                 1)
                              case tag 1:
                               (let (*match*/3475 =a (field_imm 0 _tok/1336))
                                 4)
                              case tag 2:
                               (let (*match*/3474 =a (field_imm 0 _tok/1336))
                                 6)
                              case tag 3:
                               (let (*match*/3473 =a (field_imm 0 _tok/1336))
                                 10)))
                         error_terminal/1285 =[int] 0
                         token2value/1327 =
                           (function _tok/1361
                             (if (isint _tok/1361) 0
                               (let (_v/1365 =a (field_imm 0 _tok/1361))
                                 _v/1365)))
                         default_reduction/1328 =
                           [0:
                            8
                            "\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001"]
                         error/1329 =
                           [0:
                            16
                            "\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000"]
                         start/1330 =[int] 1
                         action/1331 =
                           [0:
                            [0:
                             8
                             "p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000"]
                            [0:
                             8
                             "\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z"]]
                         lhs/1332 =
                           [0:
                            4 "\r\220\203\187\170\153\153\135veC\"!\017\017"]
                         goto/1333 =
                           [0:
                            [0:
                             8
                             "\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000"]
                            [0:
                             8
                             "\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029"]]
                         semantic_action/1334 =
                           (makearray[addr]
                             (function _menhir_env/1407
                               (let
                                 (_menhir_stack/1408 =
                                    (field_imm 2 _menhir_env/1407)
                                  _4/1416 =a (field_imm 1 _menhir_stack/1408)
                                  _4/1430 =a _4/1416
                                  *match*/3504 =a
                                    (field_imm 4 _menhir_stack/1408)
                                  _3/1419 =a (field_imm 1 *match*/3504)
                                  _3/1468 =a _3/1419
                                  *match*/3506 =a (field_imm 4 *match*/3504)
                                  _2/1422 =a (field_imm 1 *match*/3506)
                                  _2/1469 =a[int] _2/1422
                                  *match*/3508 =a (field_imm 4 *match*/3506)
                                  _1/1426 =a (field_imm 1 *match*/3508)
                                  _1/1470 =a _1/1426
                                  _menhir_stack/1429 =a
                                    (field_imm 4 *match*/3508)
                                  _endpos__1_/1428 =a
                                    (field_imm 3 *match*/3508)
                                  _startpos__1_/1427 =a
                                    (field_imm 2 *match*/3508)
                                  _menhir_s/1425 =a
                                    (field_imm 0 *match*/3508)
                                  _endpos__2_/1424 =a
                                    (field_imm 3 *match*/3506)
                                  _startpos__2_/1423 =a
                                    (field_imm 2 *match*/3506)
                                  *match*/3507 =a (field_imm 0 *match*/3506)
                                  _endpos__3_/1421 =a
                                    (field_imm 3 *match*/3504)
                                  _startpos__3_/1420 =a
                                    (field_imm 2 *match*/3504)
                                  *match*/3505 =a (field_imm 0 *match*/3504)
                                  _endpos__4_/1418 =a
                                    (field_imm 3 _menhir_stack/1408)
                                  _startpos__4_/1417 =a
                                    (field_imm 2 _menhir_stack/1408)
                                  *match*/3503 =a
                                    (field_imm 0 _menhir_stack/1408)
                                  _endpos__0_/1471 =
                                    (field_imm 3 _menhir_stack/1429)
                                  _startpos/1472 = _startpos__1_/1427
                                  _endpos/1473 = _endpos__4_/1418
                                  _v/1474 = (makeblock 2 _1/1470))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1425
                                   _v/1474 _startpos/1472 _endpos/1473
                                   _menhir_stack/1429)))
                             (function _menhir_env/1499
                               (let
                                 (_menhir_stack/1500 =
                                    (field_imm 2 _menhir_env/1499)
                                  _1/1502 =a (field_imm 1 _menhir_stack/1500)
                                  _1/1506 =a _1/1502
                                  _menhir_stack/1505 =a
                                    (field_imm 4 _menhir_stack/1500)
                                  _endpos__1_/1504 =a
                                    (field_imm 3 _menhir_stack/1500)
                                  _startpos__1_/1503 =a
                                    (field_imm 2 _menhir_stack/1500)
                                  _menhir_s/1501 =a
                                    (field_imm 0 _menhir_stack/1500)
                                  _endpos__0_/1507 =
                                    (field_imm 3 _menhir_stack/1505)
                                  _startpos/1508 = _startpos__1_/1503
                                  _endpos/1509 = _endpos__1_/1504
                                  _v/1510 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:alt" _1/1506)))
                                      (makeblock 2 _1/1506)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1501
                                   _v/1510 _startpos/1508 _endpos/1509
                                   _menhir_stack/1505)))
                             (function _menhir_env/1696
                               (let
                                 (_menhir_stack/1697 =
                                    (field_imm 2 _menhir_env/1696)
                                  _2/1698 =a (field_imm 1 _menhir_stack/1697)
                                  _2/1706 =a _2/1698
                                  *match*/3532 =a
                                    (field_imm 4 _menhir_stack/1697)
                                  _1/1702 =a (field_imm 1 *match*/3532)
                                  _1/1707 =a[int] _1/1702
                                  _menhir_stack/1705 =a
                                    (field_imm 4 *match*/3532)
                                  _endpos__1_/1704 =a
                                    (field_imm 3 *match*/3532)
                                  _startpos__1_/1703 =a
                                    (field_imm 2 *match*/3532)
                                  _menhir_s/1701 =a
                                    (field_imm 0 *match*/3532)
                                  _endpos__2_/1700 =a
                                    (field_imm 3 _menhir_stack/1697)
                                  _startpos__2_/1699 =a
                                    (field_imm 2 _menhir_stack/1697)
                                  *match*/3531 =a
                                    (field_imm 0 _menhir_stack/1697)
                                  _endpos__0_/1708 =
                                    (field_imm 3 _menhir_stack/1705)
                                  _startpos/1709 = _startpos__1_/1703
                                  _endpos/1710 = _endpos__2_/1700
                                  _v/1711 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:ccrs" _2/1706)))
                                      (makeblock 2 _2/1706)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1701
                                   _v/1711 _startpos/1709 _endpos/1710
                                   _menhir_stack/1705)))
                             (function _menhir_env/1712
                               (let
                                 (_menhir_stack/1713 =
                                    (field_imm 2 _menhir_env/1712)
                                  _1/1715 =a (field_imm 1 _menhir_stack/1713)
                                  _1/1719 =a _1/1715
                                  _menhir_stack/1718 =a
                                    (field_imm 4 _menhir_stack/1713)
                                  _endpos__1_/1717 =a
                                    (field_imm 3 _menhir_stack/1713)
                                  _startpos__1_/1716 =a
                                    (field_imm 2 _menhir_stack/1713)
                                  _menhir_s/1714 =a
                                    (field_imm 0 _menhir_stack/1713)
                                  _endpos__0_/1720 =
                                    (field_imm 3 _menhir_stack/1718)
                                  _startpos/1721 = _startpos__1_/1716
                                  _endpos/1722 = _endpos__1_/1717
                                  _v/1723 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:cc2rs" _1/1719)))
                                      3))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1714
                                   _v/1723 _startpos/1721 _endpos/1722
                                   _menhir_stack/1718)))
                             (function _menhir_env/1724
                               (let
                                 (_menhir_stack/1725 =
                                    (field_imm 2 _menhir_env/1724)
                                  _3/1726 =a (field_imm 1 _menhir_stack/1725)
                                  _3/1737 =a[int] _3/1726
                                  *match*/3562 =a
                                    (field_imm 4 _menhir_stack/1725)
                                  _2/1729 =a (field_imm 1 *match*/3562)
                                  _2/1738 =a[int] _2/1729
                                  *match*/3564 =a (field_imm 4 *match*/3562)
                                  _1/1733 =a (field_imm 1 *match*/3564)
                                  _1/1739 =a[int] _1/1733
                                  _menhir_stack/1736 =a
                                    (field_imm 4 *match*/3564)
                                  _endpos__1_/1735 =a
                                    (field_imm 3 *match*/3564)
                                  _startpos__1_/1734 =a
                                    (field_imm 2 *match*/3564)
                                  _menhir_s/1732 =a
                                    (field_imm 0 *match*/3564)
                                  _endpos__2_/1731 =a
                                    (field_imm 3 *match*/3562)
                                  _startpos__2_/1730 =a
                                    (field_imm 2 *match*/3562)
                                  *match*/3563 =a (field_imm 0 *match*/3562)
                                  _endpos__3_/1728 =a
                                    (field_imm 3 _menhir_stack/1725)
                                  _startpos__3_/1727 =a
                                    (field_imm 2 _menhir_stack/1725)
                                  *match*/3561 =a
                                    (field_imm 0 _menhir_stack/1725)
                                  _endpos__0_/1740 =
                                    (field_imm 3 _menhir_stack/1736)
                                  _startpos/1741 = _startpos__1_/1734
                                  _endpos/1742 = _endpos__3_/1728
                                  _v/1743 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 (*,int,int)
                                            "DEBUG:cc3rs" _1/1739 _2/1738)))
                                      (makeblock 3 (int) _1/1739)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1732
                                   _v/1743 _startpos/1741 _endpos/1742
                                   _menhir_stack/1736)))
                             (function _menhir_env/1744
                               (let
                                 (_menhir_stack/1745 =
                                    (field_imm 2 _menhir_env/1744)
                                  _2/1746 =a (field_imm 1 _menhir_stack/1745)
                                  _2/1754 =a[int] _2/1746
                                  *match*/3580 =a
                                    (field_imm 4 _menhir_stack/1745)
                                  _1/1750 =a (field_imm 1 *match*/3580)
                                  _1/1755 =a _1/1750
                                  _menhir_stack/1753 =a
                                    (field_imm 4 *match*/3580)
                                  _endpos__1_/1752 =a
                                    (field_imm 3 *match*/3580)
                                  _startpos__1_/1751 =a
                                    (field_imm 2 *match*/3580)
                                  _menhir_s/1749 =a
                                    (field_imm 0 *match*/3580)
                                  _endpos__2_/1748 =a
                                    (field_imm 3 _menhir_stack/1745)
                                  _startpos__2_/1747 =a
                                    (field_imm 2 _menhir_stack/1745)
                                  *match*/3579 =a
                                    (field_imm 0 _menhir_stack/1745)
                                  _endpos__0_/1756 =
                                    (field_imm 3 _menhir_stack/1753)
                                  _startpos/1757 = _startpos__1_/1751
                                  _endpos/1758 = _endpos__2_/1748
                                  _v/1759 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:cc4rs" _1/1755)))
                                      (makeblock 2 _1/1755)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1749
                                   _v/1759 _startpos/1757 _endpos/1758
                                   _menhir_stack/1753)))
                             (function _menhir_env/1760
                               (let
                                 (_menhir_stack/1761 =
                                    (field_imm 2 _menhir_env/1760)
                                  _1/1763 =a (field_imm 1 _menhir_stack/1761)
                                  _1/1767 =a[int] _1/1763
                                  _menhir_stack/1766 =a
                                    (field_imm 4 _menhir_stack/1761)
                                  _endpos__1_/1765 =a
                                    (field_imm 3 _menhir_stack/1761)
                                  _startpos__1_/1764 =a
                                    (field_imm 2 _menhir_stack/1761)
                                  _menhir_s/1762 =a
                                    (field_imm 0 _menhir_stack/1761)
                                  _endpos__0_/1768 =
                                    (field_imm 3 _menhir_stack/1766)
                                  _startpos/1769 = _startpos__1_/1764
                                  _endpos/1770 = _endpos__1_/1765
                                  _v/1771 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 (*,int) "DEBUG:cc5rs"
                                            _1/1767)))
                                      (makeblock 3 (int) _1/1767)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1762
                                   _v/1771 _startpos/1769 _endpos/1770
                                   _menhir_stack/1766)))
                             (function _menhir_env/1772
                               (let
                                 (_menhir_stack/1773 =
                                    (field_imm 2 _menhir_env/1772)
                                  _2/1774 =a (field_imm 1 _menhir_stack/1773)
                                  _2/1782 =a _2/1774
                                  *match*/3604 =a
                                    (field_imm 4 _menhir_stack/1773)
                                  _1/1778 =a (field_imm 1 *match*/3604)
                                  _1/1783 =a _1/1778
                                  _menhir_stack/1781 =a
                                    (field_imm 4 *match*/3604)
                                  _endpos__1_/1780 =a
                                    (field_imm 3 *match*/3604)
                                  _startpos__1_/1779 =a
                                    (field_imm 2 *match*/3604)
                                  _menhir_s/1777 =a
                                    (field_imm 0 *match*/3604)
                                  _endpos__2_/1776 =a
                                    (field_imm 3 _menhir_stack/1773)
                                  _startpos__2_/1775 =a
                                    (field_imm 2 _menhir_stack/1773)
                                  *match*/3603 =a
                                    (field_imm 0 _menhir_stack/1773)
                                  _endpos__0_/1784 =
                                    (field_imm 3 _menhir_stack/1781)
                                  _startpos/1785 = _startpos__1_/1779
                                  _endpos/1786 = _endpos__2_/1776
                                  _v/1787 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:concat1"
                                            _1/1783)))
                                      (makeblock 2 _1/1783)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1777
                                   _v/1787 _startpos/1785 _endpos/1786
                                   _menhir_stack/1781)))
                             (function _menhir_env/1788
                               (let
                                 (_menhir_stack/1789 =
                                    (field_imm 2 _menhir_env/1788)
                                  _1/1791 =a (field_imm 1 _menhir_stack/1789)
                                  _1/1795 =a _1/1791
                                  _menhir_stack/1794 =a
                                    (field_imm 4 _menhir_stack/1789)
                                  _endpos__1_/1793 =a
                                    (field_imm 3 _menhir_stack/1789)
                                  _startpos__1_/1792 =a
                                    (field_imm 2 _menhir_stack/1789)
                                  _menhir_s/1790 =a
                                    (field_imm 0 _menhir_stack/1789)
                                  _endpos__0_/1796 =
                                    (field_imm 3 _menhir_stack/1794)
                                  _startpos/1797 = _startpos__1_/1792
                                  _endpos/1798 = _endpos__1_/1793
                                  _v/1799 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:concat2"
                                            _1/1795)))
                                      (makeblock 2 _1/1795)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1790
                                   _v/1799 _startpos/1797 _endpos/1798
                                   _menhir_stack/1794)))
                             (function _menhir_env/1800
                               (let
                                 (_menhir_stack/1801 =
                                    (field_imm 2 _menhir_env/1800)
                                  _1_inlined1/1802 =a
                                    (field_imm 1 _menhir_stack/1801)
                                  _1_inlined1/1810 =a[int] _1_inlined1/1802
                                  *match*/3627 =a
                                    (field_imm 4 _menhir_stack/1801)
                                  _1/1806 =a (field_imm 1 *match*/3627)
                                  _1/1811 =a _1/1806
                                  _menhir_stack/1809 =a
                                    (field_imm 4 *match*/3627)
                                  _endpos__1_/1808 =a
                                    (field_imm 3 *match*/3627)
                                  _startpos__1_/1807 =a
                                    (field_imm 2 *match*/3627)
                                  _menhir_s/1805 =a
                                    (field_imm 0 *match*/3627)
                                  _endpos__1_inlined1_/1804 =a
                                    (field_imm 3 _menhir_stack/1801)
                                  _startpos__1_inlined1_/1803 =a
                                    (field_imm 2 _menhir_stack/1801)
                                  *match*/3626 =a
                                    (field_imm 0 _menhir_stack/1801)
                                  _endpos__0_/1812 =
                                    (field_imm 3 _menhir_stack/1809)
                                  _startpos/1813 = _startpos__1_/1807
                                  _endpos/1814 = _endpos__1_inlined1_/1804
                                  _v/1815 =
                                    (let
                                      (_2/1816 =
                                         (let
                                           (_1/1817 =[int] _1_inlined1/1810
                                            _1/1818 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0 (*,int)
                                                      "DEBUG:plus" _1/1817)))
                                                2))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0 "DEBUG:mod"
                                                   _1/1818)))
                                             (makeblock 2 _1/1818)))
                                       _1/1819 =
                                         (seq
                                           (apply
                                             (field_imm 45 (global Stdlib!))
                                             (apply
                                               (field_imm 6
                                                 (global Batteries!))
                                               (makeblock 0
                                                 "DEBUG:termfactor" _1/1811)))
                                           (makeblock 2 _1/1811)))
                                      (makeblock 2 _1/1819)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1805
                                   _v/1815 _startpos/1813 _endpos/1814
                                   _menhir_stack/1809)))
                             (function _menhir_env/1820
                               (let
                                 (_menhir_stack/1821 =
                                    (field_imm 2 _menhir_env/1820)
                                  _1_inlined1/1822 =a
                                    (field_imm 1 _menhir_stack/1821)
                                  _1_inlined1/1830 =a[int] _1_inlined1/1822
                                  *match*/3642 =a
                                    (field_imm 4 _menhir_stack/1821)
                                  _1/1826 =a (field_imm 1 *match*/3642)
                                  _1/1831 =a _1/1826
                                  _menhir_stack/1829 =a
                                    (field_imm 4 *match*/3642)
                                  _endpos__1_/1828 =a
                                    (field_imm 3 *match*/3642)
                                  _startpos__1_/1827 =a
                                    (field_imm 2 *match*/3642)
                                  _menhir_s/1825 =a
                                    (field_imm 0 *match*/3642)
                                  _endpos__1_inlined1_/1824 =a
                                    (field_imm 3 _menhir_stack/1821)
                                  _startpos__1_inlined1_/1823 =a
                                    (field_imm 2 _menhir_stack/1821)
                                  *match*/3641 =a
                                    (field_imm 0 _menhir_stack/1821)
                                  _endpos__0_/1832 =
                                    (field_imm 3 _menhir_stack/1829)
                                  _startpos/1833 = _startpos__1_/1827
                                  _endpos/1834 = _endpos__1_inlined1_/1824
                                  _v/1835 =
                                    (let
                                      (_2/1836 =
                                         (let
                                           (_1/1837 =[int] _1_inlined1/1830
                                            _1/1838 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0 (*,int)
                                                      "DEBUG:quest" _1/1837)))
                                                1))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0 "DEBUG:quest"
                                                   _1/1838)))
                                             (makeblock 2 _1/1838)))
                                       _1/1839 =
                                         (seq
                                           (apply
                                             (field_imm 45 (global Stdlib!))
                                             (apply
                                               (field_imm 6
                                                 (global Batteries!))
                                               (makeblock 0
                                                 "DEBUG:termfactor" _1/1831)))
                                           (makeblock 2 _1/1831)))
                                      (makeblock 2 _1/1839)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1825
                                   _v/1835 _startpos/1833 _endpos/1834
                                   _menhir_stack/1829)))
                             (function _menhir_env/1840
                               (let
                                 (_menhir_stack/1841 =
                                    (field_imm 2 _menhir_env/1840)
                                  _1_inlined1/1842 =a
                                    (field_imm 1 _menhir_stack/1841)
                                  _1_inlined1/1850 =a[int] _1_inlined1/1842
                                  *match*/3657 =a
                                    (field_imm 4 _menhir_stack/1841)
                                  _1/1846 =a (field_imm 1 *match*/3657)
                                  _1/1851 =a _1/1846
                                  _menhir_stack/1849 =a
                                    (field_imm 4 *match*/3657)
                                  _endpos__1_/1848 =a
                                    (field_imm 3 *match*/3657)
                                  _startpos__1_/1847 =a
                                    (field_imm 2 *match*/3657)
                                  _menhir_s/1845 =a
                                    (field_imm 0 *match*/3657)
                                  _endpos__1_inlined1_/1844 =a
                                    (field_imm 3 _menhir_stack/1841)
                                  _startpos__1_inlined1_/1843 =a
                                    (field_imm 2 _menhir_stack/1841)
                                  *match*/3656 =a
                                    (field_imm 0 _menhir_stack/1841)
                                  _endpos__0_/1852 =
                                    (field_imm 3 _menhir_stack/1849)
                                  _startpos/1853 = _startpos__1_/1847
                                  _endpos/1854 = _endpos__1_inlined1_/1844
                                  _v/1855 =
                                    (let
                                      (_2/1856 =
                                         (let (_1/1857 = 0)
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0 "DEBUG:star"
                                                   _1/1857)))
                                             (makeblock 2 _1/1857)))
                                       _1/1858 =
                                         (seq
                                           (apply
                                             (field_imm 45 (global Stdlib!))
                                             (apply
                                               (field_imm 6
                                                 (global Batteries!))
                                               (makeblock 0
                                                 "DEBUG:termfactor" _1/1851)))
                                           (makeblock 2 _1/1851)))
                                      (makeblock 2 _1/1858)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1845
                                   _v/1855 _startpos/1853 _endpos/1854
                                   _menhir_stack/1849)))
                             (function _menhir_env/1859
                               (let
                                 (_menhir_stack/1860 =
                                    (field_imm 2 _menhir_env/1859)
                                  _1/1862 =a (field_imm 1 _menhir_stack/1860)
                                  _1/1866 =a _1/1862
                                  _menhir_stack/1865 =a
                                    (field_imm 4 _menhir_stack/1860)
                                  _endpos__1_/1864 =a
                                    (field_imm 3 _menhir_stack/1860)
                                  _startpos__1_/1863 =a
                                    (field_imm 2 _menhir_stack/1860)
                                  _menhir_s/1861 =a
                                    (field_imm 0 _menhir_stack/1860)
                                  _endpos__0_/1867 =
                                    (field_imm 3 _menhir_stack/1865)
                                  _startpos/1868 = _startpos__1_/1863
                                  _endpos/1869 = _endpos__1_/1864
                                  _v/1870 =
                                    (let
                                      (_1/1871 =
                                         (seq
                                           (apply
                                             (field_imm 45 (global Stdlib!))
                                             (apply
                                               (field_imm 6
                                                 (global Batteries!))
                                               (makeblock 0
                                                 "DEBUG:termfactor" _1/1866)))
                                           (makeblock 2 _1/1866)))
                                      (makeblock 2 _1/1871)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1861
                                   _v/1870 _startpos/1868 _endpos/1869
                                   _menhir_stack/1865)))
                             (function _menhir_env/1872
                               (let
                                 (_menhir_stack/1873 =
                                    (field_imm 2 _menhir_env/1872)
                                  _2/1874 =a (field_imm 1 _menhir_stack/1873)
                                  _2/1882 =a[int] _2/1874
                                  *match*/3681 =a
                                    (field_imm 4 _menhir_stack/1873)
                                  rs/1878 =a (field_imm 1 *match*/3681)
                                  rs/1883 =a rs/1878
                                  _menhir_stack/1881 =a
                                    (field_imm 4 *match*/3681)
                                  _endpos_rs_/1880 =a
                                    (field_imm 3 *match*/3681)
                                  _startpos_rs_/1879 =a
                                    (field_imm 2 *match*/3681)
                                  _menhir_s/1877 =a
                                    (field_imm 0 *match*/3681)
                                  _endpos__2_/1876 =a
                                    (field_imm 3 _menhir_stack/1873)
                                  _startpos__2_/1875 =a
                                    (field_imm 2 _menhir_stack/1873)
                                  *match*/3680 =a
                                    (field_imm 0 _menhir_stack/1873)
                                  _endpos__0_/1884 =
                                    (field_imm 3 _menhir_stack/1881)
                                  _startpos/1885 = _startpos_rs_/1879
                                  _endpos/1886 = _endpos__2_/1876
                                  _v/1887 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 (*,*,int)
                                            "DEBUG:grammar" rs/1883 _2/1882)))
                                      [0: "" 0]))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1877
                                   _v/1887 _startpos/1885 _endpos/1886
                                   _menhir_stack/1881)))
                             (function _menhir_env/1888
                               (let
                                 (_menhir_stack/1889 =
                                    (field_imm 2 _menhir_env/1888)
                                  _menhir_s/1890 =[int]
                                    (field_int 3 _menhir_env/1888)
                                  _endpos__0_/1891 =
                                    (field_imm 3 _menhir_stack/1889)
                                  _startpos/1892 =
                                    (field_imm 3 _menhir_stack/1889)
                                  _endpos/1893 = _startpos/1892
                                  _v/1894 = 0)
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1890
                                   _v/1894 _startpos/1892 _endpos/1893
                                   _menhir_stack/1889)))
                             (function _menhir_env/1895
                               (let
                                 (_menhir_stack/1896 =
                                    (field_imm 2 _menhir_env/1895)
                                  xs/1897 =a (field_imm 1 _menhir_stack/1896)
                                  xs/1905 =a xs/1897
                                  *match*/3699 =a
                                    (field_imm 4 _menhir_stack/1896)
                                  x/1901 =a (field_imm 1 *match*/3699)
                                  x/1906 =a[int] x/1901
                                  _menhir_stack/1904 =a
                                    (field_imm 4 *match*/3699)
                                  _endpos_x_/1903 =a
                                    (field_imm 3 *match*/3699)
                                  _startpos_x_/1902 =a
                                    (field_imm 2 *match*/3699)
                                  _menhir_s/1900 =a
                                    (field_imm 0 *match*/3699)
                                  _endpos_xs_/1899 =a
                                    (field_imm 3 _menhir_stack/1896)
                                  _startpos_xs_/1898 =a
                                    (field_imm 2 _menhir_stack/1896)
                                  *match*/3698 =a
                                    (field_imm 0 _menhir_stack/1896)
                                  _endpos__0_/1907 =
                                    (field_imm 3 _menhir_stack/1904)
                                  _startpos/1908 = _startpos_x_/1902
                                  _endpos/1909 = _endpos_xs_/1899
                                  _v/1910 =
                                    (makeblock 0 (int,*) x/1906 xs/1905))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1900
                                   _v/1910 _startpos/1908 _endpos/1909
                                   _menhir_stack/1904)))
                             (function _menhir_env/1911
                               (let
                                 (_menhir_stack/1912 =
                                    (field_imm 2 _menhir_env/1911)
                                  x/1914 =a (field_imm 1 _menhir_stack/1912)
                                  x/1918 =a[int] x/1914
                                  _menhir_stack/1917 =a
                                    (field_imm 4 _menhir_stack/1912)
                                  _endpos_x_/1916 =a
                                    (field_imm 3 _menhir_stack/1912)
                                  _startpos_x_/1915 =a
                                    (field_imm 2 _menhir_stack/1912)
                                  _menhir_s/1913 =a
                                    (field_imm 0 _menhir_stack/1912)
                                  _endpos__0_/1919 =
                                    (field_imm 3 _menhir_stack/1917)
                                  _startpos/1920 = _startpos_x_/1915
                                  _endpos/1921 = _endpos_x_/1916
                                  _v/1922 = (makeblock 0 (int,*) x/1918 0))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1913
                                   _v/1922 _startpos/1920 _endpos/1921
                                   _menhir_stack/1917)))
                             (function _menhir_env/1923
                               (let
                                 (_menhir_stack/1924 =
                                    (field_imm 2 _menhir_env/1923)
                                  xs/1925 =a (field_imm 1 _menhir_stack/1924)
                                  xs/1933 =a xs/1925
                                  *match*/3723 =a
                                    (field_imm 4 _menhir_stack/1924)
                                  x/1929 =a (field_imm 1 *match*/3723)
                                  x/1934 =a[int] x/1929
                                  _menhir_stack/1932 =a
                                    (field_imm 4 *match*/3723)
                                  _endpos_x_/1931 =a
                                    (field_imm 3 *match*/3723)
                                  _startpos_x_/1930 =a
                                    (field_imm 2 *match*/3723)
                                  _menhir_s/1928 =a
                                    (field_imm 0 *match*/3723)
                                  _endpos_xs_/1927 =a
                                    (field_imm 3 _menhir_stack/1924)
                                  _startpos_xs_/1926 =a
                                    (field_imm 2 _menhir_stack/1924)
                                  *match*/3722 =a
                                    (field_imm 0 _menhir_stack/1924)
                                  _endpos__0_/1935 =
                                    (field_imm 3 _menhir_stack/1932)
                                  _startpos/1936 = _startpos_x_/1930
                                  _endpos/1937 = _endpos_xs_/1927
                                  _v/1938 =
                                    (makeblock 0 (int,*) x/1934 xs/1933))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1928
                                   _v/1938 _startpos/1936 _endpos/1937
                                   _menhir_stack/1932)))
                             (function _menhir_env/1939
                               (let
                                 (_menhir_stack/1940 =
                                    (field_imm 2 _menhir_env/1939)
                                  _2/1941 =a (field_imm 1 _menhir_stack/1940)
                                  _2/1949 =a[int] _2/1941
                                  *match*/3739 =a
                                    (field_imm 4 _menhir_stack/1940)
                                  _1/1945 =a (field_imm 1 *match*/3739)
                                  _1/1950 =a _1/1945
                                  _menhir_stack/1948 =a
                                    (field_imm 4 *match*/3739)
                                  _endpos__1_/1947 =a
                                    (field_imm 3 *match*/3739)
                                  _startpos__1_/1946 =a
                                    (field_imm 2 *match*/3739)
                                  _menhir_s/1944 =a
                                    (field_imm 0 *match*/3739)
                                  _endpos__2_/1943 =a
                                    (field_imm 3 _menhir_stack/1940)
                                  _startpos__2_/1942 =a
                                    (field_imm 2 _menhir_stack/1940)
                                  *match*/3738 =a
                                    (field_imm 0 _menhir_stack/1940)
                                  _endpos__0_/1951 =
                                    (field_imm 3 _menhir_stack/1948)
                                  _startpos/1952 = _startpos__1_/1946
                                  _endpos/1953 = _endpos__2_/1943
                                  _v/1954 =
                                    (apply (field_imm 45 (global Stdlib!))
                                      (apply
                                        (field_imm 6 (global Batteries!))
                                        "DEBUG:DONE")))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1944
                                   _v/1954 _startpos/1952 _endpos/1953
                                   _menhir_stack/1948)))
                             (function _menhir_env/1955
                               (let
                                 (_menhir_stack/1956 =
                                    (field_imm 2 _menhir_env/1955)
                                  _1/1958 =a (field_imm 1 _menhir_stack/1956)
                                  _1/1962 =a _1/1958
                                  _menhir_stack/1961 =a
                                    (field_imm 4 _menhir_stack/1956)
                                  _endpos__1_/1960 =a
                                    (field_imm 3 _menhir_stack/1956)
                                  _startpos__1_/1959 =a
                                    (field_imm 2 _menhir_stack/1956)
                                  _menhir_s/1957 =a
                                    (field_imm 0 _menhir_stack/1956)
                                  _endpos__0_/1963 =
                                    (field_imm 3 _menhir_stack/1961)
                                  _startpos/1964 = _startpos__1_/1959
                                  _endpos/1965 = _endpos__1_/1960
                                  _v/1966 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:rhs" _1/1962)))
                                      (makeblock 2 _1/1962)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1957
                                   _v/1966 _startpos/1964 _endpos/1965
                                   _menhir_stack/1961)))
                             (function _menhir_env/1967
                               (let
                                 (_menhir_stack/1968 =
                                    (field_imm 2 _menhir_env/1967)
                                  branches/1969 =a
                                    (field_imm 1 _menhir_stack/1968)
                                  branches/1980 =a branches/1969
                                  *match*/3770 =a
                                    (field_imm 4 _menhir_stack/1968)
                                  _2/1972 =a (field_imm 1 *match*/3770)
                                  _2/1981 =a[int] _2/1972
                                  *match*/3772 =a (field_imm 4 *match*/3770)
                                  symbol/1976 =a (field_imm 1 *match*/3772)
                                  symbol/1982 =a symbol/1976
                                  _menhir_stack/1979 =a
                                    (field_imm 4 *match*/3772)
                                  _endpos_symbol_/1978 =a
                                    (field_imm 3 *match*/3772)
                                  _startpos_symbol_/1977 =a
                                    (field_imm 2 *match*/3772)
                                  _menhir_s/1975 =a
                                    (field_imm 0 *match*/3772)
                                  _endpos__2_/1974 =a
                                    (field_imm 3 *match*/3770)
                                  _startpos__2_/1973 =a
                                    (field_imm 2 *match*/3770)
                                  *match*/3771 =a (field_imm 0 *match*/3770)
                                  _endpos_branches_/1971 =a
                                    (field_imm 3 _menhir_stack/1968)
                                  _startpos_branches_/1970 =a
                                    (field_imm 2 _menhir_stack/1968)
                                  *match*/3769 =a
                                    (field_imm 0 _menhir_stack/1968)
                                  _endpos__0_/1983 =
                                    (field_imm 3 _menhir_stack/1979)
                                  _startpos/1984 = _startpos_symbol_/1977
                                  _endpos/1985 = _endpos_branches_/1971
                                  _v/1986 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:rule"
                                            symbol/1982 branches/1980)))
                                      (makeblock 0
                                        (apply
                                          (field_imm 0
                                            (global Gbnf_parser__Positions!))
                                          symbol/1982)
                                        (makeblock 0
                                          (apply
                                            (field_imm 1
                                              (global Gbnf_parser__Positions!))
                                            symbol/1982)
                                          0)
                                        0)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1975
                                   _v/1986 _startpos/1984 _endpos/1985
                                   _menhir_stack/1979)))
                             (function _menhir_env/1987
                               (let
                                 (_menhir_stack/1988 =
                                    (field_imm 2 _menhir_env/1987)
                                  _3/1989 =a (field_imm 1 _menhir_stack/1988)
                                  _3/2000 =a _3/1989
                                  *match*/3794 =a
                                    (field_imm 4 _menhir_stack/1988)
                                  _2/1992 =a (field_imm 1 *match*/3794)
                                  _2/2001 =a _2/1992
                                  *match*/3796 =a (field_imm 4 *match*/3794)
                                  _1/1996 =a (field_imm 1 *match*/3796)
                                  _1/2002 =a _1/1996
                                  _menhir_stack/1999 =a
                                    (field_imm 4 *match*/3796)
                                  _endpos__1_/1998 =a
                                    (field_imm 3 *match*/3796)
                                  _startpos__1_/1997 =a
                                    (field_imm 2 *match*/3796)
                                  _menhir_s/1995 =a
                                    (field_imm 0 *match*/3796)
                                  _endpos__2_/1994 =a
                                    (field_imm 3 *match*/3794)
                                  _startpos__2_/1993 =a
                                    (field_imm 2 *match*/3794)
                                  *match*/3795 =a (field_imm 0 *match*/3794)
                                  _endpos__3_/1991 =a
                                    (field_imm 3 _menhir_stack/1988)
                                  _startpos__3_/1990 =a
                                    (field_imm 2 _menhir_stack/1988)
                                  *match*/3793 =a
                                    (field_imm 0 _menhir_stack/1988)
                                  _endpos__0_/2003 =
                                    (field_imm 3 _menhir_stack/1999)
                                  _startpos/2004 = _startpos__1_/1997
                                  _endpos/2005 = _endpos__3_/1991
                                  _v/2006 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:OLDRULE1"
                                            _3/2000)))
                                      (makeblock 4 _3/2000)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/1995
                                   _v/2006 _startpos/2004 _endpos/2005
                                   _menhir_stack/1999)))
                             (function _menhir_env/2007
                               (let
                                 (_menhir_stack/2008 =
                                    (field_imm 2 _menhir_env/2007)
                                  _2/2009 =a (field_imm 1 _menhir_stack/2008)
                                  _2/2017 =a _2/2009
                                  *match*/3812 =a
                                    (field_imm 4 _menhir_stack/2008)
                                  _1/2013 =a (field_imm 1 *match*/3812)
                                  _1/2018 =a _1/2013
                                  _menhir_stack/2016 =a
                                    (field_imm 4 *match*/3812)
                                  _endpos__1_/2015 =a
                                    (field_imm 3 *match*/3812)
                                  _startpos__1_/2014 =a
                                    (field_imm 2 *match*/3812)
                                  _menhir_s/2012 =a
                                    (field_imm 0 *match*/3812)
                                  _endpos__2_/2011 =a
                                    (field_imm 3 _menhir_stack/2008)
                                  _startpos__2_/2010 =a
                                    (field_imm 2 _menhir_stack/2008)
                                  *match*/3811 =a
                                    (field_imm 0 _menhir_stack/2008)
                                  _endpos__0_/2019 =
                                    (field_imm 3 _menhir_stack/2016)
                                  _startpos/2020 = _startpos__1_/2014
                                  _endpos/2021 = _endpos__2_/2011
                                  _v/2022 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:OLDRULE"
                                            _1/2018)))
                                      (makeblock 4 _2/2017)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2012
                                   _v/2022 _startpos/2020 _endpos/2021
                                   _menhir_stack/2016)))
                             (function _menhir_env/2023
                               (let
                                 (_menhir_stack/2024 =
                                    (field_imm 2 _menhir_env/2023)
                                  _1/2026 =a (field_imm 1 _menhir_stack/2024)
                                  _1/2030 =a _1/2026
                                  _menhir_stack/2029 =a
                                    (field_imm 4 _menhir_stack/2024)
                                  _endpos__1_/2028 =a
                                    (field_imm 3 _menhir_stack/2024)
                                  _startpos__1_/2027 =a
                                    (field_imm 2 _menhir_stack/2024)
                                  _menhir_s/2025 =a
                                    (field_imm 0 _menhir_stack/2024)
                                  _endpos__0_/2031 =
                                    (field_imm 3 _menhir_stack/2029)
                                  _startpos/2032 = _startpos__1_/2027
                                  _endpos/2033 = _endpos__1_/2028
                                  _v/2034 =
                                    (seq
                                      (apply (field_imm 45 (global Stdlib!))
                                        (apply
                                          (field_imm 6 (global Batteries!))
                                          (makeblock 0 "DEBUG:OLDRULE"
                                            _1/2030)))
                                      (makeblock 4 _1/2030)))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2025
                                   _v/2034 _startpos/2032 _endpos/2033
                                   _menhir_stack/2029)))
                             (function _menhir_env/2035
                               (let
                                 (_menhir_stack/2036 =
                                    (field_imm 2 _menhir_env/2035)
                                  _4/2037 =a (field_imm 1 _menhir_stack/2036)
                                  _4/2051 =a[int] _4/2037
                                  *match*/3847 =a
                                    (field_imm 4 _menhir_stack/2036)
                                  _3/2040 =a (field_imm 1 *match*/3847)
                                  _3/2052 =a _3/2040
                                  *match*/3849 =a (field_imm 4 *match*/3847)
                                  _2/2043 =a (field_imm 1 *match*/3849)
                                  _2/2053 =a _2/2043
                                  *match*/3851 =a (field_imm 4 *match*/3849)
                                  _1/2047 =a (field_imm 1 *match*/3851)
                                  _1/2054 =a[int] _1/2047
                                  _menhir_stack/2050 =a
                                    (field_imm 4 *match*/3851)
                                  _endpos__1_/2049 =a
                                    (field_imm 3 *match*/3851)
                                  _startpos__1_/2048 =a
                                    (field_imm 2 *match*/3851)
                                  _menhir_s/2046 =a
                                    (field_imm 0 *match*/3851)
                                  _endpos__2_/2045 =a
                                    (field_imm 3 *match*/3849)
                                  _startpos__2_/2044 =a
                                    (field_imm 2 *match*/3849)
                                  *match*/3850 =a (field_imm 0 *match*/3849)
                                  _endpos__3_/2042 =a
                                    (field_imm 3 *match*/3847)
                                  _startpos__3_/2041 =a
                                    (field_imm 2 *match*/3847)
                                  *match*/3848 =a (field_imm 0 *match*/3847)
                                  _endpos__4_/2039 =a
                                    (field_imm 3 _menhir_stack/2036)
                                  _startpos__4_/2038 =a
                                    (field_imm 2 _menhir_stack/2036)
                                  *match*/3846 =a
                                    (field_imm 0 _menhir_stack/2036)
                                  _endpos__0_/2055 =
                                    (field_imm 3 _menhir_stack/2050)
                                  _startpos/2056 = _startpos__1_/2048
                                  _endpos/2057 = _endpos__4_/2039
                                  _v/2058 =
                                    (let
                                      (_1/2059 =
                                         (let
                                           (_1/2060 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0 "DEBUG:rhs"
                                                      _3/2052)))
                                                (makeblock 2 _3/2052)))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0
                                                   "DEBUG:cterm/group"
                                                   _1/2060)))
                                             (makeblock 2 _1/2060))))
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:term/cterms"
                                              _1/2059)))
                                        (makeblock 2 _1/2059))))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2046
                                   _v/2058 _startpos/2056 _endpos/2057
                                   _menhir_stack/2050)))
                             (function _menhir_env/2061
                               (let
                                 (_menhir_stack/2062 =
                                    (field_imm 2 _menhir_env/2061)
                                  _1/2064 =a (field_imm 1 _menhir_stack/2062)
                                  _1/2068 =a _1/2064
                                  _menhir_stack/2067 =a
                                    (field_imm 4 _menhir_stack/2062)
                                  _endpos__1_/2066 =a
                                    (field_imm 3 _menhir_stack/2062)
                                  _startpos__1_/2065 =a
                                    (field_imm 2 _menhir_stack/2062)
                                  _menhir_s/2063 =a
                                    (field_imm 0 _menhir_stack/2062)
                                  _endpos__0_/2069 =
                                    (field_imm 3 _menhir_stack/2067)
                                  _startpos/2070 = _startpos__1_/2065
                                  _endpos/2071 = _endpos__1_/2066
                                  _v/2072 =
                                    (let
                                      (_1/2073 =
                                         (let
                                           (_1/2074 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0
                                                      "DEBUG:class1a"
                                                      _1/2068)))
                                                (makeblock 2 _1/2068)))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0
                                                   "DEBUG:cterm/class"
                                                   _1/2074)))
                                             (makeblock 2 _1/2074))))
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:term/cterms"
                                              _1/2073)))
                                        (makeblock 2 _1/2073))))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2063
                                   _v/2072 _startpos/2070 _endpos/2071
                                   _menhir_stack/2067)))
                             (function _menhir_env/2075
                               (let
                                 (_menhir_stack/2076 =
                                    (field_imm 2 _menhir_env/2075)
                                  _1/2078 =a (field_imm 1 _menhir_stack/2076)
                                  _1/2082 =a _1/2078
                                  _menhir_stack/2081 =a
                                    (field_imm 4 _menhir_stack/2076)
                                  _endpos__1_/2080 =a
                                    (field_imm 3 _menhir_stack/2076)
                                  _startpos__1_/2079 =a
                                    (field_imm 2 _menhir_stack/2076)
                                  _menhir_s/2077 =a
                                    (field_imm 0 _menhir_stack/2076)
                                  _endpos__0_/2083 =
                                    (field_imm 3 _menhir_stack/2081)
                                  _startpos/2084 = _startpos__1_/2079
                                  _endpos/2085 = _endpos__1_/2080
                                  _v/2086 =
                                    (let
                                      (_1/2087 =
                                         (let
                                           (_1/2088 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0
                                                      "DEBUG:class" _1/2082)))
                                                (makeblock 0 _1/2082)))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0
                                                   "DEBUG:cterm/class"
                                                   _1/2088)))
                                             (makeblock 2 _1/2088))))
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:term/cterms"
                                              _1/2087)))
                                        (makeblock 2 _1/2087))))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2077
                                   _v/2086 _startpos/2084 _endpos/2085
                                   _menhir_stack/2081)))
                             (function _menhir_env/2089
                               (let
                                 (_menhir_stack/2090 =
                                    (field_imm 2 _menhir_env/2089)
                                  _1/2092 =a (field_imm 1 _menhir_stack/2090)
                                  _1/2096 =a _1/2092
                                  _menhir_stack/2095 =a
                                    (field_imm 4 _menhir_stack/2090)
                                  _endpos__1_/2094 =a
                                    (field_imm 3 _menhir_stack/2090)
                                  _startpos__1_/2093 =a
                                    (field_imm 2 _menhir_stack/2090)
                                  _menhir_s/2091 =a
                                    (field_imm 0 _menhir_stack/2090)
                                  _endpos__0_/2097 =
                                    (field_imm 3 _menhir_stack/2095)
                                  _startpos/2098 = _startpos__1_/2093
                                  _endpos/2099 = _endpos__1_/2094
                                  _v/2100 =
                                    (let
                                      (_1/2101 =
                                         (let
                                           (_1/2102 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0 "DEBUG:quid"
                                                      _1/2096)))
                                                _1/2096))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0
                                                   "DEBUG:sterm/quid"
                                                   _1/2102)))
                                             (makeblock 0 _1/2102))))
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:term/sterm"
                                              _1/2101)))
                                        (makeblock 2 _1/2101))))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2091
                                   _v/2100 _startpos/2098 _endpos/2099
                                   _menhir_stack/2095)))
                             (function _menhir_env/2103
                               (let
                                 (_menhir_stack/2104 =
                                    (field_imm 2 _menhir_env/2103)
                                  _1/2106 =a (field_imm 1 _menhir_stack/2104)
                                  _1/2110 =a _1/2106
                                  _menhir_stack/2109 =a
                                    (field_imm 4 _menhir_stack/2104)
                                  _endpos__1_/2108 =a
                                    (field_imm 3 _menhir_stack/2104)
                                  _startpos__1_/2107 =a
                                    (field_imm 2 _menhir_stack/2104)
                                  _menhir_s/2105 =a
                                    (field_imm 0 _menhir_stack/2104)
                                  _endpos__0_/2111 =
                                    (field_imm 3 _menhir_stack/2109)
                                  _startpos/2112 = _startpos__1_/2107
                                  _endpos/2113 = _endpos__1_/2108
                                  _v/2114 =
                                    (let
                                      (_1/2115 =
                                         (let
                                           (_1/2116 =
                                              (seq
                                                (apply
                                                  (field_imm 45
                                                    (global Stdlib!))
                                                  (apply
                                                    (field_imm 6
                                                      (global Batteries!))
                                                    (makeblock 0 "DEBUG:lid"
                                                      _1/2110)))
                                                _1/2110))
                                           (seq
                                             (apply
                                               (field_imm 45
                                                 (global Stdlib!))
                                               (apply
                                                 (field_imm 6
                                                   (global Batteries!))
                                                 (makeblock 0
                                                   "DEBUG:sterm/lid" _1/2116)))
                                             (makeblock 0 _1/2116))))
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:term/sterm"
                                              _1/2115)))
                                        (makeblock 2 _1/2115))))
                                 (makeblock 0 (int,*,*,*,*) _menhir_s/2105
                                   _v/2114 _startpos/2112 _endpos/2113
                                   _menhir_stack/2109))))
                         trace/1335 =
                           (makeblock 0
                             (makeblock 0
                               (duparray[addr]
                                 [0:
                                  "error" "Tchar" "STAR" "RPAREN" "REGEX"
                                  "QUESTION" "QID" "PLUS" "NEWLINE" "LPAREN"
                                  "LID" "EOF" "DASH" "COLONCOLONEQUAL"
                                  "CARET" "BAR" "#"])
                               (duparray[addr]
                                 [0:
                                  "Accepting"
                                  "Reducing production alternation -> alternation BAR list(NEWLINE) concatenation"
                                  "Reducing production alternation -> concatenation"
                                  "Reducing production char_class -> CARET char_class1"
                                  "Reducing production char_class -> char_class1"
                                  "Reducing production char_class1 -> Tchar DASH Tchar"
                                  "Reducing production char_class1 -> char_class1 Tchar"
                                  "Reducing production char_class1 -> Tchar"
                                  "Reducing production concatenation -> concatenation factor"
                                  "Reducing production concatenation -> factor"
                                  "Reducing production factor -> term PLUS"
                                  "Reducing production factor -> term QUESTION"
                                  "Reducing production factor -> term STAR"
                                  "Reducing production factor -> term"
                                  "Reducing production grammar -> rules postlude"
                                  "Reducing production list(NEWLINE) ->"
                                  "Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)"
                                  "Reducing production nonempty_list(NEWLINE) -> NEWLINE"
                                  "Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)"
                                  "Reducing production postlude -> list(NEWLINE) EOF"
                                  "Reducing production rhs -> alternation"
                                  "Reducing production rule -> LID COLONCOLONEQUAL rhs"
                                  "Reducing production rules -> rules nonempty_list(NEWLINE) rule"
                                  "Reducing production rules -> nonempty_list(NEWLINE) rule"
                                  "Reducing production rules -> rule"
                                  "Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN"
                                  "Reducing production term -> char_class"
                                  "Reducing production term -> REGEX"
                                  "Reducing production term -> QID"
                                  "Reducing production term -> LID"]))))
                        (seq
                          (setfield_ptr(root-init) 11
                            (global Gbnf_parser__SentenceParser!)
                            token2terminal/1284)
                          (setfield_ptr(root-init) 12
                            (global Gbnf_parser__SentenceParser!)
                            error_terminal/1285)
                          (setfield_ptr(root-init) 13
                            (global Gbnf_parser__SentenceParser!)
                            token2value/1327)
                          (setfield_ptr(root-init) 14
                            (global Gbnf_parser__SentenceParser!)
                            default_reduction/1328)
                          (setfield_ptr(root-init) 15
                            (global Gbnf_parser__SentenceParser!) error/1329)
                          (setfield_ptr(root-init) 16
                            (global Gbnf_parser__SentenceParser!) start/1330)
                          (setfield_ptr(root-init) 17
                            (global Gbnf_parser__SentenceParser!)
                            action/1331)
                          (setfield_ptr(root-init) 18
                            (global Gbnf_parser__SentenceParser!) lhs/1332)
                          (setfield_ptr(root-init) 19
                            (global Gbnf_parser__SentenceParser!) goto/1333)
                          (setfield_ptr(root-init) 20
                            (global Gbnf_parser__SentenceParser!)
                            semantic_action/1334)
                          (setfield_ptr(root-init) 21
                            (global Gbnf_parser__SentenceParser!) trace/1335)))
                      0))))
              (let
                (Tables/2117 =
                   (makeblock 0
                     (field_imm 9 (global Gbnf_parser__SentenceParser!))
                     (field_imm 10 (global Gbnf_parser__SentenceParser!))
                     (field_imm 11 (global Gbnf_parser__SentenceParser!))
                     (field_imm 12 (global Gbnf_parser__SentenceParser!))
                     (field_imm 13 (global Gbnf_parser__SentenceParser!))
                     (field_imm 14 (global Gbnf_parser__SentenceParser!))
                     (field_imm 15 (global Gbnf_parser__SentenceParser!))
                     (field_imm 16 (global Gbnf_parser__SentenceParser!))
                     (field_imm 17 (global Gbnf_parser__SentenceParser!))
                     (field_imm 18 (global Gbnf_parser__SentenceParser!))
                     (field_imm 19 (global Gbnf_parser__SentenceParser!))
                     (field_imm 20 (global Gbnf_parser__SentenceParser!))
                     (field_imm 21 (global Gbnf_parser__SentenceParser!))))
                (seq
                  (setfield_ptr(root-init) 6
                    (global Gbnf_parser__SentenceParser!) Tables/2117)
                  (let
                    (ET/2206 =
                       (apply
                         (field_imm 0 (field_imm 15 (global MenhirLib!)))
                         (makeblock 0
                           (field_mut 2
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 3
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 4
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 5
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 6
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 8
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 9
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 10
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 7
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 11
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 0
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!)))
                           (field_mut 12
                             (field_imm 6
                               (global Gbnf_parser__SentenceParser!))))))
                    (seq
                      (setfield_ptr(root-init) 22
                        (global Gbnf_parser__SentenceParser!) ET/2206)
                      (let
                        (TI/2324 =
                           (apply
                             (field_imm 0 (field_imm 4 (global MenhirLib!)))
                             (field_imm 22
                               (global Gbnf_parser__SentenceParser!))))
                        (seq
                          (setfield_ptr(root-init) 23
                            (global Gbnf_parser__SentenceParser!) TI/2324)
                          (let
                            (include/3882 =
                               (field_imm 23
                                 (global Gbnf_parser__SentenceParser!))
                             Error/2328 =a (field_mut 0 include/3882))
                            (seq
                              (setfield_ptr(root-init) 24
                                (global Gbnf_parser__SentenceParser!)
                                Error/2328)
                              (let (entry/2329 =a (field_mut 1 include/3882))
                                (seq
                                  (setfield_ptr(root-init) 25
                                    (global Gbnf_parser__SentenceParser!)
                                    entry/2329)
                                  (let
                                    (offer/2333 =a (field_mut 2 include/3882))
                                    (seq
                                      (setfield_ptr(root-init) 26
                                        (global Gbnf_parser__SentenceParser!)
                                        offer/2333)
                                      (let
                                        (resume/2335 =a
                                           (field_mut 3 include/3882))
                                        (seq
                                          (setfield_ptr(root-init) 27
                                            (global Gbnf_parser__SentenceParser!)
                                            resume/2335)
                                          (let
                                            (lexer_lexbuf_to_supplier/2337 =a
                                               (field_mut 4 include/3882))
                                            (seq
                                              (setfield_ptr(root-init) 28
                                                (global Gbnf_parser__SentenceParser!)
                                                lexer_lexbuf_to_supplier/2337)
                                              (let
                                                (loop/2338 =a
                                                   (field_mut 5 include/3882))
                                                (seq
                                                  (setfield_ptr(root-init) 29
                                                    (global Gbnf_parser__SentenceParser!)
                                                    loop/2338)
                                                  (let
                                                    (loop_handle/2339 =a
                                                       (field_mut 6
                                                         include/3882))
                                                    (seq
                                                      (setfield_ptr(root-init) 30
                                                        (global Gbnf_parser__SentenceParser!)
                                                        loop_handle/2339)
                                                      (let
                                                        (loop_handle_undo/2340 =a
                                                           (field_mut 7
                                                             include/3882))
                                                        (seq
                                                          (setfield_ptr(root-init) 31
                                                            (global Gbnf_parser__SentenceParser!)
                                                            loop_handle_undo/2340)
                                                          (let
                                                            (shifts/2341 =a
                                                               (field_mut 8
                                                                 include/3882))
                                                            (seq
                                                              (setfield_ptr(root-init) 32
                                                                (global Gbnf_parser__SentenceParser!)
                                                                shifts/2341)
                                                              (let
                                                                (acceptable/2342 =a
                                                                   (field_mut 9
                                                                    include/3882))
                                                                (seq
                                                                  (setfield_ptr(root-init) 33
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    acceptable/2342)
                                                                  (let
                                                                    (number/2344 =a
                                                                    (field_mut 10
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 34
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    number/2344)
                                                                    (let
                                                                    (production_index/2345 =a
                                                                    (field_mut 11
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 35
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    production_index/2345)
                                                                    (let
                                                                    (find_production/2346 =a
                                                                    (field_mut 12
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 36
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    find_production/2346)
                                                                    (let
                                                                    (stack/2349 =a
                                                                    (field_mut 13
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 37
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    stack/2349)
                                                                    (let
                                                                    (top/2350 =a
                                                                    (field_mut 14
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 38
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    top/2350)
                                                                    (let
                                                                    (pop_many/2351 =a
                                                                    (field_mut 15
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 39
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    pop_many/2351)
                                                                    (let
                                                                    (get/2352 =a
                                                                    (field_mut 16
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 40
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    get/2352)
                                                                    (let
                                                                    (current_state_number/2353 =a
                                                                    (field_mut 17
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 41
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    current_state_number/2353)
                                                                    (let
                                                                    (equal/2354 =a
                                                                    (field_mut 18
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 42
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    equal/2354)
                                                                    (let
                                                                    (positions/2355 =a
                                                                    (field_mut 19
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 43
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    positions/2355)
                                                                    (let
                                                                    (env_has_default_reduction/2356 =a
                                                                    (field_mut 20
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 44
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    env_has_default_reduction/2356)
                                                                    (let
                                                                    (state_has_default_reduction/2357 =a
                                                                    (field_mut 21
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 45
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    state_has_default_reduction/2357)
                                                                    (let
                                                                    (pop/2358 =a
                                                                    (field_mut 22
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 46
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    pop/2358)
                                                                    (let
                                                                    (force_reduction/2359 =a
                                                                    (field_mut 23
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 47
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    force_reduction/2359)
                                                                    (let
                                                                    (input_needed/2360 =a
                                                                    (field_mut 24
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 48
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    input_needed/2360)
                                                                    (let
                                                                    (start/2361 =a
                                                                    (field_mut 25
                                                                    include/3882))
                                                                    (seq
                                                                    (setfield_ptr(root-init) 49
                                                                    (global Gbnf_parser__SentenceParser!)
                                                                    start/2361)
                                                                    0))))))))))))))))))))))))))))))))))))))))))))))))))))))))
                  (let
                    (MenhirInterpreter/2362 =
                       (makeblock 0
                         (field_imm 22 (global Gbnf_parser__SentenceParser!))
                         (field_imm 23 (global Gbnf_parser__SentenceParser!))
                         (field_imm 24 (global Gbnf_parser__SentenceParser!))
                         (field_imm 25 (global Gbnf_parser__SentenceParser!))
                         (field_imm 26 (global Gbnf_parser__SentenceParser!))
                         (field_imm 27 (global Gbnf_parser__SentenceParser!))
                         (field_imm 28 (global Gbnf_parser__SentenceParser!))
                         (field_imm 29 (global Gbnf_parser__SentenceParser!))
                         (field_imm 30 (global Gbnf_parser__SentenceParser!))
                         (field_imm 31 (global Gbnf_parser__SentenceParser!))
                         (field_imm 32 (global Gbnf_parser__SentenceParser!))
                         (field_imm 33 (global Gbnf_parser__SentenceParser!))
                         (field_imm 34 (global Gbnf_parser__SentenceParser!))
                         (field_imm 35 (global Gbnf_parser__SentenceParser!))
                         (field_imm 36 (global Gbnf_parser__SentenceParser!))
                         (field_imm 37 (global Gbnf_parser__SentenceParser!))
                         (field_imm 38 (global Gbnf_parser__SentenceParser!))
                         (field_imm 39 (global Gbnf_parser__SentenceParser!))
                         (field_imm 40 (global Gbnf_parser__SentenceParser!))
                         (field_imm 41 (global Gbnf_parser__SentenceParser!))
                         (field_imm 42 (global Gbnf_parser__SentenceParser!))
                         (field_imm 43 (global Gbnf_parser__SentenceParser!))
                         (field_imm 44 (global Gbnf_parser__SentenceParser!))
                         (field_imm 45 (global Gbnf_parser__SentenceParser!))
                         (field_imm 46 (global Gbnf_parser__SentenceParser!))
                         (field_imm 47 (global Gbnf_parser__SentenceParser!))
                         (field_imm 48 (global Gbnf_parser__SentenceParser!))
                         (field_imm 49 (global Gbnf_parser__SentenceParser!))))
                    (seq
                      (setfield_ptr(root-init) 2
                        (global Gbnf_parser__SentenceParser!)
                        (makeblock 0 (field_mut 4 MenhirInterpreter/2362)
                          (field_mut 5 MenhirInterpreter/2362)
                          (field_mut 6 MenhirInterpreter/2362)
                          (field_mut 7 MenhirInterpreter/2362)
                          (field_mut 8 MenhirInterpreter/2362)
                          (field_mut 9 MenhirInterpreter/2362)
                          (field_mut 10 MenhirInterpreter/2362)
                          (field_mut 11 MenhirInterpreter/2362)
                          (field_mut 12 MenhirInterpreter/2362)
                          (field_mut 13 MenhirInterpreter/2362)
                          (field_mut 14 MenhirInterpreter/2362)
                          (field_mut 15 MenhirInterpreter/2362)
                          (field_mut 16 MenhirInterpreter/2362)
                          (field_mut 17 MenhirInterpreter/2362)
                          (field_mut 18 MenhirInterpreter/2362)
                          (field_mut 19 MenhirInterpreter/2362)
                          (field_mut 20 MenhirInterpreter/2362)
                          (field_mut 21 MenhirInterpreter/2362)
                          (field_mut 22 MenhirInterpreter/2362)
                          (field_mut 23 MenhirInterpreter/2362)
                          (field_mut 24 MenhirInterpreter/2362)
                          (field_mut 25 MenhirInterpreter/2362)
                          (field_mut 26 MenhirInterpreter/2362)))
                      (let
                        (grammar/2363 =
                           (function lexer/2365 lexbuf/2366
                             (apply (field_imm 3 MenhirInterpreter/2362)
                               -822677911 0 lexer/2365 lexbuf/2366)))
                        (setfield_ptr(root-init) 1
                          (global Gbnf_parser__SentenceParser!) grammar/2363))
                      (let
                        (grammar/2367 =
                           (function initial_position/2368
                             (apply (field_imm 27 MenhirInterpreter/2362) 0
                               initial_position/2368)))
                        (setfield_ptr(root-init) 50
                          (global Gbnf_parser__SentenceParser!) grammar/2367))
                      0
                      (let
                        (Incremental/2443 =
                           (makeblock 0
                             (field_imm 50
                               (global Gbnf_parser__SentenceParser!))))
                        (seq
                          (setfield_ptr(root-init) 3
                            (global Gbnf_parser__SentenceParser!)
                            Incremental/2443)
                          (let
                            (*match*/3884 =
                               (apply
                                 (field_imm 5 (global Ppx_inline_test_lib!))
                                 "gbnf_parser"))
                            0)
                          (let
                            (*match*/3886 =
                               (apply
                                 (field_imm 1
                                   (field_imm 5
                                     (global Expect_test_collector!)))
                                 0))
                            0)
                          (let
                            (*match*/3888 =
                               (apply
                                 (field_imm 1
                                   (field_imm 0
                                     (global Ppx_bench_lib__Benchmark_accumulator!)))
                                 0))
                            0)
                          (let
                            (*match*/3890 =
                               (apply
                                 (field_imm 4
                                   (global Ppx_module_timer_runtime!))
                                 #"Gbnf_parser__SentenceParser"))
                            0)
                          0)))))))))))))
(seq
  (let
    (*match*/3462 =
       (apply (field_imm 3 (global Ppx_module_timer_runtime!))
         #"Gbnf_parser__SentenceParser"))
    0)
  (let
    (*match*/3464 =
       (apply
         (field_imm 0
           (field_imm 0 (global Ppx_bench_lib__Benchmark_accumulator!)))
         "gbnf_parser"))
    0)
  (let
    (*match*/3466 =
       (apply (field_imm 0 (field_imm 5 (global Expect_test_collector!)))
         "lib/sentenceParser.ml"))
    0)
  (let
    (*match*/3468 =
       (apply (field_imm 4 (global Ppx_inline_test_lib!)) "gbnf_parser"
         "sentenceParser.ml"))
    0)
  (let (*match*/3470 = (field_imm 0 (field_imm 16 (global MenhirLib!)))) 0)
  (let
    (Error/1150 =
       (makeblock 248 "Gbnf_parser.SentenceParser.MenhirBasics.Error"
         (caml_fresh_oo_id 0)))
    (setfield_ptr(root-init) 7 (global Gbnf_parser__SentenceParser!)
      Error/1150))
  (let
    (_eRR/1151 =
       (function _s/1153
         (raise (field_imm 7 (global Gbnf_parser__SentenceParser!)))))
    (setfield_ptr(root-init) 8 (global Gbnf_parser__SentenceParser!)
      _eRR/1151))
  0
  (let
    (MenhirBasics/1240 =
       (makeblock 0 (field_imm 7 (global Gbnf_parser__SentenceParser!))
         (field_imm 8 (global Gbnf_parser__SentenceParser!))))
    (seq
      (setfield_ptr(root-init) 4 (global Gbnf_parser__SentenceParser!)
        MenhirBasics/1240)
      (let
        (include/3471 = (field_imm 4 (global Gbnf_parser__SentenceParser!)))
        (seq
          (setfield_ptr(root-init) 0 (global Gbnf_parser__SentenceParser!)
            (field_mut 0 include/3471))
          (setfield_ptr(root-init) 5 (global Gbnf_parser__SentenceParser!)
            (field_mut 1 include/3471))
          (let
            (include/3472 =
               (field_imm 4 (global Gbnf_parser__SentenceParser!)))
            (seq
              (setfield_ptr(root-init) 9
                (global Gbnf_parser__SentenceParser!)
                (field_mut 0 include/3472))
              (setfield_ptr(root-init) 10
                (global Gbnf_parser__SentenceParser!)
                (field_mut 1 include/3472))
              (let
                (token2terminal/1284 =
                   (function _tok/1336 : int
                     (switch* _tok/1336
                      case int 0: 2
                      case int 1: 3
                      case int 2: 5
                      case int 3: 7
                      case int 4: 8
                      case int 5: 9
                      case int 6: 11
                      case int 7: 12
                      case int 8: 13
                      case int 9: 14
                      case int 10: 15
                      case tag 0: 1
                      case tag 1: 4
                      case tag 2: 6
                      case tag 3: 10))
                 error_terminal/1285 =[int] 0
                 token2value/1327 =
                   (function _tok/1361
                     (if (isint _tok/1361) 0 (field_imm 0 _tok/1361)))
                 default_reduction/1328 =
                   [0:
                    8
                    "\000\000\019\000\000\000\000\006\028\029\000\000\017\000\030\000\000\007\000\r\012\011\000\026\n\000\t\000\027\000\000\000\000\022\000\000\015\000\023\000\020\025\000\024\001"]
                 error/1329 =
                   [0:
                    16
                    "\000\160\000\160\000\000\000\004Jb\127\251@\000\000\000\000\000\000\000J\226J\226\000\000Jb\000\000@\000\127\243\000\000\127\243\000\000\000\000\000\000\016\000\000\000\000\000Z\243\000\000\127\243\000\000\016\145J\226JbZ\243\000\000\000\144\000\176\000\000\000 \000\000\000\016\000\000\000\000\000 \000\000\000\000"]
                 start/1330 =[int] 1
                 action/1331 =
                   [0:
                    [0:
                     8
                     "p\142\000\003v\0032\000\000\000\172\172\000v\0004\028\000:\000\000\000L\000\000v\000X\000\180\172v\148\000\178\178\000@\000Z\000\000@\000\000"]
                    [0:
                     8
                     "\029\029\029\029\029\029\029\029\029\029\029\026\018\029\029F\r\r\r\r\r\r\r\r\r\r\030\022\r\r5N55R5V5555^\01455F\017\017\017\017\017\017\017\017\017\017\163\000\017\017\022\000\t\"\006&\014\t*:\t\000\000>\t\022\000\005\"\006&E\005*:\005\000=>\005=\000=Q.==\142QE=Q\000\000\000z"]]
                 lhs/1332 =
                   [0: 4 "\r\220\203\187\170\153\153\135veC\"!\017\017"]
                 goto/1333 =
                   [0:
                    [0:
                     8
                     "\003\005\000\000\003\000\000\000\000\000\003\016\000\024\000\012\000\000\000\000\000\000\000\000\000:\000\000\000\000\024\":\0004\016\000\"\000\000\000\000>\000\000"]
                    [0:
                     8
                     "\019#*\"\003+\014-\025\026\028\029\030\019\003\r\023\017\019 '\025\026\028\029\030\025!\028\029\019%&(,\000\000\000\027\000\028\029"]]
                 semantic_action/1334 =
                   (makearray[addr]
                     (function _menhir_env/1407
                       (let
                         (_menhir_stack/1408 = (field_imm 2 _menhir_env/1407)
                          *match*/3508 =a
                            (field_imm 4
                              (field_imm 4 (field_imm 4 _menhir_stack/1408)))
                          _menhir_stack/1429 =a (field_imm 4 *match*/3508)
                          _endpos__0_/1471 = (field_imm 3 _menhir_stack/1429)
                          _v/1474 = (makeblock 2 (field_imm 1 *match*/3508)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3508) _v/1474
                           (field_imm 2 *match*/3508)
                           (field_imm 3 _menhir_stack/1408)
                           _menhir_stack/1429)))
                     (function _menhir_env/1499
                       (let
                         (_menhir_stack/1500 = (field_imm 2 _menhir_env/1499)
                          _1/1502 =a (field_imm 1 _menhir_stack/1500)
                          _menhir_stack/1505 =a
                            (field_imm 4 _menhir_stack/1500)
                          _endpos__0_/1507 = (field_imm 3 _menhir_stack/1505)
                          _v/1510 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:alt" _1/1502)))
                              (makeblock 2 _1/1502)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1500) _v/1510
                           (field_imm 2 _menhir_stack/1500)
                           (field_imm 3 _menhir_stack/1500)
                           _menhir_stack/1505)))
                     (function _menhir_env/1696
                       (let
                         (_menhir_stack/1697 = (field_imm 2 _menhir_env/1696)
                          _2/1698 =a (field_imm 1 _menhir_stack/1697)
                          *match*/3532 =a (field_imm 4 _menhir_stack/1697)
                          _menhir_stack/1705 =a (field_imm 4 *match*/3532)
                          _endpos__0_/1708 = (field_imm 3 _menhir_stack/1705)
                          _v/1711 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:ccrs" _2/1698)))
                              (makeblock 2 _2/1698)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3532) _v/1711
                           (field_imm 2 *match*/3532)
                           (field_imm 3 _menhir_stack/1697)
                           _menhir_stack/1705)))
                     (function _menhir_env/1712
                       (let
                         (_menhir_stack/1713 = (field_imm 2 _menhir_env/1712)
                          _menhir_stack/1718 =a
                            (field_imm 4 _menhir_stack/1713)
                          _endpos__0_/1720 = (field_imm 3 _menhir_stack/1718)
                          _v/1723 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:cc2rs"
                                    (field_imm 1 _menhir_stack/1713))))
                              3))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1713) _v/1723
                           (field_imm 2 _menhir_stack/1713)
                           (field_imm 3 _menhir_stack/1713)
                           _menhir_stack/1718)))
                     (function _menhir_env/1724
                       (let
                         (_menhir_stack/1725 = (field_imm 2 _menhir_env/1724)
                          *match*/3562 =a (field_imm 4 _menhir_stack/1725)
                          *match*/3564 =a (field_imm 4 *match*/3562)
                          _1/1733 =a (field_imm 1 *match*/3564)
                          _menhir_stack/1736 =a (field_imm 4 *match*/3564)
                          _endpos__0_/1740 = (field_imm 3 _menhir_stack/1736)
                          _v/1743 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 (*,int,int) "DEBUG:cc3rs"
                                    _1/1733 (field_imm 1 *match*/3562))))
                              (makeblock 3 (int) _1/1733)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3564) _v/1743
                           (field_imm 2 *match*/3564)
                           (field_imm 3 _menhir_stack/1725)
                           _menhir_stack/1736)))
                     (function _menhir_env/1744
                       (let
                         (_menhir_stack/1745 = (field_imm 2 _menhir_env/1744)
                          *match*/3580 =a (field_imm 4 _menhir_stack/1745)
                          _1/1750 =a (field_imm 1 *match*/3580)
                          _menhir_stack/1753 =a (field_imm 4 *match*/3580)
                          _endpos__0_/1756 = (field_imm 3 _menhir_stack/1753)
                          _v/1759 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:cc4rs" _1/1750)))
                              (makeblock 2 _1/1750)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3580) _v/1759
                           (field_imm 2 *match*/3580)
                           (field_imm 3 _menhir_stack/1745)
                           _menhir_stack/1753)))
                     (function _menhir_env/1760
                       (let
                         (_menhir_stack/1761 = (field_imm 2 _menhir_env/1760)
                          _1/1763 =a (field_imm 1 _menhir_stack/1761)
                          _menhir_stack/1766 =a
                            (field_imm 4 _menhir_stack/1761)
                          _endpos__0_/1768 = (field_imm 3 _menhir_stack/1766)
                          _v/1771 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 (*,int) "DEBUG:cc5rs" _1/1763)))
                              (makeblock 3 (int) _1/1763)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1761) _v/1771
                           (field_imm 2 _menhir_stack/1761)
                           (field_imm 3 _menhir_stack/1761)
                           _menhir_stack/1766)))
                     (function _menhir_env/1772
                       (let
                         (_menhir_stack/1773 = (field_imm 2 _menhir_env/1772)
                          *match*/3604 =a (field_imm 4 _menhir_stack/1773)
                          _1/1778 =a (field_imm 1 *match*/3604)
                          _menhir_stack/1781 =a (field_imm 4 *match*/3604)
                          _endpos__0_/1784 = (field_imm 3 _menhir_stack/1781)
                          _v/1787 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:concat1" _1/1778)))
                              (makeblock 2 _1/1778)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3604) _v/1787
                           (field_imm 2 *match*/3604)
                           (field_imm 3 _menhir_stack/1773)
                           _menhir_stack/1781)))
                     (function _menhir_env/1788
                       (let
                         (_menhir_stack/1789 = (field_imm 2 _menhir_env/1788)
                          _1/1791 =a (field_imm 1 _menhir_stack/1789)
                          _menhir_stack/1794 =a
                            (field_imm 4 _menhir_stack/1789)
                          _endpos__0_/1796 = (field_imm 3 _menhir_stack/1794)
                          _v/1799 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:concat2" _1/1791)))
                              (makeblock 2 _1/1791)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1789) _v/1799
                           (field_imm 2 _menhir_stack/1789)
                           (field_imm 3 _menhir_stack/1789)
                           _menhir_stack/1794)))
                     (function _menhir_env/1800
                       (let
                         (_menhir_stack/1801 = (field_imm 2 _menhir_env/1800)
                          *match*/3627 =a (field_imm 4 _menhir_stack/1801)
                          _1/1806 =a (field_imm 1 *match*/3627)
                          _menhir_stack/1809 =a (field_imm 4 *match*/3627)
                          _endpos__0_/1812 = (field_imm 3 _menhir_stack/1809)
                          _v/1815 =
                            (let
                              (_2/1816 =
                                 (let
                                   (_1/1818 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 (*,int) "DEBUG:plus"
                                              (field_imm 1
                                                _menhir_stack/1801))))
                                        2))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:mod" _1/1818)))
                                     (makeblock 2 _1/1818)))
                               _1/1819 =
                                 (seq
                                   (apply (field_imm 45 (global Stdlib!))
                                     (apply (field_imm 6 (global Batteries!))
                                       (makeblock 0 "DEBUG:termfactor"
                                         _1/1806)))
                                   (makeblock 2 _1/1806)))
                              (makeblock 2 _1/1819)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3627) _v/1815
                           (field_imm 2 *match*/3627)
                           (field_imm 3 _menhir_stack/1801)
                           _menhir_stack/1809)))
                     (function _menhir_env/1820
                       (let
                         (_menhir_stack/1821 = (field_imm 2 _menhir_env/1820)
                          *match*/3642 =a (field_imm 4 _menhir_stack/1821)
                          _1/1826 =a (field_imm 1 *match*/3642)
                          _menhir_stack/1829 =a (field_imm 4 *match*/3642)
                          _endpos__0_/1832 = (field_imm 3 _menhir_stack/1829)
                          _v/1835 =
                            (let
                              (_2/1836 =
                                 (let
                                   (_1/1838 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 (*,int)
                                              "DEBUG:quest"
                                              (field_imm 1
                                                _menhir_stack/1821))))
                                        1))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:quest" _1/1838)))
                                     (makeblock 2 _1/1838)))
                               _1/1839 =
                                 (seq
                                   (apply (field_imm 45 (global Stdlib!))
                                     (apply (field_imm 6 (global Batteries!))
                                       (makeblock 0 "DEBUG:termfactor"
                                         _1/1826)))
                                   (makeblock 2 _1/1826)))
                              (makeblock 2 _1/1839)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3642) _v/1835
                           (field_imm 2 *match*/3642)
                           (field_imm 3 _menhir_stack/1821)
                           _menhir_stack/1829)))
                     (function _menhir_env/1840
                       (let
                         (_menhir_stack/1841 = (field_imm 2 _menhir_env/1840)
                          *match*/3657 =a (field_imm 4 _menhir_stack/1841)
                          _1/1846 =a (field_imm 1 *match*/3657)
                          _menhir_stack/1849 =a (field_imm 4 *match*/3657)
                          _endpos__0_/1852 = (field_imm 3 _menhir_stack/1849)
                          _v/1855 =
                            (let
                              (_2/1856 =
                                 (let (_1/1857 = 0)
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:star" _1/1857)))
                                     (makeblock 2 _1/1857)))
                               _1/1858 =
                                 (seq
                                   (apply (field_imm 45 (global Stdlib!))
                                     (apply (field_imm 6 (global Batteries!))
                                       (makeblock 0 "DEBUG:termfactor"
                                         _1/1846)))
                                   (makeblock 2 _1/1846)))
                              (makeblock 2 _1/1858)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3657) _v/1855
                           (field_imm 2 *match*/3657)
                           (field_imm 3 _menhir_stack/1841)
                           _menhir_stack/1849)))
                     (function _menhir_env/1859
                       (let
                         (_menhir_stack/1860 = (field_imm 2 _menhir_env/1859)
                          _1/1862 =a (field_imm 1 _menhir_stack/1860)
                          _menhir_stack/1865 =a
                            (field_imm 4 _menhir_stack/1860)
                          _endpos__0_/1867 = (field_imm 3 _menhir_stack/1865)
                          _v/1870 =
                            (let
                              (_1/1871 =
                                 (seq
                                   (apply (field_imm 45 (global Stdlib!))
                                     (apply (field_imm 6 (global Batteries!))
                                       (makeblock 0 "DEBUG:termfactor"
                                         _1/1862)))
                                   (makeblock 2 _1/1862)))
                              (makeblock 2 _1/1871)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1860) _v/1870
                           (field_imm 2 _menhir_stack/1860)
                           (field_imm 3 _menhir_stack/1860)
                           _menhir_stack/1865)))
                     (function _menhir_env/1872
                       (let
                         (_menhir_stack/1873 = (field_imm 2 _menhir_env/1872)
                          *match*/3681 =a (field_imm 4 _menhir_stack/1873)
                          _menhir_stack/1881 =a (field_imm 4 *match*/3681)
                          _endpos__0_/1884 = (field_imm 3 _menhir_stack/1881)
                          _v/1887 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 (*,*,int) "DEBUG:grammar"
                                    (field_imm 1 *match*/3681)
                                    (field_imm 1 _menhir_stack/1873))))
                              [0: "" 0]))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3681) _v/1887
                           (field_imm 2 *match*/3681)
                           (field_imm 3 _menhir_stack/1873)
                           _menhir_stack/1881)))
                     (function _menhir_env/1888
                       (let
                         (_menhir_stack/1889 = (field_imm 2 _menhir_env/1888)
                          _menhir_s/1890 =[int]
                            (field_int 3 _menhir_env/1888)
                          _endpos__0_/1891 = (field_imm 3 _menhir_stack/1889)
                          _startpos/1892 = (field_imm 3 _menhir_stack/1889)
                          _v/1894 = 0)
                         (makeblock 0 (int,*,*,*,*) _menhir_s/1890 _v/1894
                           _startpos/1892 _startpos/1892 _menhir_stack/1889)))
                     (function _menhir_env/1895
                       (let
                         (_menhir_stack/1896 = (field_imm 2 _menhir_env/1895)
                          *match*/3699 =a (field_imm 4 _menhir_stack/1896)
                          _menhir_stack/1904 =a (field_imm 4 *match*/3699)
                          _endpos__0_/1907 = (field_imm 3 _menhir_stack/1904)
                          _v/1910 =
                            (makeblock 0 (int,*) (field_imm 1 *match*/3699)
                              (field_imm 1 _menhir_stack/1896)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3699) _v/1910
                           (field_imm 2 *match*/3699)
                           (field_imm 3 _menhir_stack/1896)
                           _menhir_stack/1904)))
                     (function _menhir_env/1911
                       (let
                         (_menhir_stack/1912 = (field_imm 2 _menhir_env/1911)
                          _menhir_stack/1917 =a
                            (field_imm 4 _menhir_stack/1912)
                          _endpos__0_/1919 = (field_imm 3 _menhir_stack/1917)
                          _v/1922 =
                            (makeblock 0 (int,*)
                              (field_imm 1 _menhir_stack/1912) 0))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1912) _v/1922
                           (field_imm 2 _menhir_stack/1912)
                           (field_imm 3 _menhir_stack/1912)
                           _menhir_stack/1917)))
                     (function _menhir_env/1923
                       (let
                         (_menhir_stack/1924 = (field_imm 2 _menhir_env/1923)
                          *match*/3723 =a (field_imm 4 _menhir_stack/1924)
                          _menhir_stack/1932 =a (field_imm 4 *match*/3723)
                          _endpos__0_/1935 = (field_imm 3 _menhir_stack/1932)
                          _v/1938 =
                            (makeblock 0 (int,*) (field_imm 1 *match*/3723)
                              (field_imm 1 _menhir_stack/1924)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3723) _v/1938
                           (field_imm 2 *match*/3723)
                           (field_imm 3 _menhir_stack/1924)
                           _menhir_stack/1932)))
                     (function _menhir_env/1939
                       (let
                         (_menhir_stack/1940 = (field_imm 2 _menhir_env/1939)
                          *match*/3739 =a (field_imm 4 _menhir_stack/1940)
                          _menhir_stack/1948 =a (field_imm 4 *match*/3739)
                          _endpos__0_/1951 = (field_imm 3 _menhir_stack/1948)
                          _v/1954 =
                            (apply (field_imm 45 (global Stdlib!))
                              (apply (field_imm 6 (global Batteries!))
                                "DEBUG:DONE")))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3739) _v/1954
                           (field_imm 2 *match*/3739)
                           (field_imm 3 _menhir_stack/1940)
                           _menhir_stack/1948)))
                     (function _menhir_env/1955
                       (let
                         (_menhir_stack/1956 = (field_imm 2 _menhir_env/1955)
                          _1/1958 =a (field_imm 1 _menhir_stack/1956)
                          _menhir_stack/1961 =a
                            (field_imm 4 _menhir_stack/1956)
                          _endpos__0_/1963 = (field_imm 3 _menhir_stack/1961)
                          _v/1966 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:rhs" _1/1958)))
                              (makeblock 2 _1/1958)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/1956) _v/1966
                           (field_imm 2 _menhir_stack/1956)
                           (field_imm 3 _menhir_stack/1956)
                           _menhir_stack/1961)))
                     (function _menhir_env/1967
                       (let
                         (_menhir_stack/1968 = (field_imm 2 _menhir_env/1967)
                          *match*/3772 =a
                            (field_imm 4 (field_imm 4 _menhir_stack/1968))
                          symbol/1976 =a (field_imm 1 *match*/3772)
                          _menhir_stack/1979 =a (field_imm 4 *match*/3772)
                          _endpos__0_/1983 = (field_imm 3 _menhir_stack/1979)
                          _v/1986 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:rule" symbol/1976
                                    (field_imm 1 _menhir_stack/1968))))
                              (makeblock 0
                                (apply
                                  (field_imm 0
                                    (global Gbnf_parser__Positions!))
                                  symbol/1976)
                                (makeblock 0
                                  (apply
                                    (field_imm 1
                                      (global Gbnf_parser__Positions!))
                                    symbol/1976)
                                  0)
                                0)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3772) _v/1986
                           (field_imm 2 *match*/3772)
                           (field_imm 3 _menhir_stack/1968)
                           _menhir_stack/1979)))
                     (function _menhir_env/1987
                       (let
                         (_menhir_stack/1988 = (field_imm 2 _menhir_env/1987)
                          _3/1989 =a (field_imm 1 _menhir_stack/1988)
                          *match*/3796 =a
                            (field_imm 4 (field_imm 4 _menhir_stack/1988))
                          _menhir_stack/1999 =a (field_imm 4 *match*/3796)
                          _endpos__0_/2003 = (field_imm 3 _menhir_stack/1999)
                          _v/2006 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:OLDRULE1" _3/1989)))
                              (makeblock 4 _3/1989)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3796) _v/2006
                           (field_imm 2 *match*/3796)
                           (field_imm 3 _menhir_stack/1988)
                           _menhir_stack/1999)))
                     (function _menhir_env/2007
                       (let
                         (_menhir_stack/2008 = (field_imm 2 _menhir_env/2007)
                          *match*/3812 =a (field_imm 4 _menhir_stack/2008)
                          _menhir_stack/2016 =a (field_imm 4 *match*/3812)
                          _endpos__0_/2019 = (field_imm 3 _menhir_stack/2016)
                          _v/2022 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:OLDRULE"
                                    (field_imm 1 *match*/3812))))
                              (makeblock 4 (field_imm 1 _menhir_stack/2008))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3812) _v/2022
                           (field_imm 2 *match*/3812)
                           (field_imm 3 _menhir_stack/2008)
                           _menhir_stack/2016)))
                     (function _menhir_env/2023
                       (let
                         (_menhir_stack/2024 = (field_imm 2 _menhir_env/2023)
                          _1/2026 =a (field_imm 1 _menhir_stack/2024)
                          _menhir_stack/2029 =a
                            (field_imm 4 _menhir_stack/2024)
                          _endpos__0_/2031 = (field_imm 3 _menhir_stack/2029)
                          _v/2034 =
                            (seq
                              (apply (field_imm 45 (global Stdlib!))
                                (apply (field_imm 6 (global Batteries!))
                                  (makeblock 0 "DEBUG:OLDRULE" _1/2026)))
                              (makeblock 4 _1/2026)))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/2024) _v/2034
                           (field_imm 2 _menhir_stack/2024)
                           (field_imm 3 _menhir_stack/2024)
                           _menhir_stack/2029)))
                     (function _menhir_env/2035
                       (let
                         (_menhir_stack/2036 = (field_imm 2 _menhir_env/2035)
                          *match*/3847 =a (field_imm 4 _menhir_stack/2036)
                          _3/2040 =a (field_imm 1 *match*/3847)
                          *match*/3851 =a
                            (field_imm 4 (field_imm 4 *match*/3847))
                          _menhir_stack/2050 =a (field_imm 4 *match*/3851)
                          _endpos__0_/2055 = (field_imm 3 _menhir_stack/2050)
                          _v/2058 =
                            (let
                              (_1/2059 =
                                 (let
                                   (_1/2060 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:rhs" _3/2040)))
                                        (makeblock 2 _3/2040)))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:cterm/group"
                                           _1/2060)))
                                     (makeblock 2 _1/2060))))
                              (seq
                                (apply (field_imm 45 (global Stdlib!))
                                  (apply (field_imm 6 (global Batteries!))
                                    (makeblock 0 "DEBUG:term/cterms" _1/2059)))
                                (makeblock 2 _1/2059))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 *match*/3851) _v/2058
                           (field_imm 2 *match*/3851)
                           (field_imm 3 _menhir_stack/2036)
                           _menhir_stack/2050)))
                     (function _menhir_env/2061
                       (let
                         (_menhir_stack/2062 = (field_imm 2 _menhir_env/2061)
                          _1/2064 =a (field_imm 1 _menhir_stack/2062)
                          _menhir_stack/2067 =a
                            (field_imm 4 _menhir_stack/2062)
                          _endpos__0_/2069 = (field_imm 3 _menhir_stack/2067)
                          _v/2072 =
                            (let
                              (_1/2073 =
                                 (let
                                   (_1/2074 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:class1a"
                                              _1/2064)))
                                        (makeblock 2 _1/2064)))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:cterm/class"
                                           _1/2074)))
                                     (makeblock 2 _1/2074))))
                              (seq
                                (apply (field_imm 45 (global Stdlib!))
                                  (apply (field_imm 6 (global Batteries!))
                                    (makeblock 0 "DEBUG:term/cterms" _1/2073)))
                                (makeblock 2 _1/2073))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/2062) _v/2072
                           (field_imm 2 _menhir_stack/2062)
                           (field_imm 3 _menhir_stack/2062)
                           _menhir_stack/2067)))
                     (function _menhir_env/2075
                       (let
                         (_menhir_stack/2076 = (field_imm 2 _menhir_env/2075)
                          _1/2078 =a (field_imm 1 _menhir_stack/2076)
                          _menhir_stack/2081 =a
                            (field_imm 4 _menhir_stack/2076)
                          _endpos__0_/2083 = (field_imm 3 _menhir_stack/2081)
                          _v/2086 =
                            (let
                              (_1/2087 =
                                 (let
                                   (_1/2088 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:class"
                                              _1/2078)))
                                        (makeblock 0 _1/2078)))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:cterm/class"
                                           _1/2088)))
                                     (makeblock 2 _1/2088))))
                              (seq
                                (apply (field_imm 45 (global Stdlib!))
                                  (apply (field_imm 6 (global Batteries!))
                                    (makeblock 0 "DEBUG:term/cterms" _1/2087)))
                                (makeblock 2 _1/2087))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/2076) _v/2086
                           (field_imm 2 _menhir_stack/2076)
                           (field_imm 3 _menhir_stack/2076)
                           _menhir_stack/2081)))
                     (function _menhir_env/2089
                       (let
                         (_menhir_stack/2090 = (field_imm 2 _menhir_env/2089)
                          _1/2092 =a (field_imm 1 _menhir_stack/2090)
                          _menhir_stack/2095 =a
                            (field_imm 4 _menhir_stack/2090)
                          _endpos__0_/2097 = (field_imm 3 _menhir_stack/2095)
                          _v/2100 =
                            (let
                              (_1/2101 =
                                 (let
                                   (_1/2102 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:quid"
                                              _1/2092)))
                                        _1/2092))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:sterm/quid"
                                           _1/2102)))
                                     (makeblock 0 _1/2102))))
                              (seq
                                (apply (field_imm 45 (global Stdlib!))
                                  (apply (field_imm 6 (global Batteries!))
                                    (makeblock 0 "DEBUG:term/sterm" _1/2101)))
                                (makeblock 2 _1/2101))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/2090) _v/2100
                           (field_imm 2 _menhir_stack/2090)
                           (field_imm 3 _menhir_stack/2090)
                           _menhir_stack/2095)))
                     (function _menhir_env/2103
                       (let
                         (_menhir_stack/2104 = (field_imm 2 _menhir_env/2103)
                          _1/2106 =a (field_imm 1 _menhir_stack/2104)
                          _menhir_stack/2109 =a
                            (field_imm 4 _menhir_stack/2104)
                          _endpos__0_/2111 = (field_imm 3 _menhir_stack/2109)
                          _v/2114 =
                            (let
                              (_1/2115 =
                                 (let
                                   (_1/2116 =
                                      (seq
                                        (apply
                                          (field_imm 45 (global Stdlib!))
                                          (apply
                                            (field_imm 6 (global Batteries!))
                                            (makeblock 0 "DEBUG:lid" _1/2106)))
                                        _1/2106))
                                   (seq
                                     (apply (field_imm 45 (global Stdlib!))
                                       (apply
                                         (field_imm 6 (global Batteries!))
                                         (makeblock 0 "DEBUG:sterm/lid"
                                           _1/2116)))
                                     (makeblock 0 _1/2116))))
                              (seq
                                (apply (field_imm 45 (global Stdlib!))
                                  (apply (field_imm 6 (global Batteries!))
                                    (makeblock 0 "DEBUG:term/sterm" _1/2115)))
                                (makeblock 2 _1/2115))))
                         (makeblock 0 (int,*,*,*,*)
                           (field_imm 0 _menhir_stack/2104) _v/2114
                           (field_imm 2 _menhir_stack/2104)
                           (field_imm 3 _menhir_stack/2104)
                           _menhir_stack/2109))))
                 trace/1335 =
                   (makeblock 0
                     (makeblock 0
                       (duparray[addr]
                         [0:
                          "error" "Tchar" "STAR" "RPAREN" "REGEX" "QUESTION"
                          "QID" "PLUS" "NEWLINE" "LPAREN" "LID" "EOF" "DASH"
                          "COLONCOLONEQUAL" "CARET" "BAR" "#"])
                       (duparray[addr]
                         [0:
                          "Accepting"
                          "Reducing production alternation -> alternation BAR list(NEWLINE) concatenation"
                          "Reducing production alternation -> concatenation"
                          "Reducing production char_class -> CARET char_class1"
                          "Reducing production char_class -> char_class1"
                          "Reducing production char_class1 -> Tchar DASH Tchar"
                          "Reducing production char_class1 -> char_class1 Tchar"
                          "Reducing production char_class1 -> Tchar"
                          "Reducing production concatenation -> concatenation factor"
                          "Reducing production concatenation -> factor"
                          "Reducing production factor -> term PLUS"
                          "Reducing production factor -> term QUESTION"
                          "Reducing production factor -> term STAR"
                          "Reducing production factor -> term"
                          "Reducing production grammar -> rules postlude"
                          "Reducing production list(NEWLINE) ->"
                          "Reducing production list(NEWLINE) -> NEWLINE list(NEWLINE)"
                          "Reducing production nonempty_list(NEWLINE) -> NEWLINE"
                          "Reducing production nonempty_list(NEWLINE) -> NEWLINE nonempty_list(NEWLINE)"
                          "Reducing production postlude -> list(NEWLINE) EOF"
                          "Reducing production rhs -> alternation"
                          "Reducing production rule -> LID COLONCOLONEQUAL rhs"
                          "Reducing production rules -> rules nonempty_list(NEWLINE) rule"
                          "Reducing production rules -> nonempty_list(NEWLINE) rule"
                          "Reducing production rules -> rule"
                          "Reducing production term -> LPAREN list(NEWLINE) rhs RPAREN"
                          "Reducing production term -> char_class"
                          "Reducing production term -> REGEX"
                          "Reducing production term -> QID"
                          "Reducing production term -> LID"]))))
                (seq
                  (setfield_ptr(root-init) 11
                    (global Gbnf_parser__SentenceParser!)
                    token2terminal/1284)
                  (setfield_ptr(root-init) 12
                    (global Gbnf_parser__SentenceParser!)
                    error_terminal/1285)
                  (setfield_ptr(root-init) 13
                    (global Gbnf_parser__SentenceParser!) token2value/1327)
                  (setfield_ptr(root-init) 14
                    (global Gbnf_parser__SentenceParser!)
                    default_reduction/1328)
                  (setfield_ptr(root-init) 15
                    (global Gbnf_parser__SentenceParser!) error/1329)
                  (setfield_ptr(root-init) 16
                    (global Gbnf_parser__SentenceParser!) start/1330)
                  (setfield_ptr(root-init) 17
                    (global Gbnf_parser__SentenceParser!) action/1331)
                  (setfield_ptr(root-init) 18
                    (global Gbnf_parser__SentenceParser!) lhs/1332)
                  (setfield_ptr(root-init) 19
                    (global Gbnf_parser__SentenceParser!) goto/1333)
                  (setfield_ptr(root-init) 20
                    (global Gbnf_parser__SentenceParser!)
                    semantic_action/1334)
                  (setfield_ptr(root-init) 21
                    (global Gbnf_parser__SentenceParser!) trace/1335)))
              0))
          (let
            (Tables/2117 =
               (makeblock 0
                 (field_imm 9 (global Gbnf_parser__SentenceParser!))
                 (field_imm 10 (global Gbnf_parser__SentenceParser!))
                 (field_imm 11 (global Gbnf_parser__SentenceParser!))
                 (field_imm 12 (global Gbnf_parser__SentenceParser!))
                 (field_imm 13 (global Gbnf_parser__SentenceParser!))
                 (field_imm 14 (global Gbnf_parser__SentenceParser!))
                 (field_imm 15 (global Gbnf_parser__SentenceParser!))
                 (field_imm 16 (global Gbnf_parser__SentenceParser!))
                 (field_imm 17 (global Gbnf_parser__SentenceParser!))
                 (field_imm 18 (global Gbnf_parser__SentenceParser!))
                 (field_imm 19 (global Gbnf_parser__SentenceParser!))
                 (field_imm 20 (global Gbnf_parser__SentenceParser!))
                 (field_imm 21 (global Gbnf_parser__SentenceParser!))))
            (seq
              (setfield_ptr(root-init) 6
                (global Gbnf_parser__SentenceParser!) Tables/2117)
              (let
                (ET/2206 =
                   (apply (field_imm 0 (field_imm 15 (global MenhirLib!)))
                     (makeblock 0
                       (field_mut 2
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 3
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 4
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 5
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 6
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 8
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 9
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 10
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 7
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 11
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 0
                         (field_imm 6 (global Gbnf_parser__SentenceParser!)))
                       (field_mut 12
                         (field_imm 6 (global Gbnf_parser__SentenceParser!))))))
                (seq
                  (setfield_ptr(root-init) 22
                    (global Gbnf_parser__SentenceParser!) ET/2206)
                  (let
                    (TI/2324 =
                       (apply (field_imm 0 (field_imm 4 (global MenhirLib!)))
                         (field_imm 22 (global Gbnf_parser__SentenceParser!))))
                    (seq
                      (setfield_ptr(root-init) 23
                        (global Gbnf_parser__SentenceParser!) TI/2324)
                      (let
                        (include/3882 =
                           (field_imm 23
                             (global Gbnf_parser__SentenceParser!)))
                        (seq
                          (setfield_ptr(root-init) 24
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 0 include/3882))
                          (setfield_ptr(root-init) 25
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 1 include/3882))
                          (setfield_ptr(root-init) 26
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 2 include/3882))
                          (setfield_ptr(root-init) 27
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 3 include/3882))
                          (setfield_ptr(root-init) 28
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 4 include/3882))
                          (setfield_ptr(root-init) 29
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 5 include/3882))
                          (setfield_ptr(root-init) 30
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 6 include/3882))
                          (setfield_ptr(root-init) 31
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 7 include/3882))
                          (setfield_ptr(root-init) 32
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 8 include/3882))
                          (setfield_ptr(root-init) 33
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 9 include/3882))
                          (setfield_ptr(root-init) 34
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 10 include/3882))
                          (setfield_ptr(root-init) 35
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 11 include/3882))
                          (setfield_ptr(root-init) 36
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 12 include/3882))
                          (setfield_ptr(root-init) 37
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 13 include/3882))
                          (setfield_ptr(root-init) 38
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 14 include/3882))
                          (setfield_ptr(root-init) 39
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 15 include/3882))
                          (setfield_ptr(root-init) 40
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 16 include/3882))
                          (setfield_ptr(root-init) 41
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 17 include/3882))
                          (setfield_ptr(root-init) 42
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 18 include/3882))
                          (setfield_ptr(root-init) 43
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 19 include/3882))
                          (setfield_ptr(root-init) 44
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 20 include/3882))
                          (setfield_ptr(root-init) 45
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 21 include/3882))
                          (setfield_ptr(root-init) 46
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 22 include/3882))
                          (setfield_ptr(root-init) 47
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 23 include/3882))
                          (setfield_ptr(root-init) 48
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 24 include/3882))
                          (setfield_ptr(root-init) 49
                            (global Gbnf_parser__SentenceParser!)
                            (field_mut 25 include/3882))
                          0))))))
              (let
                (MenhirInterpreter/2362 =
                   (makeblock 0
                     (field_imm 22 (global Gbnf_parser__SentenceParser!))
                     (field_imm 23 (global Gbnf_parser__SentenceParser!))
                     (field_imm 24 (global Gbnf_parser__SentenceParser!))
                     (field_imm 25 (global Gbnf_parser__SentenceParser!))
                     (field_imm 26 (global Gbnf_parser__SentenceParser!))
                     (field_imm 27 (global Gbnf_parser__SentenceParser!))
                     (field_imm 28 (global Gbnf_parser__SentenceParser!))
                     (field_imm 29 (global Gbnf_parser__SentenceParser!))
                     (field_imm 30 (global Gbnf_parser__SentenceParser!))
                     (field_imm 31 (global Gbnf_parser__SentenceParser!))
                     (field_imm 32 (global Gbnf_parser__SentenceParser!))
                     (field_imm 33 (global Gbnf_parser__SentenceParser!))
                     (field_imm 34 (global Gbnf_parser__SentenceParser!))
                     (field_imm 35 (global Gbnf_parser__SentenceParser!))
                     (field_imm 36 (global Gbnf_parser__SentenceParser!))
                     (field_imm 37 (global Gbnf_parser__SentenceParser!))
                     (field_imm 38 (global Gbnf_parser__SentenceParser!))
                     (field_imm 39 (global Gbnf_parser__SentenceParser!))
                     (field_imm 40 (global Gbnf_parser__SentenceParser!))
                     (field_imm 41 (global Gbnf_parser__SentenceParser!))
                     (field_imm 42 (global Gbnf_parser__SentenceParser!))
                     (field_imm 43 (global Gbnf_parser__SentenceParser!))
                     (field_imm 44 (global Gbnf_parser__SentenceParser!))
                     (field_imm 45 (global Gbnf_parser__SentenceParser!))
                     (field_imm 46 (global Gbnf_parser__SentenceParser!))
                     (field_imm 47 (global Gbnf_parser__SentenceParser!))
                     (field_imm 48 (global Gbnf_parser__SentenceParser!))
                     (field_imm 49 (global Gbnf_parser__SentenceParser!))))
                (seq
                  (setfield_ptr(root-init) 2
                    (global Gbnf_parser__SentenceParser!)
                    (makeblock 0 (field_mut 4 MenhirInterpreter/2362)
                      (field_mut 5 MenhirInterpreter/2362)
                      (field_mut 6 MenhirInterpreter/2362)
                      (field_mut 7 MenhirInterpreter/2362)
                      (field_mut 8 MenhirInterpreter/2362)
                      (field_mut 9 MenhirInterpreter/2362)
                      (field_mut 10 MenhirInterpreter/2362)
                      (field_mut 11 MenhirInterpreter/2362)
                      (field_mut 12 MenhirInterpreter/2362)
                      (field_mut 13 MenhirInterpreter/2362)
                      (field_mut 14 MenhirInterpreter/2362)
                      (field_mut 15 MenhirInterpreter/2362)
                      (field_mut 16 MenhirInterpreter/2362)
                      (field_mut 17 MenhirInterpreter/2362)
                      (field_mut 18 MenhirInterpreter/2362)
                      (field_mut 19 MenhirInterpreter/2362)
                      (field_mut 20 MenhirInterpreter/2362)
                      (field_mut 21 MenhirInterpreter/2362)
                      (field_mut 22 MenhirInterpreter/2362)
                      (field_mut 23 MenhirInterpreter/2362)
                      (field_mut 24 MenhirInterpreter/2362)
                      (field_mut 25 MenhirInterpreter/2362)
                      (field_mut 26 MenhirInterpreter/2362)))
                  (let
                    (grammar/2363 =
                       (function lexer/2365 lexbuf/2366
                         (apply (field_imm 3 MenhirInterpreter/2362)
                           -822677911 0 lexer/2365 lexbuf/2366)))
                    (setfield_ptr(root-init) 1
                      (global Gbnf_parser__SentenceParser!) grammar/2363))
                  (let
                    (grammar/2367 =
                       (function initial_position/2368
                         (apply (field_imm 27 MenhirInterpreter/2362) 0
                           initial_position/2368)))
                    (setfield_ptr(root-init) 50
                      (global Gbnf_parser__SentenceParser!) grammar/2367))
                  0
                  (let
                    (Incremental/2443 =
                       (makeblock 0
                         (field_imm 50 (global Gbnf_parser__SentenceParser!))))
                    (seq
                      (setfield_ptr(root-init) 3
                        (global Gbnf_parser__SentenceParser!)
                        Incremental/2443)
                      (let
                        (*match*/3884 =
                           (apply (field_imm 5 (global Ppx_inline_test_lib!))
                             "gbnf_parser"))
                        0)
                      (let
                        (*match*/3886 =
                           (apply
                             (field_imm 1
                               (field_imm 5 (global Expect_test_collector!)))
                             0))
                        0)
                      (let
                        (*match*/3888 =
                           (apply
                             (field_imm 1
                               (field_imm 0
                                 (global Ppx_bench_lib__Benchmark_accumulator!)))
                             0))
                        0)
                      (let
                        (*match*/3890 =
                           (apply
                             (field_imm 4 (global Ppx_module_timer_runtime!))
                             #"Gbnf_parser__SentenceParser"))
                        0)
                      0)))))))))))
